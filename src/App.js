/* eslint-disable react/jsx-pascal-case */
// Copyright (c) 2023 Bry Onyoni
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
import React, { Component, useState, useImperativeHandle, forwardRef, useEffect } from 'react';

/* images */
import music_label from './assets/music_default_label.png'
import expand_icon from './assets/expand_icon.png'
import close_pip from './assets/close_pip.png'
import empty_image from './assets/default_image_background.png'
import download_icon from './assets/download_icon.png'
import zoom_in_icon from './assets/zoom_in_icon.png'
import zoom_out_icon from './assets/zoom_out_icon.png'
import video_label from './assets/default_music_icon.png'
import letter from './assets/letter.png'
import e5_empty_icon from './assets/e5empty_icon.png'
import e5_empty_icon3 from './assets/e5empty_icon3.png'
import alert_icon from './assets/alert_icon.png'
import add_icon from './assets/add_icon.png'
import background from './assets/background.png'
import JobIcon from './assets/job_icon_light.png'
import ExploreIcon from './assets/explore_icon_light.png'
import WalletIcon from './assets/wallet_icon_light.png'
import StackIcon from './assets/stack_icon_light.png'
import close from './assets/close_icon.png'
import add_text from './assets/add_text_input_item.png'
import play from './assets/play_icon.png'
import pause from './assets/pause_icon.png'
import previous from './assets/previous_icon.png'
import next from './assets/next_icon.png'
import shuffle_icon from './assets/shuffle_icon.png'
import repeat from './assets/repeat_icon.png'
import alert_icon_dark from './assets/alert_icon_dark.png'
import add_icon_dark from './assets/add_icon_dark.png'
import JobIconDark from './assets/job_icon.png'
import ExploreIconDark from './assets/explore_icon.png'
import WalletIconDark from './assets/wallet_icon.png'
import StackIconDark from './assets/stack_icon.png'
import close_dark from './assets/close_icon_dark.png'
import add_text_dark from './assets/add_text_dark.png'
import play_dark from './assets/play_icon_dark.png'
import pause_dark from './assets/pause_icon_dark.png'
import previous_dark from './assets/previous_icon_dark.png'
import next_dark from './assets/next_icon_dark.png'
import shuffle_dark from './assets/shuffle_icon_dark.png'
import repeat_dark from './assets/repeat_icon_dark.png'
import zip_file from './assets/zip_file.png'

import end25_image from './assets/E25.png'
import spend25_image from './assets/325.png'
import E5_E25_image from './assets/End25.png'
import end35_image from './assets/e35_end_token.png'
import spend35_image from './assets/e35_spend_token.png'
import E5_E35_image from './assets/end35.png'


/* blockchain stuff */
import { mnemonicToSeedSync, mnemonicToSeed, entropyToMnemonic } from 'bip39';
import { Buffer } from 'buffer';
import * as bitcoin from 'bitcoinjs-lib';
import * as StellarSdk from "@stellar/stellar-sdk";
import { TronWeb } from 'tronweb';
import { Keyring, ApiPromise, WsProvider } from '@polkadot/api'; 
import { waitReady, } from '@polkadot/wasm-crypto';
import { encodeAddress, decodeAddress } from '@polkadot/util-crypto';
import algosdk from 'algosdk';
import { TezosToolkit } from "@taquito/taquito";
import { InMemorySigner } from '@taquito/signer';
import { b58cencode, prefix, validateAddress, ValidationResult } from '@taquito/utils';
import * as sodium from 'libsodium-wrappers';
import { DirectSecp256k1Wallet } from '@cosmjs/proto-signing';
import { Secp256k1 } from '@cosmjs/crypto';
import { sha256 } from '@cosmjs/crypto';
import { SigningStargateClient, StargateClient } from "@cosmjs/stargate"
import bchaddr from 'bchaddrjs';
import { isValidClassicAddress } from 'ripple-address-codec';
import { Keypair, Connection, PublicKey, Transaction, SystemProgram, sendAndConfirmTransaction } from '@solana/web3.js';
import { derivePath } from 'ed25519-hd-key';
import { AptosAccount, AptosClient } from 'aptos';
import { create as createW3UpClient } from '@web3-storage/w3up-client';
import { from } from "@iotexproject/iotex-address-ts";
import { STACKS_MAINNET } from '@stacks/network'
import { makeSTXTokenTransfer, broadcastTransaction, getAddressFromPrivateKey, validateStacksAddress } from '@stacks/transactions';
import Arweave from 'arweave';
import { getKeyFromMnemonic } from 'arweave-mnemonic-keys';

/* shared component stuff */
import SwipeableBottomSheet from './externals/SwipeableBottomSheet'; 
import { ToastContainer, toast, Slide } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import SwipeableViews from 'react-swipeable-views';
import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";
import { Sheet } from 'react-modal-sheet';
import './main.css';

/* pages stuff */
import Syncronizing_page from './pages/synchronizing_page';
import Home_page from './pages/home_page';
import SendReceiveEtherPage from './pages/send_receive_ether_page'
import StackPage from './pages/stack_page'
import WikiPage from './pages/wiki_page'

import NewJobPage from './pages/create_action_pages/new_job_page'
import NewTokenPage from './pages/create_action_pages/new_token_page'
import NewSubscriptionPage from './pages/create_action_pages/new_subscription_page'
import NewContractPage from './pages/create_action_pages/new_contract_page'
import NewPostPage from './pages/create_action_pages/new_post_page'
import NewChannelPage from './pages/create_action_pages/new_channel_page'
// import NewStorefrontPage from './pages/create_action_pages/new_storefront_page'
import NewStorefrontItemPage from './pages/create_action_pages/new_storefront_item_page';
import NewProposalPage from './pages/create_action_pages/new_proposal_page';
import NewMailPage from './pages/create_action_pages/new_mail_page';
import NewContractorPage from './pages/create_action_pages/new_contractor_page';
import NewAudioPage from './pages/create_action_pages/new_audio_page'
import NewVideoPage from './pages/create_action_pages/new_video_page';
import NewNitroPage from './pages/create_action_pages/new_nitro_page'

import EditJobPage from './pages/edit_action_pages/edit_job_page'
import EditTokenPage from './pages/edit_action_pages/edit_token_page'
import EditPostPage from './pages/edit_action_pages/edit_post_page'
import EditChannelPage from './pages/edit_action_pages/edit_channel_page'
import EditStorefrontItemPage from './pages/edit_action_pages/edit_storefront_item_page';
import EditContractorPage from './pages/edit_action_pages/edit_contractor_page';
import EditProposalPage from './pages/edit_action_pages/edit_proposal_page';
import EditAudioPage from './pages/edit_action_pages/edit_audiopost_page';
import EditVideoPage from './pages/edit_action_pages/edit_videopost_page';
import EditNitroPage from './pages/edit_action_pages/edit_nitropost_page';

import EnterContractPage from './pages/contract_action_pages/enter_contract_page';
import ExtendContractPage from './pages/contract_action_pages/extend_contract_page';
import ExitContractPage from './pages/contract_action_pages/exit_contract_page';
import ModifyContractPage from './pages/contract_action_pages/modify_contract_page';
import ForceExitPage from './pages/contract_action_pages/force_exit_account_page';

import NewMintActionPage from './pages/token_action_pages/mint_dump_token_page';
import NewTransferActionPage from './pages/token_action_pages/transfer_token_page';
import ModifyTokenPage from './pages/token_action_pages/modify_token_page';
import ExchangeTransferPage from './pages/token_action_pages/exchanage_transfer_page';
import FreezeUnfreezePage from './pages/token_action_pages/freeze_unfreeze_page';
import AuthMintPage from './pages/token_action_pages/authmint_page';
import DepthMintPage from './pages/token_action_pages/depthmint_page';
import StageRoyaltiesPage from './pages/token_action_pages/stage_royalties_page';
import ViewStagedRoyaltyPage from './pages/token_action_pages/view_staged_royalty_page';

import VoteProposalPage from './pages/proposal_action_pages/vote_proposal_page';
import SubmitProposalPage from './pages/proposal_action_pages/submit_proposal_page';
import ArchiveProposalPage from './pages/proposal_action_pages/archive_proposals_page';

import PaySubscriptionPage from './pages/subscription_action_pages/pay_subscription_page';
import CancelSubscriptionPage from './pages/subscription_action_pages/cancel_subscription_page';
import CollectSubscriptionPage from './pages/subscription_action_pages/collect_subscription_page';
import ModifySubscriptionPage from './pages/subscription_action_pages/modify_subscription_page';
import PayUpcomingSubscriptions from './pages/subscription_action_pages/pay_upcoming_subscriptions_page'

import ModeratorPage from './pages/moderator_page';
import RespondToJobPage from './pages/respond_to_job_page';
import ViewApplicationContractPage from './pages/view_application_contract_page';
import ViewTransactionPage from './pages/view_transaction_page'
import ViewTransactionLogPage from './pages/view_transaction_log'
import AddToBagPage from './pages/add_to_bag_page'
import FulfilBagPage from './pages/fulfil_bag_page'
import ViewBagApplicationContractPage from './pages/view_bag_application_contract_page'
import DirectPurchasetPage from './pages/direct_purchase_page'
import ClearPurchasePage from './pages/clear_purchase_page'
import ScanQrPage from './pages/scan_qr_page'
import SendJobRequestPage from './pages/send_job_request'
import ViewJobRequestPage from './pages/view_job_request'
import ViewJobRequestContractPage from './pages/view_job_request_contract_page'
import WithdrawEtherPage from './pages/withdraw_ether_page'
import GiveAwardPage from './pages/give_award_page'
import AddCommentPage from './pages/add_comment_page'
import SearchedAccountPage from './pages/view_searched_account'
import RPCSettingsPage from './pages/rpc_settings_page'
import ConfirmRunPage from './pages/confirm_run_page'
import SuccessfulSend from './pages/successful_send'
import ViewNumber from './pages/view_number'
import DialogPage from './pages/dialog_page'
import SendReceiveCoinPage from './pages/send_receive_coin_page'
import PickFilePage from './pages/pick_file_page'
import BuyAlbumPage from './pages/buy_album_page'
import AudioPip from './pages/audio_pip'
import FullAudioPage from './pages/full_audio_page'
import AddToPlaylist from './pages/add_to_playlist'
import BuyVideoPage from './pages/buy_video_page'
import FullVideoPage from './pages/full_video_page'
import BuyNitroPage from './pages/buy_nitro_storage'
import ConfigureNitroNodePage from './pages/configure_nitro_node'
import DialerPage from './pages/dialer_page'

import { HttpJsonRpcConnector, MnemonicWalletProvider} from 'filecoin.js';
import { LotusClient } from 'filecoin.js'
import { create } from 'ipfs-http-client'
import { NFTStorage, Blob } from 'nft.storage'

import Draggable from "react-draggable";
import classes2 from "./PIP.module.css";

import Dexie from 'dexie';
import { locale } from 'dayjs';

import { Worker, Viewer } from '@react-pdf-viewer/core';
import '@react-pdf-viewer/core/lib/styles/index.css';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
import { zoomPlugin } from '@react-pdf-viewer/zoom';
import '@react-pdf-viewer/zoom/lib/styles/index.css';

import io from 'socket.io-client';
// import { Lucid, Blockfrost, addressFromHexOrBech32 } from "@lucid-evolution/lucid";

const { toBech32, fromBech32,} = require('@harmony-js/crypto');
const { countries, zones } = require("moment-timezone/data/meta/latest.json");
const Web3 = require('web3');
const { ethers } = require("ethers");
const ecies = require('ecies-geth');
var textEncoding = require('text-encoding'); 
var CryptoJS = require("crypto-js"); 
const xrpl = require("xrpl")
const BITBOXSDK = require('bitbox-sdk').BITBOX;
const BITBOX = new BITBOXSDK();
const arweave = Arweave.init();

pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
var bigInt = require("big-integer");
const primary_following = 'E25:1002'



function makeid(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
      counter += 1;
    }
    return result;
}

function bgN(number, power) {
  return bigInt((number+"e"+power)).toString();
}

String.prototype.hexEncode = function(){
    var hex, i;

    var result = "";
    for (i=0; i<this.length; i++) {
        hex = this.charCodeAt(i).toString(16);
        result += ("000"+hex).slice(-4);
    }

    return result
}

function random(min, max) { // min and max included 
  return Math.floor(Math.random() * (max - min + 1) + min)
}

function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

function getOS() {
  // return 'iOS'
  if(iOS()) return 'iOS'
  const userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ['macOS', 'Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
      windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
      iosPlatforms = ['iPhone', 'iPad', 'iPod'];
  let os = null;

  if (macosPlatforms.indexOf(platform) !== -1) {
    os = 'Mac OS';
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    os = 'iOS';
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    os = 'Windows';
  } else if (/Android/.test(userAgent)) {
    os = 'Android';
  } else if (/Linux/.test(platform)) {
    os = 'Linux';
  }

  return os;
}

function iOS() {
  return [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ].includes(navigator.platform)
  // iPad on iOS 13 detection
  || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
}

function shuffle(array) {
  let currentIndex = array.length;

  // While there remain elements to shuffle...
  while (currentIndex != 0) {

    // Pick a remaining element...
    let randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]];
  }
}

const PDFViewerWrapper  = forwardRef(({ fileUrl, theme /* , record_page, current_page */ }, ref) => {
  const zoomPluginInstance = zoomPlugin();  
  const zoomLevels = [0.5, 1.0, 1.5, 2.0, 3.0];
  const [currentZoom, setCurrentZoom] = useState(0.5);


  const zoomIn = () => {
    console.log('zooming in')
    const newZoom = Math.min(currentZoom + 0.5, 3.0);
    zoomPluginInstance.zoomTo(newZoom);
    setCurrentZoom(newZoom);
  }

  const zoomOut = () => {
    console.log('zooming out')
    const newZoom = Math.max(currentZoom - 0.5, 0.5);
    zoomPluginInstance.zoomTo(newZoom);
    setCurrentZoom(newZoom);
  }

  const set_default_zoom = () => {
    const newZoom = 1.0
    zoomPluginInstance.zoomTo(newZoom);
    setCurrentZoom(newZoom);
  }



  useImperativeHandle(ref, () => ({
    zoomIn,
    zoomOut,
    set_default_zoom,
  }));

  return (
      <div>
        <Viewer fileUrl={fileUrl} plugins={[zoomPluginInstance]} theme={{theme: theme,}} />
      </div>
  );
});

class App extends Component {

  // render(){
  //   return(
  //     <div>
  //       {makeid(3)}
  //     </div>
  //   )
  // }

  state = {
    version:'1',
    syncronizing_page_bottomsheet:true,/* set to true if the syncronizing page bottomsheet is visible */
    should_keep_synchronizing_bottomsheet_open: false,/* set to true if the syncronizing page bottomsheet is supposed to remain visible */
    send_receive_bottomsheet: false, stack_bottomsheet: false, wiki_bottomsheet: false, new_object_bottomsheet: false, view_image_bottomsheet:false, new_store_item_bottomsheet:false, mint_token_bottomsheet:false, transfer_token_bottomsheet:false, enter_contract_bottomsheet: false, extend_contract_bottomsheet: false, exit_contract_bottomsheet:false, new_proposal_bottomsheet:false, vote_proposal_bottomsheet: false, submit_proposal_bottomsheet:false, pay_subscription_bottomsheet:false, cancel_subscription_bottomsheet: false,collect_subscription_bottomsheet: false, modify_subscription_bottomsheet:false, modify_contract_bottomsheet:false, modify_token_bottomsheet:false,exchange_transfer_bottomsheet:false, force_exit_bottomsheet:false, archive_proposal_bottomsheet:false, freeze_unfreeze_bottomsheet:false, authmint_bottomsheet:false, moderator_bottomsheet:false, respond_to_job_bottomsheet:false, view_application_contract_bottomsheet:false, view_transaction_bottomsheet:false, view_transaction_log_bottomsheet:false, add_to_bag_bottomsheet:false, fulfil_bag_bottomsheet:false, view_bag_application_contract_bottomsheet: false, direct_purchase_bottomsheet: false, scan_code_bottomsheet:false, send_job_request_bottomsheet:false, view_job_request_bottomsheet:false, view_job_request_contract_bottomsheet:false, withdraw_ether_bottomsheet: false, edit_object_bottomsheet:false, edit_token_bottomsheet:false, edit_channel_bottomsheet: false, edit_contractor_bottomsheet: false, edit_job_bottomsheet:false, edit_post_bottomsheet: false, edit_storefront_bottomsheet:false, give_award_bottomsheet: false, add_comment_bottomsheet:false, depthmint_bottomsheet:false, searched_account_bottomsheet: false, rpc_settings_bottomsheet:false, confirm_run_bottomsheet:false, edit_proposal_bottomsheet:false, successful_send_bottomsheet:false, view_number_bottomsheet:false, stage_royalties_bottomsheet:false, view_staged_royalties_bottomsheet:false,
    dialog_bottomsheet:false, pay_upcoming_subscriptions_bottomsheet:false, send_receive_coin_bottomsheet:false, pick_file_bottomsheet:false, buy_album_bottomsheet:false, edit_audiopost_bottomsheet:false, is_audio_pip_showing:false, full_audio_bottomsheet:false, add_to_playlist_bottomsheet:false, view_pdf_bottomsheet:false, buy_video_bottomsheet:false, edit_videopost_bottomsheet:false, full_video_bottomsheet:false, edit_nitropost_bottomsheet:false, buy_nitro_storage_bottomsheet:false, configure_nitro_node_bottomsheet:false, dialer_bottomsheet:false,

    syncronizing_progress:0,/* progress of the syncronize loading screen */
    account:null, size:'s', height: window.innerHeight, width: window.innerWidth, is_allowed:this.is_allowed_in_e5(), beacon_node_enabled:false,

    theme: this.get_theme_data(this.getLocale()['1593a']/* 'auto' */), storage_option:'infura'/* infura, arweave */,
    details_orientation: this.getLocale()['1419']/* 'right' */, refresh_speed:this.getLocale()['1422']/* 'slow' */, masked_content:'e', content_channeling:this.getLocale()['1233']/* 'international' */, device_language:this.get_language(), section_tags_setting:this.getLocale()['1426']/* 'all' */, visible_tabs:'e', storage_permissions: 'e', stack_optimizer: 'e', homepage_tags_position:this.getLocale()['1593k']/* 'top' */, font:'Sans-serif', auto_skip_nsfw_warning:'e', graph_type:'area'/* splineArea */, remember_account:'e', hide_pip:'e', preferred_currency:this.getLocale()['1593ef']/* 'USD' */,

    new_object_target: '0', edit_object_target:'0',
    account_balance:{}, stack_items:[],
    created_subscriptions:{}, all_subscriptions:{}, created_subscription_object_mapping:{},
    my_proposals:{},
    created_contracts:{}, all_contracts:{}, created_contract_mapping:{},
    created_tokens:{}, all_tokens:{}, created_token_object_mapping:{},end_balance_of_E5:{},spend_balance_of_E5:{},end_balance_of_burn_account:{},token_directory:{},
    created_posts:{},created_channels:{},
    created_jobs:{}, created_job_mappings:{}, my_applications:{}, my_bag_applications:{},
    created_mail:{}, received_mail:{},
    created_stores:{}, created_store_mappings:{}, created_bags:{}, 
    created_contractors:{},created_audios:{}, created_audio_mappings:{},
    mint_dump_actions:[{},], contacts:{}, should_update_contacts_onchain: false, blocked_accounts:{}, should_update_blocked_accounts_onchain: false,

    web3:'https://etc.etcdesktop.com', e5_address:'0x24d7436eC90392f20AfeD800523E0d995Ec4310d',
    
    sync_steps:(48), qr_code_scanning_page:'clear_purchaase', tag_size:23, title_size:65, nitro_link_size:35, image_size_limit:5_000_000, ipfs_delay:90, web3_delay:1400, max_tags_count:7, indexed_title_size:32,

    token_directory:{}, object_messages:{}, job_responses:{}, contractor_applications:{}, my_applications:[], my_contract_applications:{}, hidden:[], direct_purchases:{}, direct_purchase_fulfilments:{}, my_contractor_applications:{}, award_data:{},
    
    alias_bucket: {}, alias_owners: {}, my_alias_events: {}, alias_timestamp: {},
    created_token_object_mapping:{}, E5_runs:{}, user_account_id:{}, addresses:{}, last_blocks:{}, number_of_blocks:{}, gas_price:{}, network_type:{}, number_of_peers:{}, chain_id:{}, account_balance:{'E15':0}, withdraw_balance:{'E15':0}, basic_transaction_data:{}, E5_balance:{}, contacts:{},

    contract_events:{}, proposal_events:{}, subscription_events:{}, exchange_events:{}, moderator_events:{},
    subscription_search_result:{}, all_data:{}, gateway_traffic_cache:{}, channel_events:{}, all_E5_runs:{}, 

    e5s:this.get_e5s(),
    selected_e5:'E25', default_e5:'E25',
    accounts:{}, has_wallet_been_set:false, is_running: {},

    device_country:this.get_location_info().userCountry, device_city: this.get_location_info().userCity, device_region: this.get_location_info().userRegion, device_country_code: this.get_country_code(this.get_location_info().userCountry), static_assets: this.get_static_assets(), os:getOS(), languages:this.get_supported_languages(),
    
    job_section_tags:[], explore_section_tags:[], should_update_section_tags_onchain:false,
    searched_accounts_data:{}, searched_account_exchange_balances:{}, withdraw_event_data:{}, pending_withdraw_event_data:{}, object_directory:{},
    
    e5_ether_tx_history:{}, e5_ether_supply_data:{}, index_db_size:0, calculated_gas_figures:{}, rpc_times:{}, added_providers:[], mempool:{}, token_name_directory:{}, wallet_status:{},

    loc:this.getLocale(), my_job_responses_notifications:{}, my_job_application_responses_notifications:{}, my_contractor_job_request_notifications:{}, my_token_event_notifications:{}, my_bag_responses_notifications:{}, my_bag_application_responses_notifications:{}, enter_exit_accounts_notifications:{}, my_store_direct_purchases_notifications:{}, received_mail_notifications:{},

    my_created_contracts:{}, my_created_contract_mapping:{}, my_created_subscriptions:{}, my_created_subscription_object_mapping:{}, registered_token_names:{}, registered_token_symbols:{},
    
    load_subscription_metrics:{}, load_contracts_metrics:{}, load_proposal_metrics:{}, load_tokens_metrics:{}, load_posts_metrics:{}, load_channels_metrics:{}, load_jobs_metrics:{}, load_sent_mail_metrics:{}, load_received_mail_metrics:{}, load_storefront_metrics:{}, load_bags_metrics:{}, load_contractors_metrics:{}, load_audio_metrics:{}, load_video_metrics:{}, load_nitro_metrics:{},

    frozen_unfrozen_account_balance_data:{}, watched_account_data:{}, watched_account_id:'',
    exchange_royalty_data:{}, token_royalty_data_staging_data:{}, token_royalty_payout_data:{},

    number_board:[], clip_number:"0", dialog_size: 400, account_post_history:{}, account_message_history:{}, comment_size: 600, has_account_been_loaded_from_storage:false, show_stack:true,

    coin_data:{}, account_seed:'', coin_data_status: 'set', final_seed:'', coins:this.get_coin_data(), default_addresses:this.get_default_addresses(), contract_exchange_interactions_data:{}, e5_deflation_data:{}, contracts_proposals:{},

    web3_account_email:'', uploaded_data:{}, uploaded_data_cids:[], update_data_in_E5:false,
    my_tracks:[], my_albums:[], audio_timestamp_data:{}, my_playlists:[], should_update_playlists_in_E5: false, song_plays:{}, should_update_song_plays:false,

    run_gas_price:0, all_cities:[], cached_tracks:[], custom_gateway:'', pdf_bookmarks:{}, details_section_syncy_time:50000, created_videos: {}, created_video_mappings:{}, my_videos:[], my_videoposts:[], video_timestamp_data:{},

    nitro_node_details:{}, nitro_links:{}, nitro_node_storage_payment_info:{}, created_nitros:{}, created_nitro_mappings:{}, bought_nitro_arrays:{}, my_preferred_nitro:'', followed_accounts:[primary_following], should_update_followed_accounts:false, posts_blocked_by_me:[], should_update_posts_blocked_by_me:false, posts_blocked_by_my_following:[], my_subscription_payment_mappings:{},

    censored_keyword_phrases: [], should_update_censored_keyword_phrases: false, censored_keywords_by_my_following:[],

    queue:[], pos:0, is_repeating:false, is_shuffling:false, original_song_list:[], play_pause_state: 0/* paused */, my_acquired_audios:[], asset_price_data:{}, 
    
    calculated_arewave_storage_fees_figures:{},
  };

  get_static_assets(){
    return {
      // 'letter':'https://nftstorage.link/ipfs/bafkreigapfe43wknpmflvp234k7fuijmv4fxbyjaybhcgc37pscsschi4u',
      // 'e5_empty_icon':'https://nftstorage.link/ipfs/bafkreib7p2e5m437q3pi6necii3bssqc3eh2zcd2fcxnms7iwfdiyevh2e',
      // 'e5_empty_icon3':'https://nftstorage.link/ipfs/bafkreib7qp2bgl3xnlgflwmqh7lsb7cwgevlr4s2n5ti4v4wi4mcfzv424',
      // 'done_icon':'https://nftstorage.link/ipfs/bafkreigbsblz36t2qrngjtw5lvy2eeegir7vac6wmpzpmhum7o7pfrrb74',
      // 'music_label':'https://bafkreigntzixxxm2yyqjv2gffpbaxf7uuxmqcwhpvrkuwswztbhkdj35mu.ipfs.w3s.link/',
      // 'expand_icon':'https://bafkreihfwjiuc3nucu6dbhtlojc7ovhuakkfknrrnhb2wfe723whj3f4qe.ipfs.w3s.link/',
      // 'close_pip':'https://bafkreiat5hwlvyvquel7lnmtst2jf2fvr3jqatsd4m574bjmixy6r34wwm.ipfs.w3s.link/',
      // 'empty_image':'https://bafkreihhphkul4fpsqougigu4oenl3nbbnjjav4fzkgpjlwfya5ie2tu2u.ipfs.w3s.link/',
      // 'all_cities':'https://bafybeihk2oq34yl7elx3fjygtiarq7b2vc6jxjdcbtwizd6clxj57q6yjq.ipfs.w3s.link/',
      // 'download_icon':'https://bafkreie6m6aird6xkug5mzgqxccks65u4lsi5pghbvmb64uhvitikadnii.ipfs.w3s.link/',
      // 'zoom_in_icon':'https://bafkreiaqdlkxszb7tnhm7bql5psp4m4ofyh3a7k7rdotgvpwnvgakm4uw4.ipfs.w3s.link/',
      // 'zoom_out_icon':'https://bafkreidm4kb7zlaaqluepfllptvejmu3r3qvw35wt5d2z63jjlhwzin3qa.ipfs.w3s.link/',
      // 'video_label':'https://bafkreid5u7arxovxweciekc6ddys4szsibdgnma5yddtcxlk3iq32dvx2e.ipfs.w3s.link/'
      'letter':letter,
      'e5_empty_icon':e5_empty_icon,
      'e5_empty_icon3':e5_empty_icon3,
      'done_icon':'https://nftstorage.link/ipfs/bafkreigbsblz36t2qrngjtw5lvy2eeegir7vac6wmpzpmhum7o7pfrrb74',
      'music_label':music_label,
      'expand_icon':expand_icon,
      'close_pip':close_pip,
      'empty_image':empty_image,
      'all_cities':'https://bafybeihk2oq34yl7elx3fjygtiarq7b2vc6jxjdcbtwizd6clxj57q6yjq.ipfs.w3s.link/',
      'download_icon':download_icon,
      'zoom_in_icon':zoom_in_icon,
      'zoom_out_icon':zoom_out_icon,
      'video_label':video_label,
      'zip_file':zip_file,
    }
  }

  get_e5s(){
    var others = ['E185', 'E195', 'E205', 'E215', 'E225', 'E235', 'E245', 'E255', 'E265', 'E275', 'E285', 'E295', 'E305', 'E315', 'E325', 'E335', 'E345', 'E355', 'E365', 'E375', 'E385', 'E395', 'E405', 'E415', 'E425', 'E435', 'E445', 'E455', 'E465', 'E475', 'E485', 'E495', 'E505', 'E515', 'E525', 'E535', 'E545', 'E555', 'E565', 'E575', 'E585', 'E595', 'E605', 'E615', 'E625', 'E635', 'E645', 'E655', 'E665', 'E675'/* , 'E685' */, 'E695', 'E705', 'E715', 'E725', 'E735', 'E745', 'E755', 'E765', 'E775', 'E785', 'E795', 'E805', 'E815']
    return{
      'data':[/* 'E15', */'E25', 'E35', 'E45', 'E55', 'E65', 'E75', 'E85', 'E95', 'E105', 'E115', 'E125', 'E135','E145', 'E155', 'E165', 'E175',].concat(others),
      'E15':{
        web3:['http://127.0.0.1:8545/'], 
        token:'ETHT',
        e5_address:'0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0', 
        first_block:20, end_image:'https://nftstorage.link/ipfs/bafkreibrox62z2x62w4veqmoc6whuu4j4ni7iubhing6j7cjqfv2uigciq', spend_image:'https://nftstorage.link/ipfs/bafkreia5yy5rlxac3wh2i2u4a7hpfkiqthfjjoqvumovzajt2frqo4233e', ether_image:'https://nftstorage.link/ipfs/bafkreidedjpi2oy3xau4wa2sio7o5js7l4wkdmyo2kfw5vx5kdqey5wrrm', iteration:40_000, url:0, active:false, e5_img:'https://nftstorage.link/ipfs/bafkreib2nwt7hxnjzv44mi66odisosg6escg4jeejv3oxhl4lml74bb4mu',
        end_token_power_limit: 990, type:'1559'
      },
      'E25':{
        web3:['https://etc.etcdesktop.com'], 
        token:'ETC',
        e5_address:'0xF3895fe95f423A4EBDdD16232274091a320c5284', 
        first_block:19151130, end_image:end25_image/* 'https://nftstorage.link/ipfs/bafkreiechh4ndeaxlannymv664bp6alq2w7ydp2e2ayt4bdz7meypeifj4' */, spend_image:spend25_image/* 'https://nftstorage.link/ipfs/bafkreifm7bcvh45uw2rra7svi4fphxrwxaik5lzskzxnizttoo4owivs34' */, ether_image:'https://nftstorage.link/ipfs/bafkreidedjpi2oy3xau4wa2sio7o5js7l4wkdmyo2kfw5vx5kdqey5wrrm', 
        iteration:400_000, url:0, active:true, e5_img:E5_E25_image/* 'https://nftstorage.link/ipfs/bafkreib2nwt7hxnjzv44mi66odisosg6escg4jeejv3oxhl4lml74bb4mu' */,
        end_token_power_limit: 72
      },
      'E35':{
        web3:['https://etc.etcdesktop.com'],
        token:'ETC',
        e5_address:''/* '0x4c124f6C90fa3F12A9b6b837B89832E2E460e731' */,
        first_block:19614310, end_image:end35_image/* 'https://nftstorage.link/ipfs/bafkreibrox62z2x62w4veqmoc6whuu4j4ni7iubhing6j7cjqfv2uigciq' */, spend_image:spend35_image/* 'https://nftstorage.link/ipfs/bafkreia5yy5rlxac3wh2i2u4a7hpfkiqthfjjoqvumovzajt2frqo4233e' */, ether_image:'https://nftstorage.link/ipfs/bafkreidedjpi2oy3xau4wa2sio7o5js7l4wkdmyo2kfw5vx5kdqey5wrrm', iteration:400_000, url:0, active:false, e5_img:E5_E35_image/* 'https://nftstorage.link/ipfs/bafkreicte43xko2kmxgdp4pxmxtxal3mxef2bqwhqah3f47gpnocpqhur4' */,
        end_token_power_limit: 72,
      },
      'E45':{
        web3:['https://api.harmony.one'],
        token:'ONE',
        e5_address:'', /* 0xC621A0305D1826AB1E24C7d78792035cD9204eD4 */
        first_block:50166065, end_image:'https://nftstorage.link/ipfs/bafkreiehe7jgkkhkb6rwh6o3eirbi4hr6rvm256gxuxnpltbcjiymsnaji', spend_image:'https://nftstorage.link/ipfs/bafkreihyjmhty3kqxvicghsh2apwd4n2grvmhcadwuzfuqtpcm4c2h7jwm', ether_image:'https://nftstorage.link/ipfs/bafkreidqivbjiabs2zcyj2qljx5u4wytvhoctjkq4kjrleuyxjrhz3xjl4', iteration:1_024/* this limit is horrible. bad blockchain. */, url:0, active:false, e5_img:null
      },
      'E55':{
        web3:['https://1rpc.io/celo', 'https://forno.celo.org'],
        token:'CELO',
        e5_address:'', /* 0xdfaE4E1a8447E560a0064fdB89D1919bF7cC0902 */
        first_block:22528756, end_image:'https://nftstorage.link/ipfs/bafkreihciglctxpprbcf3xx7ykrzfxacfblvdtjnld7p4hfczsyy67aajy', spend_image:'https://nftstorage.link/ipfs/bafkreianjrpyl6xi7vz3aahnvqy6r3liysoc4sg5z742xlawip7if4qjsi', ether_image:'https://nftstorage.link/ipfs/bafkreidcfqahs3qwnte4do6di6gvcczfwu4bikwvkqlcrmaekheevohvce', iteration:40_000, url:1, active:false, e5_img:null
      },
      'E65':{
        web3:['https://rpc.ftso.au/flare'],
        token:'FLR',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:15492557, end_image:'https://nftstorage.link/ipfs/bafkreibxgvjqeewxnpvlhbr7fdffjqpdlm46jgq46n4ph5ycntc4gkg3iu', spend_image:'https://nftstorage.link/ipfs/bafkreibi6jb4mv3lukllruf5byelbq2hbtnzksefixsf34dozga33urv34', ether_image:'https://nftstorage.link/ipfs/bafkreibcju2icekhorub6nhkvuwidz52s3kt5wxq5pivowqkchodczvsru', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E75':{
        web3:['https://rpc.gnosischain.com'],
        token:'XDAI',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:31015240, end_image:'https://nftstorage.link/ipfs/bafkreibgr7powl4htuxigjxl6noyew6taomrmztiwnyo5kvytwxwvrg7xq', spend_image:'https://nftstorage.link/ipfs/bafkreifuqbzibz4efhnbkwllwo5qepsnacyhbcpmuxcfcacbyddyniocsm', ether_image:'https://nftstorage.link/ipfs/bafkreiezzy66goly3tmsbxoknk43372eqnc5y6252n5jkxsyurp5ktfmhe', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E85':{
        web3:['https://rpc.fuse.io'],
        token:'FUSE',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:26508302, end_image:'https://nftstorage.link/ipfs/bafkreifokwa2355i6iaawawx2z2puyhpgi6o75ytayxbqqjoygj3xjb7pa', spend_image:'https://nftstorage.link/ipfs/bafkreictaiv2g4yfnuc4yfshi7ddtukcz7zbmqamii7eqptzre5edwiibi', ether_image:'https://nftstorage.link/ipfs/bafkreibuk5w63v62cd34reirc4xm7ryvz56vlytls2gp5b3bkowhevsbxq', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E95':{
        web3:['https://rpc.api.moonbeam.network'],
        token:'GLMR',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:4910897, end_image:'https://nftstorage.link/ipfs/bafkreie6krbxayljpkyl4tdyz554us6i4razp2a5b3wuu77h4prq2n7xju', spend_image:'https://nftstorage.link/ipfs/bafkreibf3jqav6igwprq4wzgf24xbzl6eq44lfjv7anbsd2ufirjjbwu5m', ether_image:'https://bafkreiboihdu4kpgt5qo3xyffhwwvtf7twjrpmbqszntxjeoftlnyajeeq.ipfs.w3s.link/', iteration:10_000, url:0, active:false, e5_img:null
      },
      'E105':{
        web3:['https://rpc.api.moonriver.moonbeam.network', 'https://moonriver.unitedbloc.com:2000'],
        token:'MOVR',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:5587390, end_image:'https://nftstorage.link/ipfs/bafkreicfqe6oih24rzjc4vkqv6rmamoia6jshilwqhoc7b6qwvoxaftg74', spend_image:'https://nftstorage.link/ipfs/bafkreibhweqzoh2ntnfexepezpt2ktat3wemkc2egjcrliwasz3v2tzyga', ether_image:'https://bafkreihongf5cenm5oqngrxmutqlvz3qi3ucmsecx6gvc6mdqwbhkwjyci.ipfs.w3s.link/', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E115':{
        web3:['https://xdc.public-rpc.com'],
        token:'XDC',
        e5_address:'',/* 0xAf7e201B3424D0Cc43392C8Eae71FBdc983932Fb */
        first_block:68418980, end_image:'https://nftstorage.link/ipfs/bafkreia4rnmraomzhv5ofx4bzp4l2chi4toderqyqkvct6q2vzpxgdtpai', spend_image:'https://nftstorage.link/ipfs/bafkreidxjjqn3muqycclxfddeqzaeboepw6yu3f424a3rwhiedt4tlga5a', ether_image:'https://nftstorage.link/ipfs/bafkreidextl3x3rq4c26vxqwh7q5jjpv6bgcmutad257qyabe6zslxpevi', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E125':{
        web3:['https://polygon.llamarpc.com'],
        token:'POL',
        e5_address:'',/* 0x3D610010C43fC1Af89D8d040ED530398817A8E94 */
        first_block:50258928, end_image:'https://nftstorage.link/ipfs/bafkreihldhuazp6fcbxqvzpl7zzr2zay4zuxnnnma44fg7u7lvydfzrv6y', spend_image:'https://nftstorage.link/ipfs/bafkreih4ctarqvngz5zjyahjlqppslmnpexfyjiso65ywyrepqnv5d7wtm', ether_image:'https://nftstorage.link/ipfs/bafkreid3rpf2wbk4i6y6sd4zltdapek2i3dst5pxzfjy3kvn6iv56obfty', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E135':{
        web3:['https://binance.llamarpc.com'],
        token:'BNB',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:33723227, end_image:'https://nftstorage.link/ipfs/bafkreif4lbsuzzhu23piwbdv3p47ha46g6egmoh7pddrex6f3tbl76ycii', spend_image:'https://nftstorage.link/ipfs/bafkreigvlzjjujid2f3n7zzfw4jzmwowaq2mvd35d32rauedberpnjl6vq', ether_image:'https://nftstorage.link/ipfs/bafkreibsa7mds2mc75oyalixvrycvcn6grk625paucy7ol3sifdz42ew5e', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E145':{
        web3:['https://nodeapi.energi.network'],
        token:'NRG',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:1955370, end_image:'https://nftstorage.link/ipfs/bafkreicgkrcoqradelnzgdnm3tm7x7atblgskl6uxkywv2klp7ghrv6ndu', spend_image:'https://nftstorage.link/ipfs/bafkreif35wji3e3mcuu5y67mclzb3zwzneckvqo5n4dj7ekbigjsnd2g24', ether_image:'https://nftstorage.link/ipfs/bafkreiaoiipzjii67rl6jujy25qbwiauu43ifcrhofw625x4cm34hjmz5e', iteration:10_000, url:1	, active:false, e5_img:null
      },
      'E155':{
        web3:['https://mainnet-rpc.thundercore.io'],
        token:'TT',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:148816985, end_image:'https://nftstorage.link/ipfs/bafkreihcc4bnygb42rlpib2uev7cbduintrvf72jqf4yzosfoz65s6x7bq', spend_image:'https://nftstorage.link/ipfs/bafkreicxhgrbre7cta2jn5i7sm4lzdige3wiqa3pdpegu7kla5v6g66c74', ether_image:'https://nftstorage.link/ipfs/bafkreidw4ngkifzyei6dekjjfnpkhwodubkwe2eodrq3yvijeai3sqk74i', iteration:40_000, url:0	, active:false, e5_img:null
      },
      'E165':{
        web3:['https://rpc.tomochain.com'],
        token:'VIC',
        e5_address:'',/* 0xd3B4c06c7514a72284fCe95DCAD911c8EaD9Be3F */
        first_block:73021490, end_image:'https://nftstorage.link/ipfs/bafkreifgogs44o7da3acci3uc2oqv5oxmsmegw437w2zif655ifxtkkr7a', spend_image:'https://nftstorage.link/ipfs/bafkreiht6b53kzxpwomvq7kmrqseav3rwxgrbeovw6zlqhxc4tccylav4u', ether_image:'https://nftstorage.link/ipfs/bafkreiaovtind2gl7fguqisxsdlqp2agxr7xe2t3dehietmhygwcx3dcny', iteration:40_000, url:0, active:false, e5_img:null
      },
      'E175':{
        web3:['https://evmos-evm-rpc.publicnode.com'],
        token:'EVMOS',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:17475951, end_image:'https://nftstorage.link/ipfs/bafkreibwm67vdnsbnxxm6muhoaqejctvneslseapupegh3yh2kxtarrwly', spend_image:'https://nftstorage.link/ipfs/bafkreidisjbdffry64mz2pdqf3qwsweq43sv7vgfozodxwge7ubxoggfae', ether_image:'https://nftstorage.link/ipfs/bafkreigavsqsyulrxb3l2wyosu34zsj4r32nftdkbvtemmqcka7veudxzi', iteration:40_000, url:0, active:false, e5_img:null
      },









      'E5':{
        web3:[''],
        token:'',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibsa7mds2mc75oyalixvrycvcn6grk625paucy7ol3sifdz42ew5e', iteration:3_000, url:0, active:false, e5_img:null
      },

      'E185':{
        web3:['https://rpc.ankr.com/eth'],
        token:'ETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreifhlwgbspcfrn2kbu25nevksegskhbns7aesdr6kwy6ikqct7lp7e', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E195':{
        web3:['https://optimism.llamarpc.com'],
        token:'OETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreies5rawvabvmzovxqesuor3a43wqmgnec7y7yzlberkwqvicehdse', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E205':{
        web3:['https://base.llamarpc.com'],
        token:'BETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicwdtpk4fjjh6zmbrreafp7yuuehagxc5iso5iaggezwu2edsrmj4', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E215':{
        web3:['https://arbitrum.llamarpc.com'],
        token:'AETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreia5kfqglxtwiyrm7fw4ydrr4dwyrwftxrs6gvksxss7s5wjvc2ndm', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E225':{
        web3:['https://astar-rpc.dwellir.com'],
        token:'ASTR',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihq22vobhmkdlrrxv3nei6b757u6acklwsnjcmn6pwpwkh76s7azy', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E235':{
        web3:['https://cronos-evm.publicnode.com'],
        token:'CRO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreib7cta7pbzjgd6ys2rxxt7plf6ool4n7xxrndqd5zw6bkqmecablq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E245':{
        web3:['https://evm.kava.io'],
        token:'KAVA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreieeiyg42q6sb2jk5qz47alefcfc72wyxtkhdhzxqycqroixbt6kke', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E255':{
        web3:['https://neon-proxy-mainnet.solana.p2p.org'],
        token:'NEON',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicezjbxf47t7n6welb63atcx4v7jnl36tfbddmpxiu4ajzi2vmad4', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E265':{
        web3:['https://rpc-mainnet-cardano-evm.c1.milkomeda.com'],
        token:'mADA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiauduj7d7lhlbiac2y2i6fr5mz3xky2h4jvqjgyxgco4wrfu244oi', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E275':{
        web3:['https://fantom-mainnet.public.blastapi.io'],
        token:'FTM',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidsstxytde2mwe7u63hu54b6bcwgay7ckpgy7fgypflsyki2ntb2m', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E285':{
        web3:['https://flux-rpc2.brisescan.com'],
        token:'BRISE',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihqobs4apgub5767t2y5hkn5idhwmxhiwtjkwxhfu566w7l6wt2ym', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E295':{
        web3:['https://syscoin.public-rpc.com'],
        token:'SYS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibmwawsdkh5tgdcotewbdunarzapcb2qmh6eoo5ynbojy6kkwyaky', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E305':{
        web3:['https://avalanche.drpc.org'],
        token:'AVAX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiazy7wgqjb3w6owts3xixp527kxdb6mohcrt3rkvvomsvk3rqep4e', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E315':{
        web3:['https://rpc-mainnet.findora.org'],
        token:'FRA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiahfewosrjnjrsw22p54go7d5wqu7kghzvqufnzueaxl3trvzn52u', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E325':{
        web3:['https://bellecour.iex.ec'],
        token:'xRLC',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiggejzqvra2hzwdtr42whtzklislx6mch6bffufumnowiusinagvm', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E335':{
        web3:['https://emerald.oasis.dev'],
        token:'ROSE',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiavbox3rj73c4h6qezsdvbbsz52lgd7g3y6fnu62hzn6wqz73bjwm', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E345':{
        web3:['https://node1.ozonechain.io'],
        token:'OZO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreifpugp4hawkzc7ouvanhzk33jhxjqhdg63kq2waswq64wip54kfiy', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E355':{
        web3:['https://http-mainnet.chain.pixie.xyz'],
        token:'PIX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreifmgqxk23mp3nvsblfszv3wxziy24h7wqssycrh5gulp5tw7jkamq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E365':{
        web3:['https://rpc.rei.network'],
        token:'REI',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibpmldmytfxkvz2yprozcfr57hdlcjngcrv4oia6jqqb75wmmxgzq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E375':{
        web3:['https://public-en-cypress.klaytn.net'],
        token:'KLAY',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiescyzouik566qarxqeqzxoriace6j4stbdchculm5x56tjkp2sqi', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E385':{
        web3:['https://rpc.mantle.xyz'],
        token:'MNT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihsbilx43a554olrkmfhsse7rxyhtg7i4hlshd5kqnydgpihwbi5m', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E395':{
        web3:['https://rpc.pulsechain.com'],
        token:'PLS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibrilqmflglo7qylgt3zwbywzzbpp2x6tfz76eqnocrhhprrgir5q', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E405':{
        web3:['https://jsonrpc.canto.nodestake.top'],
        token:'CANTO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidpyqijpifjco2jlijkqn7lix7gej4oo5reka2gxbbin6ir6eyepy', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E415':{
        web3:['https://api.evm.eosnetwork.com'],
        token:'EOS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidr7jfavw27kj64fspqcidevjyufkxq6accycnr3e6pckdqfe5lze', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E425':{
        web3:['https://babel-api.mainnet.iotex.io'],
        token:'IOTX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreig7l7jsdnuesu2j6cscmwkhumvcuiqx3sumdq36hnswd4iugldqxe', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E435':{
        web3:['https://sgb.ftso.com.au/ext/bc/C/rpc'],
        token:'SGB',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiapvqa26ifxjkyldnukiqaaodkavic3xbbzdbqajgn6v5rdw3u2ni', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E445':{
        web3:['https://ultron-rpc.net'],
        token:'ULX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreieswovobb76mebl4hl5amisqsyh4wuaw6vdkdf5iflx4pufeghida', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E455':{
        web3:['https://rpc.coinex.net'],
        token:'CET',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreib6gldtkg2yh4oklnznn4zjt6xclqvmurut3s23zai3fuaarqazk4', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E465':{
        web3:['https://eth-rpc-api.thetatoken.org/rpc'],
        token:'TFUEL',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreigg23q3fyi6okevwhrieevuvb3ellj26s3pdhoq4e7tv2qp725dnm', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E475':{
        web3:['https://rpc.step.network'],
        token:'FITFI',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreigqzgwcqib66uivlcmh6c5jr56xfge3cxyc7jb23vghlmiqvkvrky', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E485':{
        web3:['https://rpc.energyweb.org'],
        token:'EWT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreih3rxl7pdkov3yelfkbmsocwvx7gejtvuwjqltyfse5bvxj52gm7e', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E495':{
        web3:['https://rpc.callisto.network'],
        token:'CLO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibewb5rlbvptqvovuzink4y7crot5nkxplgqd7o7ajvqp4ocjz3je', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E505':{
        web3:['https://shiden-rpc.dwellir.com'],
        token:'SDN',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidrlqfkm53twzvh5lnuzoddpv24yrzsaixgxyzfwe4qxzfyjpnmly', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E515':{
        web3:['https://tenet-evm.publicnode.com'],
        token:'TENET',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreifxl5uapxvm47vc4hec4bbvvsnazedn36zjiwsw2s4v7dzqn6s74m', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E525':{
        web3:['https://pyrus2.ubiqscan.io'],
        token:'UBQ',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidh2cvl7y2njzpfuc6z2rdiocdbw2sbczz4rtod3c7pzw3pckob5u', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E535':{
        web3:['https://rpc.gochain.io'],
        token:'GO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihnhyg4dyvptbvh5ykq2wzyraj74n6wcyxxwsb4eepkcds74r46kq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E545':{
        web3:['https://mainapi.omaxray.com'],
        token:'OMAX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicf546yuctqunrcfdb73vwdl7bq645f26zkfjodj2rymcqcwicliu', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E555':{
        web3:['https://api.wemix.com'],
        token:'WEMIX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibu5gf53hzlth6qafuaxozwytw2qdtnofoxjvusxpne4pqc3yntju', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E565':{
        web3:['https://evm.confluxrpc.com'],
        token:'CFX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiboh4aov7q7wzvi6be27uskvad6bzir7s5alr2dihvzznrkflhxza', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E575':{
        web3:['https://rpc1.eu.telos.net/evm'],
        token:'TLOS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihsqmpt6szoqnam4qpwcjtpn73p5hmlxu53qxnaf4ytzvvrhvqmya', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E585':{
        web3:['https://mycrypto.rsk.co'],
        token:'RSK',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiegatpac6ycp23meknqhihmlxrsb7asnl22yksh44swopk4nluv7a', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E595':{
        web3:['https://api.metadium.com/prod'],
        token:'META',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiem6fmyfzpix5dmokefc7dakf5hd5ouckwtuzo2yxh6yn7g45iioe', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E605':{
        web3:['https://rpc.kardiachain.io'],
        token:'KAI',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidkhcnyvp5cwi5cb3sdg4cerrgyzi3qbv7vint4esk7vabceeo54m', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E615':{
        web3:['https://mainnet.block.caduceus.foundation'],
        token:'CMP',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreickyon3ett5kn2lqvhhdfl37mmdnrngh6fvfetqbavyyat2gcbq2u', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E625':{
        web3:['https://rpc.seelen.pro'],
        token:'SEELE',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreigyvectz4cwg4mj7noyw3eo5txd3fh2feir6loi4xqrxxufu4i4ta', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E635':{
        web3:['https://rpc.bittorrentchain.io'],
        token:'BTT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreigf6kxh5622gndetusjo5wci53kikq4m7j3w5ieha75eewzqg6i5y', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E645':{
        web3:['https://rpc.acuteangle.com'],
        token:'AAC',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreidtmpi7bagyu7vtvspkx7nx73bztl7g7raxhprlqhdzt4226gy5ne', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E655':{
        web3:['https://rpc.evm.karura.network'],
        token:'KAR',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihmmav45jddg6egaooccb7ywij3ietijnvtzep7vfyy2gjazfsdjq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E665':{
        web3:['https://eth-rpc-acala.aca-staging.network'],
        token:'ACA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreiajrgopwvl6cpwpi25vdrafi47p27hfgm4imbs6ur5o57xku6xzzq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E675':{
        web3:['https://mainnet3.edgewa.re/evm'],
        token:'EDG',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicpea6ke2daanmhb73ejaqht2xkpig3yicqotwkm3spkivixb5ju4', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E685':{
        web3:['https://core.bloxberg.org'],
        token:'BERG',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreif4dsu7lxayad6wkh2xdeplaym5llftknaluwvtxblfasik6wahvm', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E695':{
        web3:['https://rpc.phoenixplorer.com'],
        token:'PHOENIX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreih6ijcxbidzo2isqlu2hjm43llyv3f2kmkz72tt32li4gl25kzypq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E705':{
        web3:['https://seed.omlira.com'],
        token:'OMC',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreieph4yuxvzjxugw5hmdtwlsp7434dwapm65pr5b3o5pk2fb5uvosa', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E715':{
        web3:['https://rpc-cnx.omplatform.com'],
        token:'OM',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicz56kvmxvnzab5eve3dq624pmptwsrmkceu27wgxzticyyjeobhu', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E725':{
        web3:['https://node1.mintme.com'],
        token:'MINTME',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicpvjaago2uqrvid4x5cq27grwuxapcxs4l2tfwgqcocwbxxq7edq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E735':{
        web3:['https://rpc.ecredits.com'],
        token:'ECS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreifktidofrlhlkpwnfyf5p3ftk3k2y3dbsq7cxqcjpgs2axqdvhqoi', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E745':{
        web3:['https://host-154-14-192-66.contentfabric.io/eth'],
        token:'ELV',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreicchvnsegzclfaz2xnfzlnpjey4ahxnoxzpyhudb524ezstp5cc5u', iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E755':{
        web3:['https://rpc.ethoprotocol.com'],
        token:'ETHO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreihxyf4fksj7bajilfz2m66v455goeushb2w36kn5h63p7f2gvllgq', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E765':{
        web3:['https://mainnet-rpc.oneledger.network'],
        token:'OLT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreifn4sbeosn63ogew4z7gm4dw2t5l2xhmtauxwgh4wakaqmxjuuwwm', iteration:3_000, url:0, active:false, e5_img:null
      },
      'E775':{
        web3:['https://mainnet.hashio.io/api'],
        token:'HBAR',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://bafkreic525y3d4aqb6wksu6dt6uaqhwtvbzpooqenkjm6t7xzsut7bfelq.ipfs.w3s.link/', iteration:400_000, url:0, active:false, e5_img:null
      },
      'E785':{
        web3:['https://json-rpc.evm.iotaledger.net'],
        token:'IOTA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://bafkreigvxj7opelzoamc4ujrgmgwdq73g5pjtvgtrrhuuyvirzfvqjegj4.ipfs.w3s.link/', iteration:400_000, url:0, active:false, e5_img:null
      },
      'E795':{
        web3:['https://public-en.node.kaia.io'],
        token:'KAIA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://bafkreigsndweoxio5jfmnjiliqncxgbuqfswdp5ptrtp2mde73jesc7kia.ipfs.w3s.link/', iteration:400_000, url:0, active:false, e5_img:null
      },
      'E805':{
        web3:['https://rpc.soniclabs.com'],
        token:'S',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://bafkreigfnvmswmzp2qqrbky4at4uj4xoa44f2j7r3a2ux2op7iibaskcsi.ipfs.w3s.link/', iteration:400_000, url:0, active:false, e5_img:null
      },
      'E815':{
        web3:['https://rpc.berachain.com/'],
        token:'BERA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://bafkreic3mo4xe7dfftguut7apsufbc4mzlnwxqpupmyo46f6adzd5nd65u.ipfs.w3s.link/', iteration:400_000, url:0, active:false, e5_img:null
      },
    }
  }

  getLocale(){
    var language = this.get_language()
    var accepted_languages = ['en']
    var obj = {
      //this.props.app_state.loc['']
      //this.getLocale()['']
      'en':{
        '0':'en',
        /* enter contract page */
        '1':'enter-contract','2':'enter','3':'contract','4':'finish.','5':'Max Enter Contract Duration.','6':'Your entering duration.','7':'Entry expiry time.','8':'Set the time after which you wont participate in the contract.','9':'The entry fees charged for entering the contract.','10':'Entry Fees.','11':'The amounts you have available for entering the contract.','12':'Your balances.','13':'Token ID: ','14':'You cant pick a time before now.','15':'You cant pick a time beyond the contracts limit.','16':'Youve already entered this contract.','17':'You dont have enough tokens to enter this contract.','18':'Transaction added to stack.','18a':'Set Maximum Time.','18b':'','18c':'','18d':'',
        
        /* exit contract page */
        '19':'exit-contract','20':'exit','21':'contract','22':'Max Enter Contract Duration.','23':'Exit the specific contract.','24':'Exit Contract.','25':'Entry Expiry Time.','26':'Time Remaining.','27':'block','28':'You cant exit a contract you havent entered.',
        
        '29':' sec','30':' min','31':' hr','32':' dy','33':' wk','34':' yr',
        
        /* extend enter contract page */
        '35':'extend-contract','36':'extend','37':'contract','38':'Extend Entry Expiry Time.','39':'Set the new time after which you will not participate in the contract.','40':'Max Enter Contract Duration.','41':'Max Extend Enter Contract Duration.','42':'Entry Expiry Time.','43':'Time Remaining.','44':'You cant set a time before the current expiry time.','45':'You cant set a time beyond the extend limit.','46':'You have to wait ','47':' to extend your stay.','47a':'','47b':'','47c':'',
        
        /* force exit contract page */
        '48':'force-exit','49':'force','50':'exit','51':'accounts','52':'Run a force exit action for the contract ID: ','53':'Target Account.','54':'Set the account ID to remove.','55':'Target Account...','56':'Add Force Exit Action.','57':'That account isnt part of the contract.','58':'You cant force exit an account twice.','59':'Account ID: ','60':'Contract ID: ','61':'Force exit action removed.','62':'Account','63':'You cant stack no changes.',
        
        /* modify contract page */
        '64':'modify-contract','65':'modify','66':'contract','67':'auth','68':'Vote Bounty Split Proportion','69':'Maximum Extend Enter Contract Limit','70':'Minimum End Bounty Amount','71':'Proposal Expiry Duration Limit','72':'Maximum Enter Contract Duration','73':'Auto Wait','74':'Proposal Modify Expiry Duration Limit','75':'Moderator Modify Privelage','76':'Unlimited Extend Contract Time','77':'Maximum Proposal Expiry Submit Expiry time difference','78':'Bounty Limit Type','79':'Force Exit Enabled','80':'Minimum Spend Bounty Amount','81':'no','82':'yes','83':'modifiable','84':'non-modifiable','85':'enabled','86':'disabled','87':'relative','88':'absolute','89':'enabled','90':'disabled','91':'Make changes to the configuration of the contract ID: ','92':'units','93':'Add Change.','94':'Target ID...','95':'Current ','96':'Current Value.','97':'Reconfiguration action added.','98':'Please pute a valid account ID.','99':'Reconfiguration action added.','100':'Modify Target.','101':'Position.','102':'Proportion.','103':'Duration.','104':'Value: ','105':'Target ID','106':'Reconfiguration action removed.','107':'My Account','108':'Account','108a':'Edit contract prices.', '108b':'Change the entry fees of your contract.', '108c':'You cant change the first price-value of the entry fees used', '108d':'', '108e':'', '108f':'',
        
        /* new channel page */
        '109':'channel','110':'e.text','111':'links','112':'images','113':'e.authorities','114':'authorities','115':'text','116':'font','117':'size','118':'moderators','119':'interactable','120':'e.font','121':'e.size','122':'Set a title for your new Channel.','123':'Enter Title...','124':'Remaining character count: ','125':'Set tags for indexing your new Channel.','126':'Enter Tag...','127':'Add.','128':'Type something.','129':'Enter one word.','130':'That tag is too long.','131':'That tag is too short.','132':'You cant enter the same word twice.','133':'Tag added.','134':'Enter your preferred text then tap add to add it.','135':'Type Something...','136':'Add Text.','137':'Edit Text.','138':'Editing Item.','139':'Search an object by its title or id, then tap it to add it to the new Channel.','140':'Search.','141':'Searching...','142':'Link removed from object.','143':'The link is already in the Channel','144':'Link added to the Channel.','145':'The grey circle stages an image. Then tap an image to remove it.','146':'Large images may be compressed to save on space.','147':'Access Rights.','148':'If enabled, access to the channel will be restricted to moderators and specified accounts.','149':'Moderator ID','150':'Set the account id for your targeted moderator.','151':'Add Moderator.','152':'Added moderator.','153':'Account ID','154':'Interactable ID','155':'Set the account id for your targeted account, and expiry time for their interactability.','156':'Add Interactable Account','157':'Added interactable account.','158':'Interactable Account ID: ','159':'Until: ','160':'Add some tags first.','161':'Add a title for your Channel.','162':'That title is too long.','162a':'📑 contract', '162b':'💼 job', '162c':'👷🏻‍♀️ contractor', '162d':'🏪 storefront', '162e':'🎫 subscription', '162f':'📰 post', '162g':'📡 channel','162h':'🪙 token','162i':'🧎 proposal', '162j':'per-hour', '162k':'per-job','162l':'The maximum number of tags you can use is 7.','162m':'You cant use special characters.','162n':'You already added that account.', '303a':'Subscription Locked Channel Preview.','304b':'If set to visible, a preview of your new channel will be shown to outsiders if subscription locked.','162o':'The gray circle stages a pdf file. Then swipe it to remove.','162p':'The gray circle stages a zip file. Then swipe it to remove.','162q':'zip-files','162r':'pdfs','162s':'','162t':'','162u':'',
        
        /* new contract page */
        '163':'configuration','164':'entry-fees','165':'private','166':'public','167':'Set a title for your new Contract.','168':'Set tags for indexing your new Contract.','169':'Add.','170':'Enter Contract.','171':'If set to enter-contract, youll enter the contract your creating in one transaction.','172':'Preset the new contract settings based on common use cases.','173':'👥 Workgroup Contract','174':'A contract representing shared consensus within an organization or group of people.','175':'🧘 Personal Contract','176':'A contract primarily used by one person.','177':'👷🏼 Work Contract','178':'A contract used for the job and contractor markets.',
        '179':'⚭ Life Contract','180':'A contract representing shared consensus between two or more people for an extended period of time.','181':'Workgroup contract preset has been applied.','182':'Personal contract preset has been applied.','183':'Work contract preset has been applied.','184':'Life contract preset has been applied.','185':'Create a basic E5 contract.','186':'Next.','187':'Previous.','188':'Contract Type.','189':'set the type of contract, either private or public.','190':'Note: if set to private, youll be giving new accounts access to the contract manually after its created.','191':'Vote Bounty Split Proportion (Optional).','192':'The mandatory percentage or proportion enforced on each new proposal targeting your new contract. Then, the percentage is used to calculate what each voter is set to receive based on the existing proposals balance.','193':'Vote Bounty Split Proportion.','194':'Recommended: 3% - 5%','195':'Maximum Extend Enter Contract Limit.','196':'The maximum amount of time a sender can extend their stay in your new contract.','197':'Recommended: 1 dy.','198':'Minimum End Bounty Amount (Optional).','199':'The minimum amount of end that can be used as bounty for creating a proposal for your new contract.','200':'Minimum End Bounty Amount.','201':'Minimum Spend Bounty Amount (Optional).','202':'The minimum amount of spend that can be used as bounty for new proposals targeting your new contract.','203':'Minimum Spend Bounty Amount.','204':'Maximum Enter Contract Duration.','205':'The maximum amount of time an account can enter your new contract for.','206':'Recommended: 4wks.','207':'Auto Wait.','208':'If set to yes, all new propsals sent to your new contract are automatically voted wait for each participant in the contract.','209':'Recommended: no.','210':'Proposal Modify Expiry Duration Limit.','211':'The period of time before the expiry of a proposal, during which the propsal cannot be modified.','212':'Recommended: 3 Hrs.','213':'Moderator Modify Privelage.','214':'If set to modifiable, you as a moderator can directly modify your contracts configuration.','215':'Recommended: modifiable.','216':'Unlimited Extend Contract Time.','217':'If set to enabled, you can extend your stay in this contract at any time after entry.',
        '218':'Recommended: enabled','219':'Maximum Proposal Expiry Submit Expiry Time Difference.','220':'The maximum difference in time between the proposal expiry and submit expiry time for all proposals sent to your new contract.','221':'Recommended: at least 2wks.','222':'Bounty Limit Type.','223':'If set to absolute, the bounty limits set for end and spend will be used as is and if set to relative, the bounty limits will be set relative to the state of the network and demand.','224':'Recommended: absolute','225':'Force Exit Enabled','226':'If set to enabled, you as a moderator can force other members of the contract to exit the contract.','227':'Recommended: enabled.','228':'Proposal Expiry Duration Limit.','229':'The minimum amount of time difference that can be used while setting the expiry time for a new proposal sent to your new contract.','230':'Recommended: 1hr - 3hrs.','231':'Default Consensus Majority Limit (optional).','232':'If you prefer the contract to be consensus majority instead of unanimous, set the majority proportion here. By default, 0% and 100% means unanimous consensus.','233':'Recommended: 70% to 80%.','234':'Voter Weight Exchange.','235':'Specify an exchange that will be used to calculate voter weights for all proposals sent to your new contract.','236':'Please put a valid date and time.','237':'Exchange ID.','238':'Add an exchange by its id or name, then the desired amount. The first exchange must be the End or Spend exchange.','239':'Minimum End Contract Amount.','240':'Minimum Spend Contract Amount.','241':'Price.','242':'Add Price.','243':'Please put a valid exchange id.','244':'Please put a valid amount.','245':'The first exchange must be the End or Spend exchange.','246':'You cant use the same exchange twice.','247':'Added entry fee price.','248':'That End amount is less than the minimum required by the main contract.','249':'That Spend amount is less than the minimum required by the main contract.','250':'Please put a valid voter weight exchange id.','251':'Please add a title for your Contract.','252':'That Contract title is too long.', '252a':'Auto-Wait will be disabled if you opt for this voter weight feature.',
        
        /* new contractor page */
        '253':'contractor','254':'rates','255':'Set a title for your new contractor post. It should be task specific.','256':'Set tags for indexing your new contractor post.','257':'Search an object by its title or id, then tap it to add it to the new Contractor Post.','258':'The link is already in the Contractor Post.','259':'Link added to Contractor Post.','260':'Select an exchange by its ID.','261':'Fee per hour.','262':'Set your desired fee per hour.','263':'Add fee.','264':'Please put a valid Exchange ID.','265':'Please put a valid amount.','266':'You cant use the same exchange twice.','267':'Added your desired fee.','268':'Account 3','269':'Account 5','270':'Add at least 3 tags first.','271':'Please add a title for your Contractor Post','272':'That title is too long.', '272a':'Fee type.','272b':'Set your preferred fee type below.','272c':'Fee per job.','272d':'Set your desired fee per job.','272e':'Fees Per Job.','272f':'The amounts they charge per job.','272g':'',
        
        /* new job page */
        '273':'job','274':'targeted-pay','275':'Set a title for your new Job Post.','276':'Enter Title...','277':'Set tags for indexing your new Job Post.','278':'Enter your preferred text, then tap add to add it to the new Job Post.','279':'Search an object by its id or title, the tap it to add it to the new Job Post.','280':'Search.','281':'The link is already in the Job Post.','282':'Link added to Job Post.','283':'Select an exchange by its ID, then the desired price then click add.','284':'Add Pay.',

        /* new nitro page */
        'a273a':'nitro','a273b':'Node URL.','a273c':'Set the url link to the node.','a273d':'Test and Add.','a273e':'Please add a url link.','a273f':'That link is not valid.','a273g':'https://<your-public-ip>:3000','a273h':'That provided link is not available for use.','a273i':'Testing that link...','a273j':'Provided link added.','a273k':'The link should not end with the \'/\' character.','a273l':'You havent set a node url link','a273m':'Set an image to identify your new node. The image will be rendered in a 1:1 aspect ratio.','a273n':'Nitro Link.','a273o':'nitro key (e.g. eeeee2Edp...di4reeeee)','a273p':'Please provide the nitro key for your node.','a273q':'That key isn\'t valid.','a273r':'You need to set your wallet first to encrypt that nitro key.','a273s':'That link is too long.','a273t':'','a273u':'','a273v':'','a273w':'','a273x':'','a273y':'','a273z':'','a273ba':'','a273bb':'','a273bc':'','a273bd':'','a273be':'','a273bf':'','a273bg':'','a273bh':'','a273bi':'','a273bj':'','a273bk':'','a273bl':'','a273bm':'','a273bn':'',
        
        /* new mail page */
        '285':'mail','286':'Set a title for your new encrypted mail.','287':'Set a recipient for your new Mail.','288':'Account ID','289':'Set tags for indexing your new Mail.','290':'Enter your preferred text, then tap add to add it to the new Mail.','291':'Search an object by its title or ID, then tap it to add it to the new mail.','292':'Enter Object ID...','293':'The link is already in the Mail.','294':'Link added to Mail.','295':'Please add a title for your new Mail.','296':'That recipient account is invalid.',
        
        /* new post page */
        '297':'post','298':'subscription-lock','299':'invisible','300':'visible','301':'Set a title for your new Post.','302':'Set tags for indexing your new Post.','303':'Subscription Locked Post Preview.','304':'If set to visible, a preview of your new post will be shown to outsiders if subscription locked.','305':'Subscription Lock (Optional).','306':'Post exclusively to accounts that have paid the subscription you choose below.','307':'Enter your preferred text then tap add to add it.','308':'Search an object by its title or ID, then tap it to add it to the new Post.','309':'The link is already in the Post.','310':'Link added to Post.','311':'Please add a title for your new Post.', '311a':'nsfw', '311b':'masked', '311c':'Mark as NSFW.', '311d':'If set to nsfw, post will be marked as not safe for work.', '311e':'Masked for Outsiders.', '311f':'If set to masked, your post will not be visible to users without accounts.', '311g':'enabled','311h':'Post Anonymously.','311i':'If set to enabled, your alias and account id will be masked in your post\'s detail section.','311j':'','311k':'','311l':'','311m':'Hidden','311n':'','311o':'','311p':'','311q':'','311r':'',


        /* new audio page */
        'a311a':'audio','a311b':'album-fee','a311c':'track-list','a311d':'Set an fee for buying the entire audio catalog.','a311e':'Add Audio Item.','a311f':'Add a new audio item with the specified details set.','a311g':'Add Audio.','a311h':'Audio Price (Optional)','a311i':'Specify the price for accessing this audio if added individually.','a311j':'Set the details for a new audio item in your album.','a311k':'Audio Title.','a311l':'Set a title for the audio item in the album.','a311m':'Title...','a311n':'Audio Composer.','a311o':'Set the composers of the auido file.','a311p':'Composers...','a311q':'You need to set a title for the track.','a311r':'You need to set a composer of the track.','a311s':'Edited the track item.','a311t':'Added the track item.','a311u':'Audio Track.','a311v':'Pick the track from your uploaded files.','a311w':'You need to add an audio track.','a311x':'Editing that Track.','a311y':'Album Genre.','a311z':'Set the genre for your new album.','a311aa':'Year Recorded.','a311ab':'Set the year the album was recorded or released.','a311ac':'Author','a311ad':'Set the author of the Album.','a311ae':'Copyright','a311af':'Set the copyright holder for the album.','a311ag':'Comment','a311ah':'Add a comment for the album from its author.','a311ai':'Post Comment Section.','a311aj':'If set to disabled, senders cannot add comments in the album.','a311ak':'Post Listing.','a311al':'You need to specify the posts genre.','a311am':'You need to speicfy the posts year.','a311an':'You need to specify the posts author.','a311ao':'You need to specify the posts copyright holder.','a311ap':'You need to add the authors comment for the post.','a311aq':'You need to add some tracks to the new post.',
        'a311ar':'Album','a311as':'EP','a311at':'Audiobook','a311au':'Podcast','a311av':'Single','a311aw':'Post Type.','a311ax':'Set the type of post you\'re uploading to the audioport section.','a311ay':'Set the album art for your new post. The art will be rendered in a 1:1 aspect ratio.','a311az':'You need to set the album art for your new post.','a311ba':'Track Free Plays.','a311bb':'Set the number of free plays for your track if and before a purchase is required.','a311bc':'plays','a311bd':'Purchase Recipient','a311be':'Set the recipient account ID for all the purchases of this audiopost.','a311bf':'You need to set a purchase recipient for your new audiopost.','a311bg':'metadata','a311bh':'Audio Lyrics (Optional).', 'a311bi':'You may add lyrics to your uploaded track. Keep in mind that the file has to be a .lrc file.','a311bj':' lines.','a311bk':'Lyrics Added','a311bl':'Content Channeling','a311bm':'Specify the conetnt channel you wish to publish your new post. This setting cannot be changed.','a311bn':'Channeling City (Optional)','a311bo':'If you\'ve set local channeling, you can restrict your post to a specific city.','a311bp':'Enter City...','a311bq':'markdown','a311br':'Fee for Everything','a311bs':'New Markdown here...', 'a311bt':'editor', 'a311bu':'preview', 'a311bv':'You can add some Markdown text below.', 'a311bw':'Track Credits', 'a311bx':'You can credit the people that helped make the track.', 'a311by':'Credits...', 'a311bz':'Credits', 'a311ca':'Headings','a311cb':'Basic Markdown Syntax.','a311cc':'Extended Markdown Syntax.','a311cd':'Bold','a311ce':'Italic','a311cf':'Blockquote','a311cg':'Ordered List','a311ch':'Unordered List','a311ci':'Code','a311cj':'Horizontal rule','a311ck':'Link','a311cl':'Image','a311cm':'Table','a311cn':'Fenced Code Block','a311co':'Footnote','a311cp':'Heading ID','a311cq':'Definition List','a311cr':'Strikethrough','a311cs':'Task List','a311ct':'Emoji','a311cu':'Highlight','a311cv':'Subscript','a311cw':'Superscript','a311cx':'','a311cy':'','a311cz':'','a311da':'','a311db':'','a311dc':'','a311dd':'','a311de':'','a311df':'','a311dg':'','a311dh':'','a311di':'','a311dj':'','a311dk':'','a311dl':'','a311dm':'','a311dn':'','a311do':'','a311dp':'','a311dq':'','a311dr':'','a311ds':'','a311dt':'','a311du':'','a311dv':'','a311dw':'','a311dx':'','a311dy':'','a311dz':'',
        

        /* new video page */
        'b311a':'video','b311b':'video-fee','b311c':'video-list','b311d':'Video','b311e':'Film','b311f':'Series','b311g':'Set the video art for your new post.','b311h':'Set the type of post your\'e uploading to the videoport section.','b311i':'Add Video','b311j':'Add a new video item with the specified details set.','b311k':'Video Price','b311l':'Specify the price for accessing this video if added individually.','b311m':'Set the details for a new video item in your show or film.','b311n':'Video Title.','b311o':'Set the title for the new video item in your show.','b311p':'Video Creator.','b311q':'Set the creators of the video file.','b311r':'Video File','b311s':'Pick the video track from your uploaded files.','b311t':'You need to set a title for the video track.','b311u':'You need to set a composer of the video track.','b311v':'You need to add a video track.','b311w':'Editing that Video Track.','b311x':'You need to add some videos to the new videopost.','b311y':'Video Subtitles.','b311z':'You may add subtitles for your uploaded video. The file has to be a .vtt file.','b311aa':'Language (eg. German)','b311ab':' bytes.','b311ac':'Staged .vtt file removed.','b311ad':'Add subtitle file.','b311ae':'You\'ll need to set the language for the subtitle file. Then click add subtitle file to add it to the video. Then tap to remove from the list.','b311af':'Please add a subtitle file first.','b311ag':'Please set the subtitle file\'s language first.','b311ah':'You can\'t use the same language twice.','b311ai':'','b311aj':'','b311ak':'','b311al':'','b311am':'','b311an':'','b311ao':'','b311ap':'','b311aq':'','b311ar':'','b311as':'','b311at':'','b311au':'','b311av':'','b311aw':'','b311ax':'','b311ay':'','b311az':'',


        /* new proposal page */
        '312':'proposal','313':'proposal-configuration','314':'proposal-data','315':'bounty-data','316':'spend','317':'reconfig','318':'exchange-transfer','319':'subscription','320':'exchange','321':'Minimum Buy Amount','322':'Target Authority','323':'Target Beneficiary','324':'Maximum Buy Amount','325':'Minimum Cancellable Balance Amount','326':'Buy Limit','327':'Trust Fee','328':'Sell Limit','329':'Minimum Time Between Swap','330':'Minimum Transactions Between Swap','331':'Minimum Blocks Between Swap','332':'Minimum Entered Contracts Between Swap','333':'Minimum Transactions For First Buy','334':'Minimum Entered Contracts For First Buy','335':'Block Limit','336':'Halving Type','337':'Maturity Limit','338':'Internal Block Halving Proportion','339':'Block Limit Reduction Proportion','340':'Block Reset Limit','341':'Block Limit Sensitivity','342':'fixed','343':'spread','344':'Create your new proposal for contract ID: ',
        '345':'Set tags for indexing your new Proposal.','346':'Consensus Type.','347':'Set the type of action you wish to perform with the contract through your new proposal.','348':'Proposal Expiry Time','349':'Set the time after which youre set to submit the new proposal during which no new votes can be cast.','350':'Proposal Expiry Duration Limit.','351':'Time from now.','352':'Modify Target (For Reconfiguration Action)','353':'The target object thats being modified if the consensus type is reconfig.','354':'Object ID...','355':'Consensus Submit Expiry Time.','356':'The time after which you cannot submit your new proposal.','357':'Maximum Proposal Expiry Submit Expiry Time Difference.','358':'You cant use a time before now.','359':'That submit time is invalid','360':'That proposal expiry time is less than the minimum required by the contract.','361':'Contract','362':'This Contract','363':'Main Contract','364':'Contract ID 2','365':'End Exchange','366':'Account ID 3','367':'Spend Exchange','368':'Account ID 5','369':'My Account','370':'Account','371':'End Token','372':'Spend Token','373':'Exchange ID 3','374':'Exchange ID 5','375':'Burn Account','376':'Account ID 0','377':'End Balance.','378':'Spend Balance.','379':'Spend Target.','380':'Set a target for the spend action.','381':'Target ID...','382':'Exchange.','383':'Set the token your spending.','384':'Spend Amount.','385':'Set an amount for the spend action.','386':'Picked Amount.','387':'Please put a valid spend target.',
        '388':'Please put a valid exchange id.','389':'Please put a valid amount.','390':'Spend action added to proposal.','391':'Units','392':'Add Change.','393':'Current ','394':'Current Value','395':'Exchange Ratio X','396':'Exchange Ratio Y','397':'Reconfiguration action added.','398':'Please put a valid account ID.','399':'Position.','400':'Proportion.','401':'Duration.','402':'Value: ','403':'Target ID.','404':'Target Exchange.','405':'Set the exchange id you wish to run the exchange transfer from.','406':'Target Receiver','407':'Target Receiver...','408':'Token Targets','409':'Set the target token ID your transferring from the exchange.','410':'Token Target ID...','411':'Target Amount','412':'Add Transfer Action.','413':'Set the account set to receive the token amounts.','414':'Please put a valid exchange ID.','415':'Please put a valid receiver ID.','416':'Please put a valid token ID.','417':'Please put a valid amount.','418':'Transfer action added.','419':'Receiver ID: ','420':'The first bounty exchange should be the End or Spend Exchange.','421':'Minimum Spend Bounty Amount.','422':'Minimum End Bounty Amount.','423':'Spend Balance.',
        '424':'End Balance.','425':'Target Amount.','426':'Add Bounty.','427':'You cant use the same exchange twice.','428':'Bounty amount added.','429':'Token ID: ','430':'Add some tags first.','431':'Add a title first.','432':'That title is too long.','433':'You need to add bounty for your new proposal.','434':'One of your token balances is insufficient for the bounty amount specified.','435':'The proposal submit expiry time youve set cant be before now.','436':'The proposal submit expiry time youve set is less than the time difference required by the contract.','437':'That proposal expiry time youve set is less than the minimum required by the contract.','438':'The proposal expiry time youve set cant be before now', '438a':'Target Authority', '438b':'Target Beneficiary', '438c':'Minimum Buy Amount', '438d':'Maximum Buy Amount', '438e':'Minimum Cancellable Balance Amount','438f':'Search an object by its title or id, then tap it to add it to the new Proposal','438g':'Link added to new Proposal Item.','438h':'Transaction Gas Limit','438i':'Enter your preferred text then tap add to add it to the new Proposal.', '438j':'Edit Reconfig Prices', '438k':'Change the prices of your target reconfig object.', '438l':'The modify target youve set is invalid.', '438m':'Auto-Vote Yes.', '438n':'If set to vote, e will automatically vote yes for you in this new proposal.', '438o':'vote', '438p':'Set Expiry Limit.', '438q':'Set Submit Limit.','438r':'tokens','438s':'','438t':'','438u':'',
        
        /* new storefront item page */
        '439':'storefront-item','440':'configuration','441':'variants','442':'invisible','443':'masked','444':'unmasked','445':'items','446':'grams','447':'kilograms','448':'ounces','449':'pounds','450':'centimeters','451':'meters','452':'inches','453':'feet','454':'mililiters','455':'liters','456':'gallons','457':'listed','458':'delisted','459':'in-stock','460':'out-of-stock','461':'Unit Denomination.','462':'Specify the denomination of the item below.','463':'Unit Denomination.','464':'Specify the denomination of the item from the tag picker below.','465':'Set denomination: ','466':'Target Payment Recipient.','467':'Set the account ID thats set to receive the purchase payments for your new item.','468':'Fulfilment Location.','469':'Set location of the pick up station for your item when its ordered using a bag and contractors.','470':'Location Details...','471':'Direct Purchase Option.','472':'If set to enabled, youll handle the shipping for the item when purchased directly by your clients.','473':'Product Chatroom.',
        '474':'If set to disabled, senders cannot send messsages to the new storefront items product chatroom in the activity section.','475':'Product Listing.','476':'If set to delisted, the item will not be visible for purchasing.','477':'Product Stock.','478':'If set to out-of-stock, users will not be able to direct purchase or add to their bags.','479':'Fulfilment Accounts.','480':'Set the accounts involved with shipping and fulfilling direct purchase orders from clients.','481':'Direct Purchase Shipping Fee.','482':'The shipping fee you charge for shipping your item when directly purchased by your clients.','483':'tokens','484':'Price','485':'Add Price.','486':'Please put a valid exchange ID.','487':'Please put a valid amount.','488':'You cant use the same exchange twice.','489':'Added shipping price.','490':'Please put a valid account ID.','491':'Added the account.','492':'Account.','493':'My Account.','494':'Set a title for your new Storefront Item.','495':'Enter Title...','496':'Set tags for indexing your new Storefront Item.','497':'Enter your preferred text then tap add to add it to the new Storefront Item.','498':'Search an object by its title or ID, then tap it to add it to the new Storefront Item.','499':'Search.','500':'The link is already in the Storefront Item.','501':'Link added to new Storefront Item.','502':'Price per unit.','503':'Specify the price for one unit of your new items variant.','504':'Exchange ID',
        '505':'Price','506':'tokens','507':'Add Price.','508':'Please put a valid exchange ID.','509':'Please put a valid amount.','510':'You cant use the same exchange twice.','511':'Added price.','512':'Variant Title.','513':'Set a basic description of the variant of the item your selling like a color or size option.','514':'Variant Images.','515':'You can set some images for your variant','516':'Number of Units in ','517':'You can specify the number of units of the variant that are available for sale','518':'Number of ','519':'Units','520':'Add Variant','521':'That variant description is not valid.','522':'Set a price for your variant first.','523':'You need to specify how many units are available first.','524':'Added the variant to the Storefront Item.','525':'Number of Units.','526':'Variant removed.','527':'Exchange 3','528':'Exchange 5','529':'Add some tags first.','530':'Add a title for your new Storefront Item.','531':'That title is too long.','532':'You should add some variants for your new item first.','533':'Set a valid receiver target for your Item first.','534':'Set a valid fulfilment location for your Storefront Item.','535':'You should set some fulfilment accounts for your Storefront Item.', '535a':'Exchange ID', '535b':'Enter Account ID','535c':'Set the details for a variant of your new storefront item.','535d':'Editing that variant.','535e':'Add Variant.','535f':'Add a new variant of the item with the details set above.','535g':'Set a storefromt image for your item. The art will be rendered in a 1:1 aspect ratio.','535h':'purchase-options','535i':'You can specify purchase options that will be requested upon direct purchase or bag purchase.','535j':'Option Group Title.','535k':'The title of the option group (Eg Color, Texture, Optional extras etc.)','535l':'Item Option.','535m':'This is a specific option that will be shown during purchase (like the color \'red\')','535n':'Option Item.','535o':'Option Price.','535p':'This is the extra fee that will be included if the option is selected.','535q':'Add Option Group.','535r':'Add the option group with the specified options.',
        '535s':'Add Group.','535t':'Add Option','535u':'You need to specify a name for the option first.','535v':'Option Added.','535w':'You can\'t specify the same option name twice.','535x':'You need to specify a name for the option group first.','535y':'You need to specify some options for the group first.','535z':'Group added.','535aa':'Editing that Group.','535ab':'Add the new option with specified name and price data.','535ac':'Group Options. Specify an item option and its prices to see it below.','535ad':'single-mandatory','535ae':'single','535af':'multiple','535ag':'Youll need to set the option group type for the new option group.','535ah':'Option Group Details...','535ai':'','535aj':'','535ak':'','535al':'',
        
        /* new subscription page */
        '536':'subscription','537':'configuration','538':'authorities','539':'prices','540':'false','541':'true','542':'moderators','543':'interactable','544':'enabled','545':'disabled','546':'Set a name for your new Subscription.','547':'Enter Title...','548':'Set some tags for indexing your new Subscription.','549':'Enter Tag...','550':'Add.','551':'Create a basic E5 Subscription.','552':'Next','553':'Previous','554':'Cancellable.','555':'If set to true, subscription payers can refund their subscription payments.','556':'Recommended: false.','557':'Time Unit','558':'The amount of time thats used as a unit when paying for your new subscription.','559':'Recommended: 1 min.','560':'Minimum Buy Amount.','561':'Minimum amount of time units that can be paid for your new subscription.','562':'units','563':'Recommended: at least 1','564':'Maximum Buy Amount','565':'Maximum amount of time units that can be paid for your new subscription.','566':'Minimum Cancellable Amount(For Cancellable Subscriptions)','567':'The minimum amount of time units that can be left when cancelling your new subscriptions payments.','568':'Minimum Cancellable Amount','569':'Recommended: at least 1','570':'Access Rights','571':'If enabled, access to the subscription will be restricted to moderators and specified accounts.','572':'Set the authority ID for your new subscription.','573':'Set the subscription beneficiary ID for your new subscription.','574':'moderators','575':'interactable','576':'Moderator ID','577':'Set the account id for your targeted moderator','578':'Add Moderator','579':'Account ID','580':'Interactable ID','581':'Set the account id for your targeted account, and expiry time for their interactability','582':'Add Interactable Account.','583':'Please put a valid account ID.','584':'Added interactable account.','585':'Interactable Account ID: ','586':'Until: ','587':'Exchange ID','588':'Type an exchange by its id, then the desired price and click add.','589':'Price','590':'tokens','591':'Add Price','592':'Please put a valid exchange ID.','593':'Please put a valid amount.','594':'You cant use the same exchange twice.','595':'Added price.','596':'My Account','597':'Account','598':'Add some tags first.','599':'Add a name first.','600':'That name is too long.', '600a':'Enter Authority', '600b':'Enter Beneficiary ID...',
        
        /* new token page */
        '601':'token','602':'basic','603':'custom','604':'token-authorities','605':'token-prices','606':'capped','607':'uncapped','608':'locked','609':'unlocked','610':'locked','611':'unlocked','612':'partially-custom','613':'fully-custom','614':'fixed','615':'spread','616':'enabled','617':'disabled','618':'moderators','619':'interactable','620':'Set a name for your Token. No spaces should be used.','621':'Enter Name..','622':'Set a symbol for your Token. No spaces should be used.','623':'Enter Symbol...','624':'Set tags for indexing your Token.','625':'Enter Tag...','626':'Set an image for your Token.','627':'Use a smaller image.','628':'Preset the new tokens settings based on common use cases.','629':'📈 E-Token','630':'A fixed supply token used for managing stake and funding a workgroup.','631':'☝️ Paid Token','632':'A fixed supply token with a very large supply similar to END.','633':'🫰 Free Token','634':'A variable supply token whose supply increases as users mint from its exchange, similar to SPEND.','635':'🔧 Utility Token','636':'An uncapped, general purpose token which is bought and sold from its exchange.','637':'e-token preset has been applied.','638':'End token preset has been applied.','639':'Spend token preset has been applied.','640':'Utility token preset has been applied.','641':'Next.','642':'Previous.','643':'Token Supply(For Capped Tokens)','644':'The supply of a capped token available for buying (for capped tokens)','645':'Token Supply','646':'tokens','647':'Recommended: 100,000,000e2','648':'Buy Limit','649':'The maximum amount of tokens that can be bought in one transaction.','650':'Trust Fee','651':'Proportion or percentage fee enforced on all contract spending that takes place using your new token.','652':'Recommended: 3.5%','653':'Sell Limit','654':'The maximum amount of your new token a sender can sell in a transaction.','655':'Create a custom E5 token.','656':'Set the token type.',
        '657':'Capped token (with limited supply) or uncapped token (with unlimited supply)','658':'Minimum Time Between Swap','659':'The minimum amount of time a sender has to wait between making a swap for a given token.','660':'Trust Fee.','661':'Proportion or percentage fee enforced on all contract spending that takes place using token.','662':'Recommended: 3.5%','663':'Minimum Transactions Between Swap','664':'The minimum number of transactions sender has to make between swaps for your new token.','665':'transactions','666':'Minimum Blocks Between Swap','667':'The minimum number of blocks sender has to wait between making a swap for your new token.','668':'blocks','669':'Minimum Entered Contracts Between Swap','670':'The minimum amount of contracts sender should enter before interacting with your new exchange again.','671':'Minimum Transactions For First Buy','672':'The minimum number of transactions sender has to make to buy/sell your new token for the first time.','673':'contracts','674':'Minimum Entered Contracts For First Buy.','675':'The minimum number of contracts sender should have entered before first buy.','676':'Unlocked Liquidity','677':'If set to unlocked, You have direct access to the token exchanges liquidity','678':'Recommended: unlocked','679':'Unlocked Supply','680':'If set to unlocked, you can mint more of the token outside the exchange.','681':'Recommended: unlocked','682':'Fully Custom','683':'If set to fully-custom, you have full access to the token exchanges configuration','684':'Recommended: fully-custom','685':'Block Limit(For Uncapped Spend Tokens)','686':'The maximum amount of your new token that can be minted before the active mint limit is reduced using its internal block halfing proportion.','687':'Block Limit.','688':'Recommended: ','689':'Halving type (for Uncapped Spend Tokens)','690':'If set to spread, each minter receives a slightly less ammount than the previous minter in a given block.','691':'Recommended: Spread','692':'Maturity Limit(For Uncapped Spend Tokens)',
        '693':'Amount of your token used in calculating the active block limit.','694':'Maturity Limit','695':'Internal Block Halving(For Uncapped Spend Tokens)','696':'Proportion or percentage used in reducing the amount of spend that a sender can mint based on the block limit relative to the current block mint total.','697':'Internal Block Halving Proportion','698':'Recommended: 40% - 51%','699':'Block Limit Reduction(For Uncapped Spend Tokens)','700':'Proportion or percentage used in reducing the active block limit reduction proportion between blocks if the block limit is exceeded in current block.','701':'Block Limit Reduction Proportion','702':'Recommended: 65% - 91%','703':'Block Reset Limit(For Uncapped Spend Tokens)','704':'The maximum number of blocks that are counted while reseting active block limit reduction proportion value when multiple blocks have passed without a mint event taking place.','705':'Block Reset Limit','706':'Recommended: 3','707':'Block Limit Sensitivity (for Uncapped Spend Tokens)','708':'The sensitivity of your new exchange to increasing demand','709':'Recommended: 2','710':'Exchange Ratio X','711':'The buy output exchange ratio X for your new token','712':'Exchange Ratio X:Y',
        '713':'Exchange Ratio Y','714':'The buy input exchange ratio Y for your new token','715':'Access Rights','716':'If enabled, access to the exchange will be restricted to moderators and specified accounts','717':'Exchange Authority ID','718':'The account set to control the exchange','719':'Set Exchange Authority ID','720':'Trust Fee Target ID','721':'The account set to receive trust fee when collected from contract spend actions','722':'Set Trust Fee Target ID','723':'My Account','724':'Account','725':'Moderator ID','726':'Moderator ID','727':'Set the account id for your targeted moderator.','728':'Add Moderator','729':'Please put a valid account ID.','730':'Added the account as a moderator.','731':'Account ID','732':'Interactable ID','733':'Set the account id for your targeted account, and expiry time for their interactability','734':'Add Interactable Account','735':'Please put a valid account id','736':'Added interactable account.','737':'Exchange ID','738':'The an exchange by its id, then the desired price and click add.','739':'Price.','740':'Add Price.','741':'Please put a valid exchange ID.','742':'Please put a valid amount.','743':'You cant use the same exchange twice','744':'Added your set price.','745':'Add some tags first.','746':'Please add a name for your token.','747':'Please add a symbol for your token.','748':'That token name is too long.','749':'That token name is invalid.','750':'That token symbol is invalid.','751':'','752':'That token symbol is already in use.','752a':'That token symbol is too long.','752b':'spend-simulator','752c':'control',
        '752d':'config','752e':'Mint Volume.','752f':'The simulated mint volume to be used.','752g':'Simulated Block Limit Sensitivity','752h':'The sensitivity of the simulated exchange to increasing demand.','752i':'Simulated Internal Block Halving','752j':'Simulated Block Limit Reduction','752k':'Simulated Block Reset Limit','752l':'Simulated Mint Limit.','752m':'Simulated Block Limit.','752n':'Simulated Maturity Limit','752o':'Simulated Halving Type.','752p':'Simulate a Spend token based on a custom configuration of your choice.','752q':'Chart containing the total supply of the simulated token over simulated time.','752r':'Simulator Block Time.','752s':'Simulator Block Number.','752t':'Simulator Active Block Limit Reduction Proportion.','752u':'Total Minted For Current Block','752v':'Simulated Total Supply.','752w':'Pause/Play.','752x':'Reset.','752y':'Pause, Start or Resume the simulator with the set configuration.','752z':'Stop and Reset the simulator.', '752aa':'Simulator Started.','752ab':'Simulator Paused.','752ac':'Simulator Resumed.','752ad':'Simulator Stopped','752ae':'Mint Rate','752af':' mints per second', '752ag':'The simulator configuration has been applied to your new token.', '752ah':'Apply Configuration','752ai':'Set and apply the simulator`s configuration in your new token.', '752aj':'Simulated Block Time.', '752ak':'Set the simulated block time below.',
        
        /* edit pages */
        '753':'edit-channel','754':'unlocked','755':'locked','756':'tokens','757':'Add some tags first.','758':'Add a title fro your job post.','759':'That title is too long.','760':'job','761':'edit-token','762':'edit-channel','763':'edit-contractor','764':'edit-job','765':'edit-post','766':'edit-storefront-item','767':'edit-token', '767a':'Take down post.', '767b':'If set to taken-down, your post will not be visible to others except for yourself.', '767c':'taken-down',
        
        /* archive proposals page */
        '768':'archive','769':'object','770':'archive-object','771':'Archive your specified proposal ID:','772':'The number of participants in the proposal/contract.','773':'End Bounty Balance','774':'Spend Bounty Balance','775':'Bounty Exchanges','776':'Specify Bounty Exchange to collect the proposals remaining balance','777':'Target Exchange ID...','778':'Add Bounty Exchange.','779':'Please put a valid exchange ID.','780':'You cant include the same exchange more than once.','781':'Exchange Added.','782':'Default depth 0',
        
        /* submit proposal page */
        '783':'submit','784':'proposal','785':'submit-proposal','786':'The consensus results are shown below.','787':' WAIT votes.','788':' YES votes.','789':' NO votes.','790':'Proposal Expiry time.','791':'Proposal expiry time from now.','792':'Proposal Submit Expiry time.','793':'Proposal submit expiry time from now.','794':'You cant submit this proposal yet.','795':'You cant submit this proposal.',
        
        /* vote proposal page */
        '796':'vote','797':'proposal','798':'vote','799':'bounties','800':'wait','801':'yes','802':'no','803':'Cast your vote in proposal ID: ','804':'Your On-Chain recorded vote.','805':'Voter Weight Exchange.','806':'Voter Weight Balance.','807':'units','808':'None','809':'Yes','810':'Wait','811':'No','812':'End Bounty Balance','813':'Spend Bounty Balance','814':'Targeted Bounty Exchanges','815':'Specify which exchanges you wish to collect bounty from. You can only collect bounty while voting for the very first time.','816':'Target Exchange ID...','817':'Add Bounty Exchange','818':'Please put a valid exchange ID.','819':'You cant include the same exchange more than once.','820':'Bounty Exchange ID: ',
        
        /* cancel subscription page */
        '821':'cancel-subscription','822':'cancel','823':'subscription','824':'Cancel the subscription ID: ','825':'Remaining Subscription Time','826':'Time Units To Cancel','827':'Token ID: ','828':'Please set a valid time unit amount.','828a':'Credit Amounts.','828b':'Heres everything youll be getting for your cancellation.','828c':'Time Unit.','828d':'Minimum Cancellable Balance Amount.','828e':' Time Units.', '828f':'You cant cancel that much. Theres a minimum number of time units thats supposed to remain.',
        
        /* collect subscription page */
        '829':'collect-subscription','830':'collect','831':'subscription','832':'payments','833':'Collect token payments for the subscription ID: ','834':'Total Collectible Time','835':'Total Collectible Time Units','836':'Token ID: ','837':'Account ID: ','838':'Collectible time: ','839':'You cant collect no time units.',
        
        /* modify subscription page */
        '840':'modify-subscription','841':'modify','842':'subscription','843':'authority','844':'Make changes to the configuration of the subscription ID: ','845':'units','846':'Add Change','847':'Target ID...','848':'Current ','849':'Current Value','850':'Reconfiguration action added.','851':'Please put a valid account ID.','852':'position','853':'Target ID','854':'My Account','855':'Main Contract','856':'Burn Account','857':'Account','858':'Contract ID 2','859':'Account ID 0','860':'Reconfiguration action removed.','861':'Please add some reconfiguration actions first.','861a':'prices','861b':'Edit subscription prices','861c':'Change the prices of your subscription','861d':'','861e':'You cant modify a subscriptions price if its cancellable.','861f':'Modify Target','861g':'','861h':'',
        
        /* pay subscription page */
        '862':'pay-subscription','863':'pay','864':'subscription','865':'Pay for the subscription ID: ','866':'Time Unit','867':'Time Units','868':'Total Debit Amount','869':'The amount youll pay for the subscription payment is shown below','870':'The amounts you have available for paying the subscription.','871':'Your balances.','872':'Token ID: ','873':'Minimum Buy Amount.','874':'time-units','875':'Maximum Buy Amount','876':'Set a valid time unit amount.','877':'The amount youve set is less than the minimum requirement.','878':'The amount youve set exceeds the maximum that you can pay for.','879':'Your token balance is insufficient for that time unit purchase.','879a':'','879b':'Set Minimum Amount.','879c':'','879d':'','879e':'','879f':'',
        
        /* authmint page */
        '880':'authmint','881':'authority','882':'mint','883':'token','884':'Auth-Mint your token ','885':' for a specified target.','886':'Set the recipient of the authmint action.','887':'Account ID','888':'Recipient','889':'Set the amount to authmint.','890':'Action Amount.','891':'Transfer Amount.','892':'Add Action.','893':'Please put a valid account ID.','893a':'Please put a valid amount.','894':'Auth-mint action added.','895':'Target Recipient ID: ','896':'Action removed.','897':'You cant stack no changes.',
        
        /* depthmint page */
        '898':'depthmint','899':'depth','900':'Depth-Mint your token ','901':' for a specified target.','902':'Set the recipient of the depth-mint action.','903':'Recipient','904':'Account ID','905':'Set the amount to depth-mint.','906':'Depth-mint action added.',
        
        /* exchange transfer page */
        '907':'exchange-transfer','908':'exchange','909':'transfer','910':'Run an exchange transfer for: ','911':'Target Receiver','912':'Set the account set to receive the token amounts.','913':'Target Receiver...','914':'Token Targets','915':'Set the targeted token ID your transfering from the exchange.','916':'Token Target ID...','917':'Targeted Amount.','918':'units','919':'Add Transfer Action.','920':'Please put a valid receiver ID.','921':'Please put a valid token ID.','922':'Please put a valid amount.','923':'Transfer action added.','924':'Receiver ID: ','925':'Transfer action removed.','926':'End Token','927':'Spend Token','928':'Exchange ID 3','929':'Exchange ID 5','929a':'The amounts youve set exceed the exchanges balance.',
        
        /* freeze-unfreeze page */
        '930':'freeze/unfreeze','931':'freeze','932':'unfreeze','933':'account','934':'Freeze or Unfreeze the token ','935':' for a specified set of accounts.','936':'Set the account to be frozen or unfrozen.','937':'Account ID','938':'Set the amount to freeze or unfreeze.','939':'Action Amount.','940':'Freeze/Unfreeze Amount','941':'Add Action','942':'Please put a valid account ID.','943':'Please put a valid amount.','944':'Action added.','945':'Action removed.','945a':'Accounts balance.','945b':'Accounts frozen balance.', '945c':'The amount youve set exceeds the specified accounts frozen balance.','945d':'Target Account ID: ','945e':'Set Maximum Amount.',
        
        /* mint-dump token page */
        '946':'buy-sell','947':'mint','948':'dump','949':'mint-buy','950':'dump-sell','951':'Buy or Sell the specified token','952':'Your Balance','953':'Set the recipient of the mint/dump action.','954':'Recipient of action','955':'Recipient ID','956':'Set the amount(the aggregate of the buy tokens) of tokens your submitting for the mint-buy action.','957':'Amount for action','958':'Amount','959':'Buy Limit','960':'Sell Limit','961':'Set Maximum','962':'The amount you get when selling the token','963':'Receive Amount.','964':'Token ID: ','965':'The amount youll probably get from the buy action','966':'Receive Amount.','967':'Amount set to submit for the buy action.','968':'Fees for Action','969':'The amounts you have available for buying the token.','970':'Your balances','971':'My Account','972':'Account','973':'The transaction will revert if you dont receive your tokens specified in the range set below.','974':'Upper Lower Bounds (optional)','975':'Upper Bound','976':'Lower Bound','977':'Please put a valid account ID.','978':'Please put a valid amount.','979':'That amount is too low.','980':'You dont have enough tokens for that sell action.','981':'You dont have enough tokens to buy that much.','982':'You cant interact with the same exchange twice in one run.','983':'The amount youve set exceeds the maximum buy amount enforced by the exchange.','984':'The amount youve set exceeds the maximum sell amount enforced by the exchange.','985':'You need to enter ','986':' more contracts first.','987':'You need to make ','988':' more runs first.','989':'You need to wait ','990':' more blocks.','991':'You need to wait about ','992':' first.','993':'You need to make ','994':' more runs first.','995':'You need to enter ','996':' more contracts first','996a':'tokens','996b':'Set the amount of tokens your submitting for the dump-sell action','996c':'Transaction Impact.','996d':'The impact proportion your transaction will have in the exchanges liquidity.','996e':'proportion.','996f':'Exchanges Liquidity.','996g':'The tokens the exchange has available to send to you after the sell action.','996h':'The exchange doesn\'t have enough liquidity to fulfil that sell.','996i':'','996j':'','996k':'','996l':'',
        
        /* modify token page */
        '997':'modify-token','998':'modify','999':'token','1000':'fixed','1001':'spread','1002':'Make changes to the configuration of the token ID: ','1003':'units','1004':'Add Change','1005':'Target ID...','1006':'Current ','1007':'Current Value','1008':'Halving type','1009':'Block Limit Sensitivity','1010':'Reconfig action added.','1011':'Please put a valid account ID.','1012':'Modify Target','1013':'proportion','1014':'duration','1015':'value: ','1016':'target ID','1017':'Reconfig action removed.','1017a':'Edit token prices','1017b':'Change the prices of your token exchange','1017c':'You cant modify your tokens price if its not fully custom.','1017d':'','1017e':'','1017f':'',
        
        /* transfer token page */
        '1018':'transfer','1019':'send','1020':'Transfer the specified token.','1021':'Your Balance','1022':'Your Balance after Set Transfers','1023':'Set the recipient of the transfer action.','1024':'Recipient of action.','1025':'Recipient ID','1026':'Amount to transfer to the speicified target account.','1027':'Amount for Transfer.','1028':'Set Maximum','1029':'Add Transaction','1030':'Please put a valid account ID.','1031':'Please put a valid amount.','1032':'You dont have enough tokens to add that transaction.','1033':'','1034':'Transaction added.','1035':'Recipient account: ','1036':'Transaction removed.','1037':'Transfer Amount',
        
        /* add comment page */
        '1038':'Detailed message.','1039':'Enter Message...','1040':'You need to make at least 1 transaction to participate.','1041':'Type something.','1042':'Message added to stack.','1042a':'Pick an award tier you wish to send to the comment\'s author.','1042b':'font','1042c':'size','1042d':'Your balance in SPEND.','1042e':'That message is inconveniencingly long for its size.','1042f':'Gray stages images and black stages a pdf. Then tap to remove.','1042g':'text','1042h':'markdown','1042i':'','1042j':'','1042k':'','1042l':'','1042m':'',
        
        /* add to bag page */
        '1043':'add-to-bag','1044':'add','1045':'bag','1046':'storefront-item','1047':'items','1048':'Item Variants','1049':'Pick the variant you want to purchase','1050':'Amount in ','1051':'Purchase Amounts','1052':'This is the final amount for the price of the items your buying.','1053':'Number of Units','1054':'','1055':'The most you can add is ','1056':'Pick one variant first.','1057':'Please specify an amount of the item your adding.','1058':'Transaction added to stack.','1058a':'Bag City','1058b':'You may specify your location city for contractors.','1058c':'You need to set your city for contractors.','1058d':'Delivery Location','1058e':'You\'ll need to specify a descriptive delivery location for your bag.','1058f':'Amount...','1058g':'You need to specify a pick up location for your new bag.','1058h':'Set Previous Location.','1058i':'Custom Specifications (Optional)','1058j':'Custom Specifications.','1058k':'You can specify some custom details for the order being placed.','1058l':'Some purchasing options have been specified. Please set at your discretion.','1058m':'Selected Option Fees.','1058n':'Below is the extra price for the selected options youve chosen.','1058o':'','1058p':'','1058q':'','1058r':'','1058s':'','1058t':'',
        
        /* clear purchase page */
        '1059':'verify-signature','1060':'generate-signature','1061':'Generate Fulfilment Signature','1062':'Create a signature to finalize the fulfilment transaction.','1063':'Quantity: ','1064':'Sender Account ID: ','1065':'Signature','1066':'Copy to Clipboard','1067':'Copied signature to clipboard.','1068':'Receive Fulfilment Signature','1069':'Receive a fulfilment signature to verify the items delivery.','1070':'Variant ID: ','1071':'Quantity: ','1072':'Sender Account ID: ','1073':'Paste Signature','1074':'Paste the signature in the input field below.','1075':'Open Scanner','1076':'Scan for the signature using a built in scanner.','1077':'Please paste a signature to finish here.','1078':'The signature you received is invalid.','1078a':'Qr Code',
        
        /* confirm run page */
        '1079':'Transaction Confirmation','1080':'Are you sure you want to make this run?','1081':'','1082':'','1083':'Transaction Stack Size','1084':'Gas Limit','1085':'gas','1086':'Estimated Gas to be Consumed','1087':'Gas Price in Gwei','1088':'Gas Price in wei','1089':'Wallet Impact','1090':'proportion','1091':'Run Expiry Duration','1092':'Run Transactions','1092a':'confirm-run','1092b':'transactions',
        
        /* direct purchase page */
        '1093':'direct-purchase','1094':'direct','1095':'purchase','1096':'buy','1097':'Fulfilment Location','1098':'Set the delivery location, and be sure to be specific to avoid shipping issues','1099':'Shipping Details...','1100':'Item Variants','1101':'Pick the variant you want to purchase','1102':'Amount in ','1103':'Purchase Amounts','1104':'This is the final amount for the price of the items your buying.','1105':'Your balances','1106':'This is how much you have available for the direct purchase.','1107':'Number of Units','1108':'Number of Units','1109':'Pick one variant first.','1110':'Please specify an amount of the item your adding.','1111':'The most you can add is ','1112':'Please specify a shipping adress.','1113':'Your balance is insufficient to fulfil that direct purchase.','1114':'items', '1114a':'Shipping Fee.', '1114b':'This is the final amount for the shipping fee for the items your buying.', '1114c':'Custom Specifications.', '1114d':'You can also include custom requirements for the item variant your ordering such as color, material and such.', '1114e':'Custom Specifications (eg. email or phone number)', '1114f':'', '1114g':'', '1114h':'', '1114i':'',
        
        /* filter section */
        '1115':'search-filter','1116':'You can search an object by its ID or its title.','1117':'Enter Object ID or Title...','1118':'Search','1119':'You can filter objects using their tags.','1120':'Enter tag...','1121':'Add','1122':'','1123':'Clear','1124':'Type something.','1125':'Enter one word.', '1125a':'Search filters cleared.','1125b':'Clear Search Filters.',
        
        /* fulfil bag page */
        '1126':'bag-response','1127':'respond','1128':'fulfil','1129':'bag','1130':'contract','1131':'expiry-time','1132':'amount','1133':'prepaid','1134':'postpaid','1135':'Select the contract youll be using. If you have no contracts, first create one then youll see it here.','1136':'block','1137':'Select an expiry time for your fulfilment application.','1138':'Prepaid or Postpaid','1139':'Set the payment option you prefer for the application','1140':'Estimated Delivery time','1141':'Set the estimated amount of time youll take to deliver the items in the bag','1142':'Estimated Delivery time','1143':'Fulfilment Fee.','1144':'Specify your fulfilment fee. Select an exchange by its id, then the desired price and click add.','1145':'Price','1146':'tokens','1147':'Add Price','1148':'Please put a valid exchange ID.','1149':'Please put a valid amount.','1150':'Added price.','1151':'Account 3','1152':'Account 5','1153':'You need to pick a contract first.','1154':'You cant set an expiry time thats less than fifteen minutes from now.',
        
        /* give award page */
        '1155':'award','1156':'give','1157':'reward','1158':'message','1159':'award-tier','1160':'custom-amounts','1161':'Add a award message for your new award. Mind the character limit.','1163':'Type something...','1164':'Award Tiers','1165':'Pick an award tier you wish to send to the post author.','1166':'Total Amount','1167':'The total amount of SPEND youll be including in the award.','1168':'Total amount of SPEND','1169':'Your Spend Balance','1170':'Multiplier','1162':'Multiply the award your sending to the post author.','1171':'Gold','1172':'Diamond','1173':'Silver','1174':'Oil','1175':'Wood','1176':'Beer','1177':'Corn','1178':'Beef','1179':'Chocolate','1180':'Exchange ID','1181':'Select an exchange by its id, then the desired amount and click add.','1182':'Amount','1183':'tokens','1184':'Add Amount','1185':'Please put a valid exchange ID.','1186':'Please put a valid amount.','1187':'Added amount.','1188':'Account 3','1189':'Account 5','1190':'Please pick an award tier.','1191':'You have to leave a message.','1192':'That message is too short.','1193':'That message is too long.','1194':'You dont have enough Spend to give that award.','1195':'One of your token balances is insufficient for the award amounts specified.',
        
        /* homepage */
        '1196':'jobs','1197':'contracts','1198':'contractors','1199':'proposals','1200':'subscriptions','1201':'mail','1202':'all','1203':'viewed','1204':'created','1205':'applied','1206':'entered','1207':'paid','1208':'received','1209':'sent','1210':'active','1211':'my-proposals','1212':'E5s','1213':'posts','1214':'channels','1215':'storefront','1216':'bags','1217':'ethers ⚗️','1218':'ends ☝️','1219':'spends 🫰','1220':'info ℹ️','1221':'blockexplorer 🗺️','1222':'pinned','1223':'E5 Contracts','1224':'Explore','1225':'Deployed E5s','1226':'Wallet','1227':'Coin & Tokens','1228':'Stack','1229':'Runs on e','1230':'','1231':'local','1232':'language','1233':'international','1234':'First set your wallet to follow that tag.','1235':'Bag Pinned.','1236':'Bag Unpinned.','1237':'Channel Pinned.','1238':'Channel Unpinned.','1239':'Item Pinned.','1240':'Item Unpinned.','1241':'Post Pinned.','1242':'Post Unpinned.','1243':'Subscription Pinned.','1244':'Subscription Unpinned.','1245':'Proposal Pinned.','1246':'Proposal Unpinned.','1247':'Contractor Pinned.','1248':'Contractor Unpinned.','1249':'Contract Pinned.','1250':'Contract Unpinned.','1251':'Job Pinned.','1252':'Job Unpinned.','1253':'Confirmation.','1254':'Add To Contacts Confirmation.','1255':'Confirm that you want to add the account ','1256':' to your contacts','1257':'Add to Contacts','1258':'E5tokens','1259':'externals','1260':'stack-data','1261':'settings-data','1262':'account-data','1263':'events','1264':'moderator-events','1264a':'That link is unavailable.','1264b':'upcoming', '1264c':'job-notifications', '1264d':'contract-notifications', '1264e':'contractor-notifications', '1264f':'mail-notifications','1264g':'storefront-notifications','1264h':'bag-notifications','1264i':'wallet-notifications','1264j':'coins 🪙','1264k':'audioport','1264l':'acquired','1264m':'playlists','1264n':'Audiopost Pinned','1264o':'Audiopost Unpinned','1264p':'videoport','1264q':'Videopost Pinned','1264r':'Videopost Pinned','1264s':'nitro','1264t':'bought','1264u':'Nitro-post Pinned','1264v':'Nitro-post Unpinned','1264w':'Total Audioposts, Videoposts and Nitros created','1264x':'audiopost-items','1264y':'videopost-items','1264z':'nitro-items','1264aa':'main-contract','1264ab':'Wallet Value','1264ac':'The total worth of all your wallet contents.','1264ad':'Search by ID or Title..','1264ae':'my-responses','1264af':'','1264ag':'','1264ah':'',
        
        /* moderator page */
        '1265':'access-rights-settings','1266':'access','1267':'rights','1268':'settings','1269':'moderators','1270':'access-rights','1271':'block-accounts','1272':'private','1273':'public','1274':'Moderator','1275':'Add or Remove a moderator by their account ID.','1276':'Account ID...','1277':'Add/Remove Moderator','1278':'Enable/Disable Access Rights','1279':'Enable or Disable access rights to make the object public or private.','1280':'Current access rights settings.','1281':'Enable/Disable','1282':'Revoke Authors Moderator Privelages.','1283':'Click Disable to disable moderator privelages for the author of the object. This action cannot be undone.','1284':'Revoke','1285':'Access Rights: Enabled','1286':'Access Rights: Disabled','1287':'Please put a valid account ID.','1288':'Action added.','1289':'The thing is already private.','1290':'The thing is already public.','1291':'You cant do that twice.','1292':'Access Rights','1293':'Add/Remove an interactable account by their account ID.','1294':'Time from now','1295':'Add account setting','1296':'Please put a valid account ID.','1297':'Block Accounts','1298':'Deny an account access to your object','1299':'Add Blocked Account','1291e':'Please put a valid account ID.','1292e':' action: ','1293e':'Target: ','1294e':' action.','1295e':'Target: Revoke Privelages','1296e':', time from now: ','1297e':', time from now: ','1298e':'Action removed.','1299e':'Account','1300':'You cant stack no changes.', '1300a':'You cant add the same action twice.',
        
        /* post preview page */
        '1301':'Subscription Locked','1302':'You need to pay those subscriptions first before you can view the full post.','1303':'Subscriptions to pay.','1304':'Pin the post to your feed','1305':'Pin Post','1306':'Pin/Unpin Post', '1306a':'Pin the Audiopost to  your feed.','1306b':'Pin Audiopost','1306c':'Pin/Unpin Audiopost','1306d':'Pin Videopost','1306e':'Pin the Videopost to  your feed.','1306f':'Pin/Unpin Videopost','1306g':'','1306h':'','1306i':'','1306j':'','1306k':'','1306l':'','1306m':'',
        
        /* respond to job page */
        '1307':'job-response','1308':'respond','1309':'job','1310':'ad','1311':'contract','1312':'expiry-time','1313':'amount','1314':'prepaid','1315':'postpaid','1316':'Select the contract youll be using. If you have no contracts, first create one then youll see it here.','1317':'block','1318':'Select an expiry time for your application','1319':'Prepaid or Postpaid','1320':'Set the payment option you prefer for the application.','1321':'Your preferred fee.','1322':'Set how much you want for the job. Select an exchange by its id, then the desired price and click add.','1323':'','1324':'Price','1325':'tokens','1326':'Add Price','1327':'Please put a valid exchange ID.','1328':'Please put a valid amount.','1329':'You cant use the same exchange twice.','1330':'Added price.','1331':'You need to pick a contract first.','1332':'You cant set an expiry time thats less than fifteen minutes from now.','1332a':'Custom Specifications.', '1332b':'You can also include extra information for the job your applying for.', '1332c':'specs', '1332d':'Exchange ID', '1332e':'main', '1332f':'history','1332g':'','1332h':'','1332i':'','1332j':'','1332k':'','1332l':'','1332m':'',
        
        /* rpc settings page */
        '1333':'rpc-settings','1334':'Add a RPC provider for making transactions.','1335':'Enter Node Url...','1336':'Add','1337':'Type something.','1338':'Dont use whitespaces','1339':'That url is invalid.','1340':'That provider has already been added.','1341':'RPC url added.','1342':'Speed unkown.',
        
        /* scan qr page */
        '1343':'Finish Scan','1344':'Scan something first.',
        
        /* send job request page */
        '1345':'Set some details for your new Job request. It should be task specific.','1346':'Enter Details...','1347':'Select the contract youll be using. If you have no contracts, first create one then youll see it here.','1348':'block','1349':'Select an expiry time for your job request.','1350':'Prepaid or Postpaid','1351':'Set the payment option you prefer for the job request.','1352':'Requested Pay','1353':'Select an exchange by its id, then the desired price and click add','1354':'Exchange ID','1355':'Price','1356':'tokens','1357':'Add Pay.','1358':'Please put a valid exchange ID.','1359':'Please put a valid amount.','1360':'Added price.','1361':'Account 3','1362':'Account 5','1363':'job-request','1364':'send','1365':'job','1366':'request','1367':'You cant set an expiry time thats less than fifteen minutes from now.','1368':'You need to set a description for the job request.',
        
        /* send receive ether page */
        '1369':'send','1370':'receive','1371':'Send Ether using the address shown below.','1372':'Sender Wallet Address','1373':'Receiver Wallet Address','1374':'Set Receiver Address Here','1375':'Balance in Wei','1376':'Balance in Ether','1377':'Transactions (2.3M Gas average)','1378':'transactions','1379':'Gas Price','1380':'Gas Price in Gwei.','1381':'Amount to Send.','1382':'Set the amount to send in the number picker below.','1383':'Picked Amount In Ether and Wei.','1384':'Set Maximum','1385':'Transaction Gas Price','1386':'Set the gas price for your transaction below.','1387':'Picked Gas Price.','1388':'Send Ether to Address','1389':'Maximum amount set.','1390':'Open Scanner','1391':'Scan for an address using a built in scanner','1392':'Scan','1393':'Send Ether Confirmation','1394':'Confirm that you want to send Ether to the targeted recipient','1395':'Picked Amount In Ether and Wei','1396':'Sender Wallet Address','1397':'Receiver Wallet Address','1398':'Send Ether','1399':'Value in Ether and Wei ','1400':'Receive Ether using the address shown below','1401':'Wallet Address','1402':'Copy to Clipboard','1403':'Copied to clipboard.','1404':'Your ether balance is insufficient to fulfil that transaction.','1405':'running your send transaction...','1406':'Please set a valid amount.','1407':'Please set a valid recipient.','1407a':'Max Priority Fee per Gas.', '1407b':'Set the max priority fee per gas for your transaction below.', '1407c':'Max Fee per Gas.', '1407d':'Set the maximum amount of gas fee your willing to pay for your transaction below.', '1407e':'The base fee and your selected max priority per gas amount exceeds your selected max fee per gas amount.', '1407f':'Confirmation.', '1407g':'Picked Max Priority Gas Price.', '1407h':'Picked Max Fee Gas Price.', '1407i':'Picked Amount.', '1407j':'Picked Transaction fee.', '1407k':'', '1407l':'', '1407m':'',
        
        /* stack */
        '1408':'stack 📥','1409':'history 📜','1410':'settings ⚙️','1411':'wallet 👛','1412':'alias 🏷️','1413':'contacts 👤','1414':'blacklisted 🚫','1415':'','1416':'all-time','1417':'light','1418':'dark','1419':'right','1420':'left','1421':'sluggish','1422':'slow','1423':'average','1424':'fast','1425':'hide','1426':'all','1427':'filtered','1428':'enabled','1429':'Transaction Gas Limit','1430':'units','1431':'The gas budget for your next run with E5. The default is set to 5.3 million gas. You can auto-set the value to be the estimated gas to be comsumed.','1432':'Auto-Set Gas Limit','1433':'Transaction Gas Price','1434':'The gas price for your next run with E5. The default is set to the amount set by the network.','1435':'','1436':'','1437':'Run Expiry Duration','1438':'The duration of time after which your transaction will be reverted if it stays too long in the mempool. The default duration used is 1 hour.','1439':'Estimated Time.','1440':'Age: ','1441':'Gas Consumed.','1442':'Clear Transactions.','1443':'Confirm Action.','1444':'Confirm.','1445':'Confirm Clear Stack Action.','1446':'Stack ID: ','1447':'Type','1448':'Balance in Wei','1449':'Balance in Ether','1450':'Number of Stacked Transactions','1451':'Storage Space Utilized','1452':'Estimated Gas To Be Consumed','1453':'Wallet Impact','1454':'Gas Price','1455':'Gas Price in Gwei','1456':'Run ','1457':' Transactions','1458':'Gas Prices','1459':'The gas price data recorded on your selected E5 over time.','1460':'Y-Axis: Gas Prices in Gwei','1461':'X-Axis: Time','1462':' ago','1463':'Mempool Metrics','1464':'Below is some useful information about the state of the mempool for your selected E5s ether.','1465':'Mempool size','1466':'Top 20% Average','1467':'The average gas price offered for the top 20% transactions set to be included in the next blocks.','1468':'Gas prices in wei','1469':'Gas prices in gwei','1470':'Bottom 20% Average','1471':'The average gas price offered for the bottom 20% transactions least likely to be included in the next blocks.','1472':'Gas Price Average','1473':'The average gas price offered for all transactions in the mempool.','1474':'E5 Transactions Count','1475':'The total number of E5 transactions in the mempool and in the top 20% transactions set for the next set of blocks.','1476':'Total E5 Transaction Count',
        '1477':'Top 20% Transaction Count','1478':'E5 Mempool Dominance','1479':'Percentage of E5 transactions in the mempool, and in the top 20% transactions set for the next set of blocks.','1480':'E5 Dominance','1481':'E5 Top 20% Dominance','1482':'proportion','1483':'Value Transfer','1484':'The total amount of value transfer thats pending in the mempool.','1485':'Value in wei','1486':'Value in ether','1487':'Add some transactions first.','1488':'Value Transfer into E5','1489':'The total amount of ether going into E5 thats pending in the mempool.','1490':'That transaction gas limit is too low.','1491':'That transcaction is too large, please reduce your stack size.','1492':'Set a gas limit above ','1493':' gas','1494':'Calculating your stacks gas figure...','1495':'e is already running a transaction for you.','1496':'Running your transactions...','1497':'bag-response','1498':'accept-bag-application','1499':'direct-purchase','1500':'clear-purchase','1501':'bag-messages','1502':'storefront-messages','1503':'contractor','1504':'accept-job-request','1505':'job-request-messages','1506':'alias','1507':'unalias','1508':'re-alias','1509':'mail-messages','1510':'channel-messages','1511':'post-messages','1512':'job-response','1513':'accept-job-application','1514':'job-messages','1515':'proposal-messages','1516':'storefront-bag','1517':'That transaction gas limit is too low.','1518':'That transaction is too large, please reduce your stack size.','1519':'Set a gas limit above ','1520':' gas','1521':'Add some transactions first.','1522':'Issue With Run','1523':'Theres an issue with your Balance.','1524':'You need more ether to run your transactions.','1525':'Wallet Balance in Ether and Wei','1526':'Required Balance in Ether and Wei','1527':'','1528':'App Theme','1529':'Set the look and feel of E5.','1530':'Preferred E5','1531':'Set the E5 you prefer to use','1532':'Clear Browser Cache','1533':'Delete browser data such as your pins and viewed history.','1534':'Clear Cache','1535':'Preferred Refresh Speed','1536':'Set the background refresh speed for E5. Fast consumes more data.','1537':'Hide Masked Content','1538':'Hide masked content sent from your blocked accounts','1539':'Content Channeling','1540':'Set which channeling option your content and feed is directed to.','1541':'Content Filter','1542':'If set to filtered, the content including the tags you follow will be prioritized in your feed.',
        '1543':'Content Tabs','1544':'If set to enabled, tabs that help keep track of viewing history will be shown above an objects details.','1545':'Preserve State (cookies)','1546':'If set to enabled, the state of E5 including your stack and settings will be preserved in memory.','1547':'Stack Optimizer (Experimental)','1548':'If set to enabled, similar transactions will be bundled together to consume less gas during runtime.','1549':'Cache cleared.','1550':'Wallet Address','1551':'Wallet Seed','1552':'Set your preferred seed. Type a word then click add to add a word, or tap the word to remove','1553':'Enter word...','1554':'Wallet Salt','1555':'Set the preferred salt for your wallet','1556':'Wallet Thyme','1557':'Set the preferred thyme for your wallet','1558':'Set Wallet','1559':'Set your wallets seed.','1560':'Please set a salt.','1561':'Your wallet has been set.','1562':'Type something.','1563':'Enter one word.','1564':'Copied address to clipboard.','1565':'Add Contact','1566':'You can add a contact manually using their Contact ID.','1567':'Enter Account ID...','1568':'Add','1569':'That ID is not valid','1570':'','1571':'Please set your wallet first.','1572':'Copied ID to clipboard.','1573':'Add Blocked Account','1574':'Block an accounts content from being visible in your feed.','1575':'Enter Account ID...','1576':'That ID is not valid.','1577':'Please set your wallet first.','1578':'Reserve Alias','1579':'Reserve an alias for your account ID','1580':'Enter New Alias Name...','1581':'Reserve','1582':'alias','1583':'Stacked Alias','1584':'Alias Unknown','1585':'Alias: ','1586':'That alias is too long.','1587':'That alias is too short.','1588':'You need to make at least 1 transaction to reserve an alias.','1589':'That alias has already been reserved.','1590':'That word is reserved, you cant use it.','1591':'Unknown','1592':'Alias Unknown','1593':'Reserved ', '1593a':'auto', '1593b':'Wallet Balance in Ether and Wei.', '1593c':'Estimate Transaction Gas.', 
        '1593d':'🔔.Notifications', '1593e':'My Notifications.', '1593f':'All your important notifications are shown below.', '1593g':'Run ID: ','1593h':'Special characters are not allowed.','1593i':'Homepage Tags Position.','1593j':'If set to bottom, the Homepage Tags position will be at the bottom instead of the top.','1593k':'top','1593l':'bottom','1593m':'App Font.','1593n':'You can change your preferred font displayed by the app.','1593o':'Auto-Skip NSFW warning.','1593p':'If set to enabled, you wont be seeing the NSFW warning while viewing NSFW posts in the explore section.','1593q':'Max Priority Fee Per Gas.', '1593r':'The max priority fee per gas(miner tip) for your next run with E5.', '1593s':'Max Fee per Gas.', '1593t':'The maximum amount of gas fee your willing to pay for your next run with E5.', '1593u':'Name or Account ID...', '1593v':'Watch Account.', '1593w':'Track send and receive transactions for a specified account from here.', '1593x':'Watch 👁️','1593y':'Watch.', '1593z':'Loading...', '1593aa':'You cant reserve more than one alias in one run.','1593ab':'Sign Some Data.','1593ac':'Generate a signature of some data to have your account verified externally.','1593ad':'Data...','1593ae':'Sign Data.','1593af':'Please type something.','1593ag':'Please select an E5.','1593ah':'Copy to Clipboard.','1593ai':'Copied Signature to Clipboard.','1593aj':'signatures','1593ak':'sign','1593al':'verify','1593am':'Please pick an E5.','1593an':'Scan','1593ao':'That text is too long to sign.','1593ap':'Signature...','1593aq':'Verify Signature.','1593ar':'Please paste a signature.','1593as':'That data is too long.','1593at':'That signature is invalid.','1593au':'Signer Address.','1593av':'Signer Account.',
        '1593aw':'Verify  a Signature.','1593ax':'Derive an account and address from some data and its corresponding signature.','1593ay':'Signer Alias','1593az':'Storage Configuration','1593ba':'storage 💾','1593bb':'Connect your account to a third party storage provider to store larger files.','1593bc':'File Upload Limit.','1593bd':'zaphod@beeblebrox.galaxy','1593be':'Note: You have to set this in every new device you use, and storage permissions (cookies) will be enabled automatically.','1593bf':'Verify','1593bg':'That email is not valid.','1593bh':'Type something.','1593bi':'Verification email sent.','1593bj':'Upload a file to storage.','1593bk':'all','1593bl':'images','1593bm':'audio','1593bn':'video','1593bo':'Something went wrong with the upload.',
        '1593bp':'Upload Successful.','1593bq':'Uploading...','1593br':'Images','1593bs':'Audio Files.','1593bt':'Videos.','1593bu':'Total Storage Space Utilized.','1593bv':'Email Verified.','1593bw':'One of the files exceeds the current file size limit of ','1593bx':' ago.','1593by':'Preparing Files...','1593bz':'Transaction Gas Price in Gwei','1593ca':'Max Fee per Gas in Gwei.','1593cb':'Max Priority Fee Per Gas in Gwei.','1593cc':'audio-messages','1593cd':'pdf','1593ce':'PDFs','1593cf':' price set.','1593cg':'Slow','1593ch':'Average','1593ci':'Fast','1593cj':'Asap','1593ck':'Set Custom Ipfs Gateway','1593cl':'You can specify a custom gateway for serving all your content.','1593cm':'https://ipfs.io/cid','1593cn':'paste \'cid\' where the content cid would be used.','1593co':'That gateway link is not valid.','1593cp':'gateway set.','1593cq':'The url needs to include the keyword \'cid\'','1593cr':'gateway 🚧','1593cs':'Running...','1593ct':'video-messages','1593cu':'nitro-messages','1593cv':'web3.storage','1593cw':'nitro 🛰️','1593cx':'To see a nitro option here, first purchase storage from it in the nitro section.','1593cy':'The total space for all the selected files exceeds the amount of space youve acquired in the nitro node.','1593coz':'You need to select a nitro node first.','1593da':'Please wait a few moments for E5 to syncronize fully.','1593db':'Please wait a few moments for your selected node to come online.','1593dc':'something went wrong.','1593dd':'Preferred nitro storage option','1593de':'Set the nitro storage option you prefer to use for your files and posts. To see a nitro option, first buy storage from it in the nitro section.','1593df':'following 👥','1593dg':'Followed Moderators.','1593dh':'You can specify specific accounts you wish to moderate the content you see here in E5.','1593di':'Account ID or alias...','1593dj':'You need to specify an account first.','1593dk':'Youre already following that account.','1593dl':'You are now following that account.','1593dm':'Unfollow','1593dn':'You cant follow yourself.','1593do':'Account removed from your following list.','1593dp':'First make a transaction to remove that account.','1593dq':'Censor 🚫','1593dr':'Censor Keywords.','1593ds':'You can specify phrases, keywords and accounts you wish to not see any content from. The censored phrases will be applied to all accounts you moderate.','1593dt':'Keyword or phrase...','1593du':'Type something first.',
        '1593dv':'Youve already censored that keyword.','1593dw':'You are now censoring that keyword or phrase.','1593dx':'Keyword or phrase removed from your censored list.','1593dy':'Uncensor','1593dz':'Stop','1593ea':'Hide Audio Player Pip.','1593eb':'If set to hidden, the mini-player used to control audio playing in the background will be hidden.','1593ec':'hidden','1593ed':'zip','1593ee':'Zip Files.','1593ef':'USD','1593eg':'SAT','1593eh':'Wallet Value in USD.','1593ei':'Wallet Value in SATs','1593ej':'⚡ Beacon Node Online.','1593ek':'☠︎︎ Beacon Node Offline.','1593el':'Wallet Value Denomination','1593em':'Set the currency you wish to be displayed in your wallets value.','1593en':'Default Data Storage Option.','1593eo':'Set the defaut data storage option you prefer to use. If you set a nitro storage option above, the nitro option will take precedence.','1593ep':'Estimated Arweave to be consumed.','1593eq':'proportion','1593er':'Your Arweave balance is insufficient to make the transaction.','1593es':'Arweave usually takes about 15 to 20 minutes to finalize uploads.','1593et':'','1593eu':'','1593ev':'','1593ew':'','1593ex':'','1593ey':'','1593ez':'','1593fa':'','1593fb':'','1593fc':'',
        
        /* synchonizing page */
        '1594':'Synchronized.','1595':'Unsynchronized.','1596':'Synchronizing...','1597':'Peer to Peer Trust.','1598':'Unanimous Consensus.', '1598a':'Initializing...','1598b':'This app uses cookies. Please enable them in the settings page.','1598c':'For Securing all your Transactions.','1598d':'For spending your Money.','1598e':'','1598f':'',
        
        /* view application contract page */
        '1599':'accept-job-application','1600':'accept','1601':'application','1602':'applications-contract','1603':'The contract the applicant applied with is shown below.','1604':'Expiry time from now: ','1605':'Contract ID: ','1606':'Sender ID: ','1607':'Accept application','1608':'Accept the job application and enter their contract(This action cant be undone)','1609':'Accept and Enter','1610':'Applicants Requested Pay','1611':'Below is the applicants requested pay in their respective token denominations.','1612':'Block ID','1613':'Vote Bounty Split Proportion','1614':'Minimum End Bounty Amount','1615':'Max Enter Contract Duration','1616':'Auto Wait For All Proposals For All Voters','1617':'Proposal Modify Expiry Duration Limit','1618':'Can Modify Contract As Moderator','1619':'Can Extend Enter Contract At Any Time','1620':'Maximum Proposal Expiry Submit Expiry Time Difference','1621':'Bounty Limit Type','1622':'Contract Force Exit','1623':'Entry Fees','1624':' tokens used','1625':'Consensus Majority Proportion','1626':'Voter Weight Exchange','1627':'Your Voter Weight','1628':'units','1629':'Enabled','1630':'Disabled','1631':'Token ID: ','1632':'The application has already expired.','1632a':'Custom Specifications.','1632b':'contract-data','1632c':'proposals','1632d':'The proposals that have been sent to the contract are shown below.','1632e':'Submitted','1632f':'Un-submitted.', '1632g':'Status',        
        
        /* view bag application page */
        '1633':'accept-bag-application','1634':'accept','1635':'fulfilment','1636':'application','1637':'applications-contract','1638':'The contract they applied with is shown below.','1639':'Expiry time from now: ','1640':'Estimated Delivery Time','1641':'Contract ID: ','1642':'Sender ID: ','1643':'Accept application','1644':'Accept the bag fulfilment application and enter their contract(This action cant be undone)','1645':'Applicants Requested Pay','1646':'Below is the applicants requested pay in their respective token denominations.','1646a':'Accept and Enter.','1646b':'Contracts Balance.','1646c':'Below is the End and Spend balance of the contract.',
        
        /* view job request contract page */
        '1647':'view-job-request-contract','1648':'view','1649':'response','1650':'view-contract','1651':'The contractors contract is shown below.','1652':'Entry Exipry Time','1653':'Time remaining','1654':'Your time in the contract has exipred.','1655':'','1656':'','1657':'','1658':'','1659':'','1660':'','1661':'','1662':'','1663':'Youre not part of the contract','1664':'Enter Contract','1665':'Enter the contract sent from the contractor','1666':'Enter Contract',
        
        /* view job request */
        '1667':'accept-job-request','1668':'accept','1669':'job','1670':'request','1671':'linear','1672':'nested','1673':'contract','1674':'activity','1675':'activity','1676':'contract','1677':'activity','1678':'Expiry time from now: ','1679':'Payment Option','1680':'Job Description','1681':'Sender ID','1682':'Accepted','1683':'Set Pay','1684':'The requested pay for the job','1685':'','1686':'Payment Option','1687':'Sender ID','1688':'Job Description','1689':'Set Pay','1690':'The amounts youll be receiving for the job.','1691':'Select the contract youll be using. If you have no contracts, first create one then youll see it here.','1692':'Copied message to clipboard.','1693':'responses','1694':'You','1695':'Type something first.','1696':'You need to make at least 1 transaction to participate.','1697':'Message added to stack.','1698':'The contractor Accepted the job request.','1698a':' ago','1698b':' In ','1698c':'The job request has already expired.',
        
        /* view searched account */
        '1699':'main-data','1700':'subscription-data','1701':'contract-data','1702':'exchange-data','1703':'creations','1704':'withdraws','1705':'pending-withdraws','1706':'runs','1707':'payments','1708':'cancellations','1709':'entries','1710':'exits','1711':'votes','1712':'swaps','1713':'transfers','1714':'Address','1715':'Ether Balance in Ether','1716':'Ether Balance in Wei','1717':'Last Transaction Block','1718':'Last Transaction age','1719':'Number of entered contracts','1720':'Number of E5 runs','1721':'Balance Search','1722':'Search the accounts balance in a specified exchange','1723':'Exchange ID or Symbol...','1724':'Balance','1725':'Transaction Runs','1726':'hart containing the total number of E5 runs theyve made over time.','1727':'Y-Axis: Total Runs Made','1728':'X-Axis: Time','1729':'job object','1730':'post object','1731':'shadow object','1732':'storefront bag object','1733':'contractor object','1734':'storefront item object','1735':'storefront object','1736':'account object','1737':'contract object','1738':'token exchange object','1739':'consensus object','1740':'subscription object','1741':'custom object','1742':'channel object','1743':'Object ID','1744':'Block Number','1745':'transaction ID','1746':'Amount in Wei','1747':'Amount in Ether','1748':'Age','1749':'Amount Added in Wei','1750':'Transaction ID','1751':'Transaction Stack Size','1752':'Estimated Gas Consumed','1753':'Included Wei','1754':'Gas Price Paid','1755':'Coinbase (Miner)','1756':'Subscription ID','1757':'Time Units: ','1758':'Subscription ID:  ','1759':'Contract ID','1760':'Contract ID: ','1761':'Proposal ID','1762':'Contract ID: ','1763':'Exchange ID','1764':'Amount Swapped','1765':'Updted Token Exchange Liquidity','1766':'Updated Exchange Ratio X','1767':'Updated Exchange Ratio Y','1768':'Updated Exchange Ratios X:Y','1769':'','1770':'Action: ','1770a':'balances','1770b':'income','1770c':' exchanges.','1770d':'Yearly Income.','1770e':'Heres how much money the account has made in the last few years.','1770f':'Yearly Expenditure.','1770g':'Heres how much money the account has spent in the last few years.','1770h':'expenditure','1770i':'activity','1770j':'nitro object','1770k':'audio object','1770l':'video object','1770m':'',
        
        /* view transaction log */
        '1771':'Timestamp','1772':'Transaction Age','1773':'Transaction Block','1774':'Transaction Stack Size','1775':'Gas Consumed','1776':'Sender Account ID','1777':'Sender Account Address','1778':'Included Value in Ether','1779':'Included Value in Wei','1780':'Coinbase Address',
        
        /* view transaction page */
        '1781':'view-transaction','1782':'Stack ID: ','1783':'Type:','1784':'Delete the transaction completely','1785':'Delete','1786':'Confirm Delete Action','1787':'Are you sure?','1788':'Make some changes to the transaction.','1789':'Edit','1790':'If set to shown, the transaction will be included during a run','1791':'If set to hidden, the transaction will be ignored when running your transactions','1792':'Show Transaction','1793':'Hide Transaction','1794':'The transaction is Hidden','1795':'The transaction is Shown','1796':'status','1797':'Item deleted from stack.','1798':'transaction shown','1799':'transaction hidden','1800':'The set access rights setting for your new contract.','1801':'Moderator Accounts','1802':'Youve set ','1803':' moderators','1804':'Interactable Accounts','1805':' accounts','1806':'For ','1807':'The set access rights setting for your new token.','1808':'Capped','1809':'Uncapped','1810':'2 (Main Contract)','1811':'Fixed','1812':'Spread','1813':'Token Identifier','1814':'Token Type',
        '1814%':'Unlocked Supply','1815':'Unlocked Liquidity','1816':'Fully Custom','1817':'Mint Limit','1818':'Authority: ','1819':'Exchange Authority Identifier','1820':'Target: ','1821':'Trust Fee Target Identifier','1822':'Mint/Burn Token','1823':'Authority Mint Limit (percentage of supply)','1824':'Current Block Mint Total','1825':'Active Block Limit Reduction Proportion','1826':'The set access rights setting for your new contract','1827':'non-cancellable','1828':'cancellable','1829':'Block ID','1830':'Authority ID','1831':'Minimum Buy Amount','1832':'time-units','1833':'Subscription Type','1834':'Maximum Buy Amount','1835':'time-units','1836':'Minimum Cancellable Amount','1837':'Time Unit','1838':'Remaining Subscription Time','1839':'Subscription Beneficiary','1840':'Entry Fees','1841':' tokens used','1842':'Price Amounts','1843':'The amounts you are offering for the job.','1844':'The set access rights setting for your new channel','1845':'The items variant details are shown below','1846':'Number of Units','1847':'Your account ID: ','1848':'Amount','1849':'Your Balance','1850':'Selected Action','1851':'Target Recipient Account','1852':'Enter Contract Until: ','1853':'Entry Exipry Time','1854':'Time remaining','1855':'Below are the individual transfer actions.','1856':'Transfer actions','1857':'recipient account: ','1858':'Extend Stay In Contract Until: ','1859':'New Exipry Time','1860':'Time remaining','1861':'Consensus Type','1862':'Proposal Expiry time','1863':'Proposal expiry time from now','1864':'Proposal Submit Expiry time','1865':'Proposal submit expiry time from now','1866':'','1867':'','1868':'','1869':'','1870':'','1871':'','1872':'','1873':'','1874':'Contract Authority ID','1875':'Modify Target','1876':'target: ','1877':', token ID: ','1878':'Modify Target','1879':'position','1880':'units','1881':'proportion','1882':'duration','1883':'value: ','1884':'target ID','1885':'tokens','1886':'Receiver ID: ','1887':'Your set vote for the proposal','1888':'Bounty Exchange ID: ','1889':'Time Units','1890':'Token ID: ','1891':'Time Unit','1892':'Time Units To Cancel','1893':'Total Collectible Time','1894':'Total Collectible Time Units','1895':'Token ID: ','1896':'Modify Subscription Action','1897':' action added','1898':'Modify Target','1899':'position','1900':'Modify Contract Action','1901':' actions added','1902':'Modify Target','1903':'position','1904':'units',
        '1905':'Modify Token Exchange Action','1906':' actions added','1907':'Modify Target','1908':'position','1909':'Exchange Transfer Action','1910':'Receiver ID:','1911':'Force Exit Action','1912':'Archive Action','1913':' bounty exchanges included','1914':'Bounty Exchange ID: ','1915':'Default depth 0','1916':'Freeze/Unfreeze Action','1917':' actions included','1918':'Target Account ID: ','1919':'Authmint Actions','1920':'Target Recipient ID: ','1921':'Access Rights Actions','1922':' actions included','1923':'Target: ','1924':'Target: Revoke Moderator Privelages','1925':', time from now: ','1926':' messages included','1927':'Selected Contract','1928':'The contract you picked for the application action','1929':'Selected Expiry Time','1930':'The expiry time you picked for the application action','1931':'Set Prices','1932':'The amounts youre youll be charging for the job','1933':' items','1934':'in your bag.','1935':'items','1936':' units in ','1937':'Edit','1938':'Selected Contract','1939':'The contract you picked for the fulfilment action','1940':'Selected Expiry Time','1941':'The expiry time you picked for the fulfilment action','1942':'Estimated Delivery time','1943':'The payment option you prefer','1944':'The amounts youre youll be charging for the bag fulfilment','1945':'Contract ID: ','1946':'Sender ID: ','1947':'Expiry time from now: ','1948':'Shipping Details','1949':'Number of Units ordered in ','1950':'Number of Units','1951':'Purchase Amounts','1952':'This is the final amount for the price of the item your buying','1953':'Shipping Fee','1954':'The charged shipping fee for buying the items','1955':'Collected Signatures','1956':'Below are the collected signatures from your direct purchases','1957':'Delete','1958':'Variant ID: ','1959':'Received Signature','1960':'The expiry time you picked for the application action','1961':'Set Description','1962':'Set Prices','1963':'The amounts youll be charging for the job','1964':'Selected Contract','1965':'The contract you picked for the job.','1966':'Set Description','1967':'Set Prices','1968':'The amounts youll be receiving for the job','1969':'Reset Alias.','1970':'Price Amounts','1971':'The amounts you are offering for the job.','1972':'Item Variants','1973':'The items variant details are shown below','1974':'Multiplier','1975':'message:','1976':'Total amount of spend','1977':'Custom Amounts','1978':'Your included custom amounts for the award action.','1979':'Depth-mint Actions',
        
        /* wiki page */
        '1980':'One more step.','1981':'You need to set your wallet and fill it with some ether','1982':'The wallet section is in the settings-data...','1983':'Under the Wallet tag...','1984':'Then afterwards fill it with the E5s ether of your choice','1985':'Action Required','1986':'You need to set your wallet first','1987':'The wallet section is in the stack page...','1988':'In the settings-data section...','1989':'Under the Wallet tag...',
        
        /* withdraw ether page */
        '1990':'withdraw-ether','1991':'pending-withdraws','1992':'withdraw-history','1993':'withdraw-ether','1994':'Withdraw','1995':'withdraw-ether','1996':'pending-withdraws','1997':'withdraw-history','1998':'Your withdraw balance is shown below','1999':'Withdraw balance','2000':'Withdraw balance in Wei','2001':'Withdraw balance in Ether','2002':'Impact','2003':'Receiver Wallet Address','2004':'Set Receiver Address Here','2005':'Set My Address','2006':'Withdraw Transaction Expiry Duration','2007':'The duration of time after which your withdrawal transaction will be reverted if it stays too long in the mempool. The default duration used is 1 hour.','2008':'Estimated Time.','2009':'Transaction Gas Price','2010':'The gas price for your withdraw run. The default is set to the amount set by the network.','2011':'Transaction Gas Price in Wei','2012':'Transaction Gas Price in Gwei','2013':'Network Gas Price in Wei','2014':'Network Gas Price in Gwei','2015':'Please set your wallet first.','2016':'Please set a valid receiver','2017':'You cant withdraw 0 ether.','2018':'Withdraw Ether Confirmation','2019':'Confirm that you want to withdraw Ether to the set address','2020':'Withdraw balance in Wei','2021':'Withdraw balance in Ether','2022':'Target Wallet Address','2023':'Withdraw Ether','2024':'Copied address to clipboard','2025':'transaction ID','2026':'target','2027':'Amount Added in Wei','2027a':'The max priority fee per gas(miner tip) for your next withdraw run.','2027b':'The maximum amount of gas fee your willing to pay for your next withdraw run.','2027c':'Confirmation.',
        
        /* bag details section */
        '2028':'metadata','2029':'responses','2030':'activity','2031':'Pin the bag for future reference.','2032':'Pin the Bag Order.','2033':'','2034':'','2035':'','2036':'','2037':'','2038':'','2039':'','2040':'','2041':'','2042':'Pin/Unpin Bag','2043':'Fulfil the delivery request for the sender account','2044':'Fulfil Bag','2045':'Sender Account','2046':'Bag ID: ','2047':'ago','2048':'Store ID:','2049':' ordered.','2050':'Variant Description','2051':'Pick-up Location','2052':'In ','2053':'Bag Responses','2054':'Expiry time from now: ','2055':'Contract ID: ','2056':'Sender ID: ','2057':'Accepted','2058':'The bag owner picked this fulfilment application','2059':'Expiry time from now: ','2060':'Contract ID: ','2061':'Sender ID: ','2062':'Shopping Bag Acivity','2063':'Copied message to clipboard.','2064':' responses','2064a':'Bag Value.','2064b':'The total amount to be paid by the bag owner in the respective denominations.','2064c':'creator','2064d':'moderator','2064e':'Bag Activity.','2064f':'Purchasing options specified. If selected, the option will be highlighted in black.','2064g':'','2064h':'',
        
        /* channel details section */
        '2065':'moderator-events','2066':'modify-moderators','2067':'interactable-checkers','2068':'interactable-accounts','2069':'block-accounts','2070':'Author','2071':'Channel Locked','2072':'Channel activity has been restricted to existing participants','2073':'Channel Unlocked','2074':'','2075':'Channel activity is not restricted to existing participants','2076':'Pin the channel to your feed','2077':'Pin Channel','2078':'Pin/Unpin Channel','2079':'Perform Moderator Actions','2080':'Set an accounts access rights, moderator privelages or block an account.','2081':'Perform Action','2082':'Edit Channel Post','2083':'Change the basic details for your Channel','2084':'Edit','2085':'Author Moderator Privelages Disabled','2086':'Author of Object is not a Moderator by default','2087':'Author Moderator Privelages Enabled','2088':'Author of Object is a Moderator by default','2089':'Channel Traffic','2090':'Chart containing the total number of messages made over time.','2091':'Y-Axis: Total Messages Made','2092':'X-Axis: Time','2093':'Total Channel Messages','2094':'messages','2095':'','2096':'','2097':'','2098':'','2099':'','2100':'You cant do that. The channel is access restricted.','2101':'You cant do that. Youve been blocked from the channel for ','2101;':'The channel has been locked by its moderators.','2102':'In Channel ','2103':'Channel Modify Moderator Events','2104':'Not Moderator','2105':'Moderator','2106':'Targeted Account','2107':'Moderator Account','2108':'Authority value','2109':'Channel Access Rights Settings Events','2110':'Access Rights Disabled(Public)','2111':'Access Rights Enabled(Private)','2112':'Access Rights Status','2113':'Moderator Account','2114':'Channel Account Access Settings Events','2115':'Targeted Account','2116':'Moderator Account','2117':'Until: ',
        
        /* contract details section */
        '2118':'details','2119':'events','2120':'moderator-events','2121':'transfers','2122':'create-proposal','2123':'modify-contract','2124':'Channel Blocked Account Events','2125':'enter-contract','2126':'extend-contract-stay','2127':'exit-contract','2128':'force-exit-accounts','2129':'Participant Accounts','2130':'The accounts that have entered the contract.','2131':'Pin the contract to your feed','2132':'Pin Contract','2134':'Pin/Unpin Contract','2135':'Author Moderator Privelages Disabled','2136':'','2137':'Author of Object is not a Moderator by default','2138':'Author Moderator Privelages Enabled','2139':'Author of Object is a Moderator by default','2140':'Enabled','2141':'Disabled','2142':'Enter a contract to participate in its consensus','2143':'Enter Contract','2144':'Enter','2145':'Max Extend Enter Contract Limit','2146':'Extend your stay in the contract','2147':'Extend Stay',
        '2148':'Extend','2149':'Send a proposal to the contract to perform a specified action','2150':'Send Proposal','2151':'Send','2152':'Send a proposal to the contract to perform a specified action.','2153':'','2154':'','2155':'','2156':'','2157':'','2158':'Send Proposal','2159':'Exit from the contract and no longer participate in its consensus','2160':'Exit Contract','2161':'Exit','2162':'Entry Exipry Time','2163':'Time remaining','2164':'Your time in the contract has exipred, you have to enter it again.','2165':'Youre not part of the contract','2166':'Modify Contract','2167':'Modify the configuration of the contract directly.','2168':'Force Exit Accounts','2169':'Remove an account from the contract directly.','2170':'Archive Contract','2171':'Delete the contracts data to free up space in the blockchain','2172':'Perform Moderator Actions','2173':'Set an accounts access rights, moderator privelages or block an account','2174':'Perform Action','2175':'In Contract ','2176':'Created Proposal Events','2177':'Modify Proposal Events','2178':'Proposer Account ID','2179':'Modifier','2180':'Spend Proposal','2181':'Reconfiguration Proposal','2182':'Exchange-Transfer','2183':'Targeted Modify Item','2184':'target ID','2185':'In Contract ','2186':'Enter Contract Events','2187':'Search account ID...','2188':'Entering Account ID','2189':'Entry Expiry','2190':'Extend Contract Stay Events','2191':'Extending Account ID','2192':'Entry Expiry','2193':'Exit Contract Events','2194':'Exiting Account ID','2195':'Force Exit Contract Events','2196':'Moderator Account ID','2197':'Exiting Account ID','2198':'Age','2199':'Contract Transfer Events','2200':'Token ID:  ','2201':', depth: ','2202':'Contract Modify Moderator Events','2203':'Authority value','2204':'Contract Access Rights Settings Events','2205':'Access Rights Status','2206':'Block Number','2207':'Contract  Account Access Settings Events','2208':'Until: ','2209':'Contract Blocked Account Events','2210':'','2211':'Not Moderator','2212':'Moderator','2213':'Targeted Account','2214':'Moderator Account', '2214a':'Balance Changes.','2214b':'The changes in balance for the selected token.','2214c':'Y-Axis: Total in ','2214d':'participants','2214e':'Accounts that can participate in the contracts consensus.','2214f':'Accounts that can no longer participate in the contracts consensus.','2214g':'','2214h':'','2214i':'',
        
        /* contractor detail section */
        '2215':'details','2216':'job-requests','2217':'Fees Per Hour','2218':'The amounts they charge per hour for their work.','2219':'Send Job Request.','2220':'Send a job request to the contractor to do a job for you.','2221':'Send Request','2222':'Pin the contractor to your feed.','2223':'Pin Contractor','2224':'Pin/Unpin Contractor','2225':'Edit Contractor Post','2226':'Change the basic details for your Contractor Post','2227':'Perform Action','2228':'Job Requests','2229':'Job Description','2230':'Accepted','2231':'Expiry time from now: ','2231a':' requests received.',
        
        /* E5 details section */
        '2232':'details','2233':'End Balance of Burn Account','2234':'E5 Ether balance in Ether and wei','2235':'E5 Ether balance in Wei','2236':'Last Transaction Block','2237':'Last Transaction age','2238':'Number of entered contracts','2239':'Number of E5 runs','2240':'Withdraw balance','2241':'Withdraw your Ether to a specified address','2242':'Withdraw Ether','2243':'Withdraw','2244':'E5','2245':'Main','2246':'E5 Address:','2247':'Vote Bounty Split Proportion','2248':'Minimum End Contract Amount','2249':'E5 block invocation Limit','2250':'E5 time invocation Limit','2251':'Minimum Entered Contracts for Consensus Participation','2252':'','2253':'Tag Indexing Limit','2254':'Minimum Transaction Count for Consensus Particiation','2255':'Gas Anchor Price','2256':'Transaction Gas Reduction Proportion','2257':'Transaction Gas Anchor Price','2258':'Transaction Gas Lower Limit','2259':'Absolute Proposal Expiry Duration Limit','2260':'Primary Transaction Account','2261':'Primary Account Transaction Period','2262':'Subscriptions Created','2263':'Chart containing the total number of subscriptions made over time.','2264':'','2265':'','2266':'','2267':'','2269e':'Y-Axis: Total Subscriptions Made','2269':'X-Axis: Time','2270':'Total Subscriptions','2271':'subscriptions','2272':'Contracts Created','2273':'Chart containing the total number of contracts made over time.','2274':'Y-Axis: Total Contracts Made','2275':'X-Axis: Time','2276':'Total Contracts','2277':'contracts','2278':'Proposals Created','2279':'Chart containing the total number of proposals made over time.','2280':'Y-Axis: Total Proposals Made','2281':'Total Proposals','2282':'proposals','2283':'Exchanges Created','2284':'Chart containing the total number of exchanges made over time.','2285':'Y-Axis: Total Exchanges Made','2286':'Total Exchanges','2287':'exchanges','2288':'Indexed Posts Created','2289':'Chart containing the total number of indexed posts made over time.','2290':'Y-Axis: Total Posts Made','2291':'Total Posts','2292':'posts','2293':'Indexed Channels Created',
        '2294':'Chart containing the total number of indexed channels made over time.','2295':'Y-Axis: Total Channels Made','2296':'Total Channels','2297':'channels','2298':'Indexed Jobs Created','2299':'Chart containing the total number of indexed jobs made over time.','2300':'Y-Axis: Total Jobs Made','2301':'Total Jobs','2302':'jobs','2303':'Indexed Storefront Items Created','2304':'Chart containing the total number of indexed storefront items made over time.','2305':'Y-Axis: Total Storefront Items Made','2306':'Total Storefront Items','2307':'','2308':'Bags Created','2309':'Chart containing the total number of bags made over time.','2310':'Y-Axis: Total Bags Made','2311':'Total Bags','2312':'bags','2313':'Indexed Contractors Created','2314':'Chart containing the total number of indexed contractors made over time.','2315':'Y-Axis: Total Contractor Posts','2316':'Total Contractor Posts','2317':'Data Throughput','2318':'Chart containing the data throughput over time.','2319':'Y-Axis: Total Data Events','2320':'Total Data Events','2321':'Metadata Throughput','2322':'Chart containing the total number of metadata events made over time.','2323':'Y-Axis: Total Metadata Events','2324':'Total Metadata Events','2325':'events','2326':'Withdrawn wei','2327':'The total amount of wei thats been withdrawn from the E5 over time.','2328':'Y-Axis: Total Withdrawn wei','2329':'Deposited wei','2330':'The total amount of wei thats been deposited into the E5 over time.','2331':'Y-Axis: Total Deposited wei','2332':'Transaction Runs','2333':'Chart containing the total number of E5 runs made over time.','2334':'Y-Axis: Total Runs Made','2335':'Total Runs','2336':'runs', '2336a':'Transfers', '2336b':'Chart containing the total number of transfers made over time.','2336c':'Y-Axis: Total Transfers Made','2336d':'Total Transfers','2336e':'transfers','2336f':'Account Zero Credit.','2336g':'The amount of end that has been sent to the burn account over time.','2336h':'','2336i':'','2336j':'','2336k':'','2336l':'',
        
        /* end detail section */
        '2337':'transfers','2338':'exchange-transfers','2339':'updated-balances','2340':'updated-exchange-ratios','2341':'modify-exchange','2342':'freeze-unfreeze','2343':'depth-mints','2344':'Buy or Sell the token for a specified account.','2345':'Buy/Sell','2346':'Send some tokens to  a specified account','2347':'Transfer','2348':'The exchanges balance for each of the tokens used to buy ','2349':'Buy Token Liquidity','2350':'','2351':'Author Moderator Privelages Disabled','2352':'Author of Object is not a Moderator by default','2353':'Author Moderator Privelages Enabled','2354':'Author of Object is a Moderator by default','2355':'The amount you get when selling one unit of the token','2356':'Token Price','2357':'Last Swap Block','2358':'Last Swap Age','2359':'Last Swap Transactions Count','2360':'Last Entered Contracts Count','2361':'Modify Token','2362':'Modify the configuration of the exchange directly.','2363':'Exchange Transfer','2364':'Transfer tokens from the exchanges account to a specified target.','2365':'Run Transfers','2366':'Freeze/Unfreeze Tokens','2367':'Freeze or unfreeze a given accounts balance.','2368':'Freeze/Unfreeze','2369':'Perform Moderator Actions',
        '2370':'Perform Action','2371':'Edit Token Post','2372':'Change the basic details for your Token Post','2373':'Perform Action','2374':'0 (Burn Account)','2375':'ID: ','2376':'Token Identifier','2377':'Token Type','2378':'Block Number','2379':'Exchanges Liquidity','2380':'Buy/Sell Token','2381':'Tokens Total Supply','2382':'The Market Capitalization of the token in its respective denominations.','2383':'Token Market Cap','2384':'Depth-Mint Tokens','2385':'Mint your token from outside its exchange.','2386':'Depth-Mint','2387':'Y-Aggregate','2388':'Chart containing the y-aggregate of ','2389':' over time.','2390':'Y-Axis: Y-aggregate','2391':'X-Axis: Time','2392':'Total Transactions','2393':'Chart containing the total number of buy/sell transactions over time.','2394':'Y-Axis: Total Transactions','2395':'Total Transactions','2396':'Exchange Liquidity','2397':'Chart containing the total supply of ','2398':' in the exchange over time.','2399':'Y-Axis: Exchange Liquidity','2400':'Action','2401':'Amount Swapped','2402':'Updted Token Exchange Liquidity','2403':'Updated Exchange Ratio X','2404':'Updated Exchange Ratio Y','2405':'Updated Exchange Ratios X:Y','2406':'Set an accounts access rights, moderator privelages or block an account','2407':'In Exchange ','2408':'Updated Exchange Ratio Events','2409':'Buy','2410':'Sell','2411':'Swapping Account ID','2412':'Your Transfer Events','2413':'Action: ','2414':'Exchange Modification Events','2415':'Modifier','2416':'Targeted Modify Item','2417':'target ID','2418':'Exchange Transfer Events','2419':'To: ','2420':'From: ','2421':'Action: ','2422':'New Balance ','2423':'Action: Freeze','2424':'Action: Unfreeze','2425':'Amount, depth: ','2426':'Exchange Modify Moderator Events','2427':'Not Moderator','2428':'Moderator',
        '2429':'Targeted Account','2430':'Moderator Account','2431':'Authority value','2432':'Exchange Access Rights Settings Events','2433':'Access Rights Disabled(Public)','2434':'Access Rights Enabled(Private)','2435':'Access Rights Status','2436':'Moderator Account','2437':'Exchange  Account Access Settings Events','2438':'Targeted Account','2439':'Moderator Account','2440':'In Exchange ','2441':'Exchange  Blocked Account Events','2442':'Targeted Account','2443':'Moderator Account','2444':'Exchange  Depth-Mint Events','2445':'Targeted Receiver','2446':'Moderator Sender','2447':'Amount, depth: ', '2447a':'Your Wallets Dominance', '2447b':'Stage Royalties.', '2447c':'Stage payouts to the token-holders.', '2447d':'royalty-stagings','2447e':'Exchange Royalty Payment Stagings.','2447f':'Scheduled for: ','2447g':'Exchange Liquidity Proportions.','2447h':'Proportions of the exchange\'s balances that have not been transfered out by its moderators.','2447i':'Trading Volume','2447j':'Chart containing the trading volume of ','2447k':'Y-axis: Volume','2447l':'trading volume average.','2447m':'','2447n':'','2447o':'','2447p':'','2447q':'','2447r':'','2447s':'','2447t':'','2447u':'','2447v':'','2447w':'','2447x':'','2447y':'','2447z':'','2447ba':'','2447bb':'','2447bc':'','2447bd':'','2447be':'','2447bf':'',
        
        /* ethers details section */
        '2448':'transactions','2449':'Reload wallet.','2450':'Your Balance in Wei','2451':'Your Balance in Ether','2452':'Transactions (2.3M Gas average)','2453':'Gas Price in Wei','2454':'Gas Price in Gwei','2455':'E5 txs/ether (2.3M Gas average)','2456':'Gas txs/ether (23K Gas average)','2457':'Send/Receive Ether','2458':'Send or receive ether from a specified account.','2459':'Send/Receive','2460':'Node Settings','2461':'Change the remote procedure call (RPC) provider setting for making your transactions.','2462':'Open','2463':'Wallet Status','2464':'Syncronizing wallet, please wait...','2465':'Wallet sync failed. Please reload the wallet.','2466':'Wallet Status','2467':'Syncronized.','2468':'Chain ID','2469':'Gas Limit per Block','2470':'Base Fee in wei','2471':'Base Fee in gwei','2472':'Your Address','2473':'Average block time for the last 5 blocks','2474':'Wallet Address','2475':'copied address to clipboard','2476':' seconds','2477':'Gas Used','2478':'Gas Price Paid in Wei','2479':'Gas Price Paid in Gwei','2480':'Value','2481':'Number of Blocks Mined',
        
        /* job details section */
        '2482':'Job Offers','2483':'The amounts they are offering for the job.','2484':'Apply for the job','2485':'Respond to the ad with a contract and apply for the job.','2486':'Apply','2487':'Pin the job to your feed.','2488':'Pin Job','2489':'Pin/Unpin Job','2490':'Edit Job Post','2491':'Change the basic details for your Job Post','2492':'Perform Action','2493':'Block Number','2494':'age','2495':'ago','2496':'In ','2497':'Job Responses','2498':'Expiry time from now: ','2499':'Contract ID: ','2500':'Sender ID: ','2501':'Accepted','2502':'The job owner picked this application','2503':'Expiry time from now: ','2504':'Contract ID: ','2505':'Sender ID: ','2506':'Copied message to clipboard','2507':'responses','2507a':'Reply',
        
        /* list section */
        '2508':'That ID is not valid.','2509':'Searching...','2509a':'Enter Name or Symbol...','2509b':' items','2509c':' responses',
        
        /* mail details section */
        '2510':'data','2512':' with ','2513':'Conversation.',
        
        /* post detail section */
        '2514':'awards','2515':'Pin the post to your feed','2516':'Pin Post','2517':'Pin/Unpin Post','2518':'Edit Indexed Post','2519':'Change the basic details for your Indexed Post','2520':'Perform Action','2521':'Give Award','2522':'Send a tip to the posts author','2523':'Send Award','2524':'In ','2525':'Awards.','2526':'Comments.', '2526a':'🔒 Taken Down.', '2526b':'The object has been taken down.', '2526c':'', '2526d':'', '2526e':'',

        /* audio details section */
        'a2527a':'comments', 'a2527b':'Edit Indexed Audiopost', 'a2527c':'Change the basic details for your Indexed Audiopost', 'a2527d':'media', 'a2527e':'Buy', 'a2527f':'Purchase unlimited access and add it to your collection and playlists.', 'a2527g':'Poster', 'a2527h':'Playlist Id.', 'a2527i':'Created On', 'a2527j':'Songs.', 'a2527k':'Delete Playlist.', 'a2527l':'Delete the Playlist from your feed.', 'a2527m':'Play Playlist.', 'a2527n':'Play all the tracks in this playlist.', 'a2527o':'Nothing to play', 'a2527p':'You need to set your account first.', 'a2527q':'Play Album', 'a2527r':'Play all the tracks in this audiopost.', 'a2527s':'Shuffle Album', 'a2527t':'Shuffle Playlist', 'a2527u':'Download Playlist.', 'a2527v':'Download all the tracks in this playlist for faster load times.', 'a2527w':'Nothing to download.', 'a2527x':'Download Audiopost.', 'a2527y':'Download all the tracks in the audiopost for faster load times.', 'a2527z':'Downloading...','a2527ba':'Done.','a2527bb':'Discography.','a2527bc':'Audioposts by ','a2527bd':'Similar Audioposts.','a2527be':'Some posts similar to the audiopost by its tags','a2527bf':'discography','a2527bg':'All the available audioposts by the author are listed below.','a2527bh':'similar','a2527bi':'Similar Posts.','a2527bj':'Posts similar to the Audiopost.','a2527bk':'','a2527bl':'','a2527bm':'','a2527bn':'','a2527bo':'','a2527bp':'','a2527bq':'','a2527br':'','a2527bs':'','a2527bt':'',


        /* video details section */
        'b2527a':'Play Videopost.','b2527b':'Play all the videos in this videopost.','b2527c':'Edit Indexed Videopost','b2527d':'Change the basic details for your Indexed Videopost.','b2527e':'Purchase access to this videopost and its content.','b2527f':'You need to purchase access to the video first.','b2527g':'','b2527h':'Videoposts by ','b2527i':'Similar Videoposts.','b2527j':'Some posts similar to the videopost by its tags','b2527k':'videography','b2527l':'Videography.','b2527m':'All the available videoposts by the author are listed below.','b2527n':'Posts similar to the Videopost.','b2527o':'','b2527p':'','b2527q':'','b2527r':'','b2527s':'','b2527t':'','b2527u':'','b2527v':'','b2527w':'','b2527x':'','b2527y':'','b2527z':'','b2527ba':'','b2527bb':'','b2527bc':'','b2527bd':'','b2527be':'','b2527bf':'','b2527bg':'','b2527bh':'','b2527bi':'','b2527bj':'',


        /* nitro details section */
        'c2527a':'Pin the Nitro post to your feed.','c2527b':'Pin Nitropost','c2527c':'Pin/Unpin Nitropost','c2527d':'Edit Indexed Nitropost','c2527e':'Change the basic details for your Indexed Nitropost','c2527f':'Loading Node Details...','c2527g':'Node Unavailable.','c2527h':'The node is unavailable or down.','c2527i':'Status','c2527j':'Online.','c2527k':'Booted','c2527l':'Start Up Time','c2527m':'Node Storage Service Offline.','c2527n':'Storage Purchase Recipient','c2527o':'Storage Purchase Limit.','c2527p':'Mbs','c2527q':'Accounts Served.','c2527r':'Tracked Hashes.','c2527s':'Tracked E5s.','c2527t':'Price per Megabyte of Storage.','c2527u':'Loading Your Storage Info...','c2527v':'Your account doesnt exist in the node.','c2527w':'Files Stored.','c2527x':'files','c2527y':'Acquired Space.','c2527z':'Utilized Space','c2527ba':'Buy Storage.','c2527bb':'Acquire storage from the provider in their respective node.','c2527bc':'Configure Node.','c2527bd':'Configure your nitro node directly from E5.','c2527be':'configure','c2527bf':'Total Files Stored','c2527bg':'Total Space Utilized','c2527bh':'Block Post.','c2527bi':'Block this post from being viewed by your followers.','c2527bj':'Block/Unblock','c2527bk':'🙅 Post Blocked','c2527bl':'The post has been blocked for you and your followers.','c2527bm':'Nitro dialer offline.','c2527bn':'Nitro dialer online.','c2527bo':'Nitro dialer subscription.','c2527bp':'Pay Subscription','c2527bq':'Pay the subscription required by the node moderator to make calls via the node.','c2527br':'','c2527bs':'',

        
        /* proposal details section */
        '2527':'proposal-actions','2528':'Consensus Achieved.','2529':'Status','2530':'Consensus Pending.','2531':'Pin the proposal to your feed','2532':'Pin Proposal','2533':'Pin/Unpin Proposal','2534':'Vote in Proposal','2535':'Cast a vote in this proposal and collect some bounty.','2536':'Vote Proposal','2537':'Submit Proposal','2538':'Submit the proposal to perform its actions','2539':'Proposal Submitted','2540':'The proposal has been submitted by its author.','2541':'Proposal Unsubmitted','2542':'The proposal has not been submitted by its author.','2543':'Proposal Archived','2544':'The proposal has been archived by its author.','2545':'Proposal Not Archived','2546':'The proposal has not been archived by its author','2547':'Archive Proposal','2548':'Delete the proposals data to free up space in the blockchain','2549':'Age of Proposal','2550':'Consensus Majority Target Proportion','2551':'Proposal Transfer Events','2552':'In Proposal ','2553':', depth: ','2554':'Proposal Vote Events','2555':'Yes!','2556':'Wait..','2557':'No.','2558':'Contract ID', '2258a':'Edit Proposal', '2258b':'Change the basic details of your Proposal.',
        
        /* spend details section */
        '2559':'updated-proportion-ratios','2560':'Mint or Dump the token for a specified account.','2561':'Mint/Dump','2562':'Make a token transfer to a specified account.','2563':'Send/Transfer','2564':'The exchanges balance for each of the tokens used to buy ','2565':'Buy Token Liquidity','2566':'Author Moderator Privelages Disabled','2567':'Author of Object is not a Moderator by default','2568':'Author Moderator Privelages Enabled','2569':'Author of Object is a Moderator by default','2570':'The amount you get when selling one unit of the token.','2571':'Token Price','2572':'Modify Exchanage','2573':'AuthMint Tokens','2574':'Bypass the exchanges restrictions and mint your token as an authority','2575':'AuthMint','2576':'Set an accounts access rights, moderator privelages or block an account','2577':'Chart containing the block limit reduction proportion over time.','2578':'Y-Axis: Proportion','2579':'Circulating Supply','2580':'Total Supply','2581':'Y-Axis: Total Supply','2582':'Total Transactions','2583':'Chart containing the total number of buy/sell transactions over time.','2584':'Y-Axis: Total Transactions','2585':'X-Axis: Time','2586':'Exchange Mint Limit Proportion Ratio Events','2587':'Tokens Received','2588':'Updated Active Limit','2589':'Exchange Modification Events','2590':'Targeted Modify Item','2591':'Exchange Transfer Events','2592':'Update Balance Events','2593':'Receiver Account','2594':'Freeze-Unfreeze Events','2595':'Action: Freeze','2596':'Action: Unfreeze','2597':'Authority Account','2598':'Exchange Modify Moderator Events','2599':'Exchange Account Access Settings Events','2600':'Targeted Account','2601':'Moderator Account','2602':'Exchange Blocked Account Events','2602a':'Active Mint Limit.','2602b':'Block Limit Reduction Proportion','2602c':'Chart containing the block limit reduction proportion over time.','2602d':'','2602e':'','2602f':'','2602g':'',
        
        /* storefront details section */
        '2603':'direct-purchases','2604':'unfulfilled','2605':'fulfilled','2606':'Set Denomination','2607':'Author Seller','2608':'Target Payment Recipient','2609':'Fulfilment Accounts','2610':'The accounts involved with shipping and fulfilling direct purchase orders from clients.','2611':'Fulfilment Location','2612':' variants','2613':'To choose from.','2614':'Pin the storefront item to your feed.','2615':'Pin Item','2616':'Pin/Unpin Item','2617':'Activity Section Enabled','2618':'You can leave a product review message in the activity section','2619':'Activity Section Disabled','2620':'The activity section has been disabled by the storefront owner.','2621':'In Stock','2622':'The item is available for purchasing.','2623':'Out of Stock','2624':'The item is not available for purchasing.','2625':'Add the item to your shopping bag.','2626':'Add to Bag','2627':'Purchase the item directly from the seller.','2628':'Direct Purchase','2629':'Purchase','2630':'Edit Storefront Post','2631':'Change the basic details for your Storefront Post','2632':'Edit Item','2633':'Block Number','2634':'Direct Purchases','2635':', Sender Account ID: ','2636':'Fulfilent Signature: ','2637':', Client ID: ','2638':'Clear Purchase','2639':'Fulfilment Signature: ','2640':'Signature Data: ','2641':'Signature Address: ','2642':'The activity section has been disabled.', '2642a':'Direct Purchases.','2642b':'','2642c':'','2642d':'','2642e':'',
        
        /* subscription details section */
        '2643':'search','2644':'payments','2645':'cancellations','2646':'collections','2647':'modifications','2648':'Pay Subscription','2649':'Pay for the subscription for your account','2650':'Pin the subscription to your feed','2651':'Pin Subscription','2652':'Pin/Unpin Subscription','2653':'Author Moderator Privelages Disabled','2654':'Author of Object is not a Moderator by default','2655':'Author Moderator Privelages Enabled','2656':'Author of Object is a Moderator by default','2657':'Cancel Subscription','2658':'Cancel your subscription payment and receive your tokens back','2659':'Collect Subscription','2660':'Collect the subscription payments from the subscription account','2661':'Modify Subscription','2662':'Modify the configuration of the subscription.','2663':'Perform Moderator Actions','2664':'Set an accounts access rights, moderator privelages or block an account','2665':'Perform Action','2666':'In Subscription ','2667':'Subscription Transfer Events','2668':'Pay Subscription Events','2669':'Search account ID...','2670':'Paying Account','2671':'Cancel Subscription Events','2672':'Cancelling Account','2673':'Collect Subscription Events','2674':'Collecting Account','2675':'Total Time Units Collected','2676':'units','2677':'Modify Subscription Events','2678':'Subscription Modify Moderator Events','2679':'Subscription Access Rights Settings Events','2680':'Subscription Account Access Settings Events','2681':'Subscription Blocked Account Events','2682':'Search Subscription Payment','2683':'Remaining Subscription Time','2684':'Remaining Time Units (As of Now)','2685':'time-units','2686':'Latest Payment Time','2687':'Latest Payment Block','2688':'First Payment Time','2689':'First Payment Block','2690':'Highest Time Units Paid For ','2691':'Lowest Time Units Paid For ','2692':'Time Units Paid For','2693':'Chart containing the amount in time units that have been accumulated.','2694':'Y-Axis: Time Units','2695':'X-Axis: Time',
        
        /* App page */
        '2696':'comment','2697':'review','2698':'Stack cleared.','2699':'Your next run might fail with its current stack.','2700':'Run complete. Synchronizing...','2701':'Your transaction was reverted.','2702':'Contact Deleted','2703':'You cant do that more than once.','2704':'Transaction added to stack.','2705':'You cant do that more than once.','2706':'unalias','2707':'unreserve','2708':'identification','2709':'Unreserve transaction added to stack','2710':'re-alias','2711':'You cant do that more than once.','2712':'reserve','2713':'Reset transaction added to stack','2714':'Blocked account removed','2715':'Your account was blocked from entering the contract.','2716':'cart','2717':'clear','2718':'finalize','2719':'purchase','2720':'The contract owner hasnt granted you access to their contract yet.','2721':'Your account was blocked from entering the contract','2722':'Withdrawing your ether...','2723':'withdraw complete!','2724':'Withdraw failed. Something went wrong','2725':'milliseconds','2726':'offline','2727':'syncronized.','2728':'Send complete.','2729':'send failed, ','2730':'Reloading your wallet...','2731':'A matching blocked account was found','2732':'You cant block yourself!','2733':'Adding account ID to blocked list...','2734':'A matching contact was found','2735':'You cant add yourself.','2736':'Adding account ID to Contacts...','2737':'Search complete, no account data found','2738':'Not available in your region yet.', '2738a':'The contract owner hasnt granted you access to their contract yet.', '2738b':'Downloading image.', '2738c':'Poor Internet Connection.', '2738d':'Downloading pdf.', '2738e':'e needs access to your microphone to make the call.', '2738f':'Downloading Zip file.', '2738g':'Arweave upload complete, waiting for 1 network confirmation...', '2738h':'Please wait for your Arweave wallet to finish loading first.', '2738i':'Arweave transaction confirmed! proceeding with run...', '2738j':'', '2738k':'', '2738l':'', '2738m':'', '2738n':'', '2738o':'', '2738p':'', '2738q':'', '2738r':'', '2738s':'', '2738t':'', '2738u':'', '2738v':'', '2738w':'', '2738x':'', '2738y':'', '2738z':'', 
        

        '2739':'edit-proposal','2740':'midnight','2741':'green-ish','2742':'Not Safe For Work Warning.','2743':'Warning. This content contains material that may not be suitable for all audiences. Viewer discretion is advised. The content may include explicit language, sexual themes, nudity, or other adult-oriented material. It is intended for mature audiences only.','2744':'Proceed.','2745':'Years','2746':'Days','2747':'Hours','2748':'Minutes','2749':'Set Alias','2750':'Release','2751':'Delete',
        
        '2752':'splineArea','2753':'area','2754':'Graph Type','2755':'If set to splineArea, E5 graphs will appear smooth, with area will make them jaggered.','2756':'disabled','2757':'Disable Activity Section.','2758':'If set to disabled, activity and comments will be disabled for all users except you.','2759':'The comment section has been disabled by the posts author.','2760':'🤐 Activity Section Disabled','2761':'The responses section has been disabled by the posts author.','2762':'You cant use that exchange.','2763':'You cant use that exchange for the voter weights feature.',
        
        '2764':'configuration','2765':'???','2766':'End Token Supply.','2767':'The total supply of the End token that will be minted for you.','2768':'End token preset has been applied.','2769':'🦣 End Token.','2770':'A token with a very large supply, thats pegged to the value of End.','2771':'The value of all the items in your bag in their respective denominations.','2772':'That name is already in use.','2773':'low','2774':'medium','2775':'high','2776':'1 END','2777':'10 END','2778':'100 END','2779':'Token Depth','2780':'Base Liquidity.','2781':'Set the base liquidity in End for your End token.','2782':'Base Stability.','2783':'Set the base stability for your new End token. This is equivalent to the tokens sell limit.','2784':'Your balance in END is insufficient to create your End token.','2785':'You',
        
        '2786':'Transaction Broadcasted.','2787':'Your transaction was successfuly broadcasted to the rest of the network.','2788':'From Your Address.','2789':'Recipient Address','2790':'Amount Sent in Wei.','2791':'Amount Sent in Ether.','2792':'Transaction Gas.','2793':'Gas Price Set in Wei.','2794':'Max Priority Fee Per Gas Set in Wei.','2795':'Max Fee per Gas Set in Wei.','2796':'Gas Price Set in Gwei.','2797':'Max Priority Fee Per Gas Set in Gwei.','2798':'Max Fee per Gas Set in Gwei.','2799':'Transaction Hash.','2800':'Qr Code.','2801':'Copy Transaction Hash.','2802':'Track Your Transaction.','2803':'You can track the status of your transaction from the chains blockexplorer.',
        
        '2804':'Payment History','2805':'Their payment history is shown below.','2806':'Current ','2807':'Time Units: ','2808':'Accounts Balances','2809':'Heres all the tokens the account is in posession of.','2810':'Add a transaction first.','2811':'Exchange Authority','2812':'Trust Fee Target','2813':'Feed Orientation','2814':'Set the orientation for viewing your content feed.','2815':'Number of Replies.','2816':'Number of Awards.',
        
        '2817':'Available E5s.','2818':'The E5s that are currently in use.','2819':'Active Wallets.','2820':'Your wallet ethers that have balances.','2821':'Estimated Gas.','2822':'The estimated gas set to be consumed in your next run.','2823':'Extra Info.','2824':'Some info about E5 in its entirety.','2825':'Total E5 Subscriptions, Contracts and Proposals.','2826':'subscriptions','2827':'contracts','2828':'proposals','2829':'exchanges','2830':'posts','2831':'channels','2832':'jobs','2833':'storefront-items','2834':'bags','2835':'contractors','2836':'Total E5 Runs.','2837':'runs.','2838':'Total E5 Transfers.','2839':'transfers','2840':'E5 Traffic Distribution.','2841':'Total Exchanges, Posts, Jobs and Channels.','2843':'Total Storefront-items, Bags and Contractors.',
        
        '2844':'Acitve E5 Info.','2845':'Telemetries for your selected E5',
        
        '2846':'stage-royalty','2847':'stage','2848':'royalty','2849':'payouts','2850':'staged-transactions','2851':'Stage a royalty payout to your tokens stakeholders.','2852':'Set the date and time that the payout will begin.','2852b':'Schedule Date and Time.','2853':'Starting time.','2854':'You cant schedule a time before now.','2855':'Payout Account.','2856':'Set the account that will handle the payout transactions.','2857':'ascending','2858':'descending','2859':'random','2860':'Total Payout Amount.','2861':'The aggregate of the total number of tokens being issued out as payouts.','2862':'Payout Description.','2863':'Set a short title for your payout staging.','2864':'Transactions Per Batch.','2865':'Set the total number of transactions per payout batch.','2866':'Balance Snapshot Time.','2867':'transactions','2868':'Total Payout Transactions.','2869':'all','2870':'batches','2871':'Alias Unknown.','2872':' transactions.','2873':'Batch: ','2874':'transactions per batch','2875':'You need to set a title for your payout staging.','2876':'That payout amount is invalid.','2877':'That payout date is invalid.','2878':'That payout account is invalid.','2879':'That batch size is invalid.','2880':'Starting On: ','2881':'Total Batches.','2882':'batches','2883':'You cant stage no transactions.',
        
        '2884':'royalty-payouts','2885':'stage-details','2886':'completed','2887':'The details for the royalty payout are listed below.','2888':'The royalty payout batches are listed below. Tap a batch to stage it and tap a staged batch to remove.','2889':'You cant stack royalty payouts in the same exchange twice.',
        
        '2890':'copy to clipboard.','2891':'Copied to clipboard.','2892':'remember','2893':'Remember Account.','2894':'If set to remember, your account will be remembered when you refresh the webapp. You have to enable preserve state (cookies) to activate this setting.','2895':'Pay All.',
        
        '2896':'upcoming-subscriptions','2897':' upcoming subscriptions.','2898':'Total Subscription Payment Amounts.','2899':'Here\'s the total amount of money you\'ll be paying for the subscriptions.','2900':'Your set time.','2901':'Please set a valid time.','2902':'You dont have enough money to fulfil those subscription payments.','2903':' targeted subscriptions.','c':'You can\'t target no subscriptions.','2905':'Your upcoming subscriptions. Select a subscription to ignore it in the transaction.',
        
        '2906':'You need to set your wallet first.','2907':'You can\'t delete that message.','2908':'Delete.','2909':'Message Deleted.', '2909a':'You dont have enough spend to include that award.', 
        
        /* coins details section */
        '2910':'Coin Name.','2911':'Coin Symbol.','2912':'Coin Decimal.','2913':'Base Unit Name.','2914':'Decimal Conversion Ratio.','2915':'Ledger Account Type.','2916':'Accounting','2917':'Wallet Address.','2918':'Unset','2919':'Your balance in ','2920':'Existential Deposit','2921':'Average Transaction Fee...','2922':'Per','2923':'Fee Type','2924':'Send/Receive ','2925':'Send or receive the coin from a specified account.','2926':'Pending...','2927':'Wait first, the wallet is pending.','2927a':'Ledger Consensus Mechanism.', '2927b':'Block Time', '2927c':'Ledger Age.','2927d':'Ledger Throughput.','2927e':'Block Size.','2927f':'Refresh Wallet.','2927g':'Refreshing Wallet...','2927h':'View Your Wallet on its Explorer.','2927i':'View your wallet on its Blockexplorer.', '2927j':'Wallet Value.', '2927k':'','2927l':'','2927m':'','2927n':'','2927o':'','2927p':'','2927q':'','2927r':'',
        
        /* send_receive_coin */
        '2928':'Receive the coin using the address shown below.','2929':'Send the coin using the address shown below.','2930':'Default Transaction Fee','2931':'Transaction Fee.','2932':'Set the amount you wish to pay for your transaction.','2933':'Send to Address.','2934':'Your balance is too low to make a transaction.','2935':'Please Set an amount to transfer.','2936':'You can\'t include the minimum deposit in your transaction.','2937':'You don\'t have enough coin to make that transaction.','2938':'Please set a recipient for the transfer.','2939':'That recipient address is not valid.','2940':'That transaction fee is invalid.','2941':'Send Coin Confirmation.',
        '2942':'Confirm that you want to send the coin to the target recipient.','2943':'Picked Amount.','2944':'Picked Fee.','2945':'Broadcast Transaction.','2946':'Something went wrong with the transaction broadcast.','2947':'Amount Sent','2948':'Fee Used','2949':'Transaction Size.','2950':'UTXOs consumed.','2951':'Broadcasting your Transaction...','2952':'You need to send at least 1XLM since the receiver doesnt have a XLM account.','2953':'Included Memo.','2954':'Memo (Optional)',
        
        /* pick file page */
        '2955':'image','2956':'audio','2957':'video','2958':'Pick one or multiple image files from your storage. To see an image file here, you need to upload it in the stack page.','2959':'You can\'t finish with no files selected.','2960':'You can\'t pick more than ','2961':' files.',
        
        /* buy album page */
        '2962':'buy-album','2963':'buy','2964':'album','2965':'track','2966':'Purchase access to one track or the entire catalogue.','2967':'Total Purchase amounts.','2968':'Here\'s the toal amount of money you\'ll be paying for the tracks.','2969':'Please pick a track to purchase.','2970':'You don\'t have enough money to fulfil this purchase.','2971':'The following songs will be added to your collection after the purchase.','2972':'You can\'t re-buy that song','2972a':'Available Tracks.','2972b':'Below are the available tracks for purchase.','2972c':'Unavailable Tracks.','2972d':'Below are the tracks you\'ve already purchased.','2972e':'Buy All.',

        /* buy video page */
        'a2962a':'buy-video','a2962b':'video','a2962c':'videopost','a2962d':'Purchase access to one video or the entire catalogue.','a2962e':'Available Videos.','a2962f':'Below are the available videos for purchase.','a2962g':'Unavailable Videos.','a2962h':'Below are the videos you\'ve already purchased.','a2962i':'You can\'t re-buy that video','a2962j':'Here\'s the toal amount of money you\'ll be paying for the videos.','a2962k':'Please pick a video to purchase.','a2962l':'','a2962m':'','a2962n':'','a2962o':'','a2962p':'','a2962q':'','a2962r':'','a2962s':'','a2962t':'','a2962u':'','a2962v':'','a2962w':'','a2962x':'','a2962y':'','a2962z':'','a2962ba':'','a2962bb':'','a2962bc':'',

        
        '2973':'Album Sales','2974':'Song Sales','2975':'edit-audio','2976':'Playing ','2977':'Taken from','2978':'File size','2979':'Composers','2980':'Bitrate','2981':'Codec','2982':'Codec Profile','2983':'Container','2984':'Lossless','2985':'Number of Channels','2986':'Number of Samples','2987':'Sample Rate','2988':'data','2989':'lyrics','2990':'queue','2991':'Play Queue','2992':'Below are the tracks that are up next.','2993':'synchronize','2994':'Repeating current song.','2995':'Your queue has been shuffled.','2996':'up-next','2997':'previous',
        

        '2998':'Add to Playlist.','2999':'Play Next.','3000':'Play Last.','3001':'Remove from queue.','3002':'Song will be played next.','3003':'Song will be played last.','3004':'Removed song from queue.','3005':'You need to be playing something first.','3006':'You cant remove that song.','3006a':'Add the track to one of your playlists.','3006b':'Play the track next.','3006c':'Play the track last.','3006d':'Remove track from queue.','3006e':'Remove from Playlist.','3006f':'Remove the track from your playlist.','3006g':'Track removed from your playlist.','3006h':'Confirm Deletion.','3006i':'Are you sure you want to delete the playlist?','3006j':'Playlist Deleted.','3006k':'Download Track.', '3006l':'Cache the track in your cookies to load it faster in the future. Cookies will be enabled.', '3006m':'The track will be cached in a few moments.', '3006n':'', '3006o':'',
        
        /* add to playlist page */
        '3007':'Add to playlist.','3008':'You can add to an existing playlist or a new playlist.','3009':'existing','3010':'new','3011':'Youre creating a new Playlist.','3012':'Playlist Title','3013':'Playlist Description (optional)','3014':'Create and Add.','3015':'You need a title for your new playlist.','3016':'That title is too long.','3017':'Added your song to the new playlist.','3018':'A playlist with a similar title exists in your library.','3019':'You\'re adding the song to an existing playlist.','3020':'Added your song to the playlist.','3021':'You need to buy the track to add it to your playlists','3022':'Please purchase the song to play it.',
        
        '3023':'edit-video','3024':'Videopost Sales.','3025':'Video Sales','3026':'details','3027':'queue','3028':'Loading...','3029':'e is already playing that video.','3030':'edit-nitro',
        
        
        '3031':'buy-storage','3032':'nitro','3033':'storage','3034':'Set the amount of space you wish to buy in the node.','3035':'Selected Space.','3036':'Set Maximum','3037':'Final Fees.','3038':'The final price of the storage amounts you wish to purchase is shown.','3039':'Please set an amount of storage to purchase.',
        
        /* configure nitro page */
        '3040':'boot','3041':'restore','3042':'backup','3043':'new-E5','3044':'delete-E5','3045':'iteration','3046':'content-gateway','3047':'provider','3048':'boot-storage','3049':'reconfigure-storage','3050':'back-ups','3051':'Boot the node to begin the syncronization process.','3052':'App Key...','3053':'Backup key (Optional)...','3054':'Boot Node','3054a':'','3054b':'','3054c':'','3054d':'','3054e':'','3054f':'','3054g':'','3054h':'','3054i':'An app key is required to boot the node.','3054j':'Attempting to boot the node...','3054k':'Something went wrong with the request.','3054l':'Restore the node to a previous back up.','3054m':'File Name...','3054n':'Backup file encryption key (optional)...','3054o':'This should be the previous key used to encrypt the backup files (if the node was rebooted). If unset, the backup key you set above will be used. And if that is unset, the encrypted backup key provided while posting the node will be used.','3054p':'replace-key','3054q':'Replace backup key','3054r':'If set to replace-key, the backup key will be updated to the key you provide above.','3054s':'Restore Node','3054t':'You need to specify a file name first.',
        '3054u':'Attempting to restore the node...','3054v':'Manually back up the node at this time remotely.','3054w':'Back up node','3054x':'Attempting to back up the node remotely...','3054y':'E5 Address...','3054z':'Web3 provider...','3054ba':'Starting Block Number...','3054bb':'Synchronizing Iteration...','3054bc':'Please select an E5.','3054bd':'That E5 address is not valid.','3054be':'That web3 provider is not valid.','3054bf':'Please set a starting block to start synching from.','3054bg':'Please set an iteration value for node\'s the sync process.','3054bh':'Attempting to boot the E5 in the node...','3054bi':'Delete an E5 and its events from the node.','3054bj':'Boot E5','3054bk':'Remove E5',
        '3054bl':'Attempting to remove the E5 from the node...','3054bm':'Change the node\'s block syncronization iteration value.','3054bn':'Change Iteration','3054bo':'Attempting to change the synchronization iteration...','3054bp':'Change the gateway used to fetch data in ipfs.','3054bq':'Provider...','3054br':'Update Gateway','3054bs':'Current Provider','3054bt':'Unset','3054bu':'Update Provider.','3054bv':'That gateway provider is not valid.','3054bw':'Attempting to change the gateway provider...','3054bx':'Change the Web3 provider url.','3054by':'Update Provider','3054bz':'Attempting to change the web3 provider url...','3054ca':'Boot and enable storage capabilities in your node.','3054cb':'Max buyable Capapacity','3054cc':'Storage Price.','3054cd':'Set the price per megabyte of storage for your node in your preferred tokens.','3054ce':'Boot Stroage','3054cf':'You need to specify a maximum amount of storage that can be bought','3054cg':'You need to specify a price for your storage.','3054ch':'You need to specify a recipient for the storage purchases.','3054ci':'Attempting to enable storage with your specified configuration...','3054cj':'Max-Buyable-Capacity','3054ck':'Price','3054cl':'Recipient','3054cm':'Change the current setting for the storage service in the node.','3054cn':'Update Capacity','3054co':'Attempting to update your storage configuration...','3054cp':'Update Prices','3054cq':'Update Recipient','3054cr':'enabled','3054cs':'Free Basic Storage','3054ct':'If set to enabled, users will be able to store post metadata in your node for free.','3054cu':'free-storage','3054cv':'update selection','3054cw':'Post added to your blocked list.','3054cx':'Post unblocked.','3054cy':'dialer','3054cz':'Configure or disable the nodes dialer functionality.','3054da':'optional','3054db':'Optional Subscription?','3054dc':'Dialer Enabled?','3054dd':'If set to enabled, your node will handle dials from accounts over the internet.','3054de':'If set to optional, the subscription set will be ignored and calls will be handled by the node for free.','3054df':'Subscription Id...','3054dg':'Configure Dialer','3054dh':'You havent set a subscription to use.','3054di':'Attempting to update your dialer configuration...','3054dj':'dialer node endpoint...','3054dk':'That enpoint is not valid.','3054dl':'','3054dm':'','3054dn':'',
        
        /* dialer */
        '3055':'Call Recipient.','3055a':'Your recipient\'s socket id.','3055b':'Call status','3055c':'N/A','3055d':'Connecting...','3055e':'hold','3055f':'resume call','3055g':'end call','3055h':'Your socket id.','3055i':'receive call','3055j':'Incoming call from ','3055k':'Caller','3055l':'Caller\'s socket id.','3055m':'Active','3055n':'e needs access to your microphone to receive that call.','3055o':'Call active.','3055p':'Call ended by ','3055q':'Call ended.','3055r':'','3055s':'','3055t':'','3055u':'','3055v':'','3055w':'','3055x':'','3055y':'','3055z':'','3055ba':'','3055bb':'',
        
        
        '3056':'','3057':'','3058':'','3059':'','3060':'','3061':'','3062':'','3063':'','3064':'','3065':'','3066':'','3067':'','3068':'','3069':'','3070':'','3071':'','3072':'','3073':'','3074':'','3075':'','3076':'','3077':'','3078':'','3079':'','3080':'','3081':'','3082':'','3083':'','3084':'','3085':'','3086':'','3087':'','3088':'','3089':'','3090':'','3091':'','3092':'','3093':'','3094':'','3095':'','3096':'','3097':'','3098':'','3099':'','3100':'','3101':'','3102':'','3103':'','3104':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'','':'',


      }
      //this.props.app_state.loc['']
    }

    if(!accepted_languages.includes(language)) return obj['en']
    return obj[language]
  }

  get_coin_data(){
    var list = {
        'BTC': this.get_coin_info('BTC', 'Bitcoin', 'https://bafkreie2kzwwxljfs2vfnha5dey4m2mol7isouyozsmfervtqovv4dxwjy.ipfs.w3s.link/', 'satoshi', 8, 100_000_000, 'UTXO', 'Proof Of Work', '10 min.', this.get_time_difference(1231006505), 3, 1),

        'BCH': this.get_coin_info('BCH', 'Bitcoin Cash', 'https://bafkreieqzh5ukzx7xkqbat6enbs6vvui45mzrdel72nrpvquggddnyqzge.ipfs.w3s.link/', 'satoshi', 8, 100_000_000, 'UTXO','Proof Of Work','10 min.', this.get_time_difference(1231006505), 60, 32),

        'LTC': this.get_coin_info('LTC', 'Litecoin', 'https://bafkreibssgaxtckfjpfi3rwrhq24aapqukesjliidbuo2tefsfyvudccia.ipfs.w3s.link/', 'litoshi', 8, 100_000_000, 'UTXO','Proof Of Work', '2.5 min.', this.get_time_difference(1317972665), 56, 1),

        'DOGE': this.get_coin_info('DOGE', 'Dogecoin', 'https://bafkreigu2tax5e3kfiisfcx3yo4k54ly5za4p33n7cs4lvgdsrnqezkqey.ipfs.w3s.link/', 'koinu', 8, 100_000_000, 'UTXO','Proof Of Work', '1 min.', this.get_time_difference(1386338512), 30, 1),

        'DASH': this.get_coin_info('DASH', 'Dash', 'https://bafkreicc4b6lb6pz2ql3iefz2graqvm5apk44jf3tjtwomdzi7pmsr3wiu.ipfs.w3s.link/', 'duff', 8, 100_000_000, 'UTXO','Proof Of Work', '2.5 min.', this.get_time_difference(1390083000), 56, 2),

        'TRX': this.get_coin_info('TRX', 'Tron', 'https://bafkreibogf2z4apmef7soghheiudwel67br5nxnuq4hydtvcqppme6lsre.ipfs.w3s.link/', 'sun', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Delegated Proof Of Stake', '3 sec.', this.get_time_difference(1529885280), 2000, 1),
        
        'XRP': this.get_coin_info('XRP', 'Xrp', 'https://bafkreidql7b6v2emvlcnyl7qkhbzjknyvhu33ifxogf34236mmwue6bo4y.ipfs.w3s.link/', 'drops', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Ripple Protocol Consensus Algorithm', '5 sec.', this.get_time_difference(1338672000), 1500, '~~~'),

        'XLM': this.get_coin_info('XLM', 'Stellar', 'https://bafkreiaeipmjvsizk6sbucvudjg332iaumravdte3p6gdnotfjbxsriqre.ipfs.w3s.link/', 'stroop', 7, 10_000_000, this.getLocale()['2916']/* Accounting' */, 'Stellar Consensus Protocol ', '5 sec.', this.get_time_difference(1406780800), 1000, '~~~'),

        // 'DOT': this.get_coin_info('DOT', 'Polkadot', 'https://bafkreiewfdxotkspy37674wmlayzuurlgqrs3p4pbdzxqmysmsqpagtpk4.ipfs.w3s.link/', 'planck', 10, 10_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Nominated Proof of Stake', '6 sec.', this.get_time_difference(1590480213), 1000, '~~~'),

        // 'KSM': this.get_coin_info('KSM', 'Kusama', 'https://bafkreifdhcp4hfl2hkkhfg6biz2rfyru5mzeyusqprgvcje4mbzr77kzpy.ipfs.w3s.link/', 'planck', 12, 1_000_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Nominated Proof of Stake', '6 sec.', this.get_time_difference(1566096000), 1000, '~~~'),

        'ALGO': this.get_coin_info('ALGO', 'Algorand', 'https://bafkreif2p2eskun4pvetbksltymzhvajojqxv3mlbuazizqgonz6pbrt7u.ipfs.w3s.link/', '𝜇algo', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Pure Proof of Stake', '4.5 sec.', this.get_time_difference(1560902400), 1000, 5),

        'XTZ': this.get_coin_info('XTZ', 'Tezos', 'https://bafkreif5oy6o25qilqizjchl6pf7tud76yag7ubrnbwxfahpduh5uynx5y.ipfs.w3s.link/', 'mutez', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Liquid Proof of Stake', '30 sec.', this.get_time_difference(1537161600), 40, 1),

        'ATOM': this.get_coin_info('ATOM', 'Cosmos', 'https://bafybeifoqwr7jwsvreehrrtoabeaqvoorti42gam26dfo2rxm7vv3tks7a.ipfs.w3s.link/cosmos.png', 'uATOM', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Delegated Proof of Stake', '10 sec.', this.get_time_difference(1552521600), 1000, '~~~'),

        'FIL': this.get_coin_info('FIL', 'Filecoin', 'https://bafybeidjiadnbmhhh5xrtjnhywj7dulx7d66ks2frq6kwwnykgryjd55bu.ipfs.w3s.link/filecoin.png', 'attoFIL', 18, 1_000_000_000_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof of Spacetime & Proof of Replication', '50 sec.', this.get_time_difference(1602729600), 7, '~~~'),

        'SOL': this.get_coin_info('SOL', 'Solana', 'https://bafkreie4wh23gwfdj4b2otksmajb7dmfvtn376kv3jfivmwocutkq773ai.ipfs.w3s.link/', 'lamport', 9, 1_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof of Stake & Proof of History', '0.4 sec.', this.get_time_difference(1584372000),65_000, 2 ),

        'APT': this.get_coin_info('APT', 'Aptos', 'https://bafkreiafrdwgjayx3pjc42rfgzfclogm2ojd4hj522jnilw4std3rh4j5y.ipfs.w3s.link/', 'octa', 8, 100_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof Of Stake', '0.21 sec.', this.get_time_difference(1665532800), 160_000, '~~~'),

        // 'ADA': this.get_coin_info('ADA', 'Cardano', 'https://bafkreighfusfpcbbvoqmjeoyxo7bnxqc3rdhctsvj7wwe74bdpnav7uxem.ipfs.w3s.link/', 'lovelace', 6, 1_000_000, 'UTXO', 'Proof Of Stake', '20 sec.', this.get_time_difference(1506203091), 10, 0.088),

        'STX': this.get_coin_info('STX', 'Stacks', 'https://bafkreigcxeejba4qmk33ecsmlzzpmfxlihwtqmwje4cyjxiu6fg3wfmcrm.ipfs.w3s.link/', 'microSTX', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof Of Transfer', '10 sec.', this.get_time_difference(1610641813), 10, '~~~'),

        'AR': this.get_coin_info('AR', 'Arweave', 'https://bafkreidyyzdm2fp7bz6wwv7eyyxpzll4djv4pal74x4wcfheyh6qiqd75a.ipfs.w3s.link/', 'winston', 12, 1_000_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Succinct Proof of Random Access', '2 min.', this.get_time_difference(1528473343), 5, '~~~'),
    }
    return list
  }

  get_coin_info(symbol, name, image_url, base_unit, decimals, conversion, account_type, consensus_mechanism, block_time, ledger_age, throughput, block_size){
    return{
      'name':name,
      'id':symbol,
      'symbol':symbol,
      'base_unit':base_unit,
      'decimals':decimals,
      'conversion':conversion,
      'label':{'title':symbol, 'details':name, 'size':'l', 'image': image_url},
      'banner-icon':{'header':symbol, 'subtitle':name, 'image':image_url},
      'tags':{'active_tags':[name, 'Coin', symbol], 'index_option':'indexed'},
      'account_type':account_type,
      'consensus_mechanism':consensus_mechanism,
      'block_time':block_time,
      'ledger_age':ledger_age,
      'throughput':throughput,
      'block_size':block_size
    }
  }

  get_default_addresses(){
    var default_addresses = [
        '5VH6APQQOWDXWHQGYH3UJHX4MFTL6IGJHMHXS5LIZPO4DG5UVTRKE63PNQ',
        '1GNvmBVCFhQasLkfM6BsFtgxPuUpECvUBa',
        '1M1X8gy9n1z3n22Ddksgn1kM6JAuz65L5x',
        'cosmos18tux8kpx82v6z0p9mgc6s6kym352486lyd7av9',
        'XsRwNDdfTMiYM6A7HbSLMujZbSPh3xkhy2',
        'DA88P2NRpG4rLsJ1knGVaunFGsDC92oPAe',
        'f1jv3rl3ogw3tvb67wzvqvrott6icfhavh6uopeca',
        'FMXGHcdqYH9NnJcPWgZAh8rHWLEu3xozJqjFypvWQDquLAE',
        'LXeHJfiDG39XPaK8eT3WGvQetehnmg4Hfn',
        '13nCkJXq4xXh4fVgaSvWQtbzzY3enghmcRjU2cYKah2sLn2k',
        'GDWU7YB6CB2YO6Y6A3A7ORE67RQWNPZAZE5Q66LVNDF53QM3WSWOFXLF',
        'tz1UF8y8MmpLbsTKwMZUaoHqvjrjaT4p4d92',
        'TEGgcyRe4GfyRRS73adfVVtTDBpUuSPXGY',
        'rpTTrdJSFrqhKuwv87MJj8egULabstELn9',
        '7KjURTEzcC96eWQDcLsZxRqo1gM3SA7dkHxFsrAYsspe',
        '0x8d8de185540f8d946b7999535d18e06c80e53ca4e47d43a852df57f2ef4f0c5d',
        'SPDDSC21KS91Y9FANB2X4T6NDRX0HRPD401EDRV2',
        'LPaDEyLV_65-koonfKiay_DU8Ti2nEZU6GU56bb1C_U',
    ]
    return default_addresses
  }

  /* gets a formatted time diffrence from now to a given time */
  get_time_difference(time){
      var number_date = Math.round(parseInt(time));
      var now = Math.round(new Date().getTime()/1000);

      var diff = now - number_date;
      return this.get_time_diff(diff)
  }

  get_time_diff(diff){
    if(diff < 60){//less than 1 min
        var num = diff
        var s = num > 1 ? 's': '';
        return num+ this.getLocale()['29']
    }
    else if(diff < 60*60){//less than 1 hour
        var num = Math.floor(diff/(60));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['30'] 
    }
    else if(diff < 60*60*24){//less than 24 hours
        var num = Math.floor(diff/(60*60));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['31'] + s;
    }
    else if(diff < 60*60*24*7){//less than 7 days
        var num = Math.floor(diff/(60*60*24));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['32'] + s;
    }
    else if(diff < 60*60*24*7*53){//less than 1 year
        var num = Math.floor(diff/(60*60*24*7));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['33'] + s;
    }
    else {//more than a year
        var num = Math.floor(diff/(60*60*24*7*53));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['34'] + s;
    }
  }

  get_supported_languages(){
    return [
      {
          "code": "ab",
          "name": "Abkhaz",
          "nativeName": "аҧсуа"
      },
      {
          "code": "aa",
          "name": "Afar",
          "nativeName": "Afaraf"
      },
      {
          "code": "af",
          "name": "Afrikaans",
          "nativeName": "Afrikaans"
      },
      {
          "code": "ak",
          "name": "Akan",
          "nativeName": "Akan"
      },
      {
          "code": "sq",
          "name": "Albanian",
          "nativeName": "Shqip"
      },
      {
          "code": "am",
          "name": "Amharic",
          "nativeName": "አማርኛ"
      },
      {
          "code": "ar",
          "name": "Arabic",
          "nativeName": "العربية"
      },
      {
          "code": "an",
          "name": "Aragonese",
          "nativeName": "Aragonés"
      },
      {
          "code": "hy",
          "name": "Armenian",
          "nativeName": "Հայերեն"
      },
      {
          "code": "as",
          "name": "Assamese",
          "nativeName": "অসমীয়া"
      },
      {
          "code": "av",
          "name": "Avaric",
          "nativeName": "авар мацӀ, магӀарул мацӀ"
      },
      {
          "code": "ae",
          "name": "Avestan",
          "nativeName": "avesta"
      },
      {
          "code": "ay",
          "name": "Aymara",
          "nativeName": "aymar aru"
      },
      {
          "code": "az",
          "name": "Azerbaijani",
          "nativeName": "azərbaycan dili"
      },
      {
          "code": "bm",
          "name": "Bambara",
          "nativeName": "bamanankan"
      },
      {
          "code": "ba",
          "name": "Bashkir",
          "nativeName": "башҡорт теле"
      },
      {
          "code": "eu",
          "name": "Basque",
          "nativeName": "euskara, euskera"
      },
      {
          "code": "be",
          "name": "Belarusian",
          "nativeName": "Беларуская"
      },
      {
          "code": "bn",
          "name": "Bengali",
          "nativeName": "বাংলা"
      },
      {
          "code": "bh",
          "name": "Bihari",
          "nativeName": "भोजपुरी"
      },
      {
          "code": "bi",
          "name": "Bislama",
          "nativeName": "Bislama"
      },
      {
          "code": "bs",
          "name": "Bosnian",
          "nativeName": "bosanski jezik"
      },
      {
          "code": "br",
          "name": "Breton",
          "nativeName": "brezhoneg"
      },
      {
          "code": "bg",
          "name": "Bulgarian",
          "nativeName": "български език"
      },
      {
          "code": "my",
          "name": "Burmese",
          "nativeName": "ဗမာစာ"
      },
      {
          "code": "ca",
          "name": "Catalan; Valencian",
          "nativeName": "Català"
      },
      {
          "code": "ch",
          "name": "Chamorro",
          "nativeName": "Chamoru"
      },
      {
          "code": "ce",
          "name": "Chechen",
          "nativeName": "нохчийн мотт"
      },
      {
          "code": "ny",
          "name": "Chichewa; Chewa; Nyanja",
          "nativeName": "chiCheŵa, chinyanja"
      },
      {
          "code": "zh",
          "name": "Chinese",
          "nativeName": "中文 (Zhōngwén), 汉语, 漢語"
      },
      {
          "code": "cv",
          "name": "Chuvash",
          "nativeName": "чӑваш чӗлхи"
      },
      {
          "code": "kw",
          "name": "Cornish",
          "nativeName": "Kernewek"
      },
      {
          "code": "co",
          "name": "Corsican",
          "nativeName": "corsu, lingua corsa"
      },
      {
          "code": "cr",
          "name": "Cree",
          "nativeName": "ᓀᐦᐃᔭᐍᐏᐣ"
      },
      {
          "code": "hr",
          "name": "Croatian",
          "nativeName": "hrvatski"
      },
      {
          "code": "cs",
          "name": "Czech",
          "nativeName": "česky, čeština"
      },
      {
          "code": "da",
          "name": "Danish",
          "nativeName": "dansk"
      },
      {
          "code": "dv",
          "name": "Divehi; Dhivehi; Maldivian;",
          "nativeName": "ދިވެހި"
      },
      {
          "code": "nl",
          "name": "Dutch",
          "nativeName": "Nederlands, Vlaams"
      },
      {
          "code": "en",
          "name": "English",
          "nativeName": "English"
      },
      {
          "code": "eo",
          "name": "Esperanto",
          "nativeName": "Esperanto"
      },
      {
          "code": "et",
          "name": "Estonian",
          "nativeName": "eesti, eesti keel"
      },
      {
          "code": "ee",
          "name": "Ewe",
          "nativeName": "Eʋegbe"
      },
      {
          "code": "fo",
          "name": "Faroese",
          "nativeName": "føroyskt"
      },
      {
          "code": "fj",
          "name": "Fijian",
          "nativeName": "vosa Vakaviti"
      },
      {
          "code": "fi",
          "name": "Finnish",
          "nativeName": "suomi, suomen kieli"
      },
      {
          "code": "fr",
          "name": "French",
          "nativeName": "français, langue française"
      },
      {
          "code": "ff",
          "name": "Fula; Fulah; Pulaar; Pular",
          "nativeName": "Fulfulde, Pulaar, Pular"
      },
      {
          "code": "gl",
          "name": "Galician",
          "nativeName": "Galego"
      },
      {
          "code": "ka",
          "name": "Georgian",
          "nativeName": "ქართული"
      },
      {
          "code": "de",
          "name": "German",
          "nativeName": "Deutsch"
      },
      {
          "code": "el",
          "name": "Greek, Modern",
          "nativeName": "Ελληνικά"
      },
      {
          "code": "gn",
          "name": "Guaraní",
          "nativeName": "Avañeẽ"
      },
      {
          "code": "gu",
          "name": "Gujarati",
          "nativeName": "ગુજરાતી"
      },
      {
          "code": "ht",
          "name": "Haitian; Haitian Creole",
          "nativeName": "Kreyòl ayisyen"
      },
      {
          "code": "ha",
          "name": "Hausa",
          "nativeName": "Hausa, هَوُسَ"
      },
      {
          "code": "he",
          "name": "Hebrew (modern)",
          "nativeName": "עברית"
      },
      {
          "code": "hz",
          "name": "Herero",
          "nativeName": "Otjiherero"
      },
      {
          "code": "hi",
          "name": "Hindi",
          "nativeName": "हिन्दी, हिंदी"
      },
      {
          "code": "ho",
          "name": "Hiri Motu",
          "nativeName": "Hiri Motu"
      },
      {
          "code": "hu",
          "name": "Hungarian",
          "nativeName": "Magyar"
      },
      {
          "code": "ia",
          "name": "Interlingua",
          "nativeName": "Interlingua"
      },
      {
          "code": "id",
          "name": "Indonesian",
          "nativeName": "Bahasa Indonesia"
      },
      {
          "code": "ie",
          "name": "Interlingue",
          "nativeName": "Originally called Occidental; then Interlingue after WWII"
      },
      {
          "code": "ga",
          "name": "Irish",
          "nativeName": "Gaeilge"
      },
      {
          "code": "ig",
          "name": "Igbo",
          "nativeName": "Asụsụ Igbo"
      },
      {
          "code": "ik",
          "name": "Inupiaq",
          "nativeName": "Iñupiaq, Iñupiatun"
      },
      {
          "code": "io",
          "name": "Ido",
          "nativeName": "Ido"
      },
      {
          "code": "is",
          "name": "Icelandic",
          "nativeName": "Íslenska"
      },
      {
          "code": "it",
          "name": "Italian",
          "nativeName": "Italiano"
      },
      {
          "code": "iu",
          "name": "Inuktitut",
          "nativeName": "ᐃᓄᒃᑎᑐᑦ"
      },
      {
          "code": "ja",
          "name": "Japanese",
          "nativeName": "日本語 (にほんご／にっぽんご)"
      },
      {
          "code": "jv",
          "name": "Javanese",
          "nativeName": "basa Jawa"
      },
      {
          "code": "kl",
          "name": "Kalaallisut, Greenlandic",
          "nativeName": "kalaallisut, kalaallit oqaasii"
      },
      {
          "code": "kn",
          "name": "Kannada",
          "nativeName": "ಕನ್ನಡ"
      },
      {
          "code": "kr",
          "name": "Kanuri",
          "nativeName": "Kanuri"
      },
      {
          "code": "ks",
          "name": "Kashmiri",
          "nativeName": "कश्मीरी, كشميري‎"
      },
      {
          "code": "kk",
          "name": "Kazakh",
          "nativeName": "Қазақ тілі"
      },
      {
          "code": "km",
          "name": "Khmer",
          "nativeName": "ភាសាខ្មែរ"
      },
      {
          "code": "ki",
          "name": "Kikuyu, Gikuyu",
          "nativeName": "Gĩkũyũ"
      },
      {
          "code": "rw",
          "name": "Kinyarwanda",
          "nativeName": "Ikinyarwanda"
      },
      {
          "code": "ky",
          "name": "Kirghiz, Kyrgyz",
          "nativeName": "кыргыз тили"
      },
      {
          "code": "kv",
          "name": "Komi",
          "nativeName": "коми кыв"
      },
      {
          "code": "kg",
          "name": "Kongo",
          "nativeName": "KiKongo"
      },
      {
          "code": "ko",
          "name": "Korean",
          "nativeName": "한국어 (韓國語), 조선말 (朝鮮語)"
      },
      {
          "code": "ku",
          "name": "Kurdish",
          "nativeName": "Kurdî, كوردی‎"
      },
      {
          "code": "kj",
          "name": "Kwanyama, Kuanyama",
          "nativeName": "Kuanyama"
      },
      {
          "code": "la",
          "name": "Latin",
          "nativeName": "latine, lingua latina"
      },
      {
          "code": "lb",
          "name": "Luxembourgish, Letzeburgesch",
          "nativeName": "Lëtzebuergesch"
      },
      {
          "code": "lg",
          "name": "Luganda",
          "nativeName": "Luganda"
      },
      {
          "code": "li",
          "name": "Limburgish, Limburgan, Limburger",
          "nativeName": "Limburgs"
      },
      {
          "code": "ln",
          "name": "Lingala",
          "nativeName": "Lingála"
      },
      {
          "code": "lo",
          "name": "Lao",
          "nativeName": "ພາສາລາວ"
      },
      {
          "code": "lt",
          "name": "Lithuanian",
          "nativeName": "lietuvių kalba"
      },
      {
          "code": "lu",
          "name": "Luba-Katanga",
          "nativeName": ""
      },
      {
          "code": "lv",
          "name": "Latvian",
          "nativeName": "latviešu valoda"
      },
      {
          "code": "gv",
          "name": "Manx",
          "nativeName": "Gaelg, Gailck"
      },
      {
          "code": "mk",
          "name": "Macedonian",
          "nativeName": "македонски јазик"
      },
      {
          "code": "mg",
          "name": "Malagasy",
          "nativeName": "Malagasy fiteny"
      },
      {
          "code": "ms",
          "name": "Malay",
          "nativeName": "bahasa Melayu, بهاس ملايو‎"
      },
      {
          "code": "ml",
          "name": "Malayalam",
          "nativeName": "മലയാളം"
      },
      {
          "code": "mt",
          "name": "Maltese",
          "nativeName": "Malti"
      },
      {
          "code": "mi",
          "name": "Māori",
          "nativeName": "te reo Māori"
      },
      {
          "code": "mr",
          "name": "Marathi (Marāṭhī)",
          "nativeName": "मराठी"
      },
      {
          "code": "mh",
          "name": "Marshallese",
          "nativeName": "Kajin M̧ajeļ"
      },
      {
          "code": "mn",
          "name": "Mongolian",
          "nativeName": "монгол"
      },
      {
          "code": "na",
          "name": "Nauru",
          "nativeName": "Ekakairũ Naoero"
      },
      {
          "code": "nv",
          "name": "Navajo, Navaho",
          "nativeName": "Diné bizaad, Dinékʼehǰí"
      },
      {
          "code": "nb",
          "name": "Norwegian Bokmål",
          "nativeName": "Norsk bokmål"
      },
      {
          "code": "nd",
          "name": "North Ndebele",
          "nativeName": "isiNdebele"
      },
      {
          "code": "ne",
          "name": "Nepali",
          "nativeName": "नेपाली"
      },
      {
          "code": "ng",
          "name": "Ndonga",
          "nativeName": "Owambo"
      },
      {
          "code": "nn",
          "name": "Norwegian Nynorsk",
          "nativeName": "Norsk nynorsk"
      },
      {
          "code": "no",
          "name": "Norwegian",
          "nativeName": "Norsk"
      },
      {
          "code": "ii",
          "name": "Nuosu",
          "nativeName": "ꆈꌠ꒿ Nuosuhxop"
      },
      {
          "code": "nr",
          "name": "South Ndebele",
          "nativeName": "isiNdebele"
      },
      {
          "code": "oc",
          "name": "Occitan",
          "nativeName": "Occitan"
      },
      {
          "code": "oj",
          "name": "Ojibwe, Ojibwa",
          "nativeName": "ᐊᓂᔑᓈᐯᒧᐎᓐ"
      },
      {
          "code": "cu",
          "name": "Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic",
          "nativeName": "ѩзыкъ словѣньскъ"
      },
      {
          "code": "om",
          "name": "Oromo",
          "nativeName": "Afaan Oromoo"
      },
      {
          "code": "or",
          "name": "Oriya",
          "nativeName": "ଓଡ଼ିଆ"
      },
      {
          "code": "os",
          "name": "Ossetian, Ossetic",
          "nativeName": "ирон æвзаг"
      },
      {
          "code": "pa",
          "name": "Panjabi, Punjabi",
          "nativeName": "ਪੰਜਾਬੀ, پنجابی‎"
      },
      {
          "code": "pi",
          "name": "Pāli",
          "nativeName": "पाऴि"
      },
      {
          "code": "fa",
          "name": "Persian",
          "nativeName": "فارسی"
      },
      {
          "code": "pl",
          "name": "Polish",
          "nativeName": "polski"
      },
      {
          "code": "ps",
          "name": "Pashto, Pushto",
          "nativeName": "پښتو"
      },
      {
          "code": "pt",
          "name": "Portuguese",
          "nativeName": "Português"
      },
      {
          "code": "qu",
          "name": "Quechua",
          "nativeName": "Runa Simi, Kichwa"
      },
      {
          "code": "rm",
          "name": "Romansh",
          "nativeName": "rumantsch grischun"
      },
      {
          "code": "rn",
          "name": "Kirundi",
          "nativeName": "kiRundi"
      },
      {
          "code": "ro",
          "name": "Romanian, Moldavian, Moldovan",
          "nativeName": "română"
      },
      {
          "code": "ru",
          "name": "Russian",
          "nativeName": "русский язык"
      },
      {
          "code": "sa",
          "name": "Sanskrit (Saṁskṛta)",
          "nativeName": "संस्कृतम्"
      },
      {
          "code": "sc",
          "name": "Sardinian",
          "nativeName": "sardu"
      },
      {
          "code": "sd",
          "name": "Sindhi",
          "nativeName": "सिन्धी, سنڌي، سندھی‎"
      },
      {
          "code": "se",
          "name": "Northern Sami",
          "nativeName": "Davvisámegiella"
      },
      {
          "code": "sm",
          "name": "Samoan",
          "nativeName": "gagana faa Samoa"
      },
      {
          "code": "sg",
          "name": "Sango",
          "nativeName": "yângâ tî sängö"
      },
      {
          "code": "sr",
          "name": "Serbian",
          "nativeName": "српски језик"
      },
      {
          "code": "gd",
          "name": "Scottish Gaelic; Gaelic",
          "nativeName": "Gàidhlig"
      },
      {
          "code": "sn",
          "name": "Shona",
          "nativeName": "chiShona"
      },
      {
          "code": "si",
          "name": "Sinhala, Sinhalese",
          "nativeName": "සිංහල"
      },
      {
          "code": "sk",
          "name": "Slovak",
          "nativeName": "slovenčina"
      },
      {
          "code": "sl",
          "name": "Slovene",
          "nativeName": "slovenščina"
      },
      {
          "code": "so",
          "name": "Somali",
          "nativeName": "Soomaaliga, af Soomaali"
      },
      {
          "code": "st",
          "name": "Southern Sotho",
          "nativeName": "Sesotho"
      },
      {
          "code": "es",
          "name": "Spanish; Castilian",
          "nativeName": "español, castellano"
      },
      {
          "code": "su",
          "name": "Sundanese",
          "nativeName": "Basa Sunda"
      },
      {
          "code": "sw",
          "name": "Swahili",
          "nativeName": "Kiswahili"
      },
      {
          "code": "ss",
          "name": "Swati",
          "nativeName": "SiSwati"
      },
      {
          "code": "sv",
          "name": "Swedish",
          "nativeName": "svenska"
      },
      {
          "code": "ta",
          "name": "Tamil",
          "nativeName": "தமிழ்"
      },
      {
          "code": "te",
          "name": "Telugu",
          "nativeName": "తెలుగు"
      },
      {
          "code": "tg",
          "name": "Tajik",
          "nativeName": "тоҷикӣ, toğikī, تاجیکی‎"
      },
      {
          "code": "th",
          "name": "Thai",
          "nativeName": "ไทย"
      },
      {
          "code": "ti",
          "name": "Tigrinya",
          "nativeName": "ትግርኛ"
      },
      {
          "code": "bo",
          "name": "Tibetan Standard, Tibetan, Central",
          "nativeName": "བོད་ཡིག"
      },
      {
          "code": "tk",
          "name": "Turkmen",
          "nativeName": "Türkmen, Түркмен"
      },
      {
          "code": "tl",
          "name": "Tagalog",
          "nativeName": "Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔"
      },
      {
          "code": "tn",
          "name": "Tswana",
          "nativeName": "Setswana"
      },
      {
          "code": "to",
          "name": "Tonga (Tonga Islands)",
          "nativeName": "faka Tonga"
      },
      {
          "code": "tr",
          "name": "Turkish",
          "nativeName": "Türkçe"
      },
      {
          "code": "ts",
          "name": "Tsonga",
          "nativeName": "Xitsonga"
      },
      {
          "code": "tt",
          "name": "Tatar",
          "nativeName": "татарча, tatarça, تاتارچا‎"
      },
      {
          "code": "tw",
          "name": "Twi",
          "nativeName": "Twi"
      },
      {
          "code": "ty",
          "name": "Tahitian",
          "nativeName": "Reo Tahiti"
      },
      {
          "code": "ug",
          "name": "Uighur, Uyghur",
          "nativeName": "Uyƣurqə, ئۇيغۇرچە‎"
      },
      {
          "code": "uk",
          "name": "Ukrainian",
          "nativeName": "українська"
      },
      {
          "code": "ur",
          "name": "Urdu",
          "nativeName": "اردو"
      },
      {
          "code": "uz",
          "name": "Uzbek",
          "nativeName": "zbek, Ўзбек, أۇزبېك‎"
      },
      {
          "code": "ve",
          "name": "Venda",
          "nativeName": "Tshivenḓa"
      },
      {
          "code": "vi",
          "name": "Vietnamese",
          "nativeName": "Tiếng Việt"
      },
      {
          "code": "vo",
          "name": "Volapük",
          "nativeName": "Volapük"
      },
      {
          "code": "wa",
          "name": "Walloon",
          "nativeName": "Walon"
      },
      {
          "code": "cy",
          "name": "Welsh",
          "nativeName": "Cymraeg"
      },
      {
          "code": "wo",
          "name": "Wolof",
          "nativeName": "Wollof"
      },
      {
          "code": "fy",
          "name": "Western Frisian",
          "nativeName": "Frysk"
      },
      {
          "code": "xh",
          "name": "Xhosa",
          "nativeName": "isiXhosa"
      },
      {
          "code": "yi",
          "name": "Yiddish",
          "nativeName": "ייִדיש"
      },
      {
          "code": "yo",
          "name": "Yoruba",
          "nativeName": "Yorùbá"
      },
      {
          "code": "za",
          "name": "Zhuang, Chuang",
          "nativeName": "Saɯ cueŋƅ, Saw cuengh"
      }
    ]
  }










  constructor(props) {
    super(props);
    this.homepage = React.createRef();
    this.send_receive_ether_page = React.createRef();
    this.wiki_page = React.createRef();
    this.new_contract_page = React.createRef();
    this.new_token_page = React.createRef();
    this.new_subscription_page = React.createRef();
    this.new_post_page = React.createRef();
    this.new_channel_page = React.createRef();
    this.new_job_page = React.createRef();
    this.new_storefront_page = React.createRef();
    this.new_storefront_item_page = React.createRef();

    this.new_mint_dump_token_page = React.createRef();
    this.new_transfer_token_page = React.createRef();
    this.enter_contract_page = React.createRef();
    this.extend_contract_page = React.createRef();
    this.exit_contract_page = React.createRef();
    this.new_proposal_page = React.createRef();
    this.vote_proposal_page = React.createRef();
    this.submit_proposal_page = React.createRef();
    this.pay_subscription_page = React.createRef();
    this.cancel_subscription_page = React.createRef();
    this.collect_subscription_page = React.createRef();
    this.modify_subscription_page = React.createRef();
    this.modify_contract_page = React.createRef();
    this.modify_token_page = React.createRef();
    this.exchange_transfer_page = React.createRef();
    this.force_exit_page = React.createRef();
    this.archive_proposal_page = React.createRef();
    this.freeze_unfreeze_page = React.createRef();
    this.authmint_page = React.createRef();
    this.moderator_page = React.createRef();
    this.new_mail_page = React.createRef();
    this.respond_to_job_page = React.createRef();
    this.view_application_contract_page = React.createRef();
    this.view_transaction_page = React.createRef();
    this.view_transaction_log_page = React.createRef();
    this.add_to_bag_page = React.createRef();
    this.fulfil_bag_page = React.createRef();
    this.view_bag_application_contract_page = React.createRef();
    this.direct_purchase_page = React.createRef();
    this.clear_purchase_page = React.createRef();
    this.scan_code_page = React.createRef();
    this.new_contractor_page = React.createRef()
    this.send_job_request_page = React.createRef();
    this.view_job_request_page = React.createRef();
    this.view_job_request_contract_page = React.createRef();
    this.withdraw_ether_page = React.createRef();

    this.edit_job_page = React.createRef();
    this.edit_token_page = React.createRef();
    this.edit_post_page = React.createRef();
    this.edit_channel_page = React.createRef();
    this.edit_storefront_page = React.createRef()
    this.edit_contractor_page = React.createRef();

    this.give_award_page = React.createRef();
    this.add_comment_page = React.createRef();
    this.stack_page = React.createRef();
    this.depthmint_page = React.createRef();
    this.searched_account_page = React.createRef();
    this.rpc_settings_page = React.createRef();
    this.confirm_run_page = React.createRef();
    this.edit_proposal_page = React.createRef();
    this.successful_send_page = React.createRef();
    this.view_number_page = React.createRef();
    this.stage_royalties_page = React.createRef();
    this.view_staged_royalties_page = React.createRef();
    this.dialog_page = React.createRef();
    this.pay_upcoming_subscriptions_page = React.createRef();
    this.send_receive_coin_page = React.createRef();
    this.pick_file_page = React.createRef();
    this.new_audio_page = React.createRef();
    this.buy_album_page = React.createRef();
    this.edit_audiopost_page = React.createRef();
    this.pdf_viewer_wrapper = React.createRef();

    this.audio_pip_page = React.createRef();
    this.full_audio_page = React.createRef();
    this.add_to_playlist_page = React.createRef();
    this.new_video_page = React.createRef();
    this.buy_video_page = React.createRef();
    this.edit_videopost_page = React.createRef();
    this.full_video_page = React.createRef();
    this.buy_nitro_storage_page = React.createRef();

    this.new_nitro_page = React.createRef();
    this.edit_nitropost_page = React.createRef();
    this.configure_nitro_node_page = React.createRef();
    this.remoteStream = React.createRef();
    this.dialer_page = React.createRef();

    this.focused_page = this.getLocale()['1196']/* 'jobs' */
    this.has_gotten_contracts = false;
    this.posts_to_load = []
    this.has_my_followed_accounts_loaded = {}
    this.has_posts_blocked_by_me_loaded = {}
    this.has_censored_keywords_by_me_loaded = {}
  }

  componentDidMount() {
    console.log("mounted", 'os version: ', iOS());
    
    /* listens for when the window is resized */
    window.addEventListener("resize", this.resize.bind(this));
    this.resize();

    /* var me = this;
    setTimeout(function() {
  
    }, (1 * 500)); */

    var me = this;
    setTimeout(function() {
      me.start_everything();
    }, (1 * 500));

    var me = this;
    setTimeout(function() {
      if(me.state.syncronizing_progress < 5){
        me.prompt_top_notification(me.getLocale()['2738c']/* 'Bad Connection.' */, 15000)
      }
    }, (40 * 1000));

    // this.test_nft_storage()
  }

  start_everything = async () => {
    await this.load_cookies();
    this.load_cookies2()
    var me = this;
    setTimeout(function() {
      me.load_e5_data();
      me.reset_background_sync()

      me.get_key()
      me.init_db()
    }, (1 * 1000));
  }

  test_nft_storage = async () => {
    var cid = await this.store_data_in_nft_storage('hello world', true)
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('nft_storage_cid', cid)
  }

  componentWillUnmount() {
    console.log("unmounted");
    window.removeEventListener("resize", this.resize.bind(this));

    if(this.interval != null)clearInterval(this.interval);
    if(this.interval2 != null) clearInterval(this.interval2)
    if(this.interval3 != null) clearInterval(this.interval3)
    
    this.set_cookies()
  }

  reset_background_sync(){
    if(this.interval != null)clearInterval(this.interval);
    if(this.interval2 != null) clearInterval(this.interval2)
    if(this.interval3 != null) clearInterval(this.interval3)
    
    var obj = {'sluggish':1000_000, 'slow':500_000, 'average':290_000, 'fast':90_000}
    obj[this.getLocale()['1421']/* sluggish */] = 1000_000
    obj[this.getLocale()['1422']/* slow */] = 500_000
    obj[this.getLocale()['1423']/* average */] = 290_000
    obj[this.getLocale()['1424']/* fast */] = 90_000

    var me = this;
    setTimeout(function() {
      me.interval = setInterval(() => me.background_sync(), obj[me.state.refresh_speed]);
      me.interval2 = setInterval(() => me.start_get_accounts_data(false, true), 35_000)
      me.interval3 = setInterval(() => me.background_coin_sync(), 3*60_000)
    }, (1 * 100));
    
  }


  lengthInUtf8Bytes(str) {
    // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
    var m = encodeURIComponent(str).match(/%[89ABab]/g);
    return str.length + (m ? m.length : 0);
  }

  set_cookies(){
    var x = JSON.stringify(this.get_persistent_data(), (key, value) =>
            typeof value === 'bigint'
                ? value.toString()
                : value // return everything else unchanged));
    )

    var size = 0;
    if(this.state.storage_permissions == this.getLocale()['1428']/* 'enabled' */){
      this.update_data_in_db(x, '123')
      size = this.lengthInUtf8Bytes(x);
    }else{
      this.update_data_in_db('', '123')
      size = this.lengthInUtf8Bytes('')
      
      if(this.homepage.current){
        this.homepage.current?.set_cookies()
      }
    }

    this.set_cookies2(size);
  }

  set_cookies2(size){
    var x = JSON.stringify(this.get_persistent_data2(), (key, value) =>
            typeof value === 'bigint'
                ? value.toString()
                : value // return everything else unchanged));
    )

    if(this.state.storage_permissions == this.getLocale()['1428']/* 'enabled' */){
      this.update_data_in_db(x, '5000')
      this.setState({index_db_size: size + this.lengthInUtf8Bytes(x)})
    }else{
      this.update_data_in_db('', '5000')
      this.setState({index_db_size: size + this.lengthInUtf8Bytes('')})
    }
  }



  get_persistent_data(){
    return {
      theme: this.state.theme, 
      storage_option: this.state.storage_option, 
      stack_items:this.state.stack_items, 
      selected_e5_item:this.state.selected_e5, 
      contacts:this.state.contacts, 
      should_update_contacts_onchain: this.state.should_update_contacts_onchain, 
      refresh_speed:this.state.refresh_speed, 
      masked_content: this.state.masked_content,
      blocked_accounts: this.state.blocked_accounts,
      should_update_blocked_accounts_onchain: this.state.should_update_blocked_accounts_onchain,
      content_channeling:this.state.content_channeling,
      device_language: this.state.device_language,
      job_section_tags: this.state.job_section_tags,
      explore_section_tags: this.state.explore_section_tags,
      should_update_section_tags_onchain: this.state.should_update_section_tags_onchain,
      section_tags_setting: this.state.section_tags_setting,
      visible_tabs: this.state.visible_tabs,
      storage_permissions: this.state.storage_permissions,

      // from:this.from,
      // e5_events:this.e5_events,
      // e52_events:this.e52_events,
      // f5_events:this.f5_events,
      // g5_events:this.g5_events,
      // g52_events:this.g52_events,
      // h5_events:this.h5_events,
      // h52_events:this.h52_events,

      added_providers: this.state.added_providers,
      selected_providers: this.get_selected_urls(),
      stack_optimizer: this.state.stack_optimizer,
      homepage_tags_position: this.state.homepage_tags_position,
      font: this.state.font,
      auto_skip_nsfw_warning: this.state.auto_skip_nsfw_warning,
      graph_type: this.state.graph_type,
      remember_account: this.state.remember_account,
      account_data: this.get_account_data_to_store(),
      coin_data:this.get_coin_data_to_store(),

      web3_account_email: this.state.web3_account_email,
      update_data_in_E5: this.state.update_data_in_E5,
      uploaded_data_cids:this.state.uploaded_data_cids,
      audio_timestamp_data: this.state.audio_timestamp_data,

      my_playlists: this.state.my_playlists,
      should_update_playlists_in_E5: this.state.should_update_playlists_in_E5,
      song_plays: this.state.song_plays,
      should_update_song_plays: this.state.should_update_song_plays,
      albums_to_stash: this.get_albums_to_stash(),
      custom_gateway: this.state.custom_gateway,
      pdf_bookmarks: this.state.pdf_bookmarks,

      video_timestamp_data:this.state.video_timestamp_data,
      my_preferred_nitro:this.state.my_preferred_nitro,
      followed_accounts: this.state.followed_accounts, 
      should_update_followed_accounts: this.state.should_update_followed_accounts,
      posts_blocked_by_me: this.state.posts_blocked_by_me, 
      should_update_posts_blocked_by_me: this.state.should_update_posts_blocked_by_me,

      censored_keyword_phrases: this.state.censored_keyword_phrases, 
      should_update_censored_keyword_phrases: this.state.should_update_censored_keyword_phrases,
      hide_pip:this.state.hide_pip,
      preferred_currency: this.state.preferred_currency,
    }
  }

  get_persistent_data2(){
    return {
      cached_tracks: this.get_cached_tracks_to_store(),
      cached_files: this.get_uploaded_data_to_stash()
    }
  }

  get_selected_urls(){
    var array = this.state.e5s['data']
    var selected_array = []
    array.forEach(e5 => {
      selected_array.push([e5, this.state.e5s[e5].url])
    });
    return selected_array
  }

  load_cookies2 = async () => {
    var cupcake_state = await this.load_data_from_indexdb('5000')
    
    if(cupcake_state != null){
      this.setState({index_db_size: this.state.index_db_size + this.lengthInUtf8Bytes(cupcake_state)})
      cupcake_state = this.fetch_data(cupcake_state)
    }

    if(cupcake_state != null){
      var cupcake_cached_tracks = cupcake_state.cached_tracks
      var cupcake_cached_files = cupcake_state.cached_files

      if(cupcake_cached_tracks != null){
        this.set_cached_tracks_data(cupcake_cached_tracks)
      }

      if(cupcake_cached_files != null){
        this.load_cached_files_into_memory(cupcake_cached_files)
      }
    }
  }

  load_cookies = async () => {
    // var cupcake_state = localStorage.getItem("state");
    var cupcake_state = await this.load_data_from_indexdb('123')

    if(cupcake_state != null){
      this.setState({index_db_size: this.state.index_db_size + this.lengthInUtf8Bytes(cupcake_state)})
      cupcake_state = this.fetch_data(cupcake_state)
    }
    if(cupcake_state != null){
      var cupcake_theme = cupcake_state.theme;
      var cupcake_stack_items = cupcake_state.stack_items
      var cupcake_storage_option = cupcake_state.storage_option
      var cupcake_selected_e5 = cupcake_state.selected_e5_item
      var cupcake_contacts = cupcake_state.contacts
      var cupcake_should_update_contacts_onchain = cupcake_state.should_update_contacts_onchain
      var cupcake_refresh_speed = cupcake_state.refresh_speed
      var cupcake_masked_content = cupcake_state.masked_content
      var cupcake_blocked_accounts = cupcake_state.blocked_accounts
      var cupcake_should_update_blocked_accounts_onchain = cupcake_state.should_update_blocked_accounts_onchain
      var cupcake_content_channeling = cupcake_state.content_channeling
      var cupcake_device_language = cupcake_state.device_language
      var cupcake_job_section_tags = cupcake_state.job_section_tags
      var cupcake_explore_section_tags = cupcake_state.explore_section_tags
      var cupcake_should_update_section_tags_onchain = cupcake_state.should_update_section_tags_onchain
      var cupcake_section_tags_setting = cupcake_state.section_tags_setting
      var cupcake_visible_tabs = cupcake_state.visible_tabs
      var cupcake_storage_permissions = cupcake_state.storage_permissions
      var cupcake_added_providers = cupcake_state.added_providers
      var cupcake_selected_providers = cupcake_state.selected_providers
      
      var cupcake_from = cupcake_state.from
      var cupcake_e5_events = cupcake_state.e5_events
      var cupcake_e52_events = cupcake_state.e52_events
      var cupcake_f5_events = cupcake_state.f5_events
      var cupcake_g5_events = cupcake_state.g5_events
      var cupcake_g52_events = cupcake_state.g52_events
      var cupcake_h5_events = cupcake_state.h5_events
      var cupcake_h52_events = cupcake_state.h52_events

      var cupcake_stack_optimizer = cupcake_state.stack_optimizer
      var cupcake_homepage_tags_position = cupcake_state.homepage_tags_position
      var cupcake_font = cupcake_state.font
      var cupcake_auto_skip_nsfw_warning = cupcake_state.auto_skip_nsfw_warning
      var cupcake_graph_type = cupcake_state.graph_type
      var cupcake_remember_account = cupcake_state.remember_account
      var cupcake_account_data = cupcake_state.account_data

      var cupcake_coin_data = cupcake_state.coin_data
      var cupcake_web3_account_email = cupcake_state.web3_account_email
      var cupcake_update_data_in_E5 = cupcake_state.update_data_in_E5
      var cupcake_uploaded_data_cids = cupcake_state.uploaded_data_cids
      var cupcake_audio_timestamp_data = cupcake_state.audio_timestamp_data
      var cupcake_my_playlists = cupcake_state.my_playlists
      var cupcake_should_update_playlists_in_E5 = cupcake_state.should_update_playlists_in_E5

      var cupcake_song_plays = cupcake_state.song_plays
      var cupcake_should_update_song_plays = cupcake_state.should_update_song_plays
      var cupcake_albums_to_stash = cupcake_state.albums_to_stash
      var cupcake_custom_gateway = cupcake_state.custom_gateway
      var cupcake_pdf_bookmarks = cupcake_state.pdf_bookmarks;
      var cupcake_video_timestamp_data = cupcake_state.video_timestamp_data
      var cupcake_my_preferred_nitro = cupcake_state.my_preferred_nitro

      var cupcake_followed_accounts = cupcake_state.followed_accounts 
      var cupcake_should_update_followed_accounts = cupcake_state.should_update_followed_accounts
      var cupcake_posts_blocked_by_me = cupcake_state.posts_blocked_by_me
      var cupcake_should_update_posts_blocked_by_me = cupcake_state.should_update_posts_blocked_by_me
      var cupcake_censored_keyword_phrases =  cupcake_state.censored_keyword_phrases 
      var cupcake_should_update_censored_keyword_phrases = cupcake_state.should_update_censored_keyword_phrases

      var cupcake_hide_pip = cupcake_state.hide_pip
      var cupcake_preferred_currency = cupcake_state.preferred_currency

      
      if(cupcake_theme != null){
        this.setState({theme: cupcake_theme})
        var me = this;
        setTimeout(function() {
          me.reset_theme()
        }, (1 * 500));
      }

      if(cupcake_stack_items != null){
        this.setState({stack_items:cupcake_stack_items})
      }

      if(cupcake_storage_option != null){
        this.setState({storage_option:cupcake_storage_option})
      }

      if(cupcake_selected_e5 != null){
        this.setState({selected_e5: cupcake_selected_e5})
      }

      if(cupcake_contacts != null){
        this.setState({contacts: cupcake_contacts})
      }

      if(cupcake_should_update_contacts_onchain != null){
        this.setState({should_update_contacts_onchain: cupcake_should_update_contacts_onchain})
      }

      if(cupcake_masked_content != null){
        this.setState({masked_content: cupcake_masked_content})
      }

      if(cupcake_refresh_speed != null){
        this.setState({refresh_speed: cupcake_refresh_speed})
      }

      if(cupcake_blocked_accounts != null){
        this.setState({blocked_accounts: cupcake_blocked_accounts})
      }

      if(cupcake_should_update_blocked_accounts_onchain != null){
        this.setState({should_update_blocked_accounts_onchain: cupcake_should_update_blocked_accounts_onchain})
      }

      if(cupcake_content_channeling != null){
        this.setState({content_channeling: cupcake_content_channeling})
      }

      if(cupcake_device_language != null){
        this.setState({device_language: cupcake_device_language})
      }

      if(cupcake_job_section_tags != null){
        this.setState({job_section_tags: cupcake_job_section_tags})
      }

      if(cupcake_explore_section_tags != null){
        this.setState({explore_section_tags: cupcake_explore_section_tags})
      }

      if(cupcake_should_update_section_tags_onchain != null){
        this.setState({should_update_section_tags_onchain: cupcake_should_update_section_tags_onchain})
      }

      if(cupcake_section_tags_setting != null){
        this.setState({section_tags_setting: cupcake_section_tags_setting})
      }

      if(cupcake_visible_tabs != null){
        this.setState({visible_tabs: cupcake_visible_tabs})
      }

      if(cupcake_storage_permissions != null){
        this.setState({storage_permissions: cupcake_storage_permissions})
      }

      if(cupcake_selected_providers != null && cupcake_added_providers != null){
        this.setState({added_providers: cupcake_added_providers})
        var me = this;
        setTimeout(function() {
          me.set_providers(cupcake_selected_providers, cupcake_added_providers)
        }, (1 * 800));
      }

      if(cupcake_from != null){
        this.from = cupcake_from
      }

      if(cupcake_e5_events != null){
        this.e5_events = cupcake_e5_events
      }

      if(cupcake_e52_events != null){
        this.e52_events = cupcake_e52_events
      }

      if(cupcake_f5_events != null){
        this.f5_events = cupcake_f5_events
      }

      if(cupcake_g5_events != null){
        this.g5_events = cupcake_g5_events
      }

      if(cupcake_g52_events != null){
        this.g52_events = cupcake_g52_events
      }

      if(cupcake_h5_events != null){
        this.h5_events = cupcake_h5_events
      }

      if(cupcake_h52_events != null){
        this.h52_events = cupcake_h52_events
        console.log('---------------------------cupcake_from--------------------------')
        console.log(this.h52_events)
      }

      if(cupcake_stack_optimizer != null){
        this.setState({stack_optimizer: cupcake_stack_optimizer})
      }

      if(cupcake_homepage_tags_position != null){
        this.setState({homepage_tags_position: cupcake_homepage_tags_position})
      }

      if(cupcake_font != null){
        this.setState({font: cupcake_font})
      }

      if(cupcake_auto_skip_nsfw_warning != null){
        this.setState({auto_skip_nsfw_warning: cupcake_auto_skip_nsfw_warning})
      }

      if(cupcake_graph_type != null){
        this.setState({graph_type: cupcake_graph_type})
      }

      if(cupcake_remember_account != null){
        this.setState({remember_account: cupcake_remember_account})
        if(cupcake_remember_account != 'e' && cupcake_account_data != null){
          this.load_accounts_data_from_store(cupcake_account_data)
        }
      }

      if(cupcake_coin_data != null){
        this.setState({coin_data: cupcake_coin_data})
      }

      if(cupcake_web3_account_email != null){
        this.setState({web3_account_email: cupcake_web3_account_email})
      }

      if(cupcake_update_data_in_E5 != null){
        this.setState({update_data_in_E5: cupcake_update_data_in_E5})
      }

      if(cupcake_uploaded_data_cids != null){
        // console.log('app_page', 'setting uploaded cids', cupcake_uploaded_data_cids)
        this.setState({uploaded_data_cids: cupcake_uploaded_data_cids})
      }

      if(cupcake_audio_timestamp_data != null){
        this.setState({audio_timestamp_data: cupcake_audio_timestamp_data})
      }

      if(cupcake_my_playlists != null){
        this.setState({my_playlists: cupcake_my_playlists})
      }

      if(cupcake_should_update_playlists_in_E5 != null){
        this.setState({should_update_playlists_in_E5: cupcake_should_update_playlists_in_E5})
      }

      if(cupcake_song_plays != null){
        this.setState({song_plays: cupcake_song_plays})
      }

      if(cupcake_should_update_song_plays != null){
        this.setState({should_update_song_plays: cupcake_should_update_song_plays})
      }

      if(cupcake_albums_to_stash != null){
        this.load_albums_to_stash_to_state(cupcake_albums_to_stash)
      }

      if(cupcake_custom_gateway != null){
        this.setState({custom_gateway: cupcake_custom_gateway})
      }

      if(cupcake_pdf_bookmarks != null){
        this.setState({pdf_bookmarks: cupcake_pdf_bookmarks})
      }

      if(cupcake_video_timestamp_data != null){
        this.setState({video_timestamp_data: cupcake_video_timestamp_data})
      }

      if(cupcake_my_preferred_nitro != null){
        this.setState({my_preferred_nitro: cupcake_my_preferred_nitro})
      }

      if(cupcake_followed_accounts != null){
        this.setState({followed_accounts: cupcake_followed_accounts})
      }

      if(cupcake_should_update_followed_accounts != null){
        this.setState({should_update_followed_accounts: cupcake_should_update_followed_accounts})
      }

      if(cupcake_posts_blocked_by_me != null){
        this.setState({posts_blocked_by_me: cupcake_posts_blocked_by_me})
      }

      if(cupcake_should_update_posts_blocked_by_me != null){
        this.setState({should_update_posts_blocked_by_me: cupcake_should_update_posts_blocked_by_me})
      }

      if(cupcake_censored_keyword_phrases != null){
        this.setState({censored_keyword_phrases: cupcake_censored_keyword_phrases})
      }

      if(cupcake_should_update_censored_keyword_phrases != null){
        this.setState({should_update_censored_keyword_phrases: cupcake_should_update_censored_keyword_phrases})
      }

      if(cupcake_hide_pip != null){
        this.setState({hide_pip: cupcake_hide_pip})
      }

      if(cupcake_preferred_currency != null){
        this.setState({preferred_currency: cupcake_preferred_currency})
      }
    }
    this.set_stack_page_data()
  }

  set_stack_page_data(){
    var me = this;
    setTimeout(function() {
      me.stack_page.current?.set_light_dark_setting_tag()
      me.stack_page.current?.set_storage_option_tag()
      me.stack_page.current?.set_e5_option_tag()
      me.stack_page.current?.set_refresh_speed_tag()
      me.stack_page.current?.set_masked_content_tag()
      me.stack_page.current?.set_content_channeling_tags()
      me.stack_page.current?.set_content_language_tags()
      me.stack_page.current?.set_content_filter_settings_tags()
      me.stack_page.current?.set_tabs_tag()
      me.stack_page.current?.set_storage_permissions_tag()
      me.stack_page.current?.set_stack_optimizer_tag()
      me.stack_page.current?.set_homepage_tags_position_tag()
      me.stack_page.current?.set_preferred_font_tag()
      me.stack_page.current?.set_skip_nsfw_warning_tag()
      me.stack_page.current?.set_selected_graph_type_tag()
      me.stack_page.current?.set_selected_remember_account_type_tag()
      me.stack_page.current?.set_web3_email_account()
      me.stack_page.current?.set_my_preferred_nitro()
      me.stack_page.current?.set_selected_hide_pip_type_tag()
      me.stack_page.current?.set_selected_preferred_currency_type_tag()
    }, (1 * 1000));
  }

  get_account_data_to_store(){
    var _accounts = {}
    if(this.state.remember_account == 'e') return _accounts
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i];
      if(this.state.accounts[focused_e5] != null){
        _accounts[focused_e5] = {address: this.state.accounts[focused_e5].address}
      }
    }
    return _accounts
  }

  load_accounts_data_from_store(data){
    var _accounts = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i];
      if(data[focused_e5] != null){
        _accounts[focused_e5] = {address: data[focused_e5].address, privateKey:''}
      }
    }
    this.setState({accounts: _accounts, has_account_been_loaded_from_storage: true})
  }

  get_coin_data_to_store(){
    var _accounts = {}
    if(this.state.remember_account == 'e') return _accounts
    return this.state.coin_data
  }

  get_cached_tracks_to_store(){
    var cached_tracks = this.state.cached_tracks
    var obj = {}
    obj['e'] = cached_tracks
    cached_tracks.forEach(track_id => {
      var data = this.fetch_from_storage(track_id)
      if(data != null){
        obj[track_id] = data
      }
    });

    return obj
  }

  set_cached_tracks_data(obj){
    var cached_tracks = obj['e']
    cached_tracks.forEach(track_id => {
      var data = obj[track_id]
      this.store_in_local_storage(track_id, data)
    });
    this.setState({cached_tracks: cached_tracks})
  }

  get_albums_to_stash(){
    var my_added_album_ids = this.state.my_albums
    var all_audios = this.get_all_sorted_objects(this.state.created_audios)
    var my_acquired_albums = []
    for(var i=0; i<my_added_album_ids.length; i++){
      var obj = this.get_item_in_array(all_audios, my_added_album_ids[i])
      if(obj != null) my_acquired_albums.push(obj)
    }
    return my_acquired_albums
  }

  get_all_sorted_objects(object){
    var all_objects = []
    for(var i=0; i<this.state.e5s['data'].length; i++){
        var e5 = this.state.e5s['data'][i]
        var e5_objects = object[e5]
        if(e5_objects != null){
            all_objects = all_objects.concat(e5_objects)
        }
    }

    return this.sortByAttributeDescending(all_objects, 'timestamp')
  }

  load_albums_to_stash_to_state(my_acquired_albums){
    var created_audios = {}
    var created_audio_mappings = {}

    my_acquired_albums.forEach(album => {
      var e5 = album['e5']
      var id = album['id']
      if(created_audios[e5] == null){
        created_audios[e5] = []
      }
      if(created_audio_mappings[e5] == null){
        created_audio_mappings[e5] = {}
      }
      created_audios[e5].push(album)
      created_audio_mappings[e5][id] = album
    });
    this.setState({created_audios: created_audios, created_audio_mappings: created_audio_mappings})
  }

  get_uploaded_data_to_stash(){
    var cid_clone = this.state.uploaded_data_cids
    var obj = {}
    obj['e'] = cid_clone
    cid_clone.forEach(cid => {
      var data = this.fetch_from_storage(cid)
      if(data != null){
        obj[cid] = data
      }
    });

    return obj
  }

  load_cached_files_into_memory(obj){
    var cid_clone = obj['e']
    if(cid_clone != null && cid_clone.length > 0){
      var data_clone = {}
      cid_clone.forEach(ecid => {
        var data = obj[ecid]
        if(data != null){
          var ecid_obj = this.get_cid_split(ecid)
          var filetype = ecid_obj['filetype']
          
          if(data_clone[filetype] == null) data_clone[filetype] = {}
          data_clone[filetype][ecid] = data
          this.store_in_local_storage(ecid, data)
        }
      });
      this.setState({uploaded_data_cids: cid_clone, uploaded_data: data_clone})
    }
  }








  set_providers(cupcake_selected_providers, cached_providers){
    var clone = structuredClone(this.state.e5s)
    cupcake_selected_providers.forEach(provider => {
      clone[provider[0]].url = provider[1]
    })
    cached_providers.forEach(provider => {
      clone[provider[0]]['web3'].push(provider[1])
    });
    this.setState({e5s:clone})
  }

  fetch_data(cupcake_state){
    try{
      var ce = JSON.parse(cupcake_state)
      return ce
    }catch(e){
      console.log(e)
      return null
    }
  }

  get_location_info(){
    const timeZoneCityToCountry = {};
    Object.keys(zones).forEach(z => {
      const cityArr = z.split("/");
      const city = cityArr[cityArr.length-1];
      timeZoneCityToCountry[city] = countries[zones[z].countries[0]].name;
    });

    var userRegion;
    var userCity;
    var userCountry;
    var userTimeZone;

    console.log(timeZoneCityToCountry)

    if (Intl) {
      userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      var tzArr = userTimeZone.split("/");
      userRegion = tzArr[0];
      userCity = tzArr[tzArr.length - 1];
      userCountry = timeZoneCityToCountry[userCity];
    }
    
    console.log("Time Zone:", userTimeZone);
    console.log("Region:", userRegion);
    console.log("City:", userCity);
    console.log("Country:", userCountry);

    return { userCountry: userCountry, userRegion: userRegion, userCity: userCity }

  }
  

  get_country_code(country){
    var obj = [ 
      {name: 'Afghanistan', code: 'AF'}, 
      {name: 'Åland Islands', code: 'AX'}, 
      {name: 'Albania', code: 'AL'}, 
      {name: 'Algeria', code: 'DZ'}, 
      {name: 'American Samoa', code: 'AS'}, 
      {name: 'AndorrA', code: 'AD'}, 
      {name: 'Angola', code: 'AO'}, 
      {name: 'Anguilla', code: 'AI'}, 
      {name: 'Antarctica', code: 'AQ'}, 
      {name: 'Antigua and Barbuda', code: 'AG'}, 
      {name: 'Argentina', code: 'AR'}, 
      {name: 'Armenia', code: 'AM'}, 
      {name: 'Aruba', code: 'AW'}, 
      {name: 'Australia', code: 'AU'}, 
      {name: 'Austria', code: 'AT'}, 
      {name: 'Azerbaijan', code: 'AZ'}, 
      {name: 'Bahamas', code: 'BS'}, 
      {name: 'Bahrain', code: 'BH'}, 
      {name: 'Bangladesh', code: 'BD'}, 
      {name: 'Barbados', code: 'BB'}, 
      {name: 'Belarus', code: 'BY'}, 
      {name: 'Belgium', code: 'BE'}, 
      {name: 'Belize', code: 'BZ'}, 
      {name: 'Benin', code: 'BJ'}, 
      {name: 'Bermuda', code: 'BM'}, 
      {name: 'Bhutan', code: 'BT'}, 
      {name: 'Bolivia', code: 'BO'}, 
      {name: 'Bosnia and Herzegovina', code: 'BA'}, 
      {name: 'Botswana', code: 'BW'}, 
      {name: 'Bouvet Island', code: 'BV'}, 
      {name: 'Brazil', code: 'BR'}, 
      {name: 'British Indian Ocean Territory', code: 'IO'}, 
      {name: 'Brunei Darussalam', code: 'BN'}, 
      {name: 'Bulgaria', code: 'BG'}, 
      {name: 'Burkina Faso', code: 'BF'}, 
      {name: 'Burundi', code: 'BI'}, 
      {name: 'Cambodia', code: 'KH'}, 
      {name: 'Cameroon', code: 'CM'}, 
      {name: 'Canada', code: 'CA'}, 
      {name: 'Cape Verde', code: 'CV'}, 
      {name: 'Cayman Islands', code: 'KY'}, 
      {name: 'Central African Republic', code: 'CF'}, 
      {name: 'Chad', code: 'TD'}, 
      {name: 'Chile', code: 'CL'}, 
      {name: 'China', code: 'CN'}, 
      {name: 'Christmas Island', code: 'CX'}, 
      {name: 'Cocos (Keeling) Islands', code: 'CC'}, 
      {name: 'Colombia', code: 'CO'}, 
      {name: 'Comoros', code: 'KM'}, 
      {name: 'Congo', code: 'CG'}, 
      {name: 'Congo, The Democratic Republic of the', code: 'CD'}, 
      {name: 'Cook Islands', code: 'CK'}, 
      {name: 'Costa Rica', code: 'CR'}, 
      {name: 'Cote D\'Ivoire', code: 'CI'}, 
      {name: 'Croatia', code: 'HR'}, 
      {name: 'Cuba', code: 'CU'}, 
      {name: 'Cyprus', code: 'CY'}, 
      {name: 'Czech Republic', code: 'CZ'}, 
      {name: 'Denmark', code: 'DK'}, 
      {name: 'Djibouti', code: 'DJ'}, 
      {name: 'Dominica', code: 'DM'}, 
      {name: 'Dominican Republic', code: 'DO'}, 
      {name: 'Ecuador', code: 'EC'}, 
      {name: 'Egypt', code: 'EG'}, 
      {name: 'El Salvador', code: 'SV'}, 
      {name: 'Equatorial Guinea', code: 'GQ'}, 
      {name: 'Eritrea', code: 'ER'}, 
      {name: 'Estonia', code: 'EE'}, 
      {name: 'Ethiopia', code: 'ET'}, 
      {name: 'Falkland Islands (Malvinas)', code: 'FK'}, 
      {name: 'Faroe Islands', code: 'FO'}, 
      {name: 'Fiji', code: 'FJ'}, 
      {name: 'Finland', code: 'FI'}, 
      {name: 'France', code: 'FR'}, 
      {name: 'French Guiana', code: 'GF'}, 
      {name: 'French Polynesia', code: 'PF'}, 
      {name: 'French Southern Territories', code: 'TF'}, 
      {name: 'Gabon', code: 'GA'}, 
      {name: 'Gambia', code: 'GM'}, 
      {name: 'Georgia', code: 'GE'}, 
      {name: 'Germany', code: 'DE'}, 
      {name: 'Ghana', code: 'GH'}, 
      {name: 'Gibraltar', code: 'GI'}, 
      {name: 'Greece', code: 'GR'}, 
      {name: 'Greenland', code: 'GL'}, 
      {name: 'Grenada', code: 'GD'}, 
      {name: 'Guadeloupe', code: 'GP'}, 
      {name: 'Guam', code: 'GU'}, 
      {name: 'Guatemala', code: 'GT'}, 
      {name: 'Guernsey', code: 'GG'}, 
      {name: 'Guinea', code: 'GN'}, 
      {name: 'Guinea-Bissau', code: 'GW'}, 
      {name: 'Guyana', code: 'GY'}, 
      {name: 'Haiti', code: 'HT'}, 
      {name: 'Heard Island and Mcdonald Islands', code: 'HM'}, 
      {name: 'Holy See (Vatican City State)', code: 'VA'}, 
      {name: 'Honduras', code: 'HN'}, 
      {name: 'Hong Kong', code: 'HK'}, 
      {name: 'Hungary', code: 'HU'}, 
      {name: 'Iceland', code: 'IS'}, 
      {name: 'India', code: 'IN'}, 
      {name: 'Indonesia', code: 'ID'}, 
      {name: 'Iran, Islamic Republic Of', code: 'IR'}, 
      {name: 'Iraq', code: 'IQ'}, 
      {name: 'Ireland', code: 'IE'}, 
      {name: 'Isle of Man', code: 'IM'}, 
      {name: 'Israel', code: 'IL'}, 
      {name: 'Italy', code: 'IT'}, 
      {name: 'Jamaica', code: 'JM'}, 
      {name: 'Japan', code: 'JP'}, 
      {name: 'Jersey', code: 'JE'}, 
      {name: 'Jordan', code: 'JO'}, 
      {name: 'Kazakhstan', code: 'KZ'}, 
      {name: 'Kenya', code: 'KE'}, 
      {name: 'Kiribati', code: 'KI'}, 
      {name: 'Korea, Democratic People\'S Republic of', code: 'KP'}, 
      {name: 'Korea, Republic of', code: 'KR'}, 
      {name: 'Kuwait', code: 'KW'}, 
      {name: 'Kyrgyzstan', code: 'KG'}, 
      {name: 'Lao People\'S Democratic Republic', code: 'LA'}, 
      {name: 'Latvia', code: 'LV'}, 
      {name: 'Lebanon', code: 'LB'}, 
      {name: 'Lesotho', code: 'LS'}, 
      {name: 'Liberia', code: 'LR'}, 
      {name: 'Libyan Arab Jamahiriya', code: 'LY'}, 
      {name: 'Liechtenstein', code: 'LI'}, 
      {name: 'Lithuania', code: 'LT'}, 
      {name: 'Luxembourg', code: 'LU'}, 
      {name: 'Macao', code: 'MO'}, 
      {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'}, 
      {name: 'Madagascar', code: 'MG'}, 
      {name: 'Malawi', code: 'MW'}, 
      {name: 'Malaysia', code: 'MY'}, 
      {name: 'Maldives', code: 'MV'}, 
      {name: 'Mali', code: 'ML'}, 
      {name: 'Malta', code: 'MT'}, 
      {name: 'Marshall Islands', code: 'MH'}, 
      {name: 'Martinique', code: 'MQ'}, 
      {name: 'Mauritania', code: 'MR'}, 
      {name: 'Mauritius', code: 'MU'}, 
      {name: 'Mayotte', code: 'YT'}, 
      {name: 'Mexico', code: 'MX'}, 
      {name: 'Micronesia, Federated States of', code: 'FM'}, 
      {name: 'Moldova, Republic of', code: 'MD'}, 
      {name: 'Monaco', code: 'MC'}, 
      {name: 'Mongolia', code: 'MN'}, 
      {name: 'Montserrat', code: 'MS'}, 
      {name: 'Morocco', code: 'MA'}, 
      {name: 'Mozambique', code: 'MZ'}, 
      {name: 'Myanmar', code: 'MM'}, 
      {name: 'Namibia', code: 'NA'}, 
      {name: 'Nauru', code: 'NR'}, 
      {name: 'Nepal', code: 'NP'}, 
      {name: 'Netherlands', code: 'NL'}, 
      {name: 'Netherlands Antilles', code: 'AN'}, 
      {name: 'New Caledonia', code: 'NC'}, 
      {name: 'New Zealand', code: 'NZ'}, 
      {name: 'Nicaragua', code: 'NI'}, 
      {name: 'Niger', code: 'NE'}, 
      {name: 'Nigeria', code: 'NG'}, 
      {name: 'Niue', code: 'NU'}, 
      {name: 'Norfolk Island', code: 'NF'}, 
      {name: 'Northern Mariana Islands', code: 'MP'}, 
      {name: 'Norway', code: 'NO'}, 
      {name: 'Oman', code: 'OM'}, 
      {name: 'Pakistan', code: 'PK'}, 
      {name: 'Palau', code: 'PW'}, 
      {name: 'Palestinian Territory, Occupied', code: 'PS'}, 
      {name: 'Panama', code: 'PA'}, 
      {name: 'Papua New Guinea', code: 'PG'}, 
      {name: 'Paraguay', code: 'PY'}, 
      {name: 'Peru', code: 'PE'}, 
      {name: 'Philippines', code: 'PH'}, 
      {name: 'Pitcairn', code: 'PN'}, 
      {name: 'Poland', code: 'PL'}, 
      {name: 'Portugal', code: 'PT'}, 
      {name: 'Puerto Rico', code: 'PR'}, 
      {name: 'Qatar', code: 'QA'}, 
      {name: 'Reunion', code: 'RE'}, 
      {name: 'Romania', code: 'RO'}, 
      {name: 'Russian Federation', code: 'RU'}, 
      {name: 'RWANDA', code: 'RW'}, 
      {name: 'Saint Helena', code: 'SH'}, 
      {name: 'Saint Kitts and Nevis', code: 'KN'}, 
      {name: 'Saint Lucia', code: 'LC'}, 
      {name: 'Saint Pierre and Miquelon', code: 'PM'}, 
      {name: 'Saint Vincent and the Grenadines', code: 'VC'}, 
      {name: 'Samoa', code: 'WS'}, 
      {name: 'San Marino', code: 'SM'}, 
      {name: 'Sao Tome and Principe', code: 'ST'}, 
      {name: 'Saudi Arabia', code: 'SA'}, 
      {name: 'Senegal', code: 'SN'}, 
      {name: 'Serbia and Montenegro', code: 'CS'}, 
      {name: 'Seychelles', code: 'SC'}, 
      {name: 'Sierra Leone', code: 'SL'}, 
      {name: 'Singapore', code: 'SG'}, 
      {name: 'Slovakia', code: 'SK'}, 
      {name: 'Slovenia', code: 'SI'}, 
      {name: 'Solomon Islands', code: 'SB'}, 
      {name: 'Somalia', code: 'SO'}, 
      {name: 'South Africa', code: 'ZA'}, 
      {name: 'South Georgia and the South Sandwich Islands', code: 'GS'}, 
      {name: 'Spain', code: 'ES'}, 
      {name: 'Sri Lanka', code: 'LK'}, 
      {name: 'Sudan', code: 'SD'}, 
      {name: 'Suriname', code: 'SR'}, 
      {name: 'Svalbard and Jan Mayen', code: 'SJ'}, 
      {name: 'Swaziland', code: 'SZ'}, 
      {name: 'Sweden', code: 'SE'}, 
      {name: 'Switzerland', code: 'CH'}, 
      {name: 'Syrian Arab Republic', code: 'SY'}, 
      {name: 'Taiwan, Province of China', code: 'TW'}, 
      {name: 'Tajikistan', code: 'TJ'}, 
      {name: 'Tanzania, United Republic of', code: 'TZ'}, 
      {name: 'Thailand', code: 'TH'}, 
      {name: 'Timor-Leste', code: 'TL'}, 
      {name: 'Togo', code: 'TG'}, 
      {name: 'Tokelau', code: 'TK'}, 
      {name: 'Tonga', code: 'TO'}, 
      {name: 'Trinidad and Tobago', code: 'TT'}, 
      {name: 'Tunisia', code: 'TN'}, 
      {name: 'Turkey', code: 'TR'}, 
      {name: 'Turkmenistan', code: 'TM'}, 
      {name: 'Turks and Caicos Islands', code: 'TC'}, 
      {name: 'Tuvalu', code: 'TV'}, 
      {name: 'Uganda', code: 'UG'}, 
      {name: 'Ukraine', code: 'UA'}, 
      {name: 'United Arab Emirates', code: 'AE'}, 
      {name: 'United Kingdom', code: 'GB'}, 
      {name: 'United States', code: 'US'}, 
      {name: 'United States Minor Outlying Islands', code: 'UM'}, 
      {name: 'Uruguay', code: 'UY'}, 
      {name: 'Uzbekistan', code: 'UZ'}, 
      {name: 'Vanuatu', code: 'VU'}, 
      {name: 'Venezuela', code: 'VE'}, 
      {name: 'Viet Nam', code: 'VN'}, 
      {name: 'Virgin Islands, British', code: 'VG'}, 
      {name: 'Virgin Islands, U.S.', code: 'VI'}, 
      {name: 'Wallis and Futuna', code: 'WF'}, 
      {name: 'Western Sahara', code: 'EH'}, 
      {name: 'Yemen', code: 'YE'}, 
      {name: 'Zambia', code: 'ZM'}, 
      {name: 'Zimbabwe', code: 'ZW'} 
    ]

    var data = {}
    obj.forEach(element => {
      data[element.name] = element.code
    });

    return data[country]
  }

  get_language(){
    var lang = navigator.language || navigator.userLanguage;
    var language = lang.toString().toLowerCase()
    if(language.includes('-')){
      var ln = language.split('-')
      language = ln[0]
    }
    // console.log(language)
    return language
  }


  get_key = async () => {
    // 0xD637CBbc18fa589bd9d3708ecA90bf71e2A8B243 <----dont use this address

    var seed = ''+process.env.REACT_APP_SEED_API_KEY
    var web3_url = this.get_web3_url_from_e5('E55')
    var account = this.get_account_from_seed(seed, web3_url)
    console.log(account)
    // console.log(toBech32(account.address))

    const web3 = new Web3(web3_url);
    var balance = await web3.eth.getBalance(account.address)
    // var gas_price = await web3.eth.getGasPrice();
    console.log('get_key','-----------------get_key------------------------')
    console.log('get_key','deploy account balance: ',(balance/10**18))
    // console.log('get_key','chain gas price: ', gas_price)



    var recipientAddress = '0xa88FcDa55dFE3929E3f089FbEce6Ce2728f8bf3a'
    const me = this;
    web3.eth.accounts.wallet.add(account.privateKey);

    // web3.eth.sendTransaction({
    //   from: account.address,
    //   to: recipientAddress,
    //   value: ((21.502739699999998 * 10**18)),
    //   gas: 50000,
    //   gasPrice: 100_000_000_000 // Adjust gas price as needed
    // }).on('transactionHash', function (hash) {
    //   me.prompt_top_notification('send complete!', 600)
    // })
    // .on('error', function (error) {
    //   console.error('Failed to send transaction:', error);
    //   if(error == 'Error: Invalid JSON RPC response: {}'){
    //     me.prompt_top_notification('send complete!', 91600)
    //   }else{
    //     me.prompt_top_notification('send failed, '+error, 96000)
    //   }
    // });


    // const address = '14ZivGjRUMyUXWaakBYDzEfLTiiN5ZZ4Qo';
    // var link = `https://blockchain.info/unspent?active=${address}`//get utxos
    // link = `https://blockchain.info/rawaddr/${address}`//get transaction history

    // link = `https://api.fullstack.cash/v5/electrumx/unconfirmed/${address}`

    // try {
    //     const response = await fetch(link);
    //     if (!response.ok) {
    //       throw new Error(`Status: ${response}`);
    //     }
    //     const data = await response.text();
    //     var e5_address_obj = JSON.parse(data);
    //     console.log(e5_address_obj)
    // } catch (error) {
    //   console.log('Error fetching data: ', error)
    // }
  }

  init_db = async () => {
    
    // try {
    //   const db = new Dexie('E5LocalStorage');
    //   db.version(2).stores({
    //     data: 'id, data', // Primary key and indexed props
    //   });

    //   var name = 'bry'
    //   var id = 'id'
    //   // // Add the new friend!
    //   // var data = await db.data.toArray()
    //   // if(data.length != 0){
    //   //   await db.data.delete(1)
    //   // } 
    //   // await db.data.add({ name });

    //   // var data = await db.data.toArray()
    //   // var stored_name = data[0]

    //   try{
    //     await db.data.delete(id)
    //   }catch(e){
    //     console.log(`Failed : ${e}`);
    //   }

    //   await db.data.add({ id, name });
    //   var data = await db.data.get({id: 'id'})

    //   console.log('loaded data: ', data['name'])
    // } catch (error) {
    //   console.log(`Failed : ${error}`);
    // }

    // await this.update_data_in_db('footloose')
    // await this.wait(10000)
    // var data = await this.load_data_from_indexdb()
    // console.log('loaded data: ', data)
    
  }

  update_data_in_db = async (data, id) => {
    try {
      const db = new Dexie('twentythreeinreverse');
      db.version(2).stores({
        data: 'id, data', // Primary key and indexed props
      });

      try{
        await db.data.delete(id)
      }catch(e){
        console.log(`Failed to delete data in db: `, e);
      }
      await db.data.add({ id, data });
      
    } catch (error) {
      console.log(`Failed to do something in db: `,error);
    }
  }

  load_data_from_indexdb = async (id) => {
    try{
      const db = new Dexie('twentythreeinreverse');
      db.version(2).stores({
        data: 'id, data', // Primary key and indexed props
      });
      var data = await db.data.get({id: id})
      return data['data']
    }catch(e){
      console.log(`Failed : ${e}`);
      return null
    }
  }

  is_allowed_in_e5(){
    // return true
    var obj = ['United States', 'Kenya']
    var user_country = this.get_location_info().userCountry

    if(!obj.includes(user_country)){
      var me = this;
      setTimeout(function() {
          me.prompt_top_notification(me.getLocale()['2738']/* 'Not available in your region yet.' */, 100000)
      }, (2 * 1000));
      
      return false
    }
    return true
  }









  background_sync(){
    if(this.state.accounts[this.state.selected_e5] != null){
      if(this.is_allowed_in_e5()){
        this.start_get_accounts_data(false, false)
        this.load_data_from_page_in_focus(this.focused_page)
      }
    }

    this.reset_theme()
  }

  background_coin_sync(){
    if(this.state.accounts[this.state.selected_e5] != null){
      if(this.is_allowed_in_e5()){
        var seed = this.state.account_seed
        if(seed != '')  this.update_coin_balances('',true)
      }
    }
  }


  get_selected_web3_url(){
    var random = this.random(0,this.state.e5s[this.state.selected_e5].web3.length-1)
    return this.state.e5s[this.state.selected_e5].web3[random]
  }

  get_selected_E5_contract(){
    return this.state.e5s[this.state.selected_e5].e5_address
  }

  get_contract_from_e5(e5){
    return this.state.e5s[e5].e5_address
  }

  get_web3_url_from_e5(e5){
    // console.log('get_web3_url_from_e5', e5)
    var random = this.state.e5s[e5].url
    // console.log('get_web3_url_from_e5', random)
    return this.state.e5s[e5].web3[random]
  }

  get_web3_instance_from_e5(e5){
    return new Web3(this.get_web3_url_from_e5(e5));
  }

  get_first_block(e5){
    return this.state.e5s[e5].first_block
  }

  get_iteration(e5){
    return this.state.e5s[e5].iteration
  }

  random(min, max) { // min and max included 
    return Math.floor(Math.random() * (max - min + 1) + min)
  }







  /* called when screensize is changed */
  resize() {
    /* set the width and height in the state */
    var post_object_w = 300;
    var detail_object_w = 400;
    
    this.setState({height: window.innerHeight, width: window.innerWidth});
    console.log('width: ',window.innerWidth, ' height: ', window.innerHeight)

    
    var me = this;
    setTimeout(function() {
        me.setState({size:me.getScreenSize()})
    }, (1 * 500));
  }

  /* gets the screensize in three categories, small medium and large */
  // getScreenSize() {
  //     var width = this.state.width;
  //     var height = this.state.height;

     
  //     if(width<350 || height <550){
  //         return 's';
  //     }
  //     else if(width == 1366 && height == 1024){
  //         return 'e';//l
  //     }

  //     else if(width > 1250){
  //         return 'e';
  //     }
  //     else if(width > 1020){
  //         return 'e';//l
  //     }
  //     else if(width > 730){
  //         return 'e'; //m
  //     }else{
  //         if(width < 280){
  //             return 's';
  //         }
  //         return 's';
          
  //     }

  // }

  getScreenSize() {
    var width = this.state.width;
    var height = this.state.height;

     
    if(width<250){
      return 'e';
    }
    // else if(width > 1920){
    //   return 'e';
    // }
    // else if(width > 1400){
    //   return 'e';//xl
    // }
    else if(width > 930){
      return 'l';//l
    }
    else if(width > 690){
      return 'm'; //m
    }
    else{
      return 's';
        
    }

  }

  // get_theme_data(theme){
  //   //this.props.theme['']
  //   if(theme == this.getLocale()['1417']/* 'light' */){
  //     return{
  //       'name':this.getLocale()['1417']/* 'light' */,
  //       'bar_shadow':'#CECDCD','bar_color':'#444444', 'bar_background_color':'#919191','nav_bar_color':'#dddddd', 'button_color':'#444444', 'button_text_color':'white', 'line_color':'#C1C1C1',
        
  //       'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
  //       'primary_text_color':'#393e46','secondary_text_color':'grey',
        
  //       'navbar_button_selected_color':'#f2f2f2','primary_navbar_text_color':'#393e46','secondary_navbar_text_color':'grey','navbar_text_shadow_color':'#BABABA','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#DCDCDC',
        
  //       'view_group_card_item_background':'rgb(217, 217, 217,.6)','tag_background_color':'#787878','indexed_tag_background':'#5e5e5e','tag_shadow':'#868686','tag_text_color':'white',
        
  //       'chart_color':'#FCFCFC','chart_background_color':'#D5D5D5',
  
  //       'number_picker_label_color':'#D5D5D5','number_picker_label_shadow':'#c9c9c9',
  //       'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#afafaf', 'number_picker_picked_label_text_color':'#444444',
  //       'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
  //       'slider_color':'white', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':'https://nftstorage.link/ipfs/bafkreifw3p53ua3n4joozv6huahxkussrjhr22xb66bhl547httger7j7u', 'add_icon':'https://nftstorage.link/ipfs/bafkreidkqw7q2lyvx5lgp57rdbj243s342aw4csznlteu5sr6k7bwybpq4', 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light',

  //       'background':'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4', 'JobIcon':'https://nftstorage.link/ipfs/bafkreiebw5kut7ujhsvq3pan5pmqnp35wa4ku5x6x3rpoej4ng7oe3gvvi', 'ExploreIcon': 'https://nftstorage.link/ipfs/bafkreicsqi2tsk2td3acxdltz3tp42gjmk6z7luo3bgwbju5d7zwcbqnvu', 'WalletIcon':'https://nftstorage.link/ipfs/bafkreieemcsowwgjplxmdxip2fuecstymrf5wiih2k32ex5wqt2pif4kpy', 'StackIcon': 'https://nftstorage.link/ipfs/bafkreic6gol6fa2aa5ntw2egqb75gv7uavbirx3luxgq5qf7aby3ardpxq', 

  //       'close':'https://nftstorage.link/ipfs/bafkreigsgm64vokx55abvuuqtcr7srdbqlrtaz5fqb53i7pck2ipwkyw24',
  //       'clear':'https://nftstorage.link/ipfs/bafkreiboxvoi3u6dm3lwd4lne5xqknjzdtakck22ufkjzqdvmgrtwq4mbu',
  //       'add_text':'https://bafybeih7uo6hedtxgdge4digebt6o5gocacajgcbq2lc4nlfyb2uu55zma.ipfs.w3s.link/add_text_input_item.png',
        
  //       'play':'https://bafkreid5yges52pk6hbs6tlfjtnxebbqffc6cwjoxoxrc4ebqyguj3tufq.ipfs.w3s.link/',
  //       'pause':'https://bafkreiee5y4hq4xnhf44ubuhbycokfczhaxghlexzb7pg6ld3a3cwwhyia.ipfs.w3s.link/',
  //       'previous':'https://bafkreicjrx4etkijgxfvtmopoex5uxijbic5nsu44k2ogfg7wnmcyqd7yi.ipfs.w3s.link/',
  //       'next':'https://bafkreiblnp7g25ngh3mjot4ejjr7n34l2zm6wzwrhjrdfk3lgj3pjcihzy.ipfs.w3s.link/',
  //       'shuffle':'https://bafkreiclbvrwjghnqjh3pkqyj5dr2zjkh336db64ex2dtc55v6c3b2n7xy.ipfs.w3s.link/',
  //       'repeat':'https://bafkreia6gpgcsv742esoa2g3mfadgumxogwpzbcslx3espbe2h5ohn2h7u.ipfs.w3s.link/',
  //     }
  //   }
  //   else if(theme == this.getLocale()['1418']/* 'dark' */){
  //     return{
  //       'name':this.getLocale()['1418']/* 'dark' */,
  //       'bar_shadow':'#919191','bar_color':'white', 'bar_background_color':'#919191','nav_bar_color':'#444444','button_color':'#444444', 'button_text_color':'white', 'line_color':'#C1C1C1',
        
  //       'homepage_background_color':'#292929','syncronizing_page_background_color':'#292929','send_receive_ether_background_color':'#292929','send_receive_ether_overlay_background':'#424242','send_receive_ether_overlay_shadow':'#424242',

  //       'primary_text_color':'white', 'secondary_text_color':'#e6e6e6',
        
  //       'navbar_button_selected_color':'#545454','card_background_color':'rgb(51, 51, 51,.9)', 'primary_navbar_text_color':'white','secondary_navbar_text_color':'#e6e6e6','navbar_text_shadow_color':'#BABABA','card_shadow_color':'#424242',

  //       'view_group_card_item_background':'#2e2e2e','tag_background_color':'#444444', 'indexed_tag_background':'#404040', 'tag_shadow':'#424242', 'tag_text_color':'white',

  //       'chart_color':'#333333','chart_background_color':'#232323',

  //       'number_picker_label_color':'#3C3C3C','number_picker_label_shadow':'#262626',
  //       'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#878787', 'number_picker_picked_label_text_color':'white',
  //       'number_picker_power_label_text_color':'#878787', 'number_picker_picked_power_label_text_color':'#444444',
        
  //       'slider_color':'white','toast_background_color':'#333333', 'calendar_color':'dark', 'alert_icon':'https://nftstorage.link/ipfs/bafkreia2moq6orn66pofy3gsighjbrmpjhw6c5oix4t6rzvbzyxrkjek2a', 'add_icon':'https://nftstorage.link/ipfs/bafkreid2oj5w6gvnh4kspehdarlowpes2ztxyqd3pfmyh55j6di7hssqmi', 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'black','markdown_theme':'dart','pdf_theme':'dark',

  //       'background':'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4', 'JobIcon':'https://nftstorage.link/ipfs/bafkreibkhtf3jbrnldaivpirumvrjdfvyvoi5g5prkv2xgj4zgn6yjjosm', 'ExploreIcon': 'https://nftstorage.link/ipfs/bafkreidmthhxjlqmevpmdytduvilbdp3mfkrxyrvvkjysjhhsbw5qh4eku', 'WalletIcon':'https://nftstorage.link/ipfs/bafkreib3yaw4fbicdiiy3j276jjyzo7ephkavscaxo7ka5m5spebxa2uc4', 'StackIcon': 'https://nftstorage.link/ipfs/bafkreidrhshxvp2uosjdii727r3ompnoubiiuk5oyynxyllffamw32kjt4',
        
  //       'close':'https://nftstorage.link/ipfs/bafkreif363r22ob2tm6o7ahf2exbdge7tpcfglmwjvzb2mfuwfjaf7mlme',
  //       'clear':'https://nftstorage.link/ipfs/bafkreie2xrfhubydc4oih637nmadvqesx4yqmqo55jpgf3alhlhxyzd37u',
  //       'add_text':'https://bafkreifxaepix26g36uzkdvgtksww2nn44hjbbimikmd6dbrbrpml3jku4.ipfs.w3s.link',

  //       'play':'https://bafkreih3refhk4wbrhbimtenvrg4juwzy6jpmtnqnfnimrkrz5e2amwqhu.ipfs.w3s.link/',
  //       'pause':'https://bafkreiaxygqglibofkh73qerfxo6v4ojyjmcvyr2h6pa44sbcowyow4wly.ipfs.w3s.link/',
  //       'previous':'https://bafkreigoe7wibzhews6b77rqnbfqrd3qvyvzsehvielxdkn2pulml27u2q.ipfs.w3s.link/',
  //       'next':'https://bafkreidxr7vonmydvrxz6k43alvy5hhbqm6i5diwqw37qohhijm3llom7a.ipfs.w3s.link/',
  //       'shuffle':'https://bafkreidgx3rq45hdlfpo7xqciuzjxt3kcw3trxpqydpqkoaqea5qhccsie.ipfs.w3s.link/',
  //       'repeat':'https://bafkreihn4dag5j7fisuk6q7hzsfczpacj2szvsm5seovljvbq776tpihbm.ipfs.w3s.link/',
  //     }
  //   }
  //   else if(theme == this.getLocale()['2740']/* midnight */){
  //     return{
  //       'name':this.getLocale()['2740']/* midnight */,
  //       'bar_shadow':'#919191','bar_color':'white', 'bar_background_color':'#919191','nav_bar_color':'#1a1a1a','button_color':'#171717', 'button_text_color':'white', 'line_color':'#C1C1C1',
        
  //       'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#303030','send_receive_ether_overlay_shadow':'#303030',

  //       'primary_text_color':'white', 'secondary_text_color':'#e6e6e6',
        
  //       'navbar_button_selected_color':'#333333','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'white','secondary_navbar_text_color':'#e6e6e6','navbar_text_shadow_color':'#BABABA','card_shadow_color':'#212121',

  //       'view_group_card_item_background':'#1a1a1a','tag_background_color':'#303030', 'indexed_tag_background':'#242424', 'tag_shadow':'#303030', 'tag_text_color':'white',

  //       'chart_color':'#1a1a1a','chart_background_color':'#0a0a0a',

  //       'number_picker_label_color':'#171717','number_picker_label_shadow':'#262626',
  //       'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#878787', 'number_picker_picked_label_text_color':'white',
  //       'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
  //       'slider_color':'white','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':'https://nftstorage.link/ipfs/bafkreia2moq6orn66pofy3gsighjbrmpjhw6c5oix4t6rzvbzyxrkjek2a', 'add_icon':'https://nftstorage.link/ipfs/bafkreid2oj5w6gvnh4kspehdarlowpes2ztxyqd3pfmyh55j6di7hssqmi', 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'#0f0f0f', 'markdown_theme':'dart','pdf_theme':'dark',


  //       'background':'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4', 'JobIcon':'https://nftstorage.link/ipfs/bafkreibkhtf3jbrnldaivpirumvrjdfvyvoi5g5prkv2xgj4zgn6yjjosm', 'ExploreIcon': 'https://nftstorage.link/ipfs/bafkreidmthhxjlqmevpmdytduvilbdp3mfkrxyrvvkjysjhhsbw5qh4eku', 'WalletIcon':'https://nftstorage.link/ipfs/bafkreib3yaw4fbicdiiy3j276jjyzo7ephkavscaxo7ka5m5spebxa2uc4', 'StackIcon': 'https://nftstorage.link/ipfs/bafkreidrhshxvp2uosjdii727r3ompnoubiiuk5oyynxyllffamw32kjt4',

  //       'close':'https://nftstorage.link/ipfs/bafkreif363r22ob2tm6o7ahf2exbdge7tpcfglmwjvzb2mfuwfjaf7mlme',
  //       'clear':'https://nftstorage.link/ipfs/bafkreie2xrfhubydc4oih637nmadvqesx4yqmqo55jpgf3alhlhxyzd37u',
  //       'add_text':'https://bafkreifxaepix26g36uzkdvgtksww2nn44hjbbimikmd6dbrbrpml3jku4.ipfs.w3s.link',

  //       'play':'https://bafkreih3refhk4wbrhbimtenvrg4juwzy6jpmtnqnfnimrkrz5e2amwqhu.ipfs.w3s.link/',
  //       'pause':'https://bafkreiaxygqglibofkh73qerfxo6v4ojyjmcvyr2h6pa44sbcowyow4wly.ipfs.w3s.link/',
  //       'previous':'https://bafkreigoe7wibzhews6b77rqnbfqrd3qvyvzsehvielxdkn2pulml27u2q.ipfs.w3s.link/',
  //       'next':'https://bafkreidxr7vonmydvrxz6k43alvy5hhbqm6i5diwqw37qohhijm3llom7a.ipfs.w3s.link/',
  //       'shuffle':'https://bafkreidgx3rq45hdlfpo7xqciuzjxt3kcw3trxpqydpqkoaqea5qhccsie.ipfs.w3s.link/',
  //       'repeat':'https://bafkreihn4dag5j7fisuk6q7hzsfczpacj2szvsm5seovljvbq776tpihbm.ipfs.w3s.link/',
  //     }
  //   }
  //   else if(theme == this.getLocale()['2741']/* green */){
  //     return{
  //       'name':this.getLocale()['2741']/* green */,
  //       'bar_shadow':'#01c664','bar_color':'#01c601', 'bar_background_color':'#bef4d9','nav_bar_color':'#1a1a1a','button_color':'#171717', 'button_text_color':'#71fc71', 'line_color':'#71fc71',
        
  //       'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#303030','send_receive_ether_overlay_shadow':'#303030',

  //       'primary_text_color':'#71fc71', 'secondary_text_color':'#5bc15b',
        
  //       'navbar_button_selected_color':'#333333','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#5bc15b','secondary_navbar_text_color':'#5bc15b','card_shadow_color':'#013f01',
  //       'navbar_text_shadow_color':'#5bc15b',

  //       'view_group_card_item_background':'#141e0a','tag_background_color':'#203f00', 'indexed_tag_background':'#002100', 'tag_shadow':'#004f00', 'tag_text_color':'#71fc71',

  //       'chart_color':'#01c601','chart_background_color':'#141e0a',

  //       'number_picker_label_color':'#171717','number_picker_label_shadow':'#013f01',
  //       'number_picker_power_color':'white','number_picker_power_shadow_color':'#013f01','number_picker_label_text_color':'#5bc15b', 'number_picker_picked_label_text_color':'white',
  //       'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
  //       'slider_color':'#01c601','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':'https://nftstorage.link/ipfs/bafkreibc4fjptfewuzg22f4p4nk65wknautn3ckiho7jizflyqbrqra4cy', 'add_icon':'https://nftstorage.link/ipfs/bafkreibdzmvmt56gvw5ky566vcwvvi3sy3djmafony7smk5vuwtq3uznoy', 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark',


  //       'background':'https://nftstorage.link/ipfs/bafkreihfrklgd4ohlsn4akcotktzawdx5mf2ky7ecnh5jx34oomecry2x4', 'JobIcon':'https://nftstorage.link/ipfs/bafkreiehl5q32o5bvomkiybrybqhisbnwgqgikfwy5sronba4dv5ctetqq', 'ExploreIcon': 'https://nftstorage.link/ipfs/bafkreiac46ktvwpelr7ltozw746twfbjfy4d33m7wtxe7sye5nnweg25ia', 'WalletIcon':'https://nftstorage.link/ipfs/bafkreigp4fh5puuzc7hrp2lmstlyeaqjtctyvuk7gcqdqsqlvebj4upxcm', 'StackIcon': 'https://nftstorage.link/ipfs/bafkreidrilrx55ohomflas5as6puq3fm7vkn4gmp2sssqwydlvom7rxyli',

  //       'close':'https://nftstorage.link/ipfs/bafkreidjlt2fejd5t2urmawpfg5xgtm55zlctx2zek3bqxwikehoyq6whe',
  //       'clear':'https://nftstorage.link/ipfs/bafkreicdhnkw75k4k7m4hwiwaebgsiv2mf6zix5d6ctr2shpa7jtuy5bke',
  //       'add_text':'https://bafkreifxaepix26g36uzkdvgtksww2nn44hjbbimikmd6dbrbrpml3jku4.ipfs.w3s.link',

  //       'play':'https://bafkreih3refhk4wbrhbimtenvrg4juwzy6jpmtnqnfnimrkrz5e2amwqhu.ipfs.w3s.link/',
  //       'pause':'https://bafkreiaxygqglibofkh73qerfxo6v4ojyjmcvyr2h6pa44sbcowyow4wly.ipfs.w3s.link/',
  //       'previous':'https://bafkreigoe7wibzhews6b77rqnbfqrd3qvyvzsehvielxdkn2pulml27u2q.ipfs.w3s.link/',
  //       'next':'https://bafkreidxr7vonmydvrxz6k43alvy5hhbqm6i5diwqw37qohhijm3llom7a.ipfs.w3s.link/',
  //       'shuffle':'https://bafkreidgx3rq45hdlfpo7xqciuzjxt3kcw3trxpqydpqkoaqea5qhccsie.ipfs.w3s.link/',
  //       'repeat':'https://bafkreihn4dag5j7fisuk6q7hzsfczpacj2szvsm5seovljvbq776tpihbm.ipfs.w3s.link/',
  //     }
  //   }




  //   else if(theme == this.getLocale()['1593a']/* 'auto' */){
  //     var obj = this.get_theme_data(this.get_time_of_day_theme())
  //     obj['name'] = this.getLocale()['1593a']/* 'auto' */

  //     return obj
  //   }
  // }

  get_theme_data(theme){
    //this.props.theme['']
    if(theme == this.getLocale()['1417']/* 'light' */){
      return{
        'name':this.getLocale()['1417']/* 'light' */,
        'bar_shadow':'#CECDCD','bar_color':'#444444', 'bar_background_color':'#919191','nav_bar_color':'#dddddd', 'button_color':'#444444', 'button_text_color':'white', 'line_color':'#C1C1C1',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#393e46','secondary_text_color':'grey',
        
        'navbar_button_selected_color':'#f2f2f2','primary_navbar_text_color':'#393e46','secondary_navbar_text_color':'grey','navbar_text_shadow_color':'#BABABA','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#DCDCDC',
        
        'view_group_card_item_background':'rgb(217, 217, 217,.6)','tag_background_color':'#787878','indexed_tag_background':'#5e5e5e','tag_shadow':'#868686','tag_text_color':'white',
        
        'chart_color':'#FCFCFC','chart_background_color':'#D5D5D5',
  
        'number_picker_label_color':'#D5D5D5','number_picker_label_shadow':'#c9c9c9',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#afafaf', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'white', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon, 'add_icon':add_icon, 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light',

        'background':'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4', 'JobIcon':JobIcon, 'ExploreIcon': ExploreIcon, 'WalletIcon':WalletIcon, 'StackIcon': StackIcon, 

        'close':close,
        'clear':'https://nftstorage.link/ipfs/bafkreiboxvoi3u6dm3lwd4lne5xqknjzdtakck22ufkjzqdvmgrtwq4mbu',
        'add_text':add_text,
        
        'play':play,
        'pause':pause,
        'previous':previous,
        'next':next,
        'shuffle':shuffle_icon,
        'repeat':repeat,
      }
    }
    else if(theme == this.getLocale()['1418']/* 'dark' */){
      return{
        'name':this.getLocale()['1418']/* 'dark' */,
        'bar_shadow':'#919191','bar_color':'white', 'bar_background_color':'#919191','nav_bar_color':'#444444','button_color':'#444444', 'button_text_color':'white', 'line_color':'#C1C1C1',
        
        'homepage_background_color':'#292929','syncronizing_page_background_color':'#292929','send_receive_ether_background_color':'#292929','send_receive_ether_overlay_background':'#424242','send_receive_ether_overlay_shadow':'#424242',

        'primary_text_color':'white', 'secondary_text_color':'#e6e6e6',
        
        'navbar_button_selected_color':'#545454','card_background_color':'rgb(51, 51, 51,.9)', 'primary_navbar_text_color':'white','secondary_navbar_text_color':'#e6e6e6','navbar_text_shadow_color':'#BABABA','card_shadow_color':'#424242',

        'view_group_card_item_background':'#2e2e2e','tag_background_color':'#444444', 'indexed_tag_background':'#404040', 'tag_shadow':'#424242', 'tag_text_color':'white',

        'chart_color':'#333333','chart_background_color':'#232323',

        'number_picker_label_color':'#3C3C3C','number_picker_label_shadow':'#262626',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#878787', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#878787', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'white','toast_background_color':'#333333', 'calendar_color':'dark', 'alert_icon':alert_icon_dark, 'add_icon':add_icon_dark, 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'black','markdown_theme':'dart','pdf_theme':'dark',

        'background':'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4', 'JobIcon':JobIconDark, 'ExploreIcon': ExploreIconDark, 'WalletIcon':WalletIconDark, 'StackIcon': StackIconDark,
        
        'close':close_dark,
        'clear':'https://nftstorage.link/ipfs/bafkreie2xrfhubydc4oih637nmadvqesx4yqmqo55jpgf3alhlhxyzd37u',
        'add_text':add_text_dark,

        'play':play_dark,
        'pause':pause_dark,
        'previous':previous_dark,
        'next':next_dark,
        'shuffle':shuffle_dark,
        'repeat':repeat_dark,
      }
    }
    else if(theme == this.getLocale()['2740']/* midnight */){
      return{
        'name':this.getLocale()['2740']/* midnight */,
        'bar_shadow':'#919191','bar_color':'white', 'bar_background_color':'#919191','nav_bar_color':'#1a1a1a','button_color':'#171717', 'button_text_color':'white', 'line_color':'#C1C1C1',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#303030','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'white', 'secondary_text_color':'#e6e6e6',
        
        'navbar_button_selected_color':'#333333','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'white','secondary_navbar_text_color':'#e6e6e6','navbar_text_shadow_color':'#BABABA','card_shadow_color':'#212121',

        'view_group_card_item_background':'#1a1a1a','tag_background_color':'#303030', 'indexed_tag_background':'#242424', 'tag_shadow':'#303030', 'tag_text_color':'white',

        'chart_color':'#1a1a1a','chart_background_color':'#0a0a0a',

        'number_picker_label_color':'#171717','number_picker_label_shadow':'#262626',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#878787', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'white','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_dark, 'add_icon':add_icon_dark, 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'#0f0f0f', 'markdown_theme':'dart','pdf_theme':'dark',


        'background':'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4', 'JobIcon':JobIconDark, 'ExploreIcon': ExploreIconDark, 'WalletIcon':WalletIconDark, 'StackIcon': StackIconDark,

        'close':close_dark,
        'clear':'https://nftstorage.link/ipfs/bafkreie2xrfhubydc4oih637nmadvqesx4yqmqo55jpgf3alhlhxyzd37u',
        'add_text':add_text_dark,

        'play':play_dark,
        'pause':pause_dark,
        'previous':previous_dark,
        'next':next_dark,
        'shuffle':shuffle_dark,
        'repeat':repeat_dark,
      }
    }
    else if(theme == this.getLocale()['2741']/* green */){
      return{
        'name':this.getLocale()['2741']/* green */,
        'bar_shadow':'#01c664','bar_color':'#01c601', 'bar_background_color':'#bef4d9','nav_bar_color':'#1a1a1a','button_color':'#171717', 'button_text_color':'#71fc71', 'line_color':'#71fc71',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#303030','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#71fc71', 'secondary_text_color':'#5bc15b',
        
        'navbar_button_selected_color':'#333333','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#5bc15b','secondary_navbar_text_color':'#5bc15b','card_shadow_color':'#013f01',
        'navbar_text_shadow_color':'#5bc15b',

        'view_group_card_item_background':'#141e0a','tag_background_color':'#203f00', 'indexed_tag_background':'#002100', 'tag_shadow':'#004f00', 'tag_text_color':'#71fc71',

        'chart_color':'#01c601','chart_background_color':'#141e0a',

        'number_picker_label_color':'#171717','number_picker_label_shadow':'#013f01',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#013f01','number_picker_label_text_color':'#5bc15b', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#01c601','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':'https://nftstorage.link/ipfs/bafkreibc4fjptfewuzg22f4p4nk65wknautn3ckiho7jizflyqbrqra4cy', 'add_icon':'https://nftstorage.link/ipfs/bafkreibdzmvmt56gvw5ky566vcwvvi3sy3djmafony7smk5vuwtq3uznoy', 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark',


        'background':'https://nftstorage.link/ipfs/bafkreihfrklgd4ohlsn4akcotktzawdx5mf2ky7ecnh5jx34oomecry2x4', 'JobIcon':'https://nftstorage.link/ipfs/bafkreiehl5q32o5bvomkiybrybqhisbnwgqgikfwy5sronba4dv5ctetqq', 'ExploreIcon': 'https://nftstorage.link/ipfs/bafkreiac46ktvwpelr7ltozw746twfbjfy4d33m7wtxe7sye5nnweg25ia', 'WalletIcon':'https://nftstorage.link/ipfs/bafkreigp4fh5puuzc7hrp2lmstlyeaqjtctyvuk7gcqdqsqlvebj4upxcm', 'StackIcon': 'https://nftstorage.link/ipfs/bafkreidrilrx55ohomflas5as6puq3fm7vkn4gmp2sssqwydlvom7rxyli',

        'close':'https://nftstorage.link/ipfs/bafkreidjlt2fejd5t2urmawpfg5xgtm55zlctx2zek3bqxwikehoyq6whe',
        'clear':'https://nftstorage.link/ipfs/bafkreicdhnkw75k4k7m4hwiwaebgsiv2mf6zix5d6ctr2shpa7jtuy5bke',
        'add_text':'https://bafkreifxaepix26g36uzkdvgtksww2nn44hjbbimikmd6dbrbrpml3jku4.ipfs.w3s.link',

        'play':'https://bafkreih3refhk4wbrhbimtenvrg4juwzy6jpmtnqnfnimrkrz5e2amwqhu.ipfs.w3s.link/',
        'pause':'https://bafkreiaxygqglibofkh73qerfxo6v4ojyjmcvyr2h6pa44sbcowyow4wly.ipfs.w3s.link/',
        'previous':'https://bafkreigoe7wibzhews6b77rqnbfqrd3qvyvzsehvielxdkn2pulml27u2q.ipfs.w3s.link/',
        'next':'https://bafkreidxr7vonmydvrxz6k43alvy5hhbqm6i5diwqw37qohhijm3llom7a.ipfs.w3s.link/',
        'shuffle':'https://bafkreidgx3rq45hdlfpo7xqciuzjxt3kcw3trxpqydpqkoaqea5qhccsie.ipfs.w3s.link/',
        'repeat':'https://bafkreihn4dag5j7fisuk6q7hzsfczpacj2szvsm5seovljvbq776tpihbm.ipfs.w3s.link/',
      }
    }
    else if(theme == this.getLocale()['1593a']/* 'auto' */){
      var obj = this.get_theme_data(this.get_time_of_day_theme())
      obj['name'] = this.getLocale()['1593a']/* 'auto' */

      return obj
    }
  }

  get_time_of_day_theme(){
    var hour = new Date().getHours() 
    if(hour >= 18 || hour < 7){
      if(hour >= 23 || hour < 4){
        return this.getLocale()['2740']/* midnight */
      }
      return this.getLocale()['1418']/* 'dark' */
    }else{
      return this.getLocale()['1417']/* 'light' */
    }
  }

  reset_theme(){
    this.setState({theme: this.get_theme_data(this.state.theme['name'])})
  }









  render(){
    // return(
    //   <div>
    //     {makeid(3)}
    //   </div>
    // )
    if(this.getScreenSize() == 'e'){
      return(
        <div>
          {this.render_page()}
        </div>
      )
    }else{
      return (
        <div>
          {this.render_audio_pip()}
          {this.render_page()}
          {this.render_synchronizing_bottomsheet()}
          {this.render_send_receive_ether_bottomsheet()}
          {this.render_stack_bottomsheet()}
          {this.render_view_transaction_bottomsheet()}
          {this.render_wiki_bottomsheet()}
          {this.render_new_object_bottomsheet()}
          
          {this.render_mint_token_bottomsheet()}
          {this.render_transfer_token_bottomsheet()}
          {this.render_extend_contract_bottomsheet()}
          {this.render_exit_contract_bottomsheet()}
          {this.render_new_proposal_bottomsheet()}
          {this.render_vote_proposal_bottomsheet()}
          {this.render_submit_proposal_bottomsheet()}
          {this.render_pay_subscription_bottomsheet()}
          {this.render_cancel_subscription_bottomsheet()}
          {this.render_collect_subscription_bottomsheet()}
          {this.render_modify_subscription_bottomsheet()}
          {this.render_modify_contract_bottomsheet()}
          {this.render_modify_token_bottomsheet()}
          {this.render_exchange_transfer_bottomsheet()}
          {this.render_force_exit_bottomsheet()}
          {this.render_archive_proposal_bottomsheet()}
          {this.render_freeze_unfreeze_bottomsheet()}
          {this.render_authmint_bottomsheet()}
          {this.render_moderator_bottomsheet()}
          {this.render_respond_to_job_bottomsheet()}
          {this.render_view_application_contract_bottomsheet()}
          {this.render_view_transaction_log_bottomsheet()}
          {this.render_add_to_bag_bottomsheet()}
          {this.render_fulfil_bag_bottomsheet()}
          {this.render_view_bag_application_contract_bottomsheet()}
          {this.render_direct_purchase_bottomsheet()}
          {this.render_clear_purchase_bottomsheet()}
          {this.render_scan_code_bottomsheet()}
          {this.render_send_job_request_bottomsheet()}
          {this.render_view_job_request_bottomsheet()}
          {this.render_enter_contract_bottomsheet()}
          {this.render_view_job_request_contract_bottomsheet()}
          {this.render_withdraw_ether_bottomsheet()}

          {this.render_edit_token_object_bottomsheet()}
          {this.render_edit_channel_object_bottomsheet()}
          {this.render_edit_contractor_object_bottomsheet()}
          {this.render_edit_job_object_bottomsheet()}
          {this.render_edit_post_object_bottomsheet()}
          {this.render_edit_storefront_object_bottomsheet()}
          {this.render_give_award_bottomsheet()}
          {this.render_add_comment_bottomsheet()}
          {this.render_depthmint_bottomsheet()}
          {this.render_searched_account_bottomsheet()}
          {this.render_rpc_settings_bottomsheet()}
          {this.render_confirm_run_bottomsheet()}
          {this.render_edit_proposal_object_bottomsheet()}
          {this.render_successful_send_bottomsheet()}
          {this.render_stage_royalties_bottomsheet()}
          {this.render_view_staged_royalties_bottomsheet()}
          {this.render_pay_upcoming_subscriptions_bottomsheet()}
          {this.render_send_receive_coin_bottomsheet()}
          {this.render_edit_audiopost_object_bottomsheet()}
          {this.render_full_audio_bottomsheet()}
          {this.render_buy_album_bottomsheet()}
          {this.render_add_to_playlist_bottomsheet()}
          {this.render_buy_video_bottomsheet()}
          {this.render_edit_nitropost_object_bottomsheet()}
          {this.render_buy_nitro_storage_bottomsheet()}
          {this.render_configure_nitro_node_bottomsheet()}
          {this.render_dialer_bottomsheet()}

          {this.render_view_image_bottomsheet()}
          {this.render_view_pdf_bottomsheet()}
          {this.render_pick_file_bottomsheet()}
          {this.render_dialog_bottomsheet()}
          {this.render_view_number_bottomsheet()}
          {this.render_edit_videopost_object_bottomsheet()}
          {this.render_full_video_bottomsheet()}
          
          {this.render_toast_container()}
          <audio ref={this.remoteStream} autoPlay />
        </div>
      );
    }
  }

  render_toast_container(){
    var os = getOS()
    if(os != 'iOS' || this.state.syncronizing_page_bottomsheet == true){
      return(
        <div>
          <ToastContainer limit={3} containerId="id"/>
        </div>
      )
    }
  }

  render_page(){
    return(
      <div>
        <Home_page ref={this.homepage}
          screensize={this.getScreenSize()} 
          width={this.state.width} height={this.state.height} app_state={this.state} view_number={this.view_number.bind(this)} notify={this.prompt_top_notification.bind(this)} open_send_receive_ether_bottomsheet={this.start_send_receive_ether_bottomsheet.bind(this)} open_stack_bottomsheet={this.open_stack_bottomsheet.bind(this)} theme={this.state.theme} details_orientation={this.state.details_orientation} 
          open_wiki_bottomsheet={this.open_wiki_bottomsheet.bind(this)} 
          open_new_object={this.open_new_object.bind(this)} 
          when_view_image_clicked={this.when_view_image_clicked.bind(this)} when_edit_job_tapped={this.when_edit_created_job_tapped.bind(this)} fetch_objects_data={this.fetch_objects_data.bind(this)}
          
          show_mint_token_bottomsheet={this.show_mint_token_bottomsheet.bind(this)}
          show_transfer_bottomsheet={this.show_transfer_bottomsheet.bind(this)}
          show_enter_contract_bottomsheet={this.show_enter_contract_bottomsheet.bind(this)}
          show_extend_contract_bottomsheet={this.show_extend_contract_bottomsheet.bind(this)}
          show_exit_contract_bottomsheet={this.show_exit_contract_bottomsheet.bind(this)}
          show_new_proposal_bottomsheet={this.show_new_proposal_bottomsheet.bind(this)}
          show_vote_proposal_bottomsheet={this.show_vote_proposal_bottomsheet.bind(this)}
          show_submit_proposal_bottomsheet={this.show_submit_proposal_bottomsheet.bind(this)}
          show_pay_subscription_bottomsheet={this.show_pay_subscription_bottomsheet.bind(this)}
          show_cancel_subscription_bottomsheet={this.show_cancel_subscription_bottomsheet.bind(this)}
          show_collect_subscription_bottomsheet={this.show_collect_subscription_bottomsheet.bind(this)}
          show_modify_subscription_bottomsheet={this.show_modify_subscription_bottomsheet.bind(this)}
          show_modify_contract_bottomsheet={this.show_modify_contract_bottomsheet.bind(this)}
          show_modify_token_bottomsheet={this.show_modify_token_bottomsheet.bind(this)}
          show_exchange_transfer_bottomsheet={this.show_exchange_transfer_bottomsheet.bind(this)}
          show_force_exit_bottomsheet={this.show_force_exit_bottomsheet.bind(this)}
          show_archive_proposal_bottomsheet={this.show_archive_proposal_bottomsheet.bind(this)}
          show_freeze_unfreeze_bottomsheet={this.show_freeze_unfreeze_bottomsheet.bind(this)}
          show_authmint_bottomsheet={this.show_authmint_bottomsheet.bind(this)}
          show_moderator_bottomsheet={this.show_moderator_bottomsheet.bind(this)}
          show_images={this.show_images.bind(this)} show_respond_to_job_bottomsheet={this.show_respond_to_job_bottomsheet.bind(this)}

          add_mail_to_stack_object={this.add_mail_to_stack_object.bind(this)} add_channel_message_to_stack_object={this.add_channel_message_to_stack_object.bind(this)} get_objects_messages={this.get_objects_messages.bind(this)} add_post_reply_to_stack={this.add_post_reply_to_stack.bind(this)} get_job_objects_responses={this.get_job_objects_responses.bind(this)} show_view_application_contract_bottomsheet={this.show_view_application_contract_bottomsheet.bind(this)} add_job_message_to_stack_object={this.add_job_message_to_stack_object.bind(this)} add_proposal_message_to_stack_object={this.add_proposal_message_to_stack_object.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} add_audio_reply_to_stack={this.add_audio_reply_to_stack.bind(this)} add_video_reply_to_stack={this.add_video_reply_to_stack.bind(this)} add_nitro_reply_to_stack={this.add_nitro_reply_to_stack.bind(this)}
          
          open_add_to_bag={this.show_add_to_bag_bottomsheet.bind(this)} open_fulfil_bag_request={this.show_fulfil_bag_bottomsheet.bind(this)} show_view_bag_application_contract_bottomsheet={this.show_view_bag_application_contract_bottomsheet.bind(this)} show_direct_purchase_bottomsheet={this.show_direct_purchase_bottomsheet.bind(this)} open_send_job_request_ui={this.open_send_job_request_ui.bind(this)}

          get_direct_purchase_events={this.get_direct_purchase_events.bind(this)} open_clear_purchase={this.show_clear_purchase_bottomsheet.bind(this)} add_bag_message_to_stack_object={this.add_bag_message_to_stack_object.bind(this)} add_storefront_message_to_stack_object={this.add_storefront_message_to_stack_object.bind(this)} get_contractor_applications={this.get_contractor_applications.bind(this)} open_view_job_request_ui={this.open_view_job_request_ui.bind(this)} open_view_contract_ui={this.show_view_job_request_contract_bottomsheet.bind(this)} show_withdraw_ether_bottomsheet={this.show_withdraw_ether_bottomsheet.bind(this)}

          add_account_to_contacts={this.add_account_to_contacts.bind(this)} open_edit_object={this.open_edit_object.bind(this)}
          show_give_award_bottomsheet={this.show_give_award_bottomsheet.bind(this)} get_post_award_data={this.get_post_award_data.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)}

          get_contract_event_data={this.get_contract_event_data.bind(this)} get_proposal_event_data={this.get_proposal_event_data.bind(this)} get_subscription_event_data={this.get_subscription_event_data.bind(this)} get_exchange_event_data={this.get_exchange_event_data.bind(this)} get_moderator_event_data={this.get_moderator_event_data.bind(this)} get_accounts_payment_information={this.get_accounts_payment_information.bind(this)} show_depthmint_bottomsheet={this.show_depthmint_bottomsheet.bind(this)} open_wallet_guide_bottomsheet={this.open_wallet_guide_bottomsheet.bind(this)} get_channel_event_data={this.get_channel_event_data.bind(this)}

          when_select_deselect_work_tag={this.when_select_deselect_work_tag.bind(this)} when_select_deselect_explore_tag={this.when_select_deselect_explore_tag.bind(this)} get_searched_account_data={this.get_searched_account_data.bind(this)} when_searched_account_clicked={this.when_searched_account_clicked.bind(this)} enable_tabs={this.enable_tabs.bind(this)} show_rpc_settings_bottomsheet={this.show_rpc_settings_bottomsheet.bind(this)} get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} load_data_from_page_in_focus={this.load_data_from_page_in_focus.bind(this)}
          fetch_objects_to_load_from_searched_tags={this.fetch_objects_to_load_from_searched_tags.bind(this)}
          
          show_stage_royalties_bottomsheet={this.show_stage_royalties_bottomsheet.bind(this)}
          load_exchanges_royalty_event_data={this.load_exchanges_royalty_event_data.bind(this)}
          show_view_staged_royalties_bottomsheet={this.show_view_staged_royalties_bottomsheet.bind(this)}
          load_exchanges_royalty_payout_event_data={this.load_exchanges_royalty_payout_event_data.bind(this)}

          show_pay_upcoming_subscriptions_bottomsheet={this.show_pay_upcoming_subscriptions_bottomsheet.bind(this)} start_send_receive_coin_bottomsheet={this.start_send_receive_coin_bottomsheet.bind(this)}
          update_coin_balances={this.update_coin_balances.bind(this)} load_contracts_exchange_interactions_data={this.load_contracts_exchange_interactions_data.bind(this)} load_burn_address_end_balance_events={this.load_burn_address_end_balance_events.bind(this)}
          load_bags_stores={this.load_bags_stores.bind(this)} fetch_uploaded_files_for_object={this.fetch_uploaded_files_for_object.bind(this)} show_buy_album_bottomsheet={this.show_buy_album_bottomsheet.bind(this)} play_song={this.play_song.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)}
        
          play_song_in_playlist={this.play_song_in_playlist.bind(this)} update_order_of_songs_in_playlist={this.update_order_of_songs_in_playlist.bind(this)} download_playlist={this.download_playlist.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} open_purchase_video_ui={this.show_buy_video_bottomsheet.bind(this)} play_video={this.play_video.bind(this)}
        
          load_nitro_node_details={this.load_nitro_node_details.bind(this)} load_my_account_storage_info={this.load_my_account_storage_info.bind(this)} show_buy_nitro_storage_bottomsheet={this.show_buy_nitro_storage_bottomsheet.bind(this)} show_configure_nitro_node_bottomsheet={this.show_configure_nitro_node_bottomsheet.bind(this)} block_post={this.block_post.bind(this)} when_zip_file_opened={this.when_zip_file_opened.bind(this)}
        />
        {this.render_homepage_toast()}
      </div>
      
    )
  }

  render_homepage_toast(){
    var os = getOS()
    if(os == 'iOS' && this.state.stack_bottomsheet == false){
      return(
        <div>
          <ToastContainer limit={3} containerId="id2"/>
        </div>
      )
    }
  }

  set_cookies_after_stack_action(stack_items, should_keep_stack_open){
    var me = this;
    var is_stack_open = this.state.stack_bottomsheet2
    this.setState({stack_bottomsheet2: true});
    setTimeout(function() { 
      if(me.stack_page.current!= null){
        me.stack_page.current?.run_transactions(true)
      } 
      me.set_cookies()

      setTimeout(function() {
        if(!is_stack_open) me.setState({stack_bottomsheet2: false});
      }, (1 * 1500));
    }, (1 * 1000));
  }

  add_mail_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1509']/* 'mail-messages' */ && stack[i].e5 == message['e5']){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1509']/* 'mail-messages' */, entered_indexing_tags:[this.getLocale()['1369']/* 'send' */, this.getLocale()['1201']/* 'mail' */], messages_to_deliver:[], e5:message['e5']}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_channel_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1510']/* 'channel-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1510']/* 'channel-messages' */, entered_indexing_tags:[this.getLocale()['1369']/* 'send' */, this.getLocale()['109']/* 'channel' */,this.getLocale()['2094']/* 'messages' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_post_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1511']/* 'post-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1511']/* 'post-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['297']/* 'post' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_job_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1514']/* 'job-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1514']/* 'job-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1309']/* 'job' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_proposal_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1515']/* 'proposal-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1515']/* 'proposal-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1309']/* 'job' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_bag_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1501']/* 'bag-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1501']/* 'bag-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1045']/* 'bag' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_storefront_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1502']/* 'storefront-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1502']/* 'storefront-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1215']/* 'storefront' */,this.getLocale()['1158']/* 'message' */,this.getLocale()['2697']/* 'review' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_audio_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1593cc']/* 'audio-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1593cc']/* 'audio-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['a311a']/* 'audio' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_video_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1593ct']/* 'video-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1593ct']/* 'video-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['b311a']/* 'video' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_nitro_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1593ct']/* 'video-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1593cu']/* 'nitro-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['a273a']/* 'nitro' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  block_post(object){
    var clone = this.state.posts_blocked_by_me.slice()
    if(clone.includes(object['e5_id'])){
      var index = clone.indexOf(object['e5_id'])
      clone.splice(index, 1)
      this.prompt_top_notification(this.getLocale()['3054cx']/* 'Post unblocked.' */, 1800)
    }else{
      this.prompt_top_notification(this.getLocale()['3054cw']/* 'Post added to your blocked list.' */, 1900)
      clone.push(object['e5_id'])
    }
    this.setState({posts_blocked_by_me: clone, should_update_posts_blocked_by_me:true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }





  delete_message_from_stack(message, type){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == type && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos != -1){
      var messages = stack[pos].messages_to_deliver;
      var message_pos = -1
      for(var i=0; i<messages.length; i++){
        if(messages[i]['message_id'] == message['message_id']){
          message_pos = i
          break;
        }
      }
      if(message_pos != -1){
        stack[pos].messages_to_deliver.splice(message_pos, 1);
        if(stack[pos].messages_to_deliver.length == 0){
          stack.splice(pos, 1)
        }
        this.setState({stack_items: stack})
        this.set_cookies_after_stack_action(stack)
        this.prompt_top_notification(this.getLocale()['2909']/* 'Message Deleted.' */, 1000)
      }else{
        this.prompt_top_notification(this.getLocale()['2907']/* 'You cant delete that message.' */, 3000)
      }
    }else{
      this.prompt_top_notification(this.getLocale()['2907']/* 'You cant delete that message.' */, 3000)
    }
  }

  when_select_deselect_work_tag(tag, pos){
    var clone = this.state.job_section_tags.slice()
    const index = clone.indexOf(tag);
    if (index > -1) { // only splice array when item is found
      clone.splice(index, 1); // 2nd parameter means remove one item only
    } else {
      clone.push(tag)
    }
    this.setState({job_section_tags: clone, should_update_section_tags_onchain: true})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_select_deselect_explore_tag(tag, pos){
    var clone = this.state.explore_section_tags.slice()
    const index = clone.indexOf(tag);
    if (index > -1) { // only splice array when item is found
      clone.splice(index, 1); // 2nd parameter means remove one item only
    } else {
      clone.push(tag)
    }
    this.setState({explore_section_tags: clone, should_update_section_tags_onchain: true})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  enable_tabs(){
    this.setState({visible_tabs: this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
        me.stack_page.current?.set_tabs_tag()
    }, (1 * 1000));
  }







  render_synchronizing_bottomsheet(){
    var background_color = this.state.theme['syncronizing_page_background_color'];
    var size = this.getScreenSize();
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={50} onChange={this.open_syncronizing_page_bottomsheet.bind(this)} open={this.state.syncronizing_page_bottomsheet} onTransitionEnd={this.keep_syncronizing_page_open()}  style={{'z-index':'3'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': 'grey'}}>
          <div style={{ height: this.state.height-50, 'background-color': background_color, 'margin': '0px 0px 0px 0px', 'padding':'10px 10px 0px 10px', 'overflow-y':'auto'}}>
            <Syncronizing_page sync_progress={this.state.syncronizing_progress} app_state={this.state} view_number={this.view_number.bind(this)} theme={this.state.theme} close_syncronizing_page={this.close_syncronizing_page.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    );
  }

  open_syncronizing_page_bottomsheet(){
      if(this.state != null){
        this.setState({syncronizing_page_bottomsheet: !this.state.syncronizing_page_bottomsheet});
      }
  };

  keep_syncronizing_page_open(){
    if(!this.state.syncronizing_page_bottomsheet && this.state.should_keep_synchronizing_bottomsheet_open){
        this.open_syncronizing_page_bottomsheet();
    }
  };

  close_syncronizing_page(){
    if(this.state.syncronizing_progress >= 100 && this.state.should_keep_synchronizing_bottomsheet_open == false){
      this.open_syncronizing_page_bottomsheet()
    }else{
      // this.prompt_top_notification('Not yet!', 700)
    }
  }







  render_send_receive_ether_bottomsheet(){
    if(this.state.send_receive_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var overlay_background = this.state.theme['send_receive_ether_overlay_background'];
    var overlay_shadow_color = this.state.theme['send_receive_ether_overlay_shadow'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.send_receive_bottomsheet} onClose={this.open_send_receive_ether_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': overlay_shadow_color, 'border-radius': '5px 5px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color,'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SendReceiveEtherPage ref={this.send_receive_ether_page}  app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} notify={this.prompt_top_notification.bind(this)} send_ether_to_target={this.send_ether_to_target.bind(this)} transaction_history={this.state.account_transaction_history} theme={this.state.theme} ether_balance={this.state.account_balance} 
                          start_scan={this.start_scan.bind(this)} get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)}/>
                      </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_send_receive_ether_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_send_receive_ether_bottomsheet.bind(this)} open={this.state.send_receive_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': overlay_background,'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': overlay_shadow_color, 'border-radius': '5px 5px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color,'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
              <SendReceiveEtherPage ref={this.send_receive_ether_page}  app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} notify={this.prompt_top_notification.bind(this)} send_ether_to_target={this.send_ether_to_target.bind(this)} transaction_history={this.state.account_transaction_history} theme={this.state.theme} ether_balance={this.state.account_balance} 
              start_scan={this.start_scan.bind(this)} get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_send_receive_ether_bottomsheet(){
    if(this.state.send_receive_bottomsheet == true){
      //closing
      this.send_receive_bottomsheet = this.send_receive_ether_page.current?.state;
     
      this.setState({send_receive_bottomsheet: !this.state.send_receive_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({send_receive_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_bottomsheet: !me.state.send_receive_bottomsheet});
        
        if(me.send_receive_bottomsheet != null){
          me.send_receive_ether_page.current?.setState(me.send_receive_bottomsheet)
        }
      }, (1 * 100));
    }
    
  }

  start_send_receive_ether_bottomsheet(item){
    this.open_send_receive_ether_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.send_receive_ether_page.current != null){
        me.send_receive_ether_page.current.set_object(item)
      } 
    }, (1 * 500));
    
  }








  render_send_receive_coin_bottomsheet(){
    if(this.state.send_receive_coin_bottomsheet2 != true) return;
    var overlay_background = this.state.theme['send_receive_ether_overlay_background'];
    var overlay_shadow_color = this.state.theme['send_receive_ether_overlay_shadow'];
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.send_receive_coin_bottomsheet} onClose={this.open_send_receive_coin_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_send_receive_coin_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_send_receive_coin_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_send_receive_coin_bottomsheet.bind(this)} open={this.state.send_receive_coin_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': overlay_background,'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color}}>
        {this.render_send_receive_coin_element()}
      </SwipeableBottomSheet>
    )
  }

  render_send_receive_coin_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var overlay_shadow_color = this.state.theme['send_receive_ether_overlay_shadow'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': overlay_shadow_color, 'border-radius': '5px 5px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color,'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <SendReceiveCoinPage ref={this.send_receive_coin_page}  app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} notify={this.prompt_top_notification.bind(this)} theme={this.state.theme} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} check_if_recipient_address_is_valid={this.check_if_recipient_address_is_valid.bind(this)} broadcast_transaction={this.broadcast_transaction.bind(this)} estimate_arweave_network_fees={this.estimate_arweave_network_fees.bind(this)} validate_arweave_address={this.validate_arweave_address.bind(this)}
        
        />
      </div>
    )
  }

  open_send_receive_coin_bottomsheet(){
    if(this.state.send_receive_coin_bottomsheet == true){
      //closing
      this.send_receive_coin_bottomsheet = this.send_receive_coin_page.current?.state;
     
      this.setState({send_receive_coin_bottomsheet: !this.state.send_receive_coin_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_coin_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({send_receive_coin_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_coin_bottomsheet: !me.state.send_receive_coin_bottomsheet});
        
        if(me.send_receive_coin_bottomsheet != null){
          me.send_receive_coin_page.current?.setState(me.send_receive_coin_bottomsheet)
        }
      }, (1 * 100));
    }
    
  }

  start_send_receive_coin_bottomsheet(item){
    this.open_send_receive_coin_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.send_receive_coin_page.current != null){
        me.send_receive_coin_page.current.set_object(item)
      } 
    }, (1 * 500));
    
  }

  check_if_recipient_address_is_valid(address, item){
    if(item['symbol'] == 'BTC'){
      return this.validate_bitcoin_address(address)
    }
    else if(item['symbol'] == 'BCH'){
      return this.validate_bitcion_cash_address(address)
    }
    else if(item['symbol'] == 'LTC'){
      return this.validate_litecoin_address(address)
    }
    else if(item['symbol'] == 'DOGE'){
      return this.validate_dogecoin_address(address)
    }
    else if(item['symbol'] == 'DASH'){
      return this.validate_dash_address(address)
    }
    else if(item['symbol'] == 'TRX'){
      return this.validate_tron_address(address)
    }
    else if(item['symbol'] == 'XRP'){
      return this.validate_xrp_address(address)
    }
    else if(item['symbol'] == 'XLM'){
      return this.validate_xlm_address(address)
    }
    else if(item['symbol'] == 'DOT'){
      return this.validate_dot_address(address)
    }
    else if(item['symbol'] == 'KSM'){
      return this.validate_dot_address(address)
    }
    else if(item['symbol'] == 'ALGO'){
      return this.validate_algo_address(address)
    }
    else if(item['symbol'] == 'XTZ'){
      return this.validate_tezos_address(address)
    }
    else if(item['symbol'] == 'ATOM'){
      return this.validate_cosmos_address(address)
    }
    else if(item['symbol'] == 'FIL'){
      return this.validate_filecoin_address(address)
    }
    else if(item['symbol'] == 'SOL'){
      return this.validate_solana_address(address)
    }
    else if(item['symbol'] == 'APT'){
      return this.validate_aptos_address(address)
    }
    else if(item['symbol'] == 'ADA'){
      return this.validate_cardano_address(address)
    }
    else if(item['symbol'] == 'STX'){
      return this.validate_stacks_address(address)
    }
    else if(item['symbol'] == 'AR'){
      return this.validate_arweave_address(address)
    }


    return true;
  }

  validate_bitcoin_address(address) {
    const network = bitcoin.networks.bitcoin;
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_bitcion_cash_address(address){
    try {
      var isValidAddress = bchaddr.isValidAddress;
      return isValidAddress(address)// Tries to convert address to script
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_litecoin_address(address){
    const network = bitcoin.networks.litecoin;
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_dogecoin_address(address){
    const network = {
      messagePrefix: '\x19Dogecoin Signed Message:\n',
      // bech32: null,
      bip32: {
        public: 0x02facafd,  // Public key (xpub) prefix
        private: 0x02fac398  // Private key (xprv) prefix
      },
      pubKeyHash: 0x1e,      // Starts with 'D' for mainnet
      scriptHash: 0x16,      // Starts with '9' or 'A' for mainnet
      wif: 0x9e,             // WIF (Wallet Import Format) prefix
    };
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_dash_address(address){
    const network = {
      messagePrefix: '\x19Dash Signed Message:\n',
      bip32: {
        public: 0x02fe52f8, // xpub prefix for Dash
        private: 0x02fe52cc // xprv prefix for Dash
      },
      pubKeyHash: 0x4c,      // P2PKH addresses start with 'X'
      scriptHash: 0x10,      // P2SH addresses start with '7'
      wif: 0xcc              // WIF starts with 'X' for Dash
    };
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_tron_address(address){
    return TronWeb.isAddress(address)
  }

  validate_xrp_address(address){
    return isValidClassicAddress(address);
  }

  validate_xlm_address(address){
    return StellarSdk.StrKey.isValidEd25519PublicKey(address); 
  }

  validate_dot_address(address){
    try {
      // Attempt to decode and re-encode the address
      const decoded = decodeAddress(address);
      const reencoded = encodeAddress(decoded);
      
      // If the re-encoded address matches the input, it's valid
      return reencoded === address;
    } catch (error) {
      return false; // If an error occurs, the address is invalid
    }
  }

  validate_algo_address(address){
    return algosdk.isValidAddress(address);
  }

  validate_tezos_address(address){
    return validateAddress(address) === ValidationResult.VALID;
  }

  validate_cosmos_address(address){
    return address.startsWith('cosmos')
  }

  validate_filecoin_address(address){
    return address.startsWith('f')
  }

  validate_solana_address(address){
    try {
      // Attempt to create a PublicKey object from the address
      let pubkey = new PublicKey(address);
      return PublicKey.isOnCurve(pubkey.toBytes());
    } catch (error) {
      return false;
    }
  }

  validate_aptos_address(address){
    //starts with '0x' and is 42 characters in length
    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
      return false;
    }
    return true;
  }

  validate_cardano_address(address){
    // try {
    //   const addr = addressFromHexOrBech32(address);
    //   return addr !== null;
    // } catch (error) {
    //   return false;
    // }
  }

  validate_stacks_address(address){
    return validateStacksAddress(address);
  }

  validate_arweave_address(address){
    if (!/^[a-zA-Z0-9_-]{43}$/.test(address)) return false;
    try {
      let decoded = Buffer.from(address, 'base64');
      return decoded.length === 32;
    } catch (e) {
      return false;
    }
  }




  broadcast_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, memo_text) => {
    var data = this.state.coin_data[item['symbol']]
    if(item['symbol'] == 'BTC'){
      await this.create_and_broadcast_bitcoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'BCH'){
      await this.create_and_broadcast_bitcoin_cash_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'LTC'){
      await this.create_and_broadcast_litecoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'DOGE'){
      await this.create_and_broadcast_dogecoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'DASH'){
      await this.create_and_broadcast_dash_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'TRX'){
      await this.create_and_broadcast_tron_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'XRP'){
      await this.create_and_broadcast_xrp_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'XLM'){
      await this.create_and_broadcast_xlm_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'DOT'){
      await this.create_and_broadcast_dot_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'KSM'){
      await this.create_and_broadcast_kusama_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'ALGO'){
      await this.create_and_broadcast_algorand_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'XTZ'){
      await this.create_and_broadcast_tezos_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'ATOM'){
      await this.create_and_broadcast_atom_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'FIL'){
      await this.create_and_broadcast_filecoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'SOL'){
      await this.create_and_broadcast_solana_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'ADA'){
      await this.create_and_broadcast_cardano_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'STX'){
      await this.create_and_broadcast_stacks_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'AR'){
      await this.create_and_broadcast_arweave_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }

    var sync_time = item['symbol'] == 'AR' ? (4 * 60_000) : (1 * 30_000)

    var me = this;
    setTimeout(function() {
      me.update_coin_balances(item['symbol'], false)
    }, sync_time);
  }

  create_and_broadcast_bitcoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const path = "m/44'/0'/0'/0/0" // bitcoin mainnet
    const network = bitcoin.networks.bitcoin;
    var wallet = await this.get_bitcoin_wallet(seed, network, path)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0

    for (let utx of utxos['unspent_outputs']) {
      txb.addInput(utx['tx_hash_big_endian'], utx['tx_output_n']);
      input_count++;
      input += utx['value'];
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(sender_address, change);
    }

    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();
    const hash = await this.broadcast_block_cypher_transaction(raw, 'btc')

    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  broadcast_block_cypher_transaction = async (rawTxHex, network) => {
    var api_key = `${process.env.REACT_APP_BLOCKCYPHER_API_KEY}`;
    var request = `https://api.blockcypher.com/v1/${network}/main/txs/push?token=${api_key}`
    var body_obj = {"tx":`${rawTxHex}`}
    var header = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: JSON.stringify(body_obj)
    }
    try{
      const response = await fetch(request, header);
      if (!response.ok) {
        console.log(response)
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
      var data = await response.text();
      data = JSON.parse(data)
      
      if(data['tx'] != null){
        var hash = data['tx']['hash']
        if(hash!= null){
          return hash
        }else{
          this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
        }
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_bitcoin_cash_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = bitcoin.networks.bitcoin;
    const path = "m/44'/145'/0'/0/0" // bitcoin cash mainnet
    const wallet = await this.get_bitcoin_wallet(seed, network, path)
    const utxos = data['utxos']

    var wif = wallet.privateKey
    var input_utxo = []
    var input = 0;
    var input_count = 0
    for (let utx of utxos['utxos']) {
      input_utxo.push({
        'txid': utx['tx_hash'],
        'vout': utx['tx_pos'],
        'scriptPubKey': '',
        'satoshis': utx['value'],
      })
      input_count++;
      input += utx['value'];
      if (input >= transfer_amount) break;
    }

    var size = this.get_tx_size(input_count, 2)
    const change = input - (transfer_amount + fee);

    const ecPair = BITBOX.ECPair.fromWIF(wif);
    const transactionBuilder = new BITBOX.TransactionBuilder('mainnet');

    //inputs for transaction
    input_utxo.forEach((utxo) => {
      transactionBuilder.addInput(utxo['txid'], utxo['vout']);
    });

    transactionBuilder.addOutput(recipient_address, transfer_amount);
    const changeAddress = BITBOX.ECPair.toCashAddress(ecPair);
    transactionBuilder.addOutput(changeAddress, change);

    input_utxo.forEach((utxo, index) => {
      transactionBuilder.sign(index, ecPair, null, transactionBuilder.hashTypes.SIGHASH_ALL, utxo.satoshis);
    });

    const tx = transactionBuilder.build();
    const txHex = tx.toHex();
    const hash = await this.broadcast_bitcoin_cash_transaction(txHex)

    if(hash != null && hash != ""){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  broadcast_bitcoin_cash_transaction = async (rawTxHex) => {
    var request = `https://api.fullstack.cash/v5/rawtransactions/sendRawTransaction/${rawTxHex}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
      var data = await response.text();
      return data
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_litecoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = bitcoin.networks.litecoin;
    const path = "m/44'/2'/0'/0/0" // litecoin mainnet
    const wallet = await this.get_bitcoin_wallet(seed, network, path)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0
    for (let utx of utxos) {
      txb.addInput(utx['txid'], utx['vout']);
      input_count++;
      input += utx['value'];
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(wallet.address, change);
    }
    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();

    const hash = await this.broadcast_block_cypher_transaction(raw, 'ltc')
    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  create_and_broadcast_dogecoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = {
      messagePrefix: '\x19Dogecoin Signed Message:\n',
      // bech32: null,
      bip32: {
        public: 0x02facafd,  // Public key (xpub) prefix
        private: 0x02fac398  // Private key (xprv) prefix
      },
      pubKeyHash: 0x1e,      // Starts with 'D' for mainnet
      scriptHash: 0x16,      // Starts with '9' or 'A' for mainnet
      wif: 0x9e,             // WIF (Wallet Import Format) prefix
    };
    const wallet = await this.make_dogecoin_wallet(seed, network)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0

    for (let utx of utxos['data']) {
      txb.addInput(utx['txid'], utx['vout']);
      input_count++;
      input += parseInt(utx['satoshis']);
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(wallet.address, change);
    }

    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();
    const hash = await this.broadcast_block_cypher_transaction(raw, 'doge')
    
    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  create_and_broadcast_dash_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = {
      messagePrefix: '\x19Dash Signed Message:\n',
      bip32: {
        public: 0x02fe52f8, // xpub prefix for Dash
        private: 0x02fe52cc // xprv prefix for Dash
      },
      pubKeyHash: 0x4c,      // P2PKH addresses start with 'X'
      scriptHash: 0x10,      // P2SH addresses start with '7'
      wif: 0xcc              // WIF starts with 'X' for Dash
    };
    const wallet = await this.make_dash_wallet(seed, network)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0

    for (let utx of utxos) {
      txb.addInput(utx['txid'], utx['vout']);
      input_count++;
      input += parseInt(utx['satoshis']);
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(wallet.address, change);
    }

    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();
    const hash = await this.broadcast_block_cypher_transaction(raw, 'dash')

    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  create_and_broadcast_tron_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.make_tron_wallet(seed)
    const transaction = await wallet.tronWeb.transactionBuilder.sendTrx(
        recipient_address, // Recipient TRON address
        transfer_amount, // Amount to send in SUN (1 TRX = 1,000,000 SUN)
        wallet.address // Sender's address (derived from the private key)
    );

    try{
      const signedTransaction = await wallet.tronWeb.trx.sign(transaction);
      const broadcast = await wallet.tronWeb.trx.sendRawTransaction(signedTransaction);
      if(broadcast != null && broadcast['txid'] != null){
        const hash = broadcast['txid']
        this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_xrp_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const client = new xrpl.Client("wss://xrplcluster.com/")
    await client.connect()
    const wallet = await this.make_xrp_wallet(seed)
    const address = wallet['classicAddress']

    var tx_obj = {
      "TransactionType": "Payment",
      "Account": address,
      "Amount": transfer_amount.toString(),
      "Destination": recipient_address
    }

    try{
      const prepared = await client.autofill(tx_obj)
      const signed = wallet.sign(prepared)
      const hash = signed.hash
      const tx = await client.submitAndWait(signed.tx_blob)
      
      if(tx['result'] != null && tx['result']['validated'] == true){
        this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }

    await client.disconnect()
  }

  create_and_broadcast_xlm_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const server = new StellarSdk.Horizon.Server("https://horizon.stellar.org/")
    const wallet = await this.make_xlm_wallet(seed)
    const address = wallet.publicKey()
    const account = await this.load_xlm_account_info(address, server)
    const receiver_account = await this.load_xlm_account_info(recipient_address, server)

    var send_amount = transfer_amount
    var transaction = new StellarSdk.TransactionBuilder(account, {
        fee: StellarSdk.BASE_FEE,
        networkPassphrase: StellarSdk.Networks.PUBLIC,
    });

    if(receiver_account == null){
      transaction.addOperation(StellarSdk.Operation.createAccount({
        destination: recipient_address,
        startingBalance: "1",
      }))
      send_amount -= 10_000_000
    }

    if(send_amount <= 0){
      this.prompt_top_notification(this.getLocale()['2952']/* 'You need to send at least 1XLM since the receiver doesnt have a XLM account.' */, 7000)
      return;
    }

    transaction.addOperation(StellarSdk.Operation.payment({
      destination: recipient_address,
      asset: StellarSdk.Asset.native(),
      amount: this.get_send_amount_in_lumens(send_amount)
    }));

    transaction.addMemo(StellarSdk.Memo.text(memo_text))
    transaction.setTimeout(60)
    var t = transaction.build();
    t.sign(wallet)

    try{
      var response = await server.submitTransaction(t);
      const paging_token = response['paging_token']
      const hash = response['hash']
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash, 'paging_token':paging_token})
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  get_send_amount_in_lumens(amount){
    var x = (parseFloat(amount) / 10_000_000)
    return x.toString()
  }

  create_and_broadcast_dot_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    // var seed = this.state.final_seed
    // const wallet = await this.generate_dot_wallet(seed)
    // const wsProvider = new WsProvider('wss://polkadot-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;

    // try{
    //   const hash = await api.tx.balances.transferKeepAlive(recipient_address, transfer_amount).signAndSend(wallet.keys);
    //   this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    // }catch(e){
    //   console.log(e)
    //   this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    // }

    // await api.disconnect()
  }

  create_and_broadcast_kusama_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    // var seed = this.state.final_seed
    // const wallet = await this.generate_ksm_wallet(seed)
    // const wsProvider = new WsProvider('wss://kusama-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;

    // try{
    //   const hash = await api.tx.balances.transferKeepAlive(recipient_address, transfer_amount).signAndSend(wallet.keys);
    //   this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    // }catch(e){
    //   console.log(e)
    //   this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    // }

    // await api.disconnect()
  }

  create_and_broadcast_algorand_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_algo_wallet(seed)
    const algodServer = 'https://mainnet-api.4160.nodely.dev';
    const algodPort = 443;
    const algodClient = new algosdk.Algodv2('', algodServer, algodPort);

    var params = await algodClient.getTransactionParams().do();
    var note = new Uint8Array(Buffer.from(memo_text))

    var ptxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
      sender: wallet.addr,
      suggestedParams: params,
      receiver: recipient_address,
      amount: transfer_amount,
      note: note
    })
    try{
      const signedTxn = ptxn.signTxn(wallet.sk);
      const transaction = await algodClient.sendRawTransaction(signedTxn).do();
      const txId = transaction['txid']
      const result = await algosdk.waitForConfirmation(algodClient, txId, 7);

      if(result != null){
        const hash = txId
        this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_tezos_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_tezos_wallet(seed)
    const Tezos = new TezosToolkit('https://mainnet.ecadinfra.com');
    Tezos.setProvider({ signer: wallet });
    const amount = this.get_amount_int_tez(transfer_amount)
    try{
      const tx = await Tezos.contract.transfer({ to: recipient_address, amount: amount })
      const hash = tx.hash
      await tx.confirmation(1)
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  get_amount_int_tez(amount){
    return parseFloat(amount) / 1_000_000
  }

  create_and_broadcast_atom_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_atom_wallet(seed)
    const rpc = "https://cosmos-rpc.publicnode.com:443"

    var send_amount = transfer_amount
    var gasfee = fee / 40_000
    const signingClient = await SigningStargateClient.connectWithSigner(rpc, wallet.wall)
    var amount_obj = [{ denom: "uatom", amount: send_amount.toString() }]
    var fee_obj = { amount: [{ denom: "uatom", amount: gasfee.toString() }], gas: "200000", }

    try{
      const result = await signingClient.sendTokens(wallet.cosmosAddress, recipient_address, amount_obj, fee_obj, memo_text)
      const hash = result['transactionHash']
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_filecoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const connector = new HttpJsonRpcConnector({ url: 'https://rpc.ankr.com/filecoin', token: '' });
    const hdDerivationPath = `m/44'/461'/0'/0/0`;
    const lotusClient = new LotusClient(connector);
    const walletProvider = new MnemonicWalletProvider(lotusClient, seed, hdDerivationPath);
    const myAddress = await walletProvider.getDefaultAddress();

    const nonce = await lotusClient.mpool.getNonce(myAddress);
    const gasprice = parseInt(fee / 5_744_209)
    const message = await walletProvider.createMessage({
      From: myAddress,
      To: recipient_address,
      Value: transfer_amount.toString().toLocaleString('fullwide', {useGrouping:false}),
      GasPrice: gasprice.toString().toLocaleString('fullwide', {useGrouping:false}),
      GasLimit: 6_000_000,
      gasPremium: gasprice,
      GasFeeCap:gasprice,
      Nonce: nonce,
    });

    try{
      const signed_message = await walletProvider.signMessage(message)
      const cid = await walletProvider.sendSignedMessage(signed_message);
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':cid['/']})
    }catch(e){
      console.log('filecoin:', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_solana_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_sol_wallet(seed)
    var key = `${process.env.REACT_APP_SOLANA_API_KEY}`
    const connection = new Connection(`https://mainnet.helius-rpc.com/?api-key=${key}`);

    const recipient = new PublicKey(recipient_address);
    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: wallet.keypair.publicKey,
        toPubkey: recipient,
        transfer_amount,
      })
    );

    try{
      const signature = await sendAndConfirmTransaction(connection, transaction, [wallet.keypair]);
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':signature})
    }catch(e){
      console.log('solana',e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_aptos_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_aptos_wallet(seed)
    const NODE_URL = 'https://fullnode.mainnet.aptoslabs.com/v1'; 
    const client = new AptosClient(NODE_URL);

    const payload = {
      type: 'entry_function_payload',
      function: '0x1::coin::transfer',
      type_arguments: ['0x1::aptos_coin::AptosCoin'],
      arguments: [recipient_address, transfer_amount.toString()],
    };

    try{
      const transaction = await client.generateTransaction(wallet.account.address(), payload);
      const signedTxn = await client.signTransaction(wallet.account, transaction);
      const transactionHash = await client.submitTransaction(signedTxn);
      await client.waitForTransaction(transactionHash);

      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transactionHash})
    }catch(e){
      console.log('aptos', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_cardano_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    // var seed = this.state.final_seed
    // var wallet = await this.generate_cardano_wallet(seed)
    // var amount = bigInt(transfer_amount).value
    // try{
    //   const tx = await wallet.lucid.newTx()
    //   .pay.ToAddress(recipient_address, { lovelace: amount })
    //   .complete();

    //   const signedTx = await tx.sign.withWallet().complete();
    //   const txHash = await signedTx.submit();

    //   this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':txHash})
    // }catch(e){
    //   console.log('cardano', e)
    //   this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    // }
    
  }

  create_and_broadcast_stacks_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_stacks_wallet(seed)
    
    const amount = transfer_amount.toString()
    const fees = parseInt(fee)
    const txOptions = {
      recipient: recipient_address,
      amount: amount,
      senderKey: wallet.wallet.accounts[0].stxPrivateKey,
      STACKS_MAINNET,
      memo: memo_text,
      fee: fees,
      nonce: data['nonce'],
    };

    try{
      const transaction = await makeSTXTokenTransfer(txOptions);
      const response = await broadcastTransaction({ transaction: transaction, attachment: '', network: 'mainnet' });
      var transaction_hash = response.txid

      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transaction_hash})
    }catch(e){
      console.log('stacks', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_arweave_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    const wallet = data['wallet']
    try{
      var transaction = await arweave.createTransaction({
        target: recipient_address,
        quantity: transfer_amount.toString().toLocaleString('fullwide', {useGrouping:false})
      }, wallet.key);
      await arweave.transactions.sign(transaction, wallet.key);
      const transaction_hash = transaction['id']
      const response = await arweave.transactions.post(transaction);

      if(response.status !== 200){
        throw new Error(`Transaction failed ${response}`);
      }

      var sync_time = (3 * 60_000)
      var me = this;
      setTimeout(function() {
        me.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':transaction.reward, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transaction_hash})
      }, sync_time);
    }catch(e){
      console.log('arweave', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }









  render_stack_bottomsheet(){
    // if(this.state.stack_bottomsheet2 != true) return;
    // if(!this.state.show_stack) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()

    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.stack_bottomsheet} onClose={this.open_stack_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-34, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                            {this.render_stack_item(size)}
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_stack_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_stack_bottomsheet.bind(this)} open={this.state.stack_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
              {this.render_stack_item(size)}
          </div>
      </SwipeableBottomSheet>
    )
  }

  render_stack_item(size){
    // if(!this.state.show_stack) return;
    return(
      <StackPage os={getOS()} ref={this.stack_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} theme={this.state.theme} when_device_theme_changed={this.when_device_theme_changed.bind(this)} when_details_orientation_changed={this.when_details_orientation_changed.bind(this)} notify={this.prompt_top_notification.bind(this)} when_wallet_data_updated2={this.when_wallet_data_updated2.bind(this)} height={this.state.height} run_transaction_with_e={this.run_transaction_with_e.bind(this)} store_data_in_infura={this.store_data_in_infura.bind(this)} get_accounts_public_key={this.get_accounts_public_key.bind(this)} encrypt_data_object={this.encrypt_data_object.bind(this)} 
      encrypt_key_with_accounts_public_key_hash={this.encrypt_key_with_accounts_public_key_hash.bind(this)} get_account_public_key={this.get_account_public_key.bind(this)} get_account_raw_public_key={this.get_account_raw_public_key.bind(this)} view_transaction={this.view_transaction.bind(this)} show_hide_stack_item={this.show_hide_stack_item.bind(this)} show_view_transaction_log_bottomsheet={this.show_view_transaction_log_bottomsheet.bind(this)} add_account_to_contacts={this.add_account_to_contacts.bind(this)} remove_account_from_contacts={this.remove_account_from_contacts.bind(this)} add_alias_transaction_to_stack={this.add_alias_transaction_to_stack.bind(this)} unreserve_alias_transaction_to_stack={this.unreserve_alias_transaction_to_stack.bind(this)} reset_alias_transaction_to_stack={this.reset_alias_transaction_to_stack.bind(this)} 
      when_selected_e5_changed={this.when_selected_e5_changed.bind(this)} when_storage_option_changed={this.when_storage_option_changed.bind(this)} store_objects_data_in_ipfs_using_option={this.store_objects_data_in_ipfs_using_option.bind(this)} lock_run={this.lock_run.bind(this)} open_wallet_guide_bottomsheet={this.open_wallet_guide_bottomsheet.bind(this)} clear_cache={this.clear_cache.bind(this)} when_refresh_speed_changed={this.when_refresh_speed_changed.bind(this)} remove_account_from_blocked_accounts={this.remove_account_from_blocked_accounts.bind(this)} add_account_to_blocked_list={this.add_account_to_blocked_list.bind(this)} when_masked_data_setting_changed={this.when_masked_data_setting_changed.bind(this)} when_content_channeling_changed={this.when_content_channeling_changed.bind(this)} when_content_language_changed={this.when_content_language_changed.bind(this)} when_content_filter_setting_changed={this.when_content_filter_setting_changed.bind(this)} when_tabs_setting_changed={this.when_tabs_setting_changed.bind(this)} when_storage_permission_setting_changed={this.when_storage_permission_setting_changed.bind(this)} calculate_gas_with_e={this.calculate_gas_with_e.bind(this)} 
      get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} show_confirm_run_bottomsheet={this.show_confirm_run_bottomsheet.bind(this)} when_stack_optimizer_setting_changed={this.when_stack_optimizer_setting_changed.bind(this)} clear_transaction_stack={this.clear_transaction_stack.bind(this)} open_object_in_homepage={this.open_object_in_homepage.bind(this)} when_homepage_tags_position_tags_changed={this.when_homepage_tags_position_tags_changed.bind(this)} when_preferred_font_tags_changed={this.when_preferred_font_tags_changed.bind(this)} when_skip_nsfw_warning_tags_changed={this.when_skip_nsfw_warning_tags_changed.bind(this)} when_graph_type_tags_changed={this.when_graph_type_tags_changed.bind(this)} set_watched_account_id={this.set_watched_account_id.bind(this)} 
      when_remember_account_tags_changed={this.when_remember_account_tags_changed.bind(this)}
      show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} sign_custom_data_using_wallet={this.sign_custom_data_using_wallet.bind(this)} verify_custom_data_using_wallet={this.verify_custom_data_using_wallet.bind(this)} set_up_web3_account={this.set_up_web3_account.bind(this)} upload_multiple_files_to_web3_or_chainsafe={this.upload_multiple_files_to_web3_or_chainsafe.bind(this)}
      when_run_gas_price_set={this.when_run_gas_price_set.bind(this)} set_custom_gateway={this.set_custom_gateway.bind(this)} load_my_account_storage_info={this.load_my_account_storage_info.bind(this)} upload_multiple_files_to_nitro_node={this.upload_multiple_files_to_nitro_node.bind(this)} set_my_nitro_selection={this.set_my_nitro_selection.bind(this)} load_nitro_node_details={this.load_nitro_node_details.bind(this)} follow_account={this.follow_account.bind(this)} remove_followed_account={this.remove_followed_account.bind(this)} censor_keyword={this.censor_keyword.bind(this)} uncensor_keyword={this.uncensor_keyword.bind(this)} close_audio_pip={this.close_audio_pip.bind(this)} play_pause_from_stack={this.play_pause_from_stack.bind(this)} open_full_screen_viewer={this.open_full_screen_viewer.bind(this)} when_hide_pip_tags_changed={this.when_hide_pip_tags_changed.bind(this)} when_preferred_currency_tags_changed={this.when_preferred_currency_tags_changed.bind(this)}
      calculate_arweave_data_fees={this.calculate_arweave_data_fees.bind(this)}
      
      />
    )
  }


  open_stack_bottomsheet(){
    if(this.state.stack_bottomsheet == true){
      //closing
      this.stack_bottomsheet = this.stack_page.current?.state;

      this.setState({stack_bottomsheet: !this.state.stack_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({stack_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({stack_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({stack_bottomsheet: !me.state.stack_bottomsheet});

          if(me.stack_bottomsheet != null){
            me.stack_page.current?.setState(me.stack_bottomsheet)
          }
          me.set_stack_page_data()
          me.stack_page.current?.run_transactions(true)
        }
      }, (1 * 200));
    }
  }


  when_device_theme_changed(theme){
    this.setState({theme: this.get_theme_data(theme)})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
    
  }

  when_details_orientation_changed(orientation){
    this.setState({details_orientation: orientation})
  }

  when_selected_e5_changed(e5){
    this.setState({selected_e5: e5})
    var me = this;
    setTimeout(function() {
        // console.log('------------------when_selected_e5_changed---------------------')
        // console.log(me.state.selected_e5)
        me.set_cookies()
    }, (1 * 1000));
  }

  when_storage_option_changed(option){
    this.setState({storage_option: option})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  clear_cache(){
    if(this.homepage.current != null){
      this.homepage.current?.setState({viewed_posts:[],viewed_channels:[],viewed_jobs:[], viewed_contracts:[], viewed_subscriptions:[], viewed_proposals:[],viewed_stores:[], viewed_bags:[], viewed_contractors:[], pinned_bags:[], pinned_channels:[], pinned_item:[], pinned_post:[], pinned_subscriptions:[], pinned_proposal:[], pinned_contractor:[], pinned_contract:[], pinned_job:[],})
    }
  }

  when_refresh_speed_changed(item){
    this.setState({refresh_speed: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
        me.reset_background_sync()
    }, (1 * 1000));
  }

  when_masked_data_setting_changed(item){
    this.setState({masked_content: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_content_channeling_changed(item){
    this.setState({content_channeling: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_content_language_changed(item){
    this.setState({device_language: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_content_filter_setting_changed(item){
    this.setState({section_tags_setting:item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_tabs_setting_changed(item){
    this.setState({visible_tabs: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_storage_permission_setting_changed(item){
    this.setState({storage_permissions: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_stack_optimizer_setting_changed(item){
    this.setState({stack_optimizer: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  clear_transaction_stack(){
    this.setState({stack_items: []})
    this.prompt_top_notification(this.getLocale()['2698']/* 'stack cleared.' */, 1700)
  }

  open_object_in_homepage(target, e5, type){
    this.open_stack_bottomsheet()
    if(this.homepage.current != null){
      this.homepage.current?.open_notification_link(target, e5, type)
    }
  }

  when_homepage_tags_position_tags_changed(item){
    this.setState({homepage_tags_position: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_preferred_font_tags_changed(item){
    this.setState({font: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_skip_nsfw_warning_tags_changed(item){
    this.setState({auto_skip_nsfw_warning:item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_graph_type_tags_changed(item){
    this.setState({graph_type: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  set_watched_account_id(account){
    this.setState({watched_account_id: account})
    var me = this;
    setTimeout(function() {
      this.update_watched_account_data()
    }, (1 * 1000));
    
  }

  when_remember_account_tags_changed(item){
    this.setState({remember_account: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  calculate_actual_balance(e5, token_id){
    var txs = this.state.stack_items
    if(this.state.created_token_object_mapping[e5] == null || this.state.created_token_object_mapping[e5][token_id] == null) return 0
    var exchange_balance = this.state.created_token_object_mapping[e5][token_id]['balance']
    var total_amount = bigInt(0)
    for(var i=0; i<txs.length; i++){
      var t = txs[i]
      if(txs[i].e5 == e5){
        // if(txs[i].type == this.getLocale()['946']/* 'buy-sell' */){
        //     var amount = bigInt(txs[i].amount)
        //     var exchange = t.token_item['id']
        //     var action = this.get_action(t)
        //     if(token_id == exchange && action == 1){
        //         total_amount = bigInt(total_amount).add(amount)
        //     }
        // }
        // else 
        if(txs[i].type == this.getLocale()['1018']/* 'transfer' */){
            if(txs[i].token_item['id'] == token_id){
                total_amount = bigInt(total_amount).add(txs[i].debit_balance)
            }
        }
        else if(txs[i].type == this.getLocale()['1499']/* 'direct-purchase' */){
          for(var i=0; i<t.selected_variant['price_data'].length; i++){
              var exchange = t.selected_variant['price_data'][i]['id']
              var amount = this.get_amounts_to_be_paid(t.selected_variant['price_data'][i]['amount'], t.purchase_unit_count)
              if(exchange == token_id){
                  total_amount = bigInt(total_amount).add(amount)
              }
          }
          for(var i=0; i<t.storefront_item['ipfs'].shipping_price_data.length; i++){
              var exchange = t.storefront_item['ipfs'].shipping_price_data[i]['id']
              var amount = this.get_amounts_to_be_paid(t.storefront_item['ipfs'].shipping_price_data[i]['amount'], t.purchase_unit_count)
              if(exchange == token_id){
                  total_amount = bigInt(total_amount).add(amount)
              }
          }
          var object = t.storefront_item
          if(object['ipfs'] != null && object['ipfs'].option_groups != null && object['ipfs'].option_groups.length > 0){
            var option_fees = this.get_final_purchase_option_fees(object['ipfs'].option_groups, t)
            for(var i=0; i<option_fees.length; i++){
              var exchange = option_fees[i]['id']
              var amount = bigInt(option_fees[i]['amount'])
              if(exchange == token_id){
                total_amount = bigInt(total_amount).add(amount)
              }
            }
          }
        }
        else if(txs[i].type == this.getLocale()['1155']/* 'award' */){
          if(token_id == 5){
              total_amount = bigInt(total_amount).add(t.award_amount)
          }
          for(var i=0; i<t.price_data.length; i++){
              var exchange = t.price_data[i]['id']
              var amount = t.price_data[i]['amount']
              if(exchange == token_id){
                total_amount = bigInt(total_amount).add(amount)
              }
          }
        }
        else if(txs[i].type == this.getLocale()['1509']/* 'mail-messages' */ || txs[i].type == this.getLocale()['1511']/* 'post-messages' */ || txs[i].type == this.getLocale()['1514']/* 'job-messages' */ || txs[i].type == this.getLocale()['1515']/* 'proposal-messages' */ || txs[i].type == this.getLocale()['1501']/* 'bag-messages' */ || txs[i].type == this.getLocale()['1505']/* 'job-request-messages' */){
          for(var i=0; i<t.messages_to_deliver.length; i++){
            if(t.messages_to_deliver[i]['award_amount'] != 0 && t.messages_to_deliver[i]['award_receiver'] != null){
              total_amount = bigInt(total_amount).add(t.messages_to_deliver[i]['award_amount'])
            }
          }
        }
        else if(txs[i].type == this.getLocale()['946']/* 'buy-sell' */){
          var buy_tokens = t.token_item['data'][3]
          var required_amounts = this.calculate_token_prices(t, t.token_item['data'][4])
          var action = this.get_action(t)
          for(var i=0; i<buy_tokens.length; i++){
            var buy_token_id = buy_tokens[i]
            if(buy_token_id == token_id && action == 0){
              var required_amount = required_amounts[i]
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['1']/* 'enter-contract' */){
          var entry_tokens = t.contract_item['data'][2]
          var entry_amounts = t.contract_item['data'][3]
          for(var i=0; i<entry_tokens.length; i++){
            var entry_token_id = entry_tokens[i]
            if(entry_token_id == token_id){
              var required_amount = entry_amounts[i]
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['312']/* 'proposal' */){
          for(var i = 0; i<t.bounty_values.length; i++){
            if(t.bounty_values[i]['exchange'] == token_id){
              var required_amount = t.bounty_values[i]['amount']
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['862']/* 'pay-subscription' */){
          var entry_tokens = t.subscription_item['data'][2]
          var entry_fees = t.subscription_item['data'][3]
          for(var i=0; i<entry_tokens.length; i++){
            if(token_id == entry_tokens[i]){
              var required_amount = this.calculate_final_amount(entry_fees[i], t)
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['2896']/* 'upcoming-subscriptions' */){
          var exchanges_used = t.data.exchanges_used
          var exchange_amounts = t.data.exchange_amounts
          for(var i=0; i<exchanges_used.length; i++){
            if(token_id == exchanges_used[i]){
              var required_amount = exchange_amounts[token_id]
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
      }
    }
    return bigInt(exchange_balance).minus(total_amount)
  }

  get_amounts_to_be_paid(amount){
    return bigInt(amount).multiply(bigInt(this.state.purchase_unit_count))
  }

  get_final_purchase_option_fees(options, transaction_item){
    var price_obj = {}
    for(var i=0; i<transaction_item.purchase_option_tags_array.length; i++){
        var tag_obj = transaction_item.purchase_option_tags_array[i]
        var selected_items = []
        for(var j=0; j<tag_obj['e'][2].length; j++){
            var selected_item_pos = tag_obj['e'][2][j]
            if(selected_item_pos != 0){
                selected_items.push(selected_item_pos-1)
            }
        }
        for(var k=0; k<selected_items.length; k++){
            var selected_pos = selected_items[k]
            var option_prices = options[i]['options'][selected_pos]['price']
            option_prices.forEach(price => {
                if(price_obj[price['id']] == null){
                    price_obj[price['id']] = bigInt(0)
                }
                price_obj[price['id']] = bigInt(price_obj[price['id']]).plus(price['amount'])
            });
        } 
    }

    var return_array = []
    for (const exchange in price_obj) {
        if (price_obj.hasOwnProperty(exchange)) {
            return_array.push({'id':exchange, 'amount':price_obj[exchange]})
        }
    }

    return return_array
  }

  get_action(t){
      var action = this.get_selected_item(t.new_mint_dump_action_page_tags_object, 'e')
      var stack_action = 1
      if(action == this.getLocale()['949']/* 'mint-buy' */) stack_action = 0
      return stack_action
  }

  get_selected_item(object, option){
      var selected_item = object[option][2][0]
      var picked_item = object[option][1][selected_item];
      return picked_item
  }

  calculate_token_prices(t, buy_amounts){
    var amount = t.amount
    var return_buy_amounts = buy_amounts.slice()
    for(var i = 0; i < buy_amounts.length; i++){
        return_buy_amounts[i] = bigInt(bigInt(buy_amounts[i]).multiply(bigInt(amount)) )
    }
    return return_buy_amounts
  }

  calculate_final_amount(price, t){
    return bigInt(price).multiply(t.time_units)
  }

  set_up_web3_account = async (email) => {
    if(this.update_web3_time == null) {
      this.update_web3_time = 0
    }
    if((Date.now() - this.update_web3_time) < (5*1000)){
      return;
    }
    this.update_web3_time = Date.now()

    this.web3_email_verification_sent = false;
    const client = await createW3UpClient()
    const space = await client.createSpace('E5')
    const myAccount = await client.login(email)
    while (true) {
      const res = await myAccount.plan.get()
      if (res.ok){
        break
      }else{
        if(!this.web3_email_verification_sent){
          this.web3_email_verification_sent = true
          this.prompt_top_notification(this.getLocale()['1593bi']/* Verification email sent. */, 5000)
        }
      }
      await new Promise(resolve => setTimeout(resolve, 1000))
    }
    await myAccount.provision(space.did())
    await space.save()

    this.setState({web3_account_email: email, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.prompt_top_notification(me.getLocale()['1593bv']/* Email Verified */, 3000)
    }, (1 * 1000));
  }

  when_run_gas_price_set(number){
    this.setState({run_gas_price: number})
  }

  set_custom_gateway(url){
    this.setState({custom_gateway: url})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  set_my_nitro_selection(id){
    this.setState({my_preferred_nitro: id})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  follow_account(account){
    var clone = this.state.followed_accounts.slice()
    var final_account = this.state.selected_e5 + ':' + account

    clone.push(final_account)
    this.setState({followed_accounts: clone, should_update_followed_accounts: true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  remove_followed_account(item, index){
    var e5 = item.split(':')[0]
    if(item == primary_following && this.state.user_account_id[e5] == 1){
      this.prompt_top_notification(this.getLocale()['1593dp']/* 'First make a transaction to remove that account.' */, 6300)
      return;
    }

    var clone = this.state.followed_accounts.slice()
    clone.splice(index, 1);
    this.setState({followed_accounts: clone, should_update_followed_accounts: true})
    this.prompt_top_notification(this.getLocale()['1593do']/* 'Account removed from your following list.' */, 2300)
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  censor_keyword(word_phrase){
    var clone = this.state.censored_keyword_phrases.slice()
    clone.push(word_phrase)
    this.setState({censored_keyword_phrases: clone, should_update_censored_keyword_phrases: true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  uncensor_keyword(word_phrase, index){
    var clone = this.state.censored_keyword_phrases.slice()
    clone.splice(index, 1);
    this.setState({censored_keyword_phrases: clone, should_update_censored_keyword_phrases: true})
    this.prompt_top_notification(this.getLocale()['1593dx']/* 'Keyword or phrase removed from your censored list.' */, 2300)
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_hide_pip_tags_changed(item){
    this.setState({hide_pip: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_preferred_currency_tags_changed(item){
    this.setState({preferred_currency: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }







  lock_run(value){
    var clone = structuredClone(this.state.is_running)
    clone[this.state.selected_e5] = true
    this.setState({is_running: clone})

    var set_storage_option = this.state.storage_option
    var my_preferred_nitro = this.state.my_preferred_nitro
    var t = (5 * 60 * 1000)
    if(my_preferred_nitro == '' && set_storage_option == 'arweave') t = (35 * 60 * 1000);

    var me = this;
    setTimeout(function() {
      var clone = structuredClone(me.state.is_running)
      clone[me.state.selected_e5] = false
      me.setState({is_running: clone})
    }, t);
  }

  calculate_arweave_data_fees = async (tx) => {
    var set_storage_option = this.state.storage_option
    var my_preferred_nitro = this.state.my_preferred_nitro
    if(my_preferred_nitro == '' && set_storage_option == 'arweave'){
      var object_as_string = JSON.stringify(tx, (key, value) =>
          typeof value === 'bigint'
              ? value.toString()
              : value
      )
      var final_data = this.encrypt_storage_data(object_as_string)
      let test_wallet_key = await arweave.wallets.generate();
      var transaction = await arweave.createTransaction({
        data: final_data
      }, test_wallet_key);
      transaction.addTag('Content-Type', 'text');
      transaction.addTag('Client', 'E5')
      transaction.addTag('Version', this.state.version)
      
      var transaction_fee = transaction.reward
      var clone = structuredClone(this.state.calculated_arewave_storage_fees_figures)
      clone[this.state.selected_e5] = transaction_fee
      this.setState({calculated_arewave_storage_fees_figures: clone})
    }
  }

  calculate_gas_with_e = async (strs, ints, adds, run_gas_limit, wei, delete_pos_array, run_gas_price) => {
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress); 
    const me = this

    var v5/* t_limits */ = [1000000000000, 1000000000000];
    console.log('calculating gas price for current stack...')
    console.log(ints)
    if(this.state.stack_items.length == 0){
      var clone = structuredClone(me.state.calculated_gas_figures)
      clone[me.state.selected_e5] = 0
      me.setState({calculated_gas_figures: clone})
      return;
    }
    contractInstance.methods.e(v5/* t_limits */, adds, ints, strs).estimateGas({from: me.state.accounts[me.state.selected_e5].address, gas: run_gas_limit, value: wei}, function(error, gasAmount){
        console.log('---------------------calculate_gas_with_e-------------------------')
        console.log(gasAmount)
        if(gasAmount == null){
          me.prompt_top_notification(me.getLocale()['2699']/* 'Your next run might fail with its current stack' */, 4000)
        }
        var clone = structuredClone(me.state.calculated_gas_figures)
        clone[me.state.selected_e5] = gasAmount
        me.setState({calculated_gas_figures: clone})
    });
  }

  run_transaction_with_e = async (strs, ints, adds, run_gas_limit, wei, delete_pos_array, _run_gas_price, run_expiry_duration, set_max_priority_per_gas, set_max_fee_per_gas) => {
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress); 
    const me = this
    const e5 = this.state.selected_e5

    var now = await contractInstance.methods.f147(2).call((error, result) => {})
    var run_expiry_time = now + run_expiry_duration

    var v5/* t_limits */ = [100000000000000, run_expiry_time];
    var network_gp = await web3.eth.getGasPrice()
    var run_gas_price = (_run_gas_price == null || _run_gas_price == 0 || _run_gas_price > 100**18) ? network_gp : _run_gas_price
    console.log("gasPrice: "+run_gas_price);
    const gasLimit = run_gas_limit;

    var encoded = contractInstance.methods.e(v5/* t_limits */, adds, ints, strs).encodeABI()

    var tx = {
        gas: gasLimit,
        value: wei,
        to: contractAddress,
        data: encoded,
        gasPrice: run_gas_price.toString(),
    }

    if(this.state.e5s[this.state.selected_e5].type == '1559'){
      tx = {
        gas: gasLimit,
        value: wei,
        to: contractAddress,
        data: encoded,
        maxPriorityFeePerGas: set_max_priority_per_gas.toString(),
        maxFeePerGas: set_max_fee_per_gas.toString(),
      }
    }

    var os = getOS()
    if(os == 'iOS'){
      setTimeout(function() {
        me.open_stack_bottomsheet()
        setTimeout(function() {
          me.open_stack_bottomsheet()
        }, (1 * 500));
      }, (1 * 1000));
    }


    
    
    web3.eth.accounts.signTransaction(tx, me.state.accounts[this.state.selected_e5].privateKey).then(signed => {
        web3.eth.sendSignedTransaction(signed.rawTransaction).on('receipt', (receipt) => {
          var clone = structuredClone(me.state.is_running)
          clone[e5] = false
          me.setState({should_update_contacts_onchain: false, is_running: clone, should_update_section_tags_onchain: false, should_update_blocked_accounts_onchain: false, update_data_in_E5:false, should_update_playlists_in_E5:false, should_update_followed_accounts:false, should_update_posts_blocked_by_me: false, should_update_censored_keyword_phrases:false})
          me.delete_stack_items(delete_pos_array)
          me.reset_gas_calculation_figure(me)
          me.prompt_top_notification(me.getLocale()['2700']/* 'run complete!' */, 4600)

          me.has_my_followed_accounts_loaded[e5] = null
          me.has_posts_blocked_by_me_loaded[e5] = null
          me.has_censored_keywords_by_me_loaded[e5] = null
          setTimeout(function() {
            me.start_get_accounts_for_specific_e5(false, e5, false)
          }, (1 * 500));
        }).on('error', (error) => {
          console.error('Transaction error:', error);
          var clone = structuredClone(this.state.is_running)
          clone[e5] = false
          me.setState({is_running: clone})
          me.prompt_top_notification(me.getLocale()['2701']/* Your transaction was reverted.' */, 9500)
        });
    })

    // this.prompt_top_notification('running your transactions...', 600)
    // web3.eth.accounts.wallet.add(me.state.account.privateKey);
    // contractInstance.methods.e(v5/* t_limits */, adds, ints, strs)
    //     .send({
    //       from: me.state.account.address, 
    //       value: wei,
    //       gasPrice, 
    //       gasLimit 
    //     })
    //     .on('transactionHash', (hash) => {
    //       console.log('e Transaction hash:', hash);
    //     })
    //     .on('receipt', (receipt) => {
    //       console.log('e Transaction receipt:', receipt);
    //       me.setState({stack_items: []})
    //       me.get_accounts_data(me.state.account)
    //       this.prompt_top_notification('run complete!', 600)
    //     }).on('error', (error) => {
    //       console.error('Transaction error:', error);
    //       this.prompt_top_notification('run failed. Check your stacks transactions and try again', 1500)
    //     });


    // this.prompt_top_notification('running your transactions...', 600)
    // const provider = new ethers.providers.JsonRpcProvider(this.state.web3);
    // const wallet = new ethers.Wallet(me.state.account.privateKey, provider);
    // const signer = provider.getSigner();
    // const contract = new ethers.Contract(contractAddress, contractArtifact.abi, signer);
    // const tx = await contract.connect(wallet).e(v5/* t_limits */, adds, ints, strs, { gasLimit: gasLimit, value: wei })
    // const receipt = await tx.wait();

    // if (receipt.status === 1) {
    //   console.log('Transaction successful. Transaction hash:', receipt.transactionHash);
    //   me.setState({stack_items: []})
    //   me.get_accounts_data(me.state.account)
    //   this.prompt_top_notification('run complete!', 600)
    // } else {
    //   console.log('Transaction failed. Transaction hash:', receipt.transactionHash);
    //   this.prompt_top_notification('run failed. Check your stacks transactions and try again', 1500)
    // }
  }

  reset_gas_calculation_figure(me){
    var clone = structuredClone(me.state.calculated_gas_figures)
    var clone2 = structuredClone(me.state.calculated_arewave_storage_fees_figures)
    clone[me.state.selected_e5] = 0
    clone2[me.state.selected_e5] = 0
    me.setState({calculated_gas_figures: clone, calculated_arewave_storage_fees_figures: clone2})
  }

  delete_stack_items(delete_pos_array){
    var stack = this.state.stack_items.slice()
    var new_stack = []
    for(var i=0; i<stack.length; i++){
      if(!delete_pos_array.includes(i)){
        new_stack.push(stack[i])
      }
    }

    this.setState({stack_items: new_stack})
    this.set_cookies_after_stack_action(new_stack)
  }

  view_transaction(tx, index){
    this.show_view_transaction_bottomsheet(tx, index)
  }

  show_hide_stack_item(item){
    var clone_array = this.state.hidden.slice()
    const index = clone_array.indexOf(item);
    if (index > -1) { // only splice array when item is found
        clone_array.splice(index, 1); // 2nd parameter means remove one item only
    }else{
        clone_array.push(item)
    }
    this.setState({hidden: clone_array})
  }

  remove_account_from_contacts(item){
    var clone = structuredClone(this.state.contacts)
    // var clone_array = this.state.contacts.slice()
    const index = this.index_of(clone[this.state.selected_e5], item);
    if (index > -1) { // only splice array when item is found
      clone[this.state.selected_e5].splice(index, 1); // 2nd parameter means remove one item only
    }
    this.setState({contacts: clone, should_update_contacts_onchain: true})
    this.prompt_top_notification(this.getLocale()['2702']/* 'Contact Deleted' */, 1700)

    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  index_of(array, item){
    var index = -1
    for(var i=0; i<array.length; i++){
      if(array[i]['address'] == item['address']){
        index = i
        break;
      }
    }
    return index
  }

  add_alias_transaction_to_stack(id){
    var stack_clone = this.state.stack_items.slice()
    var existing_alias_transaction = false
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].type == 'alias'){
        this.prompt_top_notification(this.getLocale()['2703']/* 'You cant do that more than once.' */, 4000)
        existing_alias_transaction = true
        break;
      }
    }
    if(!existing_alias_transaction){
      stack_clone.push({id: makeid(8), e5:this.state.selected_e5, type:'alias', entered_indexing_tags:['alias', 'reserve', 'identification'], alias:id})
      this.prompt_top_notification(this.getLocale()['2704']/* 'Transaction added to stack.' */, 1600)
      this.setState({stack_items: stack_clone})
      this.set_cookies_after_stack_action(stack_clone)
    }
  }

  unreserve_alias_transaction_to_stack(id){
    var stack_clone = this.state.stack_items.slice()
    var existing_alias_transaction = false
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].type == 'unalias'){
        this.prompt_top_notification(this.getLocale()['2705']/* 'You cant do that more than once.' */, 1000)
        existing_alias_transaction = true
        break;
      }
    }
    if(!existing_alias_transaction){
      stack_clone.push({id: makeid(8), e5:this.state.selected_e5, type:this.getLocale()['2706']/* 'unalias' */, entered_indexing_tags:[this.getLocale()['2706']/* 'unalias' */, this.getLocale()['2707']/* 'unreserve' */, this.getLocale()['2708']/* identification' */], alias:id['alias']})
      this.prompt_top_notification(this.getLocale()['2709']/* 'Unreserve transaction added to stack.' */, 2000)
      this.setState({stack_items: stack_clone})
      this.set_cookies_after_stack_action(stack_clone)
    }
  }

  reset_alias_transaction_to_stack(id){
    var stack_clone = this.state.stack_items.slice()
    var existing_alias_transaction = false
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].type == this.getLocale()['2710']/* 're-alias' */){
        this.prompt_top_notification(this.getLocale()['2711']/* 'You cant do that more than once.' */, 4000)
        existing_alias_transaction = true
        break;
      }
    }
    if(!existing_alias_transaction){
      stack_clone.push({id: makeid(8), e5:this.state.selected_e5, type:this.getLocale()['2710']/* 're-alias' */, entered_indexing_tags:[this.getLocale()['2710']/* 're-alias' */, this.getLocale()['2712']/* 'reserve' */, this.getLocale()['2708']/* 'identification' */], alias:id['alias']})
      this.prompt_top_notification(this.getLocale()['2713']/* 'Reset transaction added to stack' */, 1000)
      this.setState({stack_items: stack_clone})
      this.set_cookies_after_stack_action(stack_clone)
    }
  }

  remove_account_from_blocked_accounts(item){
    var clone = structuredClone(this.state.blocked_accounts)
    const index = this.index_of(clone[this.state.selected_e5], item);
    if (index > -1) { // only splice array when item is found
      clone[this.state.selected_e5].splice(index, 1); // 2nd parameter means remove one item only
    }
    this.setState({blocked_accounts: clone, should_update_blocked_accounts_onchain: true})
    this.prompt_top_notification(this.getLocale()['2714']/* 'Blocked account removed' */, 1700)
    
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  sign_custom_data_using_wallet = async (e5, data) => {
    const url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(url);
    var address = this.state.accounts[e5].address
    web3.eth.accounts.wallet.add(this.state.accounts[e5].privateKey);

    var signature = await web3.eth.sign(data.toString(), address)
    this.setState({generated_signature: signature})
  }

  verify_custom_data_using_wallet = async (data, signature, e5) => {
    const url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(url);
    try{
      var original_address = await web3.eth.accounts.recover(data.toString(), signature)
      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = this.state.addresses[e5][0]
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
      var accounts = await contractInstance.methods.f167([],[original_address], 2).call((error, result) => {});
      var address_account = accounts[0]

      var obj = {'address': original_address, 'account': address_account}
      this.setState({verified_account_data_from_signature: obj})
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['1593at']/* 'That signature is invalid.' */, 5000)
      this.setState({verified_account_data_from_signature: null})
    }
  }











  render_wiki_bottomsheet(){
    if(this.state.wiki_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.wiki_bottomsheet} onClose={this.open_wiki_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}> 
                          <WikiPage ref={this.wiki_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_wiki_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_wiki_bottomsheet.bind(this)} open={this.state.wiki_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}> 
            <WikiPage ref={this.wiki_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} />
          </div>
      </SwipeableBottomSheet>
    )
  }


  open_wiki_bottomsheet(){
    if(this.state.wiki_bottomsheet == true){
      //closing
      this.wiki_bottomsheet = this.wiki_page.current?.state;

      this.setState({wiki_bottomsheet: !this.state.wiki_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({wiki_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({wiki_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({wiki_bottomsheet: !me.state.wiki_bottomsheet});

          if(me.wiki_bottomsheet != null){
            me.wiki_page.current?.setState(me.wiki_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }


  open_wallet_guide_bottomsheet(option){
    this.open_wiki_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.wiki_page.current != null){
      me.wiki_page.current?.set(option)
    }
    }, (1 * 500));
    
  }








  render_new_object_bottomsheet(){
    if(this.state.new_object_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.new_object_bottomsheet} onClose={this.open_new_object_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          {this.render_create_object_ui()}
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_new_object_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_new_object_bottomsheet.bind(this)} open={this.state.new_object_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            {this.render_create_object_ui()}
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_new_object_bottomsheet(){
    if(this.state.new_object_bottomsheet == true){
      //closing
      
      this.new_object_bottomsheet_new_job_page = this.new_job_page.current?.state;
      this.new_object_bottomsheet_new_token_page = this.new_token_page.current?.state;
      this.new_object_bottomsheet_new_subscription_page = this.new_subscription_page.current?.state;
      this.new_object_bottomsheet_new_contract_page = this.new_contract_page.current?.state;
      this.new_object_bottomsheet_new_post_page = this.new_post_page.current?.state;
      this.new_object_bottomsheet_new_channel_page = this.new_channel_page.current?.state;
      this.new_object_bottomsheet_new_storefront_item_page = this.new_storefront_item_page.current?.state;
      this.new_object_bottomsheet_new_mail_page = this.new_mail_page.current?.state;
      this.new_object_bottomsheet_new_contractor_page = this.new_contractor_page.current?.state;

      this.setState({new_object_bottomsheet: !this.state.new_object_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({new_object_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({new_object_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({new_object_bottomsheet: !me.state.new_object_bottomsheet});

          if(me.new_object_bottomsheet_new_job_page != null){
            me.new_job_page.current?.setState(me.new_object_bottomsheet_new_job_page)
          }
          if(me.new_object_bottomsheet_new_token_page != null){
            me.new_token_page.current?.setState(me.new_object_bottomsheet_new_token_page)
          }
          if(me.new_object_bottomsheet_new_subscription_page != null){
            me.new_subscription_page.current?.setState(me.new_object_bottomsheet_new_subscription_page)
          }
          if(me.new_object_bottomsheet_new_contract_page != null){
            me.new_contract_page.current?.setState(me.new_object_bottomsheet_new_contract_page)
          }
          if(me.new_object_bottomsheet_new_post_page != null){
            me.new_post_page.current?.setState(me.new_object_bottomsheet_new_post_page)
          }
          if(me.new_object_bottomsheet_new_channel_page != null){
            me.new_channel_page.current?.setState(me.new_object_bottomsheet_new_channel_page)
          }
          if(me.new_object_bottomsheet_new_storefront_item_page != null){
            me.new_storefront_item_page.current?.setState(me.new_object_bottomsheet_new_storefront_item_page)
          }
          if(me.new_object_bottomsheet_new_mail_page != null){
            me.new_mail_page.current?.setState(me.new_object_bottomsheet_new_mail_page)
          }
          if(me.new_object_bottomsheet_new_contractor_page != null){
            me.new_contractor_page.current?.setState(me.new_object_bottomsheet_new_contractor_page)
          }
        }
      }, (1 * 200));
    }
  }

  open_new_object(target){
    this.open_new_object_bottomsheet()
    this.setState({new_object_target: target});
    
    if(target == '6'/* posts */ || target == '7'/* channel */ || target == '10'/* audioport */ || target == '11'/* videoport */){
      this.load_my_subscriptions()
    }
  }

  render_create_object_ui(){
    var target = this.state.new_object_target;
    var size = this.getScreenSize();
    if(target == '0'/* jobs */){
      return(
        <div>
          <NewJobPage ref={this.new_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
        </div>
      )
    }
    else if(target == '8'/* ends ☝️/spends 🫰 */){
      return(
        <div>
          <NewTokenPage ref={this.new_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
        </div>
      )
    }
    else if(target == '3'/* subscriptions */){
      return(
        <NewSubscriptionPage ref={this.new_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '1'/* contracts */){
      return(
        <NewContractPage ref={this.new_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '6'/* posts */){
      return(
        <NewPostPage ref={this.new_post_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '7'/* channels */){
      return(
        <NewChannelPage ref={this.new_channel_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '4'/* storefront */){
      return(
        <NewStorefrontItemPage ref={this.new_storefront_item_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} show_images={this.show_images.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '5'/* mail */){
      return(
        <NewMailPage ref={this.new_mail_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_mail_to_stack={this.when_add_new_mail_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      );
    }
    else if(target == '9'/* contractors */){
      return(
        <NewContractorPage ref={this.new_contractor_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      );
    }
    else if(target == '10'/* audioport */){
      return(
        <NewAudioPage ref={this.new_audio_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '11'/* videoport */){
      return(
        <NewVideoPage ref={this.new_video_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '12'/* nitro */){
      return(
        <NewNitroPage ref={this.new_nitro_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} test_node_url_link={this.test_node_url_link.bind(this)}/>
      )
    }
    
  }

  when_edit_created_job_tapped(obj){
    this.open_new_object_bottomsheet()
    var me = this;
    setTimeout(function() {
      me.new_job_page.current.set_fileds_for_edit_action(obj)
      me.new_job_page.current.set_action('edit')
    }, (1 * 500));
    
  }

  when_add_new_mail_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
      for(var i=0; i<stack_clone.length; i++){
        if(stack_clone[i].id == state_obj.id){
          edit_id = i
        }
      }
      if(edit_id != -1){
        stack_clone[edit_id] = state_obj
      }else{
        stack_clone.push(state_obj)
      }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  when_add_new_object_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  test_node_url_link = async (link, key) => {
    this.prompt_top_notification(this.getLocale()['a273i']/* 'Testing that link...' */, 1000)
    var request = `${link}/marco`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve nitro data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log(obj)
      var success = obj['success']
      console.log(success)
      if(success == true){
        console.log('attempting to encrypt key...')
        var encrypted_key = await this.encrypt_nitro_node_key_with_my_public_key(key)
        console.log('successfully encrypted key', encrypted_key)
        if(this.new_nitro_page.current != null) this.new_nitro_page.current?.set_node_url(link, encrypted_key)
        if(this.edit_nitropost_page.current != null) this.edit_nitropost_page.current?.set_node_url(link, encrypted_key)
        this.prompt_top_notification(this.getLocale()['a273j']/* 'Provided link added.' */, 5000)
      }else{
        this.prompt_top_notification(this.getLocale()['a273h']/* 'That provided link is not available for use.' */, 6000)
      }
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['a273h']/* 'That provided link is not available for use.' */, 6000)
    }
  }











  render_edit_token_object_bottomsheet(){
    if(this.state.edit_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_token_bottomsheet} onClose={this.open_edit_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditTokenPage ref={this.edit_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_token_bottomsheet.bind(this)} open={this.state.edit_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditTokenPage ref={this.edit_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_token_bottomsheet(){
    if(this.state.edit_token_bottomsheet == true){
      //closing
      this.edit_token_bottomsheet = this.edit_token_page.current?.state;

      this.setState({edit_token_bottomsheet: !this.state.edit_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_token_bottomsheet: !me.state.edit_token_bottomsheet});

          if(me.edit_token_bottomsheet != null){
            me.edit_token_page.current?.setState(me.edit_token_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_token_object(target, object){
    this.open_edit_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_token_page.current){
      me.edit_token_page.current?.setState(object['ipfs'])
      me.edit_token_page.current?.set_edit_data()
      me.edit_token_page.current?.setState({object_id: object['id']})
      me.edit_token_page.current?.set_token_symbol(object['ipfs'].entered_symbol_text)
    }
    }, (1 * 500));
    
  }








  render_edit_channel_object_bottomsheet(){
    if(this.state.edit_channel_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_channel_bottomsheet} onClose={this.open_edit_channel_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditChannelPage ref={this.edit_channel_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_channel_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_channel_bottomsheet.bind(this)} open={this.state.edit_channel_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditChannelPage ref={this.edit_channel_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_channel_bottomsheet(){
    if(this.state.edit_channel_bottomsheet == true){
      //closing
      this.edit_channel_bottomsheet = this.edit_channel_page.current?.state;

      this.setState({edit_channel_bottomsheet: !this.state.edit_channel_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_channel_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_channel_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_channel_bottomsheet: !me.state.edit_channel_bottomsheet});
          
          if(me.edit_channel_bottomsheet != null){
            me.edit_channel_page.current?.setState(me.edit_channel_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_channel_object(target, object){
    this.open_edit_channel_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_channel_page.current){
      me.edit_channel_page.current?.setState(object['ipfs'])
      me.edit_channel_page.current?.set_edit_data()
      me.edit_channel_page.current?.setState({object_id: object['id']})
    }
    }, (1 * 500));
    this.load_my_subscriptions()
  }













  render_edit_contractor_object_bottomsheet(){
    if(this.state.edit_contractor_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_contractor_bottomsheet} onClose={this.open_edit_contractor_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditContractorPage ref={this.edit_contractor_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/> 
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_contractor_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_contractor_bottomsheet.bind(this)} open={this.state.edit_contractor_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditContractorPage ref={this.edit_contractor_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_contractor_bottomsheet(){
    if(this.state.edit_contractor_bottomsheet == true){
      //closing
      this.edit_contractor_bottomsheet = this.edit_contractor_page.current?.state;

      this.setState({edit_contractor_bottomsheet: !this.state.edit_contractor_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_contractor_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_contractor_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_contractor_bottomsheet: !me.state.edit_contractor_bottomsheet});

          if(me.edit_contractor_bottomsheet != null){
            me.edit_contractor_page.current?.setState(me.edit_contractor_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_contractor_object(target, object){
    this.open_edit_contractor_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_contractor_page.current){
      me.edit_contractor_page.current?.setState(object['ipfs'])
      me.edit_contractor_page.current?.setState({type:me.getLocale()['763']/* 'edit-contractor' */})
      me.edit_contractor_page.current?.setState({object_id: object['id']})
      me.edit_contractor_page.current?.set()
    }
    }, (1 * 500));
    
  }










  render_edit_job_object_bottomsheet(){
    if(this.state.edit_job_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_job_bottomsheet} onClose={this.open_edit_job_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditJobPage ref={this.edit_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_job_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_job_bottomsheet.bind(this)} open={this.state.edit_job_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditJobPage ref={this.edit_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_job_bottomsheet(){
    if(this.state.edit_job_bottomsheet == true){
      //closing
      this.edit_job_bottomsheet = this.edit_job_page.current?.state;

      this.setState({edit_job_bottomsheet: !this.state.edit_job_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_job_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_job_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_job_bottomsheet: !me.state.edit_job_bottomsheet});

          if(me.edit_job_bottomsheet != null){
            me.edit_job_page.current?.setState(me.edit_job_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_job_object(target, object){
    this.open_edit_job_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_job_page.current){
      me.edit_job_page.current?.setState(object['ipfs'])
      me.edit_job_page.current?.setState({type:me.getLocale()['764']/* 'edit-job' */})
      me.edit_job_page.current?.setState({object_id: object['id']})
      me.edit_job_page.current?.set()
    }
    }, (1 * 500));
    
  }










  render_edit_post_object_bottomsheet(){
    if(this.state.edit_post_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_post_bottomsheet} onClose={this.open_edit_post_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditPostPage ref={this.edit_post_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_post_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_post_bottomsheet.bind(this)} open={this.state.edit_post_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditPostPage ref={this.edit_post_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_post_bottomsheet(){
    if(this.state.edit_post_bottomsheet == true){
      //closing
      this.edit_post_bottomsheet = this.edit_post_page.current?.state;

      this.setState({edit_post_bottomsheet: !this.state.edit_post_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_post_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_post_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_post_bottomsheet: !me.state.edit_post_bottomsheet});
          if(me.edit_post_bottomsheet != null){
            me.edit_post_page.current?.setState(me.edit_post_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_post_object(target, object){
    this.open_edit_post_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_post_page.current){
      me.edit_post_page.current?.setState(object['ipfs'])
      me.edit_post_page.current?.setState({type:me.getLocale()['765']/* 'edit-post' */})
      me.edit_post_page.current?.setState({object_id: object['id']})
      me.edit_post_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }










  render_edit_storefront_object_bottomsheet(){
    if(this.state.edit_storefront_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_storefront_bottomsheet} onClose={this.open_edit_storefront_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditStorefrontItemPage ref={this.edit_storefront_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_storefront_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_storefront_bottomsheet.bind(this)} open={this.state.edit_storefront_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditStorefrontItemPage ref={this.edit_storefront_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_storefront_bottomsheet(){
    if(this.state.edit_storefront_bottomsheet == true){
      //closing
      this.edit_storefront_bottomsheet = this.edit_storefront_page.current?.state;

      this.setState({edit_storefront_bottomsheet: !this.state.edit_storefront_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_storefront_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_storefront_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_storefront_bottomsheet: !me.state.edit_storefront_bottomsheet});
          
          if(me.edit_storefront_bottomsheet != null){
            me.edit_storefront_page.current?.setState(me.edit_storefront_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_storefront_object(target, object){
    this.open_edit_storefront_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_storefront_page.current){
      me.edit_storefront_page.current?.setState(object['ipfs'])
      me.edit_storefront_page.current?.setState({type:me.getLocale()['766']/* 'edit-storefront' */})
      me.edit_storefront_page.current?.setState({object_id: object['id']})
      me.edit_storefront_page.current?.set()
    }
    }, (1 * 500));
    
  }











  render_edit_proposal_object_bottomsheet(){
    if(this.state.edit_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_proposal_bottomsheet} onClose={this.open_edit_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditProposalPage ref={this.edit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_proposal_bottomsheet.bind(this)} open={this.state.edit_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditProposalPage ref={this.edit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_proposal_bottomsheet(){
    if(this.state.edit_proposal_bottomsheet == true){
      //closing
      this.edit_proposal_bottomsheet = this.edit_proposal_page.current?.state;

      this.setState({edit_proposal_bottomsheet: !this.state.edit_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_proposal_bottomsheet: !me.state.edit_proposal_bottomsheet});
          if(me.edit_proposal_bottomsheet != null){
            me.edit_proposal_page.current?.setState(me.edit_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_proposal_object(target, object){
    this.open_edit_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_proposal_page.current){
        me.edit_proposal_page.current?.setState(object['ipfs'])
        me.edit_proposal_page.current?.setState({type:me.getLocale()['2739']/* 'edit-proposal' */})
        me.edit_proposal_page.current?.setState({object_id: object['id']})
        me.edit_proposal_page.current?.set_edit_data()
      }
    }, (1 * 500));
    
  }








  render_edit_audiopost_object_bottomsheet(){
    if(this.state.edit_audiopost_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_audiopost_bottomsheet} onClose={this.open_edit_audiopost_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_edit_audio_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_audiopost_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_audiopost_bottomsheet.bind(this)} open={this.state.edit_audiopost_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_audio_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_audio_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
          <EditAudioPage ref={this.edit_audiopost_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} />
        </div>
    )
  }

  open_edit_audiopost_bottomsheet(){
    if(this.state.edit_audiopost_bottomsheet == true){
      //closing
      this.edit_audiopost_bottomsheet = this.edit_audiopost_page.current?.state;

      this.setState({edit_audiopost_bottomsheet: !this.state.edit_audiopost_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_audiopost_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_audiopost_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_audiopost_bottomsheet: !me.state.edit_audiopost_bottomsheet});
          if(me.edit_audiopost_bottomsheet != null){
            me.edit_audiopost_page.current?.setState(me.edit_audiopost_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_audiopost_object(target, object){
    this.open_edit_audiopost_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_audiopost_page.current){
      me.edit_audiopost_page.current?.setState(object['ipfs'])
      me.edit_audiopost_page.current?.setState({type:me.getLocale()['2975']/* 'edit-audio' */})
      me.edit_audiopost_page.current?.setState({object_id: object['id']})
      me.edit_audiopost_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }











  render_edit_videopost_object_bottomsheet(){
    if(this.state.edit_videopost_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_videopost_bottomsheet} onClose={this.open_edit_videopost_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_edit_video_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_videopost_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_videopost_bottomsheet.bind(this)} open={this.state.edit_videopost_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_video_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_video_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
          <EditVideoPage ref={this.edit_videopost_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} />
        </div>
    )
  }

  open_edit_videopost_bottomsheet(){
    if(this.state.edit_videopost_bottomsheet == true){
      //closing
      this.edit_videopost_bottomsheet = this.edit_videopost_page.current?.state;

      this.setState({edit_videopost_bottomsheet: !this.state.edit_videopost_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_videopost_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_videopost_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_videopost_bottomsheet: !me.state.edit_videopost_bottomsheet});
          if(me.edit_videopost_bottomsheet != null){
            me.edit_videopost_page.current?.setState(me.edit_videopost_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_videopost_object(target, object){
    this.open_edit_videopost_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_videopost_page.current){
      me.edit_videopost_page.current?.setState(object['ipfs'])
      me.edit_videopost_page.current?.setState({type:me.getLocale()['3023']/* 'edit-video' */})
      me.edit_videopost_page.current?.setState({object_id: object['id']})
      me.edit_videopost_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }












  render_edit_nitropost_object_bottomsheet(){
    if(this.state.edit_nitropost_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_nitropost_bottomsheet} onClose={this.open_edit_nitropost_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_edit_nitropost_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_nitropost_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_nitropost_bottomsheet.bind(this)} open={this.state.edit_nitropost_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_nitropost_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_nitropost_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
          <EditNitroPage ref={this.edit_nitropost_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} test_node_url_link={this.test_node_url_link.bind(this)} />
        </div>
    )
  }

  open_edit_nitropost_bottomsheet(){
    if(this.state.edit_nitropost_bottomsheet == true){
      //closing
      this.edit_nitropost_bottomsheet = this.edit_nitropost_page.current?.state;

      this.setState({edit_nitropost_bottomsheet: !this.state.edit_nitropost_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_nitropost_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_nitropost_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_nitropost_bottomsheet: !me.state.edit_nitropost_bottomsheet});
          if(me.edit_nitropost_bottomsheet != null){
            me.edit_nitropost_page.current?.setState(me.edit_nitropost_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_nitropost_object(target, object){
    this.open_edit_nitropost_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_nitropost_page.current){
      me.edit_nitropost_page.current?.setState(object['ipfs'])
      me.edit_nitropost_page.current?.setState({type:me.getLocale()['3030']/* 'edit-nitro' */})
      me.edit_nitropost_page.current?.setState({object_id: object['id']})
      me.edit_nitropost_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }


















  open_edit_object(target, object){
    if(target == '0'){
      this.open_edit_job_object(target, object)
    }
    else if(target == '8'){
      this.open_edit_token_object(target, object)
    }
    else if(target == '6'){
      this.open_edit_post_object(target, object)
    }
    else if(target == '7'){
      this.open_edit_channel_object(target, object)
    }
    else if(target == '4'){
      this.open_edit_storefront_object(target, object)
    }
    else if(target == '9'){
      this.open_edit_contractor_object(target, object)
    }
    else if(target == '2'){
      this.open_edit_proposal_object(target, object)
    }
    else if(target == '10'){
      this.open_edit_audiopost_object(target, object)
    }
    else if(target == '11'){
      this.open_edit_videopost_object(target, object)
    }
    else if(target == '12'){
      this.open_edit_nitropost_object(target, object)
    }
  }


  when_add_edit_object_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }












  render_mint_token_bottomsheet(){
    if(this.state.mint_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.mint_token_bottomsheet} onClose={this.open_mint_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <NewMintActionPage ref={this.new_mint_dump_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_buy_sell_transaction_to_stack={this.add_buy_sell_transaction.bind(this)}get_balance_in_exchange={this.get_balance_in_exchange.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_mint_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_mint_token_bottomsheet.bind(this)} open={this.state.mint_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <NewMintActionPage ref={this.new_mint_dump_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_buy_sell_transaction_to_stack={this.add_buy_sell_transaction.bind(this)}get_balance_in_exchange={this.get_balance_in_exchange.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }


  open_mint_token_bottomsheet(){
    if(this.state.mint_token_bottomsheet == true){
      //closing
      this.mint_token_bottomsheet = this.new_mint_dump_token_page.current?.state;

      this.setState({mint_token_bottomsheet: !this.state.mint_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({mint_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({mint_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({mint_token_bottomsheet: !me.state.mint_token_bottomsheet});
          
          if(me.mint_token_bottomsheet != null){
            me.new_mint_dump_token_page.current?.setState(me.mint_token_bottomsheet)
          }
        }
        
      }, (1 * 200));
    }
  }

  show_mint_token_bottomsheet(mint_burn_token_item){
    this.open_mint_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.new_mint_dump_token_page.current != null){
      me.new_mint_dump_token_page.current.set_token(mint_burn_token_item)
    }
    }, (1 * 500));
      
  }


  add_buy_sell_transaction(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_transfer_token_bottomsheet(){
    if(this.state.transfer_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.transfer_token_bottomsheet} onClose={this.open_transfer_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <NewTransferActionPage ref={this.new_transfer_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_transfer_transactions_to_stack={this.add_transfer_transactions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_transfer_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_transfer_token_bottomsheet.bind(this)} open={this.state.transfer_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <NewTransferActionPage ref={this.new_transfer_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_transfer_transactions_to_stack={this.add_transfer_transactions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }


  open_transfer_token_bottomsheet(){
    if(this.state.transfer_token_bottomsheet == true){
      //closing
      this.transfer_token_bottomsheet = this.new_transfer_token_page.current?.state;

      this.setState({transfer_token_bottomsheet: !this.state.transfer_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({transfer_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({transfer_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({transfer_token_bottomsheet: !me.state.transfer_token_bottomsheet});
          if(me.transfer_token_bottomsheet != null){
            me.new_transfer_token_page.current?.setState(me.transfer_token_bottomsheet)
          }

        }
      }, (1 * 200));
    }
  }

  show_transfer_bottomsheet(token_item){
    this.open_transfer_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.new_transfer_token_page.current != null){
      me.new_transfer_token_page.current.set_token(token_item)
    }
    }, (1 * 500));
    
  }

  add_transfer_transactions_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_enter_contract_bottomsheet(){
    if(this.state.enter_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.enter_contract_bottomsheet} onClose={this.open_enter_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EnterContractPage ref={this.enter_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} enter_contract={this.enter_contract.bind(this)} accept_job_without_entering_contract={this.accept_job_without_entering_contract.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_enter_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_enter_contract_bottomsheet.bind(this)} open={this.state.enter_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EnterContractPage ref={this.enter_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} enter_contract={this.enter_contract.bind(this)} accept_job_without_entering_contract={this.accept_job_without_entering_contract.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_enter_contract_bottomsheet(){
    if(this.state.enter_contract_bottomsheet == true){
      //closing
      this.enter_contract_bottomsheet = this.enter_contract_page.current?.state;

      this.setState({enter_contract_bottomsheet: !this.state.enter_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({enter_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({enter_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({enter_contract_bottomsheet: !me.state.enter_contract_bottomsheet});

          if(me.enter_contract_bottomsheet != null){
            me.enter_contract_page.current?.setState(me.enter_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_enter_contract_bottomsheet(contract_item, job_acceptance_action_state_object){
    this.open_enter_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.enter_contract_page.current != null){
      me.enter_contract_page.current.set_contract(contract_item, job_acceptance_action_state_object)
    }
    }, (1 * 500));
    
    this.load_contracts_proposals(contract_item['e5'], contract_item['id'])
  }

  enter_contract(state_obj, job_acceptance_action_state_object){
    var stack_clone = this.state.stack_items.slice()
    if(job_acceptance_action_state_object != null) {
      stack_clone.push(job_acceptance_action_state_object)
    }
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  accept_job_without_entering_contract(job_acceptance_action_state_object){
    var stack_clone = this.state.stack_items.slice()
    if(job_acceptance_action_state_object != null) {
      stack_clone.push(job_acceptance_action_state_object)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }








  render_extend_contract_bottomsheet(){
    if(this.state.extend_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.extend_contract_bottomsheet} onClose={this.open_extend_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ExtendContractPage ref={this.extend_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} extend_contract={this.extend_contract.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_extend_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_extend_contract_bottomsheet.bind(this)} open={this.state.extend_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ExtendContractPage ref={this.extend_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} extend_contract={this.extend_contract.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_extend_contract_bottomsheet(){
    if(this.state.extend_contract_bottomsheet == true){
      //closing
      this.extend_contract_bottomsheet = this.extend_contract_page.current?.state;

      this.setState({extend_contract_bottomsheet: !this.state.extend_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({extend_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({extend_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({extend_contract_bottomsheet: !me.state.extend_contract_bottomsheet});

          if(me.extend_contract_bottomsheet != null){
            me.extend_contract_page.current?.setState(me.extend_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_extend_contract_bottomsheet(contract_item){
    this.open_extend_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.extend_contract_page.current != null){
      me.extend_contract_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    
  }

  extend_contract(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_exit_contract_bottomsheet(){
    if(this.state.exit_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.exit_contract_bottomsheet} onClose={this.open_exit_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ExitContractPage ref={this.exit_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} exit_contract={this.exit_contract.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_exit_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_exit_contract_bottomsheet.bind(this)} open={this.state.exit_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ExitContractPage ref={this.exit_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} exit_contract={this.exit_contract.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_exit_contract_bottomsheet(){
    if(this.state.exit_contract_bottomsheet == true){
      //closing
      this.exit_contract_bottomsheet = this.exit_contract_page.current?.state;

      this.setState({exit_contract_bottomsheet: !this.state.exit_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({exit_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({exit_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({exit_contract_bottomsheet: !me.state.exit_contract_bottomsheet});

          if(me.exit_contract_bottomsheet != null){
            me.exit_contract_page.current?.setState(me.exit_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_exit_contract_bottomsheet(contract_item){
    this.open_exit_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.exit_contract_page.current != null){
      me.exit_contract_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    
  }

  exit_contract(state){
    var stack_clone = this.state.stack_items.slice()
    stack_clone.push(state)
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  //new proposal
  render_new_proposal_bottomsheet(){
    if(this.state.new_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.new_proposal_bottomsheet} onClose={this.open_new_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <NewProposalPage ref={this.new_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_proposal_to_stack={this.when_add_new_proposal_to_stack.bind(this)} load_modify_item_data={this.load_modify_item_data.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_new_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_new_proposal_bottomsheet.bind(this)} open={this.state.new_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <NewProposalPage ref={this.new_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_proposal_to_stack={this.when_add_new_proposal_to_stack.bind(this)} load_modify_item_data={this.load_modify_item_data.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_new_proposal_bottomsheet(){
    if(this.state.new_proposal_bottomsheet == true){
      //closing
      this.new_proposal_bottomsheet = this.new_proposal_page.current?.state;

      this.setState({new_proposal_bottomsheet: !this.state.new_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({new_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({new_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({new_proposal_bottomsheet: !me.state.new_proposal_bottomsheet});
          if(me.new_proposal_bottomsheet != null){
            me.new_proposal_page.current?.setState(me.new_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_new_proposal_bottomsheet(contract_item){
    console.log('opening new proposal')
    this.open_new_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.new_proposal_page.current != null){
        me.new_proposal_page.current.reset_state()
        me.new_proposal_page.current.set_contract(contract_item)
      }
    }, (1 * 500));
    

    
  }

  when_add_new_proposal_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_vote_proposal_bottomsheet(){
    if(this.state.vote_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.vote_proposal_bottomsheet} onClose={this.open_vote_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <VoteProposalPage ref={this.vote_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_vote_proposal_action_to_stack={this.add_vote_proposal_action_to_stack.bind(this)} />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_vote_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_vote_proposal_bottomsheet.bind(this)} open={this.state.vote_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <VoteProposalPage ref={this.vote_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_vote_proposal_action_to_stack={this.add_vote_proposal_action_to_stack.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_vote_proposal_bottomsheet(){
    if(this.state.vote_proposal_bottomsheet == true){
      //closing
      this.vote_proposal_bottomsheet = this.vote_proposal_page.current?.state;

      this.setState({vote_proposal_bottomsheet: !this.state.vote_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({vote_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({vote_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({vote_proposal_bottomsheet: !me.state.vote_proposal_bottomsheet});
          
          if(me.vote_proposal_bottomsheet != null){
            me.vote_proposal_page.current?.setState(me.vote_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }


  show_vote_proposal_bottomsheet(proposal_item){
    this.open_vote_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.vote_proposal_page.current != null){
      me.vote_proposal_page.current.set_proposal(proposal_item)
    }
    }, (1 * 500));
    
  }


  add_vote_proposal_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_submit_proposal_bottomsheet(){
    if(this.state.submit_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.submit_proposal_bottomsheet} onClose={this.open_submit_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SubmitProposalPage ref={this.submit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_submit_proposal_action_to_stack={this.add_submit_proposal_action_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_submit_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_submit_proposal_bottomsheet.bind(this)} open={this.state.submit_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <SubmitProposalPage ref={this.submit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_submit_proposal_action_to_stack={this.add_submit_proposal_action_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_submit_proposal_bottomsheet(){
    if(this.state.submit_proposal_bottomsheet == true){
      //closing
      this.submit_proposal_bottomsheet = this.submit_proposal_page.current?.state;

      this.setState({submit_proposal_bottomsheet: !this.state.submit_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({submit_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({submit_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({submit_proposal_bottomsheet: !me.state.submit_proposal_bottomsheet});

          if(me.submit_proposal_bottomsheet != null){
            me.submit_proposal_page.current?.setState(me.submit_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_submit_proposal_bottomsheet(proposal_item){
    this.open_submit_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.submit_proposal_page.current != null){
      me.submit_proposal_page.current.set_proposal(proposal_item)
    }
    }, (1 * 500));
    

  }


  add_submit_proposal_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    stack_clone.push(state_obj)
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }














  render_pay_subscription_bottomsheet(){
    if(this.state.pay_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.pay_subscription_bottomsheet} onClose={this.open_pay_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <PaySubscriptionPage ref={this.pay_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_subscription_to_stack={this.add_pay_subscription_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_pay_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_pay_subscription_bottomsheet.bind(this)} open={this.state.pay_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <PaySubscriptionPage ref={this.pay_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_subscription_to_stack={this.add_pay_subscription_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_pay_subscription_bottomsheet(){
    if(this.state.pay_subscription_bottomsheet == true){
      //closing
      this.pay_subscription_bottomsheet = this.pay_subscription_page.current?.state;

      this.setState({pay_subscription_bottomsheet: !this.state.pay_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({pay_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({pay_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({pay_subscription_bottomsheet: !me.state.pay_subscription_bottomsheet});

          if(me.pay_subscription_bottomsheet != null){
            me.pay_subscription_page.current?.setState(me.pay_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_pay_subscription_bottomsheet(subscription_item){
    this.open_pay_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.pay_subscription_page.current != null){
      me.pay_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_pay_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_cancel_subscription_bottomsheet(){
    if(this.state.cancel_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.cancel_subscription_bottomsheet} onClose={this.open_cancel_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <CancelSubscriptionPage ref={this.cancel_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_cancel_subscription_to_stack={this.add_cancel_subscription_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_cancel_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_cancel_subscription_bottomsheet.bind(this)} open={this.state.cancel_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <CancelSubscriptionPage ref={this.cancel_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_cancel_subscription_to_stack={this.add_cancel_subscription_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_cancel_subscription_bottomsheet(){
    if(this.state.cancel_subscription_bottomsheet == true){
      //closing
      this.cancel_subscription_bottomsheet = this.cancel_subscription_page.current?.state;

      this.setState({cancel_subscription_bottomsheet: !this.state.cancel_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({cancel_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({cancel_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({cancel_subscription_bottomsheet: !me.state.cancel_subscription_bottomsheet});

          if(me.cancel_subscription_bottomsheet != null){
            me.cancel_subscription_page.current?.setState(me.cancel_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_cancel_subscription_bottomsheet(subscription_item){
    this.open_cancel_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.cancel_subscription_page.current != null){
      me.cancel_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_cancel_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }












  render_collect_subscription_bottomsheet(){
    if(this.state.collect_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.collect_subscription_bottomsheet} onClose={this.open_collect_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <CollectSubscriptionPage ref={this.collect_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_collect_subscription_to_stack={this.add_collect_subscription_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_collect_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_collect_subscription_bottomsheet.bind(this)} open={this.state.collect_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <CollectSubscriptionPage ref={this.collect_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_collect_subscription_to_stack={this.add_collect_subscription_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_collect_subscription_bottomsheet(){
    if(this.state.collect_subscription_bottomsheet == true){
      //closing
      this.collect_subscription_bottomsheet = this.collect_subscription_page.current?.state;

      this.setState({collect_subscription_bottomsheet: !this.state.collect_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({collect_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({collect_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({collect_subscription_bottomsheet: !me.state.collect_subscription_bottomsheet});

          if(me.collect_subscription_bottomsheet != null){
            me.collect_subscription_page.current?.setState(me.collect_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_collect_subscription_bottomsheet(subscription_item){
    this.open_collect_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.collect_subscription_page.current != null){
      me.collect_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_collect_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }











  render_modify_subscription_bottomsheet(){
    if(this.state.modify_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.modify_subscription_bottomsheet} onClose={this.open_modify_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModifySubscriptionPage ref={this.modify_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_subscription_to_stack={this.add_modify_subscription_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_modify_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_modify_subscription_bottomsheet.bind(this)} open={this.state.modify_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModifySubscriptionPage ref={this.modify_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_subscription_to_stack={this.add_modify_subscription_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_modify_subscription_bottomsheet(){
    if(this.state.modify_subscription_bottomsheet == true){
      //closing
      this.modify_subscription_bottomsheet = this.modify_subscription_page.current?.state;

      this.setState({modify_subscription_bottomsheet: !this.state.modify_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({modify_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({modify_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({modify_subscription_bottomsheet: !me.state.modify_subscription_bottomsheet});

          if(me.modify_subscription_bottomsheet != null){
            me.modify_subscription_page.current?.setState(me.modify_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_modify_subscription_bottomsheet(subscription_item){
    this.open_modify_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.modify_subscription_page.current != null){
      me.modify_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_modify_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_modify_contract_bottomsheet(){
    if(this.state.modify_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.modify_contract_bottomsheet} onClose={this.open_modify_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModifyContractPage ref={this.modify_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_contract_to_stack={this.add_modify_contract_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_modify_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_modify_contract_bottomsheet.bind(this)} open={this.state.modify_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModifyContractPage ref={this.modify_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_contract_to_stack={this.add_modify_contract_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_modify_contract_bottomsheet(){
    if(this.state.modify_contract_bottomsheet == true){
      //closing
      this.modify_contract_bottomsheet = this.modify_contract_page.current?.state;

      this.setState({modify_contract_bottomsheet: !this.state.modify_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({modify_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({modify_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({modify_contract_bottomsheet: !me.state.modify_contract_bottomsheet});

          if(me.modify_contract_bottomsheet != null){
            me.modify_contract_page.current?.setState(me.modify_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_modify_contract_bottomsheet(contract_item){
    this.open_modify_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.modify_contract_page.current != null){
      me.modify_contract_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    
  }

  add_modify_contract_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_modify_token_bottomsheet(){
    if(this.state.modify_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.modify_token_bottomsheet} onClose={this.open_modify_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModifyTokenPage ref={this.modify_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_token_to_stack={this.add_modify_token_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_modify_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_modify_token_bottomsheet.bind(this)} open={this.state.modify_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModifyTokenPage ref={this.modify_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_token_to_stack={this.add_modify_token_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_modify_token_bottomsheet(){
    if(this.state.modify_token_bottomsheet == true){
      //closing
      this.modify_token_bottomsheet = this.modify_token_page.current?.state;

      this.setState({modify_token_bottomsheet: !this.state.modify_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({modify_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({modify_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({modify_token_bottomsheet: !me.state.modify_token_bottomsheet});

          if(me.modify_token_bottomsheet != null){
            me.modify_token_page.current?.setState(me.modify_token_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_modify_token_bottomsheet(token_item){
    this.open_modify_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.modify_token_page.current != null){
      me.modify_token_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_modify_token_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_exchange_transfer_bottomsheet(){
    if(this.state.exchange_transfer_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.exchange_transfer_bottomsheet} onClose={this.open_exchange_transfer_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ExchangeTransferPage ref={this.exchange_transfer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_exchange_transfer_to_stack={this.add_exchange_transfer_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_exchange_transfer_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_exchange_transfer_bottomsheet.bind(this)} open={this.state.exchange_transfer_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ExchangeTransferPage ref={this.exchange_transfer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_exchange_transfer_to_stack={this.add_exchange_transfer_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_exchange_transfer_bottomsheet(){
    if(this.state.exchange_transfer_bottomsheet == true){
      //closing
      this.exchange_transfer_bottomsheet = this.exchange_transfer_page.current?.state;

      this.setState({exchange_transfer_bottomsheet: !this.state.exchange_transfer_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({exchange_transfer_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({exchange_transfer_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({exchange_transfer_bottomsheet: !me.state.exchange_transfer_bottomsheet});

          if(me.exchange_transfer_bottomsheet != null){
            me.exchange_transfer_page.current?.setState(me.exchange_transfer_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_exchange_transfer_bottomsheet(token_item){
    this.open_exchange_transfer_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.exchange_transfer_page.current != null){
      me.exchange_transfer_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_exchange_transfer_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_force_exit_bottomsheet(){
    if(this.state.force_exit_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.force_exit_bottomsheet} onClose={this.open_force_exit_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ForceExitPage ref={this.force_exit_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_force_exit_to_stack={this.add_force_exit_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_force_exit_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_force_exit_bottomsheet.bind(this)} open={this.state.force_exit_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ForceExitPage ref={this.force_exit_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_force_exit_to_stack={this.add_force_exit_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_force_exit_bottomsheet(){
    if(this.state.force_exit_bottomsheet == true){
      //closing
      this.force_exit_bottomsheet = this.force_exit_page.current?.state;

      this.setState({force_exit_bottomsheet: !this.state.force_exit_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({force_exit_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({force_exit_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({force_exit_bottomsheet: !me.state.force_exit_bottomsheet});

          if(me.force_exit_bottomsheet != null){
            me.force_exit_page.current?.setState(me.force_exit_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_force_exit_bottomsheet(contract_item){
    this.open_force_exit_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.force_exit_page.current != null){
      me.force_exit_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    

  }

  add_force_exit_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_archive_proposal_bottomsheet(){
    if(this.state.archive_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.archive_proposal_bottomsheet} onClose={this.open_archive_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ArchiveProposalPage ref={this.archive_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_archive_proposal_action_to_stack={this.add_archive_proposal_action_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_archive_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_archive_proposal_bottomsheet.bind(this)} open={this.state.archive_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ArchiveProposalPage ref={this.archive_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_archive_proposal_action_to_stack={this.add_archive_proposal_action_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_archive_proposal_bottomsheet(){
    if(this.state.archive_proposal_bottomsheet == true){
      //closing
      this.archive_proposal_bottomsheet = this.archive_proposal_page.current?.state;

      this.setState({archive_proposal_bottomsheet: !this.state.archive_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({archive_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({archive_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({archive_proposal_bottomsheet: !me.state.archive_proposal_bottomsheet});

          if(me.archive_proposal_bottomsheet != null){
            me.archive_proposal_page.current?.setState(me.archive_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_archive_proposal_bottomsheet(proposal_item){
    this.open_archive_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.archive_proposal_page.current != null){
      me.archive_proposal_page.current.set_object(proposal_item)
    }
    }, (1 * 500));
    

  }


  add_archive_proposal_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_freeze_unfreeze_bottomsheet(){
    if(this.state.freeze_unfreeze_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.freeze_unfreeze_bottomsheet} onClose={this.open_freeze_unfreeze_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <FreezeUnfreezePage ref={this.freeze_unfreeze_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_freeze_unfreeze_to_stack={this.add_freeze_unfreeze_to_stack.bind(this)} get_account_frozen_unfroozen_balance={this.get_account_frozen_unfroozen_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_freeze_unfreeze_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_freeze_unfreeze_bottomsheet.bind(this)} open={this.state.freeze_unfreeze_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FreezeUnfreezePage ref={this.freeze_unfreeze_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_freeze_unfreeze_to_stack={this.add_freeze_unfreeze_to_stack.bind(this)} get_account_frozen_unfroozen_balance={this.get_account_frozen_unfroozen_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_freeze_unfreeze_bottomsheet(){
     if(this.state.freeze_unfreeze_bottomsheet == true){
      //closing
      this.freeze_unfreeze_bottomsheet = this.freeze_unfreeze_page.current?.state;

      this.setState({freeze_unfreeze_bottomsheet: !this.state.freeze_unfreeze_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({freeze_unfreeze_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({freeze_unfreeze_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({freeze_unfreeze_bottomsheet: !me.state.freeze_unfreeze_bottomsheet});

          if(me.freeze_unfreeze_bottomsheet != null){
            me.freeze_unfreeze_page.current?.setState(me.freeze_unfreeze_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_freeze_unfreeze_bottomsheet(token_item){
    this.open_freeze_unfreeze_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.freeze_unfreeze_page.current != null){
      me.freeze_unfreeze_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_freeze_unfreeze_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  get_account_frozen_unfroozen_balance = async (exchange_id, account, e5) => {
      const web3 = new Web3(this.get_web3_url_from_e5(e5));
      const H52contractArtifact = require('./contract_abis/H52.json');
      var contract_addresses = this.state.addresses[e5]
      const H52_address = contract_addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

      var exchange = this.state.created_token_object_mapping[e5] == null ? null : this.state.created_token_object_mapping[e5][exchange_id];
      var exchanges_depth = 0
      if(exchange != null && exchange['ipfs'] != null){
        exchanges_depth = exchange['ipfs'].default_depth == null ? 0 : exchange['ipfs'].default_depth
      }
      var exchange_ids = []
      var depths = []
      var accounts = []
      for(var i=exchanges_depth; i>=0; i--){
        exchange_ids.push(exchange_id)
        depths.push(i)
        accounts.push(account)
      }
      
      var token_balances = await H52contractInstance.methods.f140(exchange_ids, accounts, depths, 1).call((error, result) => {});

      var frozen_token_balances = await H52contractInstance.methods.f140(exchange_ids, accounts, depths, 2).call((error, result) => {});

      var bal = 0;
      var frozen_bal = 0;
      for(var i=0; i<token_balances.length; i++){
        var balance_at_depth = bigInt(this.get_actual_number(token_balances[i], depths[i]))
        bal = bigInt(bal).add(balance_at_depth)
      }
      for(var i=0; i<frozen_token_balances.length; i++){
        var balance_at_depth = bigInt(this.get_actual_number(frozen_token_balances[i], depths[i]))
        frozen_bal = bigInt(frozen_bal).add(balance_at_depth)
      }


      var frozen_unfrozen_account_balance_data_clone = structuredClone(this.state.frozen_unfrozen_account_balance_data)

      var pointer = e5+exchange_id+account
      frozen_unfrozen_account_balance_data_clone[pointer] = {'balance':bal, 'frozen_balance':frozen_bal}

      this.setState({frozen_unfrozen_account_balance_data: frozen_unfrozen_account_balance_data_clone})
  }










  render_authmint_bottomsheet(){
    if(this.state.authmint_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.authmint_bottomsheet} onClose={this.open_authmint_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <AuthMintPage ref={this.authmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_authmint_to_stack={this.add_authmint_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_authmint_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_authmint_bottomsheet.bind(this)} open={this.state.authmint_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AuthMintPage ref={this.authmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_authmint_to_stack={this.add_authmint_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_authmint_bottomsheet(){
    if(this.state.authmint_bottomsheet == true){
      //closing
      this.authmint_bottomsheet = this.authmint_page.current?.state;

      this.setState({authmint_bottomsheet: !this.state.authmint_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({authmint_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({authmint_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({authmint_bottomsheet: !me.state.authmint_bottomsheet});

          if(me.authmint_bottomsheet != null){
            me.authmint_page.current?.setState(me.authmint_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_authmint_bottomsheet(token_item){
    this.open_authmint_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.authmint_page.current != null){
      me.authmint_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_authmint_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_moderator_bottomsheet(){
    if(this.state.moderator_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.moderator_bottomsheet} onClose={this.open_moderator_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModeratorPage ref={this.moderator_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_moderator_to_stack={this.add_moderator_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_moderator_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_moderator_bottomsheet.bind(this)} open={this.state.moderator_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModeratorPage ref={this.moderator_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_moderator_to_stack={this.add_moderator_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_moderator_bottomsheet(){
    if(this.state.moderator_bottomsheet == true){
      //closing
      this.moderator_bottomsheet = this.moderator_page.current?.state;

      this.setState({moderator_bottomsheet: !this.state.moderator_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({moderator_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({moderator_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({moderator_bottomsheet: !me.state.moderator_bottomsheet});

          if(me.moderator_bottomsheet != null){
            me.moderator_page.current?.setState(me.moderator_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_moderator_bottomsheet(item){
    this.open_moderator_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.moderator_page.current != null){
      me.moderator_page.current.set_object(item)
    }
    }, (1 * 500));
    

  }

  add_moderator_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }








  render_respond_to_job_bottomsheet(){
    if(this.state.respond_to_job_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.respond_to_job_bottomsheet} onClose={this.open_respond_to_job_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <RespondToJobPage ref={this.respond_to_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_job_to_stack={this.add_respond_to_job_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_respond_to_job_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_respond_to_job_bottomsheet.bind(this)} open={this.state.respond_to_job_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <RespondToJobPage ref={this.respond_to_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_job_to_stack={this.add_respond_to_job_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_respond_to_job_bottomsheet(){
    if(this.state.respond_to_job_bottomsheet == true){
      //closing
      this.respond_to_job_bottomsheet = this.respond_to_job_page.current?.state;

      this.setState({respond_to_job_bottomsheet: !this.state.respond_to_job_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({respond_to_job_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({respond_to_job_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({respond_to_job_bottomsheet: !me.state.respond_to_job_bottomsheet});

          if(me.respond_to_job_bottomsheet != null){
            me.respond_to_job_page.current?.setState(me.respond_to_job_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_respond_to_job_bottomsheet(item){
    this.open_respond_to_job_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.respond_to_job_page.current != null){
        me.respond_to_job_page.current.set_object(item)
        me.load_my_contracts()
      }
    }, (1 * 500));
    

  }

  add_respond_to_job_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)

    var clone = JSON.parse(JSON.stringify(this.state.my_contract_applications))
    clone[state_obj.picked_contract['id']] = state_obj.application_expiry_time
    this.setState({my_contract_applications: clone})
  }










  render_view_application_contract_bottomsheet(){
    if(this.state.view_application_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_application_contract_bottomsheet} onClose={this.open_view_application_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewApplicationContractPage ref={this.view_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_acceptance_action_to_stack={this.add_job_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_application_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_application_contract_bottomsheet.bind(this)} open={this.state.view_application_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewApplicationContractPage ref={this.view_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_acceptance_action_to_stack={this.add_job_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_application_contract_bottomsheet(){
    if(this.state.view_application_contract_bottomsheet == true){
      //closing
      this.view_application_contract_bottomsheet = this.view_application_contract_page.current?.state;

      this.setState({view_application_contract_bottomsheet: !this.state.view_application_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_application_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_application_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_application_contract_bottomsheet: !me.state.view_application_contract_bottomsheet});

          if(me.view_application_contract_bottomsheet != null){
            me.view_application_contract_page.current?.setState(me.view_application_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_application_contract_bottomsheet(item){
    this.open_view_application_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_application_contract_page.current != null){
      me.view_application_contract_page.current.set_object(item)
    }
    }, (1 * 500));
    

  }


  add_job_acceptance_action_to_stack(state_obj){
    var contract = state_obj.application_item['contract']
    if(contract['access_rights_enabled'] == true && (contract['my_interactable_time_value'] < Date.now()/1000 && !contract['moderators'].includes(this.state.user_account_id[contract['e5']]))){
      this.prompt_top_notification(this.getLocale()['2715']/* 'The contract owner hasnt granted you access to their contract yet.' */, 7000)
    }
    else if(contract['my_blocked_time_value'] > Date.now()/1000){
      this.prompt_top_notification(this.getLocale()['2715']/* 'Your account was blocked from entering the contract.' */, 4000)
    }
    else{
      this.show_enter_contract_bottomsheet(contract, state_obj)
      this.open_view_application_contract_bottomsheet()
    }
  }











  render_view_transaction_bottomsheet(){
    if(this.state.view_transaction_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_transaction_bottomsheet} onClose={this.open_view_transaction_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewTransactionPage ref={this.view_transaction_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} open_edit_object_uis={this.open_edit_object_uis.bind(this)} delete_transaction={this.delete_transaction.bind(this)} show_hide_stack_item={this.show_hide_stack_item.bind(this)} delete_message_item={this.delete_message_item.bind(this)} when_edit_bag_item_tapped={this.when_edit_bag_item_tapped.bind(this)} delete_bag_item={this.delete_bag_item.bind(this)} delete_collected_signature={this.delete_collected_signature.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} when_zip_file_opened={this.when_zip_file_opened.bind(this)} 
                          
                          />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_transaction_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_transaction_bottomsheet.bind(this)} open={this.state.view_transaction_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewTransactionPage ref={this.view_transaction_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} open_edit_object_uis={this.open_edit_object_uis.bind(this)} delete_transaction={this.delete_transaction.bind(this)} show_hide_stack_item={this.show_hide_stack_item.bind(this)} delete_message_item={this.delete_message_item.bind(this)} when_edit_bag_item_tapped={this.when_edit_bag_item_tapped.bind(this)} delete_bag_item={this.delete_bag_item.bind(this)} delete_collected_signature={this.delete_collected_signature.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_transaction_bottomsheet(){
    if(this.state.view_transaction_bottomsheet == true){
      //closing
      this.view_transaction_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_transaction_bottomsheet: !this.state.view_transaction_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_transaction_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_transaction_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_transaction_bottomsheet: !me.state.view_transaction_bottomsheet});

          if(me.view_transaction_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_transaction_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_transaction_bottomsheet(item, index){
    this.open_view_transaction_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_transaction_page.current != null){
      me.view_transaction_page.current.set_transaction(item, index)
    }
    }, (1 * 500));
    

  }


  delete_transaction(item){
    var stack_clone = this.state.stack_items.slice()
    const index = stack_clone.indexOf(item);
    if (index > -1) { // only splice array when item is found
      stack_clone.splice(index, 1); // 2nd parameter means remove one item only
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
    this.open_view_transaction_bottomsheet()
  }

  //here
  open_edit_object_uis(tx){
    if(tx.type == this.getLocale()['1130']/* 'contract' */){
        this.open_new_object('1')
        var me = this;
        setTimeout(function() {
          if(me.new_contract_page.current){
            me.new_contract_page.current?.set_state(tx)
          }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['601']/* 'token' */){
        this.open_new_object('8')
        var me = this;
        setTimeout(function() {
          if(me.new_token_page.current){
          me.new_token_page.current?.set_state(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['823']/* 'subscription' */){
        this.open_new_object('3')
        var me = this;
        setTimeout(function() {
          if(me.new_subscription_page.current){
          me.new_subscription_page.current?.set_state(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['297']/* 'post' */){
        this.open_new_object('6')
        var me = this;
        setTimeout(function() {
          if(me.new_post_page.current){
          me.new_post_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['760']/* 'job' */){
        this.open_new_object('0')
        var me = this;
        setTimeout(function() {
          if(me.new_job_page.current){
          me.new_job_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['109']/* 'channel' */){
        this.open_new_object('7')
        var me = this;
        setTimeout(function() {
          if(me.new_channel_page.current){
          me.new_channel_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['439']/* 'storefront-item' */){
        this.open_new_object('4')
        var me = this;
        setTimeout(function() {
          if(me.new_storefront_item_page.current){
          me.new_storefront_item_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['946']/* 'buy-sell' */){
      this.open_mint_token_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.new_mint_dump_token_page.current){
        me.new_mint_dump_token_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['1018']/* 'transfer' */){
      this.open_transfer_token_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.new_transfer_token_page.current){
            me.new_transfer_token_page.current?.setState(tx)
          }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['2125']/* 'enter-contract' */){
      this.open_enter_contract_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.enter_contract_page.current){
            me.enter_contract_page.current?.setState(tx)
          }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['35']/* 'extend-contract' */){
      this.open_extend_contract_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.extend_contract_page.current){
        me.extend_contract_page.current?.setState(tx)
      }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['312']/* 'proposal' */){
      this.open_new_proposal_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.new_proposal_page.current){
        me.new_proposal_page.current?.setState(tx)
      }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['796']/* 'vote' */){
      this.open_vote_proposal_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.vote_proposal_page.current){
        me.vote_proposal_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['862']/* 'pay-subscription' */){
      this.open_pay_subscription_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.pay_subscription_page.current){
        me.pay_subscription_page.current?.setState(tx)
      } 
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['821']/* 'cancel-subscription' */){
      this.open_cancel_subscription_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.cancel_subscription_page.current){
        me.cancel_subscription_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['840']/* 'modify-subscription' */){
        this.open_modify_subscription_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.modify_subscription_page.current){
          me.modify_subscription_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }   
    else if(tx.type == this.getLocale()['2123']/* 'modify-contract' */){
        this.open_modify_contract_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.modify_contract_page.current){
          me.modify_contract_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['997']/* 'modify-token' */){
        this.open_modify_token_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.modify_token_page.current){
          me.modify_token_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['318']/* 'exchange-transfer' */){
        this.open_exchange_transfer_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.exchange_transfer_page.current){
          me.exchange_transfer_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['48']/* 'force-exit' */){
        this.open_force_exit_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.force_exit_page.current){
          me.force_exit_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['768']/* 'archive' */){
        this.open_archive_proposal_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.archive_proposal_page.current){
          me.archive_proposal_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['930']/* 'freeze/unfreeze' */){
        this.open_freeze_unfreeze_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.freeze_unfreeze_page.current){
          me.freeze_unfreeze_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['880']/* 'authmint' */){
        this.open_authmint_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.authmint_page.current){
          me.authmint_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['1265']/* 'access-rights-settings' */){
        this.open_moderator_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.moderator_page.current){
          me.moderator_page.current?.setState(tx)
        }
        }, (1 * 500));
          
    }
    else if(tx.type == this.getLocale()['285']/* 'mail' */){
        this.open_new_object('5')
        var me = this;
        setTimeout(function() {
          if(me.new_mail_page.current){
          me.new_mail_page.current?.setState(tx)
        }
        }, (1 * 500));
         
    }  
    else if(tx.type == this.getLocale()['1307']/* 'job-response' */){
        this.open_respond_to_job_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.respond_to_job_page.current){
          me.respond_to_job_page.current?.setState(tx)
        }
        }, (1 * 500));
           
    }
    else if(tx.type == this.getLocale()['1499']/* 'direct-purchase' */){
      this.open_direct_purchase_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.direct_purchase_page.current){
        me.direct_purchase_page.current?.setState(tx)
      }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['1503']/* 'contractor' */){
      this.open_new_object('9')
      var me = this;
        setTimeout(function() {
          if(me.new_contractor_page.current){
          me.new_contractor_page.current?.setState(tx)
        }
        }, (1 * 500));
        
      
    }
    else if(tx.type == this.getLocale()['1363']/* 'job-request' */){
        this.open_send_job_request_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.send_job_request_page.current){
          me.send_job_request_page.current?.setState(tx)
        }
        }, (1 * 500));
         
    }
    else if(tx.type == this.getLocale()['753']/* 'edit-channel' */){
      this.open_edit_channel_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.edit_channel_page.current){
        me.edit_channel_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['763']/* 'edit-contractor' */){
      this.open_edit_contractor_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.edit_contractor_page.current){
        me.edit_contractor_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['764']/* 'edit-job' */){
        this.open_edit_job_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_job_page.current){
          me.edit_job_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['765']/* 'edit-post' */){
        this.open_edit_post_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_post_page.current){
          me.edit_post_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['766']/* 'edit-storefront' */){
        this.open_edit_storefront_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_storefront_page.current){
          me.edit_storefront_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['761']/* 'edit-token' */){
        this.open_edit_token_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_token_page.current){
          me.edit_token_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['2739']/* 'edit-proposal' */){
      this.open_edit_proposal_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.edit_proposal_page.current){
        me.edit_proposal_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['898']/* 'depthmint' */){
        this.open_depthmint_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.depthmint_page.current){
          me.depthmint_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['2846']/* stage-royalty */){
        this.open_stage_royalties_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.stage_royalties_page.current){
            me.stage_royalties_page.current?.setState(tx)
          }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['2884']/* 'royalty-payouts' */){
        this.open_view_staged_royalties_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.view_staged_royalties_page.current){
            me.view_staged_royalties_page.current?.setState(tx)
          }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['2896']/* 'upcoming-subscriptions' */){
        this.open_pay_upcoming_subscriptions_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.pay_upcoming_subscriptions_page.current){
            me.pay_upcoming_subscriptions_page.current?.setState(tx)
          }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['a311a']/* 'audio' */){
        this.open_new_object('10')
        var me = this;
        setTimeout(function() {
          if(me.new_audio_page.current){
            me.new_audio_page.current?.setState(tx)
          }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['2962']/* 'buy-album' */){
      this.open_buy_album_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.buy_album_page.current){
            me.buy_album_page.current?.setState(tx)
          }
        }, (1 * 500));
    }
    else if(tx.type == this.getLocale()['2975']/* 'edit-audio' */){
        this.open_edit_audiopost_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_audiopost_page.current){
          me.edit_audiopost_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['b311a']/* video */){
        this.open_new_object('11')
        var me = this;
        setTimeout(function() {
          if(me.new_video_page.current){
          me.new_video_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['a2962a']/* 'buy-video' */){
      this.open_buy_video_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.buy_video_page.current){
            me.buy_video_page.current?.setState(tx)
          }
        }, (1 * 500));
    }
    else if(tx.type == this.getLocale()['3023']/* 'edit-video' */){
        this.open_edit_videopost_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_videopost_page.current){
          me.edit_videopost_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['a273a']/* nitro */){
        this.open_new_object('12')
        var me = this;
        setTimeout(function() {
          if(me.new_nitro_page.current){
          me.new_nitro_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3030']/* 'edit-nitro' */){
        this.open_edit_nitropost_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_nitropost_page.current){
          me.edit_nitropost_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3031']/* 'buy-storage' */){
      this.open_buy_nitro_storage_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.buy_nitro_storage_page.current){
            me.buy_nitro_storage_page.current?.setState(tx)
          }
        }, (1 * 500));
    }
    
  }

  delete_message_item(item, transaction_item){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].id == transaction_item.id){
        pos = i
        break;
      }
    }
    if(pos != -1){
      const index = stack[pos].messages_to_deliver.indexOf(item);
      if (index > -1) { // only splice array when item is found
        stack[pos].messages_to_deliver.splice(index, 1); // 2nd parameter means remove one item only
      }
      if(stack[pos].messages_to_deliver.length == 0){
        stack.splice(pos, 1)
        this.open_view_transaction_bottomsheet()
      }
      this.setState({stack_items: stack})
      this.set_cookies_after_stack_action(stack)
    }
  }

  when_edit_bag_item_tapped(item){
    this.open_add_to_bag_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_to_bag_page.current != null){
        me.add_to_bag_page.current.setState(item)
      }
    }, (1 * 500));
    
  }

  delete_bag_item(item){
    var stack = this.state.stack_items.slice() 
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1516']/* 'storefront-bag' */){
        pos = i
        break;
      }
    }

    if(pos != -1){
      const index = stack[pos].items_to_deliver.indexOf(item);
      if (index > -1) { // only splice array when item is found
        stack[pos].items_to_deliver.splice(index, 1); // 2nd parameter means remove one item only
      }
      if(stack[pos].items_to_deliver.length == 0){
        stack.splice(pos, 1)
        this.open_view_transaction_bottomsheet()
      }
      this.setState({stack_items: stack})
      this.set_cookies_after_stack_action(stack)
    }

  }

  delete_collected_signature(item, transaction_item){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].id == transaction_item.id){
        pos = i
        break;
      }
    }
    if(pos != -1){
      const index = stack[pos].items_to_clear.indexOf(item);
      if (index > -1) { // only splice array when item is found
        stack[pos].items_to_clear.splice(index, 1); // 2nd parameter means remove one item only
      }
      this.setState({stack_items: stack})
      this.set_cookies_after_stack_action(stack)
    }
  }








  render_view_transaction_log_bottomsheet(){
    if(this.state.view_transaction_log_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_transaction_log_bottomsheet} onClose={this.open_view_transaction_log_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewTransactionLogPage ref={this.view_transaction_log_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_transaction_log_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_transaction_log_bottomsheet.bind(this)} open={this.state.view_transaction_log_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewTransactionLogPage ref={this.view_transaction_log_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_transaction_log_bottomsheet(){
    if(this.state.view_transaction_log_bottomsheet == true){
      //closing
      this.view_transaction_log_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_transaction_log_bottomsheet: !this.state.view_transaction_log_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_transaction_log_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_transaction_log_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_transaction_log_bottomsheet: !me.state.view_transaction_log_bottomsheet});

          if(me.view_transaction_log_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_transaction_log_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_transaction_log_bottomsheet(item){
    this.open_view_transaction_log_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_transaction_log_page.current != null){
        me.view_transaction_log_page.current.set_transaction(item)
      }
    }, (1 * 500));
    
  }










  render_add_to_bag_bottomsheet(){
    if(this.state.add_to_bag_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.add_to_bag_bottomsheet} onClose={this.open_add_to_bag_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <AddToBagPage ref={this.add_to_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_item_to_bag_in_stack={this.add_bag_item_to_bag_in_stack.bind(this)} show_images={this.show_images.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_add_to_bag_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_add_to_bag_bottomsheet.bind(this)} open={this.state.add_to_bag_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AddToBagPage ref={this.add_to_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_item_to_bag_in_stack={this.add_bag_item_to_bag_in_stack.bind(this)} show_images={this.show_images.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_add_to_bag_bottomsheet(){
    if(this.state.add_to_bag_bottomsheet == true){
      //closing
      this.add_to_bag_bottomsheet = this.add_to_bag_page.current?.state;

      this.setState({add_to_bag_bottomsheet: !this.state.add_to_bag_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({add_to_bag_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({add_to_bag_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({add_to_bag_bottomsheet: !me.state.add_to_bag_bottomsheet});

          if(me.add_to_bag_bottomsheet != null){
            me.add_to_bag_page.current?.setState(me.add_to_bag_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_add_to_bag_bottomsheet(item){
    this.open_add_to_bag_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_to_bag_page.current != null){
        me.add_to_bag_page.current.set_transaction(item)
      }
    }, (1 * 500));
    
  }

  add_bag_item_to_bag_in_stack(state_obj){
    var stack = this.state.stack_items.slice() 
    var pos = -1
    var storefront_item_content_channeling = state_obj.storefront_item['ipfs'].content_channeling_setting
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1516']/* 'storefront-bag' */ && stack[i].e5 == state_obj.e5 && stack[i].content_channeling_setting == storefront_item_content_channeling){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1516']/* 'storefront-bag' */, entered_indexing_tags:[this.getLocale()['1215']/* 'storefront' */, this.getLocale()['1045']/* 'bag' */, this.getLocale()['2716']/* 'cart' */], items_to_deliver:[], e5: state_obj.e5, content_channeling_setting: this.state.content_channeling, device_language_setting: this.state.device_language, device_country: this.state.device_country, selected_device_city: state_obj.selected_device_city, delivery_location: state_obj.delivery_location}
      
      tx.items_to_deliver.push(state_obj)
      stack.push(tx)
    }else{
      var is_replica_found = false
      for(var j=0; j<stack[pos].items_to_deliver.length; j++){
        if(state_obj.id == stack[pos].items_to_deliver[j].id){
          stack[pos].items_to_deliver[j] = state_obj
          is_replica_found = true
          break;
        }
      }
      if(!is_replica_found){
        stack[pos].items_to_deliver.push(state_obj)
      }
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }










  render_fulfil_bag_bottomsheet(){
    if(this.state.fulfil_bag_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.fulfil_bag_bottomsheet} onClose={this.open_fulfil_bag_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px',  'overflow-y':'auto'}}>
                          <FulfilBagPage ref={this.fulfil_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_bag_to_stack={this.add_respond_to_bag_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_fulfil_bag_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_fulfil_bag_bottomsheet.bind(this)} open={this.state.fulfil_bag_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FulfilBagPage ref={this.fulfil_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_bag_to_stack={this.add_respond_to_bag_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_fulfil_bag_bottomsheet(){
    if(this.state.fulfil_bag_bottomsheet == true){
      //closing
      this.fulfil_bag_bottomsheet = this.fulfil_bag_page.current?.state;
  
      this.setState({fulfil_bag_bottomsheet: !this.state.fulfil_bag_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({fulfil_bag_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({fulfil_bag_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({fulfil_bag_bottomsheet: !me.state.fulfil_bag_bottomsheet});

          if(me.fulfil_bag_bottomsheet != null){
            me.fulfil_bag_page.current?.setState(me.fulfil_bag_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_fulfil_bag_bottomsheet(item){
    this.open_fulfil_bag_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.fulfil_bag_page.current != null){
        me.fulfil_bag_page.current.set_bag(item)
        me.load_my_contracts()
      }
    }, (1 * 500));
  }

  add_respond_to_bag_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_view_bag_application_contract_bottomsheet(){
    if(this.state.view_bag_application_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_bag_application_contract_bottomsheet} onClose={this.open_view_bag_application_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewBagApplicationContractPage ref={this.view_bag_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_acceptance_action_to_stack={this.add_bag_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_bag_application_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_bag_application_contract_bottomsheet.bind(this)} open={this.state.view_bag_application_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewBagApplicationContractPage ref={this.view_bag_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_acceptance_action_to_stack={this.add_bag_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_bag_application_contract_bottomsheet(){
    if(this.state.view_bag_application_contract_bottomsheet == true){
      //closing
      this.view_bag_application_contract_bottomsheet = this.view_bag_application_contract_page.current?.state;

      this.setState({view_bag_application_contract_bottomsheet: !this.state.view_bag_application_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_bag_application_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_bag_application_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_bag_application_contract_bottomsheet: !me.state.view_bag_application_contract_bottomsheet});

          if(me.view_bag_application_contract_bottomsheet != null){
            me.view_bag_application_contract_page.current?.setState(me.view_bag_application_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_bag_application_contract_bottomsheet(item){
    this.open_view_bag_application_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_bag_application_contract_page.current != null){
        me.view_bag_application_contract_page.current.set_object(item)
      }
    }, (1 * 500));
    
  }

  add_bag_acceptance_action_to_stack(state_obj){
    var contract = state_obj.application_item['contract']
    if(contract['access_rights_enabled'] == true && (contract['my_interactable_time_value'] < Date.now()/1000 && !contract['moderators'].includes(this.state.user_account_id[contract['e5']]))){
      this.prompt_top_notification(this.getLocale()['2715']/* 'The contract owner hasnt granted you access to their contract yet.' */, 7000)
    }
    else if(contract['my_blocked_time_value'] > Date.now()/1000){
      this.prompt_top_notification(this.getLocale()['2715']/* 'Your account was blocked from entering the contract.' */, 4000)
    }
    else{
      this.show_enter_contract_bottomsheet(contract, state_obj)
      this.open_view_bag_application_contract_bottomsheet()
    }
    // var stack_clone = this.state.stack_items.slice()      
    // stack_clone.push(state_obj)
    // this.setState({stack_items: stack_clone})
    // this.set_cookies_after_stack_action(stack_clone)

    // this.show_enter_contract_bottomsheet(state_obj.application_item['contract'])
    // this.open_view_bag_application_contract_bottomsheet()
  }











  render_direct_purchase_bottomsheet(){
    if(this.state.direct_purchase_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.direct_purchase_bottomsheet} onClose={this.open_direct_purchase_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <DirectPurchasetPage ref={this.direct_purchase_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_direct_purchase_to_stack={this.add_direct_purchase_to_stack.bind(this)} show_images={this.show_images.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_direct_purchase_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_direct_purchase_bottomsheet.bind(this)} open={this.state.direct_purchase_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <DirectPurchasetPage ref={this.direct_purchase_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_direct_purchase_to_stack={this.add_direct_purchase_to_stack.bind(this)} show_images={this.show_images.bind(this)}calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_direct_purchase_bottomsheet(){
    if(this.state.direct_purchase_bottomsheet == true){
      //closing
      this.direct_purchase_bottomsheet = this.direct_purchase_page.current?.state;

      this.setState({direct_purchase_bottomsheet: !this.state.direct_purchase_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({direct_purchase_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({direct_purchase_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({direct_purchase_bottomsheet: !me.state.direct_purchase_bottomsheet});

          if(me.direct_purchase_bottomsheet != null){
            me.direct_purchase_page.current?.setState(me.direct_purchase_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_direct_purchase_bottomsheet(item){
    this.open_direct_purchase_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.direct_purchase_page.current != null){
        me.direct_purchase_page.current.set_object(item)
      }
    }, (1 * 500));

  }

  add_direct_purchase_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_clear_purchase_bottomsheet(){
    if(this.state.clear_purchase_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.clear_purchase_bottomsheet} onClose={this.open_clear_purchase_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-34, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                            <ClearPurchasePage ref={this.clear_purchase_page} app_state={this.state}  view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} generate_signature={this.generate_signature.bind(this)} confirm_signature={this.confirm_signature.bind(this)} add_clearing_purchase_action_to_stack={this.add_clearing_purchase_action_to_stack.bind(this)} start_scan={this.start_scan.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_clear_purchase_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_clear_purchase_bottomsheet.bind(this)} open={this.state.clear_purchase_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ClearPurchasePage ref={this.clear_purchase_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} generate_signature={this.generate_signature.bind(this)} confirm_signature={this.confirm_signature.bind(this)} add_clearing_purchase_action_to_stack={this.add_clearing_purchase_action_to_stack.bind(this)} start_scan={this.start_scan.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_clear_purchase_bottomsheet(){
    if(this.state.clear_purchase_bottomsheet == true){
      //closing
      this.clear_purchase_bottomsheet = this.clear_purchase_page.current?.state;

      this.setState({clear_purchase_bottomsheet: !this.state.clear_purchase_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({clear_purchase_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({clear_purchase_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({clear_purchase_bottomsheet: !me.state.clear_purchase_bottomsheet});

          if(me.clear_purchase_bottomsheet != null){
            me.clear_purchase_page.current?.setState(me.clear_purchase_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_clear_purchase_bottomsheet(item, client_type, storefront){
    this.open_clear_purchase_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.clear_purchase_page.current != null){
        me.clear_purchase_page.current.set_object(item, client_type, storefront)
      }
    }, (1 * 500));

  }


  generate_signature = async (data) => {
    if(!this.state.has_wallet_been_set){
      this.prompt_top_notification(this.getLocale()['2906']/* 'You need to set your wallet first.' */, 5000)
      return;
    }
    const web3 = new Web3(this.state.web3);
    var address = this.state.accounts[this.state.default_e5].address
    web3.eth.accounts.wallet.add(this.state.accounts[this.state.default_e5].privateKey);

    var signature = await web3.eth.sign(data.toString(), address)
    return signature
  }

  confirm_signature = async (signature, data, address) => {
    const web3 = new Web3(this.get_web3_url_from_e5(this.state.default_e5));
    try{
      var original_address = await web3.eth.accounts.recover(data.toString(), signature)
      if(original_address.toString() != address.toString()){
        return false
      }
      return true
    }catch(e){
      console.log(e)
      return false
    }
    
  }


  add_clearing_purchase_action_to_stack(state_obj){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1500']/* 'clear-purchase' */){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, e5:state_obj.order_storefront['e5'], id: makeid(8), type: this.getLocale()['1500']/* 'clear-purchase' */, entered_indexing_tags:[this.getLocale()['2717']/* 'clear' */, this.getLocale()['2718']/* 'finalize' */, this.getLocale()['2719']/* 'purchase' */], items_to_clear:[]}
      tx.items_to_clear.push(state_obj)
      stack.push(tx)
    }else{
      stack[pos].items_to_clear.push(state_obj)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }








  render_send_job_request_bottomsheet(){
    if(this.state.send_job_request_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.send_job_request_bottomsheet} onClose={this.open_send_job_request_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SendJobRequestPage ref={this.send_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_send_job_request_to_stack={this.add_send_job_request_to_stack.bind(this)} show_images={this.show_images.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_send_job_request_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_send_job_request_bottomsheet.bind(this)} open={this.state.send_job_request_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <SendJobRequestPage ref={this.send_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_send_job_request_to_stack={this.add_send_job_request_to_stack.bind(this)} show_images={this.show_images.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_send_job_request_bottomsheet(){
    if(this.state.send_job_request_bottomsheet == true){
      //closing
      this.send_job_request_bottomsheet = this.send_job_request_page.current?.state;

      this.setState({send_job_request_bottomsheet: !this.state.send_job_request_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({send_job_request_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({send_job_request_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({send_job_request_bottomsheet: !me.state.send_job_request_bottomsheet});

          if(me.send_job_request_bottomsheet != null){
            me.send_job_request_page.current?.setState(me.send_job_request_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_send_job_request_ui(item){
    this.open_send_job_request_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.send_job_request_page.current != null){
        me.send_job_request_page.current.set_object(item)
        me.load_my_contracts()
      }
    }, (1 * 500));
    

  }

  add_send_job_request_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_view_job_request_bottomsheet(){
    if(this.state.view_job_request_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_job_request_bottomsheet} onClose={this.open_view_job_request_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewJobRequestPage ref={this.view_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} add_response_action_to_stack={this.add_response_action_to_stack.bind(this)} add_job_request_message_to_stack_object={this.add_job_request_message_to_stack_object.bind(this)} load_job_request_messages={this.load_job_request_messages.bind(this)} open_view_contract_ui={this.show_view_job_request_contract_bottomsheet.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_job_request_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_job_request_bottomsheet.bind(this)} open={this.state.view_job_request_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewJobRequestPage ref={this.view_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} add_response_action_to_stack={this.add_response_action_to_stack.bind(this)} add_job_request_message_to_stack_object={this.add_job_request_message_to_stack_object.bind(this)} load_job_request_messages={this.load_job_request_messages.bind(this)} open_view_contract_ui={this.show_view_job_request_contract_bottomsheet.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_job_request_bottomsheet(){
    if(this.state.view_job_request_bottomsheet == true){
      //closing
      this.view_job_request_bottomsheet = this.view_job_request_page.current?.state;

      this.setState({view_job_request_bottomsheet: !this.state.view_job_request_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_job_request_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_job_request_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_job_request_bottomsheet: !me.state.view_job_request_bottomsheet});

          if(me.view_job_request_bottomsheet != null){
            me.view_job_request_page.current?.setState(me.view_job_request_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_view_job_request_ui(item, object){
    this.open_view_job_request_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_job_request_page.current != null){
        me.view_job_request_page.current.set_object(item, object)
        me.load_my_contracts()
      }
    }, (1 * 500));
    
  }

  add_response_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  add_job_request_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1505']/* 'job-request-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1505']/* 'job-request-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */,this.getLocale()['1309']/* 'job' */,this.getLocale()['1366']/* 'request' */], messages_to_deliver:[], e5: this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }










  /* view job request */
  render_view_job_request_contract_bottomsheet(){
    if(this.state.view_job_request_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_job_request_contract_bottomsheet} onClose={this.open_view_job_request_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewJobRequestContractPage ref={this.view_job_request_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_request_action_to_stack={this.add_job_request_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_job_request_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_job_request_contract_bottomsheet.bind(this)} open={this.state.view_job_request_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewJobRequestContractPage ref={this.view_job_request_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_request_action_to_stack={this.add_job_request_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_job_request_contract_bottomsheet(){
    if(this.state.view_job_request_contract_bottomsheet == true){
      //closing
      this.view_job_request_contract_bottomsheet = this.view_job_request_page.current?.state;

      this.setState({view_job_request_contract_bottomsheet: !this.state.view_job_request_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_job_request_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_job_request_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_job_request_contract_bottomsheet: !me.state.view_job_request_contract_bottomsheet});

          if(me.view_job_request_contract_bottomsheet != null){
            me.view_job_request_page.current?.setState(me.view_job_request_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_job_request_contract_bottomsheet(item){
    this.open_view_job_request_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_job_request_contract_page.current != null){
        me.view_job_request_contract_page.current.set_object(item)
      }
    }, (1 * 500));
    
  }

  add_job_request_action_to_stack(state_obj){
    var contract = state_obj.contract_data
    if(contract['access_rights_enabled'] == true && (contract['my_interactable_time_value'] < Date.now()/1000 && !contract['moderators'].includes(this.state.user_account_id[contract['e5']]))){
      this.prompt_top_notification(this.getLocale()['2720']/* The contract owner hasnt granted you access to their contract yet.' */, 5000)
    }
    else if(contract['my_blocked_time_value'] > Date.now()/1000){
      this.prompt_top_notification(this.getLocale()['2721']/* 'Your account was blocked from entering the contract' */, 4000)
    }
    else{
      this.show_enter_contract_bottomsheet(state_obj.contract_data)
      this.open_view_job_request_contract_bottomsheet()
    }
    
  }



















  render_withdraw_ether_bottomsheet(){
    if(this.state.withdraw_ether_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.withdraw_ether_bottomsheet} onClose={this.open_withdraw_ether_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <WithdrawEtherPage ref={this.withdraw_ether_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} withdraw_ether_to_address={this.withdraw_ether_to_address.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_withdraw_ether_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_withdraw_ether_bottomsheet.bind(this)} open={this.state.withdraw_ether_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <WithdrawEtherPage ref={this.withdraw_ether_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} withdraw_ether_to_address={this.withdraw_ether_to_address.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_withdraw_ether_bottomsheet(){
    if(this.state.withdraw_ether_bottomsheet == true){
      //closing
      this.withdraw_ether_bottomsheet = this.withdraw_ether_page.current?.state;

      this.setState({withdraw_ether_bottomsheet: !this.state.withdraw_ether_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({withdraw_ether_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({withdraw_ether_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({withdraw_ether_bottomsheet: !me.state.withdraw_ether_bottomsheet});

          if(me.withdraw_ether_bottomsheet != null){
            me.withdraw_ether_page.current?.setState(me.withdraw_ether_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_withdraw_ether_bottomsheet(item){
    this.open_withdraw_ether_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.withdraw_ether_page.current != null){
        me.withdraw_ether_page.current.set_object(item)
      }
    }, (1 * 500)); 
    
  }

  withdraw_ether_to_address = async (target_recipient_address, e5, run_expiry_duration, _run_gas_price, picked_max_priority_per_gas_amount, picked_max_fee_per_gas_amount) =>{
    this.prompt_top_notification(this.getLocale()['2722']/* 'withdrawing your ether...' */, 9000)

    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.state.addresses[e5][0]
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress); 
    const me = this
    const gasPrice = await web3.eth.getGasPrice();
    var run_gas_price = (_run_gas_price == 0 || _run_gas_price == null || _run_gas_price > 100**18) ? gasPrice : _run_gas_price
    
    var now = await contractInstance.methods.f147(2).call((error, result) => {})
    var run_expiry_time = now + run_expiry_duration

    var v5/* t_limits */ = [100000000000000, run_expiry_time];
    var encoded = contractInstance.methods.f145(target_recipient_address, v5/* t_limits */).encodeABI()


    var tx = {
        gas: 65000,
        value: 0,
        to: contractAddress,
        data: encoded,
        gasPrice: run_gas_price.toString().toLocaleString('fullwide', {useGrouping:false}),
    }

    if(this.state.e5s[e5].type == '1559'){
      tx = {
        gas: 65000,
        value: 0,
        to: contractAddress,
        data: encoded,
        maxPriorityFeePerGas: picked_max_priority_per_gas_amount.toString().toLocaleString('fullwide', {useGrouping:false}),
        maxFeePerGas: picked_max_fee_per_gas_amount.toString().toLocaleString('fullwide', {useGrouping:false})
      }
    }
    web3.eth.accounts.signTransaction(tx, me.state.accounts[e5].privateKey).then(signed => {
        web3.eth.sendSignedTransaction(signed.rawTransaction).on('receipt', (receipt) => {
          // me.get_accounts_data(me.state.account, false, this.state.web3, this.state.e5_address)
          // this.start_get_accounts_data(false)
          this.update_withdraw_balance(e5)
          this.start_get_accounts_for_specific_e5(false, e5, false)
          this.prompt_top_notification(this.getLocale()['2723']/* 'withdraw complete!' */, 4000)
        }) .on('error', (error) => {
          console.error('Transaction error:', error);
          this.prompt_top_notification(this.getLocale()['2724']/* 'Withdraw failed. Something went wrong' */, 4500)
        });
    })

  }

  update_withdraw_balance(e5){
    var clone = structuredClone(this.state.withdraw_balance)
    clone[e5] = 0
    this.setState({withdraw_balance: clone})
  }













  render_give_award_bottomsheet(){
    if(this.state.give_award_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.give_award_bottomsheet} onClose={this.open_give_award_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <GiveAwardPage ref={this.give_award_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_award_transaction_to_stack={this.add_award_transaction_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_give_award_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_give_award_bottomsheet.bind(this)} open={this.state.give_award_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <GiveAwardPage ref={this.give_award_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_award_transaction_to_stack={this.add_award_transaction_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_give_award_bottomsheet(){
    if(this.state.give_award_bottomsheet == true){
      //closing
      this.give_award_bottomsheet = this.give_award_page.current?.state;

      this.setState({give_award_bottomsheet: !this.state.give_award_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({give_award_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({give_award_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({give_award_bottomsheet: !me.state.give_award_bottomsheet});

          if(me.give_award_bottomsheet != null){
            me.give_award_page.current?.setState(me.give_award_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_give_award_bottomsheet(item){
    this.open_give_award_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.give_award_page.current != null){
        me.give_award_page.current?.set_post(item)
      }
    }, (1 * 500));
    
  }

  add_award_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }


















  render_add_comment_bottomsheet(){
    if(this.state.add_comment_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    var h = this.state.comment_size
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.add_comment_bottomsheet} onClose={this.open_add_comment_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <AddCommentPage ref={this.add_comment_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_comment_to_respective_forum_page={this.add_comment_to_respective_forum_page.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_add_comment_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_add_comment_bottomsheet.bind(this)} open={this.state.add_comment_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AddCommentPage ref={this.add_comment_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_comment_to_respective_forum_page={this.add_comment_to_respective_forum_page.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_add_comment_bottomsheet(){
    if(this.state.add_comment_bottomsheet == true){
      //closing
      this.add_comment_bottomsheet = this.add_comment_page.current?.state;

      this.setState({add_comment_bottomsheet: !this.state.add_comment_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({add_comment_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({add_comment_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({add_comment_bottomsheet: !me.state.add_comment_bottomsheet});

          if(me.add_comment_bottomsheet != null){
            me.add_comment_page.current?.setState(me.add_comment_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_add_comment_bottomsheet(object, focused_message_id, page, contractor_object){
    this.set_comment_bottomsheet_size(focused_message_id)
    this.open_add_comment_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_comment_page.current != null){
        me.add_comment_page.current.set_comment_data(object, focused_message_id, page, contractor_object)
      }
    }, (1 * 500));
    
  }

  set_comment_bottomsheet_size(focused_message_id){
    var size = this.getScreenSize();
    if(focused_message_id != 0 && focused_message_id['e5'] != this.state.selected_e5){
      if(size == 's'){
        this.setState({comment_size: this.state.height})
        // if(this.state.height < 980){
        //   this.setState({comment_size: this.state.height})
        // }else{
        //   this.setState({comment_size: 980})
        // }
      }else{
         if(this.state.height < 890){
          this.setState({comment_size: this.state.height})
        }else{
          this.setState({comment_size: 890})
        }
      }
    }else{
      this.setState({comment_size: 670})
    }
  }

  add_comment_to_respective_forum_page(tx, page){
    if(page == 'channel'){
      this.add_channel_message_to_stack_object(tx)      
    }
    else if(page == 'job'){
      this.add_job_message_to_stack_object(tx)
    }
    else if(page == 'mail'){
      this.add_mail_to_stack_object(tx)
    }
    else if(page == 'post'){
      this.add_post_reply_to_stack(tx)
    }
    else if(page == 'proposal'){
      this.add_proposal_message_to_stack_object(tx)
    }
    else if(page == 'storefront'){
      this.add_storefront_message_to_stack_object(tx)
    }
    else if(page == 'bag'){
      this.add_bag_message_to_stack_object(tx)
    }
    else if(page == 'request'){
      this.add_job_request_message_to_stack_object(tx)
    }
    else if(page == 'audio'){
      this.add_audio_reply_to_stack(tx)
    }
    else if(page == 'video'){
      this.add_video_reply_to_stack(tx)
    }
    else if(page == 'nitro'){
      this.add_nitro_reply_to_stack(tx)
    }
    this.open_add_comment_bottomsheet()
  }











  render_depthmint_bottomsheet(){
    if(this.state.depthmint_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.depthmint_bottomsheet} onClose={this.open_depthmint_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <DepthMintPage ref={this.depthmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_depthmint_to_stack={this.add_depthmint_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_depthmint_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_depthmint_bottomsheet.bind(this)} open={this.state.depthmint_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <DepthMintPage ref={this.depthmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_depthmint_to_stack={this.add_depthmint_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_depthmint_bottomsheet(){
    if(this.state.depthmint_bottomsheet == true){
      //closing
      this.depthmint_bottomsheet = this.depthmint_page.current?.state;

      this.setState({depthmint_bottomsheet: !this.state.depthmint_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({depthmint_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({depthmint_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({depthmint_bottomsheet: !me.state.depthmint_bottomsheet});

          if(me.depthmint_bottomsheet != null){
            me.depthmint_page.current?.setState(me.depthmint_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_depthmint_bottomsheet(token_item){
    this.open_depthmint_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.depthmint_page.current != null){
        me.depthmint_page.current.set_token(token_item)
      }
    }, (1 * 500));
    

  }

  add_depthmint_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }











  render_stage_royalties_bottomsheet(){
    if(this.state.stage_royalties_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.stage_royalties_bottomsheet} onClose={this.open_stage_royalties_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <StageRoyaltiesPage ref={this.stage_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_stage_royalties_to_stack={this.add_stage_royalties_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_stage_royalties_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_stage_royalties_bottomsheet.bind(this)} open={this.state.stage_royalties_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <StageRoyaltiesPage ref={this.stage_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_stage_royalties_to_stack={this.add_stage_royalties_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_stage_royalties_bottomsheet(){
    if(this.state.stage_royalties_bottomsheet == true){
      //closing
      this.stage_royalties_bottomsheet = this.stage_royalties_page.current?.state;

      this.setState({stage_royalties_bottomsheet: !this.state.stage_royalties_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({stage_royalties_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({stage_royalties_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({stage_royalties_bottomsheet: !me.state.stage_royalties_bottomsheet});

          if(me.stage_royalties_bottomsheet != null){
            me.stage_royalties_page.current?.setState(me.stage_royalties_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_stage_royalties_bottomsheet(token_item){
    this.load_exchanges_royalty_information(token_item)
    this.open_stage_royalties_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.stage_royalties_page.current != null){
        me.stage_royalties_page.current.set_token(token_item)
      }
    }, (1 * 500));
    

  }

  add_stage_royalties_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }











  render_view_staged_royalties_bottomsheet(){
    if(this.state.view_staged_royalties_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_staged_royalties_bottomsheet} onClose={this.open_view_staged_royalties_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewStagedRoyaltyPage ref={this.view_staged_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_royalty_batch_payment_to_stack={this.add_royalty_batch_payment_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_staged_royalties_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_view_staged_royalties_bottomsheet.bind(this)} open={this.state.view_staged_royalties_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewStagedRoyaltyPage ref={this.view_staged_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_royalty_batch_payment_to_stack={this.add_royalty_batch_payment_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_staged_royalties_bottomsheet(){
    if(this.state.view_staged_royalties_bottomsheet == true){
      //closing
      this.view_staged_royalties_bottomsheet = this.view_staged_royalties_page.current?.state;

      this.setState({view_staged_royalties_bottomsheet: !this.state.view_staged_royalties_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_staged_royalties_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_staged_royalties_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_staged_royalties_bottomsheet: !me.state.view_staged_royalties_bottomsheet});

          if(me.view_staged_royalties_bottomsheet != null){
            me.view_staged_royalties_page.current?.setState(me.view_staged_royalties_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_staged_royalties_bottomsheet(staging_data, token_item){
    this.open_view_staged_royalties_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_staged_royalties_page.current != null){
        me.view_staged_royalties_page.current.set_data(staging_data, token_item)
      }
    }, (1 * 500));
    

  }

  add_royalty_batch_payment_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  // update_stack_songs_and_albums(state_obj){
  //   var stack_songs_and_albums_clone = structuredClone(this.state.stack_songs_and_albums)
  //   if(stack_songs_and_albums_clone['albums'] == null) stack_songs_and_albums_clone['albums'] = []
  //   if(stack_songs_and_albums_clone['songs'] == null) stack_songs_and_albums_clone['songs'] = []
    
  //   if(!stack_songs_and_albums_clone['albums'].includes(state_obj.album['id'])){
  //     stack_songs_and_albums_clone['albums'].push(state_obj.album['id'])
  //   }

  //   var selected_tracks = state_obj.selected_tracks
  //   selected_tracks.forEach(track => {
  //     if(!stack_songs_and_albums_clone['songs'].includes(track['song_id'])){
  //       stack_songs_and_albums_clone['songs'].push(track['song_id'])
  //     }
  //   });

  //   this.setState({stack_songs_and_albums: stack_songs_and_albums_clone})
  // }















  render_searched_account_bottomsheet(){
    if(this.state.searched_account_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.searched_account_bottomsheet} onClose={this.open_searched_account_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SearchedAccountPage ref={this.searched_account_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_searched_account_balance_search={this.perform_searched_account_balance_search.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_searched_account_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_searched_account_bottomsheet.bind(this)} open={this.state.searched_account_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <SearchedAccountPage ref={this.searched_account_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_searched_account_balance_search={this.perform_searched_account_balance_search.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_searched_account_bottomsheet(){
    if(this.state.searched_account_bottomsheet == true){
      //closing
      this.searched_account_bottomsheet = this.searched_account_page.current?.state;
      
      this.setState({searched_account_bottomsheet: !this.state.searched_account_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({searched_account_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({searched_account_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({searched_account_bottomsheet: !me.state.searched_account_bottomsheet});

          if(me.searched_account_bottomsheet != null){
            me.searched_account_page.current?.setState(me.searched_account_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  when_searched_account_clicked(item, searched_id){
    this.open_searched_account_bottomsheet()

    var me = this;
    setTimeout(function() {
      if(me.searched_account_page.current != null){
        me.searched_account_page.current?.set_searched_item(item, searched_id)
      }
    }, (1 * 500));
    

  }

  perform_searched_account_balance_search = async (exchange_id, id, e5) => {
    var balance = await this.get_balance_in_exchange(exchange_id, id, e5, this.state.addresses[e5])
    var clone = structuredClone(this.state.searched_account_exchange_balances);
    clone[exchange_id+id+e5] = balance
    this.setState({searched_account_exchange_balances: clone})
  }









  render_rpc_settings_bottomsheet(){
    if(this.state.rpc_settings_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.rpc_settings_bottomsheet} onClose={this.open_rpc_settings_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <RPCSettingsPage ref={this.rpc_settings_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_rpc_url={this.add_rpc_url.bind(this)} when_rpc_tapped={this.when_rpc_tapped.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_rpc_settings_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_rpc_settings_bottomsheet.bind(this)} open={this.state.rpc_settings_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <RPCSettingsPage ref={this.rpc_settings_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_rpc_url={this.add_rpc_url.bind(this)} when_rpc_tapped={this.when_rpc_tapped.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_rpc_settings_bottomsheet(){
    if(this.state.rpc_settings_bottomsheet == true){
      //closing
      this.rpc_settings_bottomsheet = this.rpc_settings_page.current?.state;

      this.setState({rpc_settings_bottomsheet: !this.state.rpc_settings_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({rpc_settings_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({rpc_settings_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({rpc_settings_bottomsheet: !me.state.rpc_settings_bottomsheet});

          if(me.rpc_settings_bottomsheet != null){
            me.rpc_settings_page.current?.setState(me.rpc_settings_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_rpc_settings_bottomsheet(ether){
    this.open_rpc_settings_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.rpc_settings_page.current != null){
        me.rpc_settings_page.current.set_ether(ether)
      }
    }, (1 * 500));
    

  }

  add_rpc_url(url, ether){
    var clone = structuredClone(this.state.e5s)
    clone[ether['e5']].web3.push(url)

    var added_providers_clone = this.state.added_providers.slice()
    added_providers_clone.push([ether['e5'], url])
    this.setState({e5s: clone, added_providers: added_providers_clone})
    
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_rpc_tapped(url, index, ether){
    var clone = structuredClone(this.state.e5s)
    clone[ether['e5']].url = index
    this.setState({e5s: clone})

    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.start_get_accounts_for_specific_e5(false, ether['e5'], false)
    }, (1 * 1000));
  }

  load_rpc_times = async (e5) => {
    var items = this.state.e5s[e5].web3
    for(var i=0; i<items.length; i++){
      var url = items[i]
      const web3 = new Web3(url);
      var is_conn = await web3.eth.net.isListening()
      if(is_conn){
        var now = Date.now()
        await web3.eth.getBlockNumber()
        var time = Date.now() - now;
        var clone = structuredClone(this.state.rpc_times)
        clone[url] = ''+time+' '+this.getLocale()['2725']/* milliseconds */
        this.setState({rpc_times: clone})
      }else{
        var clone = structuredClone(this.state.rpc_times)
        clone[url] = this.getLocale()['2726']/* 'offline' */
        this.setState({rpc_times: clone})
      }
    }

  }













  render_confirm_run_bottomsheet(){
    if(this.state.confirm_run_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.confirm_run_bottomsheet} onClose={this.open_confirm_run_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ConfirmRunPage ref={this.confirm_run_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} start_run={this.start_run.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_confirm_run_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_confirm_run_bottomsheet.bind(this)} open={this.state.confirm_run_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ConfirmRunPage ref={this.confirm_run_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} start_run={this.start_run.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_confirm_run_bottomsheet(){
    if(this.state.confirm_run_bottomsheet == true){
      //closing
      this.confirm_run_bottomsheet = this.confirm_run_page.current?.state;

      this.setState({confirm_run_bottomsheet: !this.state.confirm_run_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({confirm_run_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({confirm_run_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({confirm_run_bottomsheet: !me.state.confirm_run_bottomsheet});

          if(me.confirm_run_bottomsheet != null){
            me.confirm_run_page.current?.setState(me.confirm_run_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_confirm_run_bottomsheet(data){
    this.open_confirm_run_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.confirm_run_page.current != null){
        me.confirm_run_page.current.set_data(data)
      }
    }, (1 * 1000));
    

  }

  start_run(){
    this.open_confirm_run_bottomsheet()
    if(this.stack_page.current != null){
      this.stack_page.current?.run_transactions(false)
    }
  }










  render_successful_send_bottomsheet(){
    if(this.state.successful_send_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    var h = 600
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.successful_send_bottomsheet} onClose={this.open_successful_send_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
                        'overflow-y':'auto'}}>
                          <SuccessfulSend ref={this.successful_send_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_successful_send_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_successful_send_bottomsheet.bind(this)} open={this.state.successful_send_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <SuccessfulSend ref={this.successful_send_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_successful_send_bottomsheet(){
    if(this.state.successful_send_bottomsheet == true){
      //closing
      this.successful_send_bottomsheet = this.successful_send_page.current?.state;

      this.setState({successful_send_bottomsheet: !this.state.successful_send_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({successful_send_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({successful_send_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({successful_send_bottomsheet: !me.state.successful_send_bottomsheet});

          if(me.successful_send_bottomsheet != null){
            me.successful_send_page.current?.setState(me.successful_send_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_successful_send_bottomsheet(data){
    this.open_successful_send_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.successful_send_page.current != null){
        me.successful_send_page.current.set_data(data)
      }
    }, (1 * 500));
  }












  render_view_number_bottomsheet(){
    if(this.state.view_number_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    var h = 300
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_number_bottomsheet} onClose={this.open_view_number_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewNumber ref={this.view_number_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} write_to_local_clipboard={this.write_to_local_clipboard.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_number_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_view_number_bottomsheet.bind(this)} open={this.state.view_number_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewNumber ref={this.view_number_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} write_to_local_clipboard={this.write_to_local_clipboard.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_number_bottomsheet(){
    if(this.state.view_number_bottomsheet == true){
      //closing
      this.view_number_bottomsheet = this.view_number_page.current?.state;

      this.setState({view_number_bottomsheet: !this.state.view_number_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_number_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_number_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_number_bottomsheet: !me.state.view_number_bottomsheet});

          if(me.view_number_bottomsheet != null){
            me.view_number_page.current?.setState(me.view_number_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  view_number(number){
    this.add_number_to_number_board(number)
    this.open_view_number_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_number_page.current != null){
        me.view_number_page.current.set_data(number)
      }
    }, (1 * 500));
  }

  add_number_to_number_board(number){
    var clone = this.state.number_board.slice()
    if(!this.number_in_board(number)){
      clone.push(number)
    }
    this.setState({number_board: clone})
  }

  number_in_board(number){
    var in_board = false;
    this.state.number_board.forEach(num => {
      console.log('comparing: ',num, ' to: ', number)
      if(num['relativepower'] == number['relativepower']){
        return true;
      }
    });
    return in_board
  }

  write_to_local_clipboard(number){
    this.setState({clip_number:number})
  }














  render_scan_code_bottomsheet(){
    if(this.state.scan_code_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_scan_code_bottomsheet.bind(this)} open={this.state.scan_code_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>  
            <ScanQrPage ref={this.scan_code_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} finish_scan={this.finish_scan.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_scan_code_bottomsheet(){
    if(this.state.scan_code_bottomsheet == true){
      //closing
      this.scan_code_bottomsheet = this.scan_code_page.current?.state;

      this.setState({scan_code_bottomsheet: !this.state.scan_code_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({scan_code_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({scan_code_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({scan_code_bottomsheet: !me.state.scan_code_bottomsheet});

          if(me.scan_code_bottomsheet != null){
            me.scan_code_page.current?.setState(me.scan_code_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_scan_code_bottomsheet(option){
    this.open_scan_code_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.scan_code_page.current != null){
        me.scan_code_page.current.set_page(option)
      }
    }, (1 * 500));
    
  }

  start_scan(page){
    this.show_scan_code_bottomsheet(page)
  }

  finish_scan(data, page){
    this.open_scan_code_bottomsheet()
    if(page == 'clear_purchase_page'){
      if(this.clear_purchase_page.current != null){
        this.clear_purchase_page.current.set_scan_data(data)
      }
    }
    else if(page == 'send_receive_ether_page'){
      if(this.send_receive_ether_page.current != null){
        this.send_receive_ether_page.current.set_scan_data(data)
      }
    }
  }











  render_dialog_bottomsheet(){
    if(this.state.dialog_bottomsheet2 != true) return;
    
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.dialog_bottomsheet} onClose={this.open_dialog_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_dialog_element()}
                    </Sheet.Content>
                    {/* <ToastContainer limit={3} containerId="id2"/> */}
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_dialog_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_dialog_bottomsheet.bind(this)} open={this.state.dialog_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_dialog_element()}
      </SwipeableBottomSheet>
    )
  }

  render_dialog_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.dialog_size, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <DialogPage ref={this.dialog_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} clear_stack={this.clear_stack.bind(this)} open_delete_action={this.open_delete_action.bind(this)} when_withdraw_ether_confirmation_received={this.when_withdraw_ether_confirmation_received.bind(this)} send_ether_to_target_confirmation={this.send_ether_to_target_confirmation.bind(this)} send_coin_to_target={this.send_coin_to_target.bind(this)} play_next_clicked={this.play_next_clicked.bind(this)} play_last_clicked={this.play_last_clicked.bind(this)} add_to_playlist={this.add_to_playlist.bind(this)} when_remove_from_playlist={this.when_remove_from_playlist.bind(this)} delete_playlist={this.delete_playlist.bind(this)} add_song_to_cache={this.add_song_to_cache.bind(this)}
        
        />
      </div>
    )
  }

  open_dialog_bottomsheet(sheet_size){
    if(sheet_size){
      this.setState({dialog_size: sheet_size})
    }
    if(this.state.dialog_bottomsheet == true){
      //closing
      this.dialog_bottomsheet = this.dialog_page.current?.state;

      this.setState({dialog_bottomsheet: !this.state.dialog_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({dialog_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({dialog_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({dialog_bottomsheet: !me.state.dialog_bottomsheet});
          if(me.dialog_bottomsheet != null){
            me.dialog_page.current?.setState(me.dialog_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_dialog_bottomsheet(data, id){
    var obj = {'invalid_ether_amount_dialog_box':400, 'confirm_clear_stack_dialog':200, 'confirm_send_ether_dialog': 450, 'confirm_delete_dialog_box':200, 'confirm_withdraw_ether':430, 'confirm_send_coin_dialog':600, 'song_options':700 };
    var size = obj[id]
    if(id == 'song_options'){
      if(data['from'] == 'audio_details_section') size = 550
      if(data['from'] == 'audio_details_section3') size = 350
    }
    this.open_dialog_bottomsheet(size)
    var me = this;
    setTimeout(function() {
      if(me.dialog_page.current != null){
        me.dialog_page.current.set_data(data, id)
      }
    }, (1 * 500));
  }

  clear_stack(){
    this.open_dialog_bottomsheet()
    this.clear_transaction_stack()
  }

  open_delete_action(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.view_transaction_page.current != null){
      me.view_transaction_page.current.open_delete_action()
    }
  }

  when_withdraw_ether_confirmation_received(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.withdraw_ether_page.current != null){
      me.withdraw_ether_page.current?.when_withdraw_ether_confirmation_received()
    }
  }

  send_ether_to_target_confirmation(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.send_receive_ether_page.current != null){
      me.send_receive_ether_page.current?.when_send_ether_confirmation_received()
    }
  }

  send_coin_to_target(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.send_receive_coin_page.current != null){
      me.send_receive_coin_page.current.when_send_coin_confirmation_received()
    }
  }

  play_next_clicked(song){
    this.open_dialog_bottomsheet()
    if(this.audio_pip_page.current != null){
      this.audio_pip_page.current?.add_song_to_queue_as_next(song)
      this.full_audio_page.current?.add_song_to_queue_as_next(song)
      this.prompt_top_notification(this.getLocale()['3002']/* Song will be played next. */, 1000)
    }else{
      this.prompt_top_notification(this.getLocale()['3005']/* You need to be playing something first. */, 4000)
    }
  }

  play_last_clicked(song){
    this.open_dialog_bottomsheet()
    if(this.audio_pip_page.current != null){
      this.audio_pip_page.current?.add_song_to_queue_as_last(song)
      this.full_audio_page.current?.add_song_to_queue_as_last(song)
      this.prompt_top_notification(this.getLocale()['3003']/* Song will be played last. */, 1000)
    }else{
      this.prompt_top_notification(this.getLocale()['3005']/* You need to be playing something first. */, 4000)
    }
  }

  when_remove_from_queue(song){
    this.open_dialog_bottomsheet()
    if(this.audio_pip_page.current != null){
      if(this.audio_pip_page.current?.state.songs.length > 1){
        this.audio_pip_page.current?.remove_song_from_queue(song)
        this.full_audio_page.current?.remove_song_from_queue(song)
        this.prompt_top_notification(this.getLocale()['3004']/* Removed song from queue. */, 1000)
      }else{
        this.prompt_top_notification(this.getLocale()['3006']/* You cant remove that song. */, 4000)
      }
    }else{
      this.prompt_top_notification(this.getLocale()['3005']/* You need to be playing something first. */, 4000)
    }
  }

  add_to_playlist(song){
    this.open_dialog_bottomsheet()
    this.show_add_to_playlist_bottomsheet(song)
  }

  when_remove_from_playlist(song, playlist){
    var me = this;
    setTimeout(function() {
      me.open_dialog_bottomsheet()
    }, (1 * 500));
    var playlists_clone = this.state.my_playlists.slice()
    var pos = -1
    for(var i=0; i<playlists_clone.length; i++){
      if(playlists_clone[i]['id'] == playlist['id']){
        pos = i
        break;
      }
    }
    if(pos != -1){
      var pos2 = -1
      for(var i=0; i<playlists_clone[pos]['songs'].length; i++){
        if(playlists_clone[pos]['songs'][i]['song_id'] == song['song_id']){
          pos2 = i
          break
        }
      }
      if(pos2 != -1){
        playlists_clone[pos]['songs'].splice(pos2, 1)
        this.setState({my_playlists: playlists_clone, should_update_playlists_in_E5: true})
        var me = this;
        setTimeout(function() {
          me.set_cookies_after_stack_action(me.state.stack_items)
        }, (1 * 500));
        this.prompt_top_notification(this.getLocale()['3006g']/* Track removed from your playlist. */, 1200)
      }
    }
  }

  delete_playlist(playlist){
    var me = this;
    setTimeout(function() {
      me.open_dialog_bottomsheet()
    }, (1 * 500));
    var playlists_clone = this.state.my_playlists.slice()
    var pos = -1
    for(var i=0; i<playlists_clone.length; i++){
      if(playlists_clone[i]['id'] == playlist['id']){
        pos = i
        break;
      }
    }
    if(pos != -1){
      playlists_clone.splice(pos, 1)
      this.setState({my_playlists: playlists_clone, should_update_playlists_in_E5: true})
      var me = this;
      setTimeout(function() {
        me.set_cookies_after_stack_action(me.state.stack_items)
      }, (1 * 500));
      this.prompt_top_notification(this.getLocale()['3006j']/* Playlist Deleted. */, 1200)
    }
  }

  update_order_of_songs_in_playlist(playlist, reorderedItems){
    var playlists_clone = this.state.my_playlists.slice()
    var pos = -1
    for(var i=0; i<playlists_clone.length; i++){
      if(playlists_clone[i]['id'] == playlist['id']){
        pos = i
        break;
      }
    }
    if(pos != -1){
      playlists_clone[pos]['songs'] = reorderedItems
      this.setState({my_playlists: playlists_clone, should_update_playlists_in_E5: true})

      var me = this;
      setTimeout(function() {
        me.set_cookies_after_stack_action(me.state.stack_items)
      }, (1 * 500));
      
    }
  }

  add_song_to_cache = async (song) => {
    this.prompt_top_notification(this.getLocale()['3006m']/* The track will be cached in a few moments. */, 5000)
    var audio_file = song['track']
    await this.fetch_uploaded_data_from_ipfs([audio_file], false)
    var clone = this.state.cached_tracks.slice()
    clone.push(audio_file)

    this.setState({cached_tracks: clone, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  download_playlist = async (songs) => {
    this.prompt_top_notification(this.getLocale()['a2527z']/* Downloading... */, 5000)
    var ids = []
    var clone = this.state.cached_tracks.slice()
    songs.forEach(song => {
      var audio_file = song['track']
      ids.push(audio_file)
      if(!clone.contains(audio_file)){
        clone.push(audio_file)
      }
    });
    await this.fetch_uploaded_data_from_ipfs(ids, false)
    
    this.setState({cached_tracks: clone, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.prompt_top_notification(me.getLocale()['a2527ba']/* Done. */, 1300)
    }, (1 * 1000));
  }












  render_pay_upcoming_subscriptions_bottomsheet(){
    if(this.state.pay_upcoming_subscriptions_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.pay_upcoming_subscriptions_bottomsheet} onClose={this.open_pay_upcoming_subscriptions_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
                        'overflow-y':'auto'}}>
                          <PayUpcomingSubscriptions ref={this.pay_upcoming_subscriptions_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_upcoming_subscriptions_to_stack={this.add_pay_upcoming_subscriptions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_pay_upcoming_subscriptions_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_pay_upcoming_subscriptions_bottomsheet.bind(this)} open={this.state.pay_upcoming_subscriptions_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <PayUpcomingSubscriptions ref={this.pay_upcoming_subscriptions_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_upcoming_subscriptions_to_stack={this.add_pay_upcoming_subscriptions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_pay_upcoming_subscriptions_bottomsheet(){
    if(this.state.pay_upcoming_subscriptions_bottomsheet == true){
      //closing
      this.pay_upcoming_subscriptions_bottomsheet = this.pay_upcoming_subscriptions_page.current?.state;

      this.setState({pay_upcoming_subscriptions_bottomsheet: !this.state.pay_upcoming_subscriptions_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({pay_upcoming_subscriptions_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({pay_upcoming_subscriptions_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({pay_upcoming_subscriptions_bottomsheet: !me.state.pay_upcoming_subscriptions_bottomsheet});

          if(me.pay_upcoming_subscriptions_bottomsheet != null){
            me.pay_upcoming_subscriptions_page.current?.setState(me.pay_upcoming_subscriptions_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_pay_upcoming_subscriptions_bottomsheet(data){
    this.open_pay_upcoming_subscriptions_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.pay_upcoming_subscriptions_page.current != null){
        me.pay_upcoming_subscriptions_page.current.set_data(data)
      }
    }, (1 * 500));
  }

  add_pay_upcoming_subscriptions_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }






  render_pick_file_bottomsheet(){
    if(this.state.pick_file_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.pick_file_bottomsheet} onClose={this.open_pick_file_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_pick_file_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_pick_file_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_pick_file_bottomsheet.bind(this)} open={this.state.pick_file_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_pick_file_element()}
      </SwipeableBottomSheet>
    )
  }

  render_pick_file_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <PickFilePage ref={this.pick_file_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} return_selected_files={this.return_selected_files.bind(this)}/>
      </div>
    )
  }

  open_pick_file_bottomsheet(){
    if(this.state.pick_file_bottomsheet == true){
      //closing
      this.pick_file_bottomsheet = this.pick_file_page.current?.state;

      this.setState({pick_file_bottomsheet: !this.state.pick_file_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({pick_file_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({pick_file_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({pick_file_bottomsheet: !me.state.pick_file_bottomsheet});

          if(me.pick_file_bottomsheet != null){
            me.pick_file_page.current?.setState(me.pick_file_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_pick_file_bottomsheet(type, function_name, max){
    this.open_pick_file_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.pick_file_page.current != null){
        me.pick_file_page.current.set_data(type, function_name, max)
      }
    }, (1 * 500));
  }

  return_selected_files(picked_files, function_name){
    this.open_pick_file_bottomsheet()

    if(function_name == 'create_image'){
      this.new_channel_page.current?.when_image_gif_files_picked(picked_files)
      this.new_post_page.current?.when_image_gif_files_picked(picked_files)
      this.new_job_page.current?.when_image_gif_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_image_gif_files_picked(picked_files)
      this.new_mail_page.current?.when_image_gif_files_picked(picked_files)
      this.new_contractor_page.current?.when_image_gif_files_picked(picked_files)
      this.new_proposal_page.current?.when_image_gif_files_picked(picked_files)
      this.new_audio_page.current?.when_image_gif_files_picked(picked_files)
      this.new_video_page.current?.when_image_gif_files_picked(picked_files)
      this.new_nitro_page.current?.when_image_gif_files_picked(picked_files)

      this.edit_job_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_token_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_post_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_channel_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_storefront_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_contractor_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_videopost_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_videopost_page.current?.when_image_gif_files_picked(picked_files)

      this.add_comment_page.current?.when_image_gif_files_picked(picked_files)
      this.send_job_request_page.current?.when_image_gif_files_picked(picked_files)
    }
    else if(function_name == 'create_text_banner_image'){
      this.new_channel_page.current?.when_banner_selected(picked_files)
      this.new_post_page.current?.when_banner_selected(picked_files)
      this.new_job_page.current?.when_banner_selected(picked_files)
      this.new_storefront_item_page.current?.when_banner_selected(picked_files)
      this.new_mail_page.current?.when_banner_selected(picked_files)
      this.new_contractor_page.current?.when_banner_selected(picked_files)
      this.new_proposal_page.current?.when_banner_selected(picked_files)
      this.new_token_page.current?.when_banner_selected(picked_files)
      this.new_audio_page.current?.when_banner_selected(picked_files)
      this.new_video_page.current?.when_banner_selected(picked_files)
      this.new_nitro_page.current?.when_banner_selected(picked_files)

      this.edit_job_page.current?.when_banner_selected(picked_files)
      this.edit_token_page.current?.when_banner_selected(picked_files)
      this.edit_post_page.current?.when_banner_selected(picked_files)
      this.edit_channel_page.current?.when_banner_selected(picked_files)
      this.edit_storefront_page.current?.when_banner_selected(picked_files)
      this.edit_contractor_page.current?.when_banner_selected(picked_files)
      this.edit_videopost_page.current?.when_banner_selected(picked_files)
      this.edit_videopost_page.current?.when_banner_selected(picked_files)
    }
    else if(function_name == 'create_storefront_variant_image'){
      this.new_token_page.current?.when_variant_image_gif_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_variant_image_gif_files_picked(picked_files)
      this.edit_storefront_page.current?.when_variant_image_gif_files_picked(picked_files)
    }
    else if(function_name == 'create_audio_pick_audio_file'){
      this.new_audio_page.current?.when_audio_file_picked(picked_files)
      this.edit_audiopost_page.current?.when_audio_file_picked(picked_files)
    }
    else if(function_name == 'create_audio_album_art'){
      this.new_audio_page.current?.when_album_art_selected(picked_files)
      this.edit_audiopost_page.current?.when_album_art_selected(picked_files)

      this.new_video_page.current?.when_album_art_selected(picked_files)
      this.edit_videopost_page.current?.when_album_art_selected(picked_files)

      this.new_nitro_page.current?.when_album_art_selected(picked_files)
      this.edit_nitropost_page.current?.when_album_art_selected(picked_files)
    }
    else if(function_name == 'create_storefront_image_album_art'){
      this.new_storefront_item_page.current?.when_storefront_image_selected(picked_files)
      this.edit_storefront_page.current?.when_storefront_image_selected(picked_files)
    }
    else if(function_name == 'create_pdf'){
      this.new_channel_page.current?.when_pdf_files_picked(picked_files)
      this.new_post_page.current?.when_pdf_files_picked(picked_files)
      this.new_job_page.current?.when_pdf_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_pdf_files_picked(picked_files)
      this.new_mail_page.current?.when_pdf_files_picked(picked_files)
      this.new_contractor_page.current?.when_pdf_files_picked(picked_files)
      this.new_proposal_page.current?.when_pdf_files_picked(picked_files)
      this.new_audio_page.current?.when_pdf_files_picked(picked_files)
      this.new_video_page.current?.when_pdf_files_picked(picked_files)
      this.new_nitro_page.current?.when_pdf_files_picked(picked_files)

      this.edit_job_page.current?.when_pdf_files_picked(picked_files)
      this.edit_token_page.current?.when_pdf_files_picked(picked_files)
      this.edit_post_page.current?.when_pdf_files_picked(picked_files)
      this.edit_channel_page.current?.when_pdf_files_picked(picked_files)
      this.edit_storefront_page.current?.when_pdf_files_picked(picked_files)
      this.edit_contractor_page.current?.when_pdf_files_picked(picked_files)
      this.edit_videopost_page.current?.when_pdf_files_picked(picked_files)
      this.edit_videopost_page.current?.when_pdf_files_picked(picked_files)

      this.add_comment_page.current?.when_pdf_files_picked(picked_files)
      this.send_job_request_page.current?.when_pdf_files_picked(picked_files)
    }
    else if(function_name == 'create_zip'){
      this.new_channel_page.current?.when_zip_files_picked(picked_files)
      this.new_post_page.current?.when_zip_files_picked(picked_files)
      this.new_job_page.current?.when_zip_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_zip_files_picked(picked_files)
      this.new_mail_page.current?.when_zip_files_picked(picked_files)
      this.new_contractor_page.current?.when_zip_files_picked(picked_files)
      this.new_proposal_page.current?.when_zip_files_picked(picked_files)
      this.new_audio_page.current?.when_zip_files_picked(picked_files)
      this.new_video_page.current?.when_zip_files_picked(picked_files)
      this.new_nitro_page.current?.when_zip_files_picked(picked_files)

      this.edit_job_page.current?.when_zip_files_picked(picked_files)
      this.edit_token_page.current?.when_zip_files_picked(picked_files)
      this.edit_post_page.current?.when_zip_files_picked(picked_files)
      this.edit_channel_page.current?.when_zip_files_picked(picked_files)
      this.edit_storefront_page.current?.when_zip_files_picked(picked_files)
      this.edit_contractor_page.current?.when_zip_files_picked(picked_files)
      this.edit_videopost_page.current?.when_zip_files_picked(picked_files)
      this.edit_videopost_page.current?.when_zip_files_picked(picked_files)
    }
    else if(function_name == 'create_video_pick_video_file'){
      this.new_video_page.current?.when_video_file_picked(picked_files)
      this.new_video_page.current?.when_pdf_files_picked(picked_files)
    }

    
  }











  render_buy_album_bottomsheet(){
    if(this.state.buy_album_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.buy_album_bottomsheet} onClose={this.open_buy_album_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_buy_album_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_buy_album_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_buy_album_bottomsheet.bind(this)} open={this.state.buy_album_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_buy_album_element()}
      </SwipeableBottomSheet>
    )
  }

  render_buy_album_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <BuyAlbumPage ref={this.buy_album_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_buy_album_transaction_to_stack={this.add_buy_album_transaction_to_stack.bind(this)}/>
      </div>
    )
  }

  open_buy_album_bottomsheet(){
    if(this.state.buy_album_bottomsheet == true){
      //closing
      this.buy_album_bottomsheet = this.buy_album_page.current?.state;

      this.setState({buy_album_bottomsheet: !this.state.buy_album_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({buy_album_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({buy_album_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({buy_album_bottomsheet: !me.state.buy_album_bottomsheet});

          if(me.buy_album_bottomsheet != null){
            me.buy_album_page.current?.setState(me.buy_album_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_buy_album_bottomsheet(object){
    this.open_buy_album_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.buy_album_page.current != null){
        me.buy_album_page.current.set_data(object)
      }
    }, (1 * 500));
  }

  add_buy_album_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }








  render_buy_video_bottomsheet(){
    if(this.state.buy_video_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.buy_video_bottomsheet} onClose={this.open_buy_video_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_buy_video_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_buy_video_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_buy_video_bottomsheet.bind(this)} open={this.state.buy_video_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_buy_video_element()}
      </SwipeableBottomSheet>
    )
  }

  render_buy_video_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <BuyVideoPage ref={this.buy_video_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_buy_video_transaction_to_stack={this.add_buy_video_transaction_to_stack.bind(this)}/>
      </div>
    )
  }

  open_buy_video_bottomsheet(){
    if(this.state.buy_video_bottomsheet == true){
      //closing
      this.buy_video_bottomsheet = this.buy_video_page.current?.state;

      this.setState({buy_video_bottomsheet: !this.state.buy_video_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({buy_video_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({buy_video_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({buy_video_bottomsheet: !me.state.buy_video_bottomsheet});

          if(me.buy_video_bottomsheet != null){
            me.buy_video_page.current?.setState(me.buy_video_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_buy_video_bottomsheet(object){
    this.open_buy_video_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.buy_video_page.current != null){
        me.buy_video_page.current.set_data(object)
      }
    }, (1 * 500));
  }

  add_buy_video_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }














  render_buy_nitro_storage_bottomsheet(){
    if(this.state.buy_nitro_storage_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.buy_nitro_storage_bottomsheet} onClose={this.open_buy_nitro_storage_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_buy_nitro_storage_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_buy_nitro_storage_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_buy_nitro_storage_bottomsheet.bind(this)} open={this.state.buy_nitro_storage_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_buy_nitro_storage_element()}
      </SwipeableBottomSheet>
    )
  }

  render_buy_nitro_storage_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div>
        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <BuyNitroPage ref={this.buy_nitro_storage_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_buy_nitro_storage_to_stack={this.add_buy_nitro_storage_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} />
        </div>
      </div>
    )
  }

  open_buy_nitro_storage_bottomsheet(){
    if(this.state.buy_nitro_storage_bottomsheet == true){
      //closing
      this.buy_nitro_storage_bottomsheet = this.buy_nitro_storage_page.current?.state;

      this.setState({buy_nitro_storage_bottomsheet: !this.state.buy_nitro_storage_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({buy_nitro_storage_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({buy_nitro_storage_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({buy_nitro_storage_bottomsheet: !me.state.buy_nitro_storage_bottomsheet});

          if(me.buy_nitro_storage_bottomsheet != null){
            me.buy_nitro_storage_page.current?.setState(me.buy_nitro_storage_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_buy_nitro_storage_bottomsheet(object){
    this.open_buy_nitro_storage_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.buy_nitro_storage_page.current != null){
        me.buy_nitro_storage_page.current.set_data(object)
      }
    }, (1 * 500));
  }

  add_buy_nitro_storage_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }












  render_configure_nitro_node_bottomsheet(){
    if(this.state.configure_nitro_node_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.configure_nitro_node_bottomsheet} onClose={this.open_configure_nitro_node_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_configure_nitro_node_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_configure_nitro_node_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_configure_nitro_node_bottomsheet.bind(this)} open={this.state.configure_nitro_node_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_configure_nitro_node_element()}
      </SwipeableBottomSheet>
    )
  }

  render_configure_nitro_node_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div>
        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <ConfigureNitroNodePage ref={this.configure_nitro_node_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} boot_nitro_node={this.boot_nitro_node.bind(this)} restore_nitro_node={this.restore_nitro_node.bind(this)} isValidE5Address={this.isValidE5Address.bind(this)} boot_new_e5={this.boot_new_e5.bind(this)} delete_e5_from_node={this.delete_e5_from_node.bind(this)} change_iteration_in_node={this.change_iteration_in_node.bind(this)} change_gateway={this.change_gateway.bind(this)} update_web3_provider_in_node={this.update_web3_provider_in_node.bind(this)} boot_storage={this.boot_storage.bind(this)} update_storage_config={this.update_storage_config.bind(this)} back_up_node={this.back_up_node.bind(this)}
            decrypt_storage_data_using_key={this.decrypt_storage_data_using_key.bind(this)} update_dialer_provider_in_node={this.update_dialer_provider_in_node.bind(this)}
            />
        </div>
      </div>
    )
  }

  open_configure_nitro_node_bottomsheet(){
    if(this.state.configure_nitro_node_bottomsheet == true){
      //closing
      this.configure_nitro_node_bottomsheet = this.configure_nitro_node_page.current?.state;

      this.setState({configure_nitro_node_bottomsheet: !this.state.configure_nitro_node_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({configure_nitro_node_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({configure_nitro_node_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({configure_nitro_node_bottomsheet: !me.state.configure_nitro_node_bottomsheet});

          if(me.configure_nitro_node_bottomsheet != null){
            me.configure_nitro_node_page.current?.setState(me.configure_nitro_node_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_configure_nitro_node_bottomsheet(object){
    this.open_configure_nitro_node_bottomsheet()
    var me = this;
    setTimeout(async function() {
      if(me.configure_nitro_node_page.current != null){
        var final_backup_key = await me.decrypt_nitro_node_key_with_my_public_key(object['ipfs'].encrypted_key, object['e5'])
        me.configure_nitro_node_page.current.set_data(object, final_backup_key)
      }
    }, (1 * 500));
  }

  boot_nitro_node = async (entered_app_key_text, entered_backup_key_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054j']/* 'Attempting to boot the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      app_key: entered_app_key_text
    });
    var request = `${node_url}/boot?${params.toString()}`
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  restore_nitro_node = async (entered_backup_key_text, entered_filename_text, entered_backup_file_text, should_restore_key_title_tag_selected, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054u']/* 'Attempting to restore the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url
    // var final_files_backup_key = entered_backup_file_text == '' ? final_backup_key : entered_backup_file_text
    var final_files_backup_key = ''

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      file_name: entered_filename_text,
      data_key: final_files_backup_key,
      should_restore_key: should_restore_key_title_tag_selected
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: '' // Convert the data object to a JSON string
    }
    var request = `${node_url}/restore?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);

      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }

  }

  back_up_node = async (entered_backup_key_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054x']/* 'Attempting to back up the node remotely' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/backup?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  isValidE5Address = (adr) => {
    try {
      const web3 = new Web3()
      web3.utils.toChecksumAddress(adr)
      return true
    } 
    catch (e) {
      return false
    }
  }

  boot_new_e5 = async (entered_backup_key_text, selected_e5, entered_address_text, entered_web3_text, entered_start_block_text, entered_iteration_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bh']/* 'Attempting to boot the E5 in the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      e5: selected_e5, 
      backup_key: final_backup_key,
      e5_address: entered_address_text, 
      web3: entered_web3_text, 
      first_block:parseInt(entered_start_block_text), 
      iteration:parseInt(entered_iteration_text)
    }

    const params = new URLSearchParams({
      arg_string:JSON.stringify(arg_obj),
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/new_e5?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  delete_e5_from_node = async (entered_backup_key_text, selected_e5, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bl']/* 'Attempting to remove the E5 from the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      e5: selected_e5,
      backup_key: final_backup_key
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/delete_e5?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  change_iteration_in_node = async (entered_backup_key_text, selected_e5, entered_iteration_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bo']/* 'Attempting to change the synchronization iteration...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      e5: selected_e5,
      new_iteration:parseInt(entered_iteration_text),
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/update_iteration?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  change_gateway = async (entered_backup_key_text, entered_ipfs_provider_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bw']/* 'Attempting to change the gateway provider...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      new_provider: entered_ipfs_provider_text
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/update_content_gateway?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  update_web3_provider_in_node = async (entered_backup_key_text, selected_e5, entered_web3_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bz']/* 'Attempting to change the web3 provider url...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      e5: selected_e5,
      new_provider: entered_web3_text
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/update_provider?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  boot_storage = async (entered_backup_key_text, max_buyable_capacity, selected_e5, price_per_megabyte, target_storage_purchase_recipient_account, selected_basic_storage_setting, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054ci']/* Attempting to enable storage with your specified configuration... */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      backup_key: final_backup_key,
      max_buyable_capacity: parseInt(max_buyable_capacity),
      price_per_megabyte: price_per_megabyte,
      target_account_e5: selected_e5,
      target_storage_purchase_recipient_account: target_storage_purchase_recipient_account,
      unlimited_basic_storage: selected_basic_storage_setting
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/boot_storage`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  update_storage_config = async (entered_backup_key_text, key, value, e5, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054co']/* Attempting to update your storage configuration... */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      backup_key: final_backup_key,
      key: key,
      value: value,
      e5: e5,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/reconfigure_storage`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  decrypt_storage_data_using_key(data, key){
    try{
      var bytes  = CryptoJS.AES.decrypt(data, key);
      var originalText = bytes.toString(CryptoJS.enc.Utf8);
      return originalText
    }catch(e){
      return data
    }
  }

  update_dialer_provider_in_node = async (entered_backup_key_text, e5, subscription, dialer_payment_optional, nitro_object, dialer_endpoint) => {
    this.prompt_top_notification(this.getLocale()['3054di']/* Attempting to update your dialer configuration... */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      backup_key: final_backup_key,
      target_subscription: subscription,
      target_subscriptions_e5: e5,
      subscription_payment_optional: dialer_payment_optional,
      dialer_endpoint:dialer_endpoint
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/configure_dialer`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }










  render_view_image_bottomsheet(){
    if(this.state.view_image_bottomsheet2 != true) return;
    var background_color = 'transparent';
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_image_bottomsheet} onClose={this.open_view_image_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height, width: this.state.width, 'background-color': background_color, 'border-style': 'solid', 'border-color': 'black', 'border-radius': '0px 0px 0px 0px', 'border-width': '0px','margin': '0px 0px 0px 0px'}}>
                          {this.render_view_image_element()}
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_image_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_image_bottomsheet.bind(this)} open={this.state.view_image_bottomsheet} style={{'z-index':'6'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': 'transparent','box-shadow': '0px 0px 0px 0px #CECDCD'}}>
          <div style={{ height: this.state.height, width: this.state.width, 'background-color': background_color, 'border-style': 'solid', 'border-color': 'black', 'border-radius': '0px 0px 0px 0px', 'border-width': '0px','margin': '0px 0px 0px 0px'}}>
            {this.render_view_image_element()}
          </div>
      </SwipeableBottomSheet>
    )
  }

  render_view_image_element(){
    var images = this.state.view_images == null ? [] : this.state.view_images;
    var pos = this.state.view_images_pos == null ? 0 : this.state.view_images_pos;
    var img = this.get_image_from_file(images[pos])
    var w = this.state.width
    return(
      <div style={{'position': 'relative'}}>
        <div style={{height: this.state.height, width: this.state.width, 'z-index':'1', 'position': 'absolute'}}>
          {this.render_view_image()}
        </div>

        <div style={{height: 80, width: w, 'z-index':'5', 'position': 'absolute','background-image': 'linear-gradient(rgb(0, 0, 0,.9), rgb(0, 0, 0,.0))'}}/>

        <div style={{height: 32, width: w, 'z-index':'10', 'position': 'absolute'}}>
          <div style={{'display': 'flex','flex-direction': 'row', 'padding':'10px 20px 0px 20px'}}>
            <img alt="" onClick={()=>this.download_image(img, this.get_name_of_file(images[pos]))} src={this.state.static_assets['download_icon']} style={{height:36, width:'auto'}}/>
            <div style={{width: w - 60}}/>
            <img alt="" onClick={()=>this.open_view_image_bottomsheet()} src={this.state.static_assets['close_pip']} style={{height:28, width:'auto'}} />
          </div>
        </div>
      </div>
    )
  }

  open_view_image_bottomsheet(){
    if(this.state.view_image_bottomsheet == true){
      //closing
      this.setState({view_image_bottomsheet: !this.state.view_image_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_image_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_image_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_image_bottomsheet: !me.state.view_image_bottomsheet});
        }
      }, (1 * 200));
    }
  }

  show_images(images, pos){
    this.setState({view_images:images, view_images_pos: pos })
    this.getBase64ImageDimensions(images[pos])
    .then(({ width, height }) => {
      console.log(`Image Width: ${width}px, Image Height: ${height}px`);
      if(width > height){
        /* 
          if images width is less than height:
          width: 100px, height: 200px

          if 100px = state.width
          then 200px = (200 * state.width) / 100
        */
        var h = (height * this.state.width) / width
        this.rendering_image_width = this.state.width - 70
        this.rendering_image_height = h - 70

        this.rendering_image_width = 'auto'
        this.rendering_image_height = this.state.height
      }else{
        /* 
          if images height is less than width:
          width: 200px, height: 100px

          if 100px = state.height
          then 200px = (200px * state.height) / 100px
        */
        var w = (width * this.state.height) / height
        this.rendering_image_width = w - 70
        this.rendering_image_height = this.state.height - 70

        this.rendering_image_width = this.state.width
        this.rendering_image_height = 'auto'
      }
      this.open_view_image_bottomsheet()
    })
    .catch((error) => {
      console.error('Failed to get image dimensions:', error);
      this.rendering_image_height = 'auto'
      this.rendering_image_width = this.state.width
      this.open_view_image_bottomsheet()
    });
    
  }

  /* fullscreen image rendered in bottomsheet when image item is tapped */
  render_view_image(){
    var images = this.state.view_images == null ? [] : this.state.view_images;
    var pos = this.state.view_images_pos == null ? 0 : this.state.view_images_pos;
    var img = this.get_image_from_file(images[pos])
    return(
      <div style={{'position': 'relative', height:'100%', width:'100%', 'background-color':'rgb(0, 0, 0,.9)','border-radius': '0px','display': 'flex', 'align-items':'center','justify-content':'center', 'margin':'0px 0px 0px 0px', 'text-align':'center'}}>
        {/* <SwipeableViews index={pos}>
          {images.map((item, index) => ( 
            <img src={item} style={{height:'auto',width:w}} />
          ))}
        </SwipeableViews> */}
        <TransformWrapper doubleClick={{ disabled: false }}>
            <TransformComponent>
              <div>
                <img src={img} style={{height: this.rendering_image_height, width: this.rendering_image_width}}/>
              </div>
            </TransformComponent>
          </TransformWrapper>
      </div>
    );
  }

  getBase64ImageDimensions(base64Image) {
    return new Promise((resolve, reject) => {
      const img = new Image();

      // Set the src of the image to the base64 data
      img.src = base64Image;

      // Wait for the image to load to get its dimensions
      img.onload = () => {
        const width = img.width;
        const height = img.height;
        resolve({ width, height });
      };

      // Handle any errors
      img.onerror = (error) => {
        reject(error);
      };
    });
  }

  when_view_image_clicked(index, images){
    this.setState({view_images: images, view_images_pos: index})
    this.open_view_image_bottomsheet()
  }

  get_image_from_file(ecid){
    if(!ecid.startsWith('image')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return 'https://bafkreihhphkul4fpsqougigu4oenl3nbbnjjav4fzkgpjlwfya5ie2tu2u.ipfs.w3s.link/'
    
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    console.log('datas', 'uploaded_data_obj', this.state.uploaded_data)
    if(data == null) return 'https://bafkreihhphkul4fpsqougigu4oenl3nbbnjjav4fzkgpjlwfya5ie2tu2u.ipfs.w3s.link/'
    return data['data']
  }

  get_cid_split2(ecid){
    var split_cid_array = ecid.split('_');
    var filetype = split_cid_array[0]
    var cid_with_storage = split_cid_array[1]
    var cid = cid_with_storage
    var storage = 'ch'
    if(cid_with_storage.includes('.')){
        var split_cid_array2 = cid_with_storage.split('.')
        cid = split_cid_array2[0]
        storage = split_cid_array2[1]
    }

    return{'filetype':filetype, 'cid':cid, 'storage':storage, 'full':ecid}
  }

  download_image = async (img,  name) => {
    this.prompt_top_notification(this.getLocale()['2738b']/* 'Downloading image.' */, 1500)
    if(!img.startsWith('http')){
      // Create and click the download link
      const a = document.createElement("a");
      a.href = img;
      a.download = name;
      document.body.appendChild(a);
      a.click();
      // Clean up
      document.body.removeChild(a);
      return
    }
    try {
      // Fetch the image as a blob
      const response = await fetch(img);
      if (!response.ok) {
          throw new Error("Failed to fetch image");
      }

      const blob = await response.blob();

      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);

      // Create and click the download link
      const a = document.createElement("a");
      a.href = objectUrl;
      a.download = name;
      document.body.appendChild(a);
      a.click();

      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      console.error("Error downloading the image:", error);
    }
  }















  when_zip_file_opened = async (item) => {
    this.prompt_top_notification(this.getLocale()['2738f']/* 'Downloading Zip file.' */, 1500)
    var zip_file_name = this.get_name_of_file(item)
    var img = this.get_zip_from_file(item)
    try {
      // Fetch the zip as a blob
      const response = await fetch(img);
      if (!response.ok) {
          throw new Error("Failed to fetch image");
      }

      const blob = await response.blob();

      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);

      // Create and click the download link
      const a = document.createElement("a");
      a.href = objectUrl;
      a.download = zip_file_name;
      document.body.appendChild(a);
      a.click();

      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      console.error("Error downloading the zip:", error);
    }
  }

  get_zip_from_file(ecid){
    if(!ecid.startsWith('zip')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return null
    
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    if(data == null) return null
    return data['data']
  }

















  render_view_pdf_bottomsheet(){
    if(this.state.view_pdf_bottomsheet2 != true) return;
    var background_color = 'transparent';
    var os = getOS()
    if(os == 'iOS' || true){
        return(
            <Sheet isOpen={this.state.view_pdf_bottomsheet} onClose={this.open_view_pdf_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_view_pdf_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_pdf_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_view_pdf_bottomsheet.bind(this)} open={this.state.view_pdf_bottomsheet} style={{'z-index':'6'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': 'transparent','box-shadow': '0px 0px 0px 0px #CECDCD'}}>
          <div style={{ height: this.state.height, width: this.state.width, 'background-color': background_color, 'border-style': 'solid', 'border-color': 'black', 'border-radius': '0px 0px 0px 0px', 'border-width': '0px','margin': '0px 0px 0px 0px'}}>
              {this.render_view_pdf_element()}
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_pdf_bottomsheet(){
    if(this.state.view_pdf_bottomsheet == true){
      //closing
      this.setState({view_pdf_bottomsheet: !this.state.view_pdf_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_pdf_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_pdf_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_pdf_bottomsheet: !me.state.view_pdf_bottomsheet});
        }
      }, (1 * 200));
    }
  }

  when_pdf_file_opened(pdf){
    // this.prompt_top_notification('opening...', 1000)
    this.setState({view_pdf: pdf})
    this.open_view_pdf_bottomsheet()

    var me = this;
    setTimeout(function() {
      me.pdf_viewer_wrapper.current?.set_default_zoom()
    }, (1 * 4500));
    
  }


  render_view_pdf_element(){
    var pdf = this.state.view_pdf
    var w = this.state.width
    return(
      <div style={{'position': 'relative', height: this.state.height, width: this.state.width}}>
        <div style={{height: this.state.height, width: this.state.width, 'z-index':'4', 'position': 'absolute'}}>
          {this.render_view_pdf()}
        </div>

        <div style={{height: 70, width: w, 'z-index':'8', 'position': 'absolute','background-image': 'linear-gradient(rgb(0, 0, 0,.7), rgb(0, 0, 0,.0))'}}/>

        <div style={{height: 32, width: w, 'z-index':'10', 'position': 'absolute'}}>
          <div style={{'display': 'flex','flex-direction': 'row', 'padding':'10px 20px 0px 20px'}}>
            <img alt="" onClick={()=>this.download_pdf(this.get_pdf_from_file(pdf), this.get_name_of_file(pdf))} src={this.state.static_assets['download_icon']} style={{height:36, width:'auto'}}/>

            <div style={{width: w-60, display: 'flex', gap: '20px', 'align-items':'center','justify-content':'center',}}>
              <img alt="" onClick={()=>this.zoom_in()} src={this.state.static_assets['zoom_in_icon']} style={{height:36, width:'auto'}}/>

              <img alt="" onClick={()=>this.zoom_out()} src={this.state.static_assets['zoom_out_icon']} style={{height:36, width:'auto'}}/>
            </div>

            <img alt="" onClick={()=>this.open_view_pdf_bottomsheet()} src={this.state.static_assets['close_pip']} style={{height:28, width:'auto'}} />
          </div>
        </div>
      </div>
    )
  }

  /* fullscreen pdf rendered in bottomsheet when image item is tapped */
  render_view_pdf(){
    var pdf = this.state.view_pdf
    // var current_page = this.state.pdf_bookmarks[pdf] == null ? 1 : this.state.pdf_bookmarks[pdf]
    var theme = this.state.theme['pdf_theme']
    return(
      <div style={{height:this.state.height, width:'100%', 'background-color':'white', overflow: 'auto'}}>
        {pdf && (
          <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js`}>
            <PDFViewerWrapper ref={this.pdf_viewer_wrapper} theme={theme} fileUrl={this.get_pdf_from_file(pdf)} />
          </Worker>
        )}
      </div>
    );
  }

  get_pdf_from_file(ecid){
    if(!ecid.startsWith('pdf')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return 'https://bitcoin.org/bitcoin.pdf'
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    return data['data']
  }

  get_name_of_file(ecid){
    if(!ecid.startsWith('pdf') && !ecid.startsWith('image') && !ecid.startsWith('zip')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return 'unknown'
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    return data['name']
  }

  download_pdf(base64Data, name){
    this.prompt_top_notification(this.getLocale()['2738d']/* 'Downloading pdf.' */, 1500)
    if(!base64Data.startsWith('http')){
      const base64Prefix = "data:application/pdf;base64,";
      const pdfData = base64Data.startsWith(base64Prefix) ? base64Data.replace(base64Prefix, "") : base64Data;
      

      const byteCharacters = atob(pdfData);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: "application/pdf" });

      const blobUrl = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = blobUrl;
      link.download = `${name}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(blobUrl);
    }else{
      this.download_pdf_from_url(base64Data, name)
    }
  }

  download_pdf_from_url = async (url,  name) => {
    try {
      // Fetch the image as a blob
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error("Failed to fetch pdf");
      }

      const blob = await response.blob();
      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);
      // Create and click the download link
      const a = document.createElement("a");
      a.href = objectUrl;
      a.download = name;
      document.body.appendChild(a);
      a.click();

      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      console.error("Error downloading the image:", error);
    }
  }

  zoom_in(){
    this.pdf_viewer_wrapper.current?.zoomIn()
  }

  zoom_out(){
    this.pdf_viewer_wrapper.current?.zoomOut()
  }

  // record_page(page){
  //   var pdf_bookmarks_clone = structuredClone(this.state.pdf_bookmarks)
  //   var pdf = this.state.view_pdf
  //   pdf_bookmarks_clone[pdf] = page
  //   this.setState({pdf_bookmarks: pdf_bookmarks_clone})

  //   var me = this;
  //   setTimeout(function() {
  //     me.set_cookies()
  //   }, (1 * 500));
  // }












  render_audio_pip(){
    if(!this.state.is_audio_pip_showing) return;
    var size = this.getScreenSize();
    var h = 240
    // if(size == 's' || size == 'm') h = 310
    var opacity = this.state.full_audio_bottomsheet == true ? 0.2 : 1.0
    var player_size = size == 's' ? 150 : 200

    if(this.state.hide_pip != 'e'){
      player_size = 0
      opacity = 0.0
    }
    return(
      <div style={{'opacity':opacity}}>
        <Draggable handle="strong" bounds="body" defaultPosition={{x: this.state.width - 220, y: this.state.height - h}}>
          <div className={classes2.pipWindow}>
            <div className="box no-cursor" style={{'position': 'relative'}}>
              <div style={{ width:player_size, height:player_size,'z-index':'210', 'position': 'absolute', 'padding':'6px 0px 10px 0px'}}>
                {this.get_audio_pip_ui(player_size)}
              </div>
            </div>
          </div>
        </Draggable>
      </div>
    )
  }

  get_audio_pip_ui(player_size){
    var size = this.getScreenSize();
    return(
      <div style={{width:player_size, height:player_size}}>
        <AudioPip ref={this.audio_pip_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} player_size={player_size} theme={this.state.theme} load_queue={this.load_queue.bind(this)} close_audio_pip={this.close_audio_pip.bind(this)} open_full_player={this.open_full_player.bind(this)} when_next_track_reached={this.when_next_track_reached.bind(this)} when_time_updated={this.when_time_updated.bind(this)} 
        update_song_plays={this.update_song_plays.bind(this)} notify_account_to_make_purchase={this.notify_account_to_make_purchase.bind(this)} when_audio_play_paused_from_pip={this.when_audio_play_paused_from_pip.bind(this)}
        />
      </div>
    )
  }

  play_song(item, object, audio_items, is_page_my_collection_page, should_shuffle){
    this.prompt_top_notification(this.getLocale()['2976']/* 'Playing ' */, 800)
    this.setState({is_audio_pip_showing: true})
    var queue = this.get_queue(item, object, audio_items, is_page_my_collection_page, should_shuffle)
    var unshuffled_queue = this.get_queue(item, object, audio_items, is_page_my_collection_page, false)
    
    var me = this;
    setTimeout(function() { 
      // me.stack_page.current.set_media_data(queue, 0, unshuffled_queue, should_shuffle)
      me.audio_pip_page.current?.set_data(queue, 0, unshuffled_queue, should_shuffle)
      me.setState({queue: queue, pos: 0, original_song_list: unshuffled_queue, is_shuffling: should_shuffle})
      me.load_queue(queue, 0)
    }, (1 * 500));
  }

  play_song_in_playlist(item, playlist, should_shuffle){
    this.prompt_top_notification(this.getLocale()['2976']/* 'Playing ' */, 800)
    this.setState({is_audio_pip_showing: true})
    var queue = this.get_playlist_queue(item, playlist, should_shuffle)
    var unshuffled_queue = this.get_playlist_queue(item, playlist, false)

    var me = this;
    setTimeout(function() {
      me.audio_pip_page.current?.set_data(queue, 0, unshuffled_queue, should_shuffle)
      // me.stack_page.current.set_media_data(queue, 0, unshuffled_queue, should_shuffle)
      me.setState({queue: queue, pos: 0, original_song_list: unshuffled_queue, is_shuffling: should_shuffle})
      me.load_queue(queue, 0)
    }, (1 * 500));
  }

  close_audio_pip(){
    this.setState({is_audio_pip_showing: false})
    this.when_playing(null, null)
  }

  get_playlist_queue(item, object, should_shuffle){
    var songs = []
    var song_ids = []

    songs.push(item)
    song_ids.push(item['song_id'])

    var objects_songs = object['songs']
    var should_start_adding = false
    objects_songs.forEach(song => {
      if(should_start_adding && !song_ids.includes(song['song_id'])){
        songs.push(song)
        song_ids.push(song['song_id'])
      }
      if(!should_start_adding && song['song_id'] == item['song_id']){
        should_start_adding = true;
      }
    });

    if(should_shuffle) shuffle(songs)

    return songs
  }

  get_queue(item, object, audio_items, is_page_my_collection_page, should_shuffle){
    var songs = []
    var song_ids = []
    item['album_art'] = object['ipfs'].album_art
    item['object'] = object
    songs.push(item)
    song_ids.push(item['song_id'])

    var objects_songs = object['ipfs'].songs
    var should_start_adding = false
    objects_songs.forEach(song => {
      if(should_start_adding && !song_ids.includes(song['song_id'])){
        song['album_art'] = object['ipfs'].album_art
        song['object'] = object
        if(is_page_my_collection_page == true){
          if(this.is_song_available_for_adding_to_playlist(song)){
            //if im playing from my collection, only play the songs ive bought
            songs.push(song)
            song_ids.push(song['song_id'])
          }
        }else{
          songs.push(song)
          song_ids.push(song['song_id'])
        }
      }
      if(!should_start_adding && song['song_id'] == item['song_id']){
        should_start_adding = true;
      }
    });

    if(should_shuffle){
      shuffle(songs)
    }

    var index_of_obj = audio_items.indexOf(object)

    for(var i=(index_of_obj+1); i<audio_items.length; i++){
      var extra_objects_songs = audio_items[i]['ipfs'].songs
      extra_objects_songs.forEach(song => {
        if(!song_ids.includes(song['song_id'])){
          song['album_art'] = object['ipfs'].album_art
          song['object'] = object

          if(is_page_my_collection_page == true){
            if(this.is_song_available_for_adding_to_playlist(song)){
              //if im playing from my collection, only play the songs ive bought
              songs.push(song)
              song_ids.push(song['song_id'])
            }
          }else{
            songs.push(song)
            song_ids.push(song['song_id'])
          }
        }
      });
    }


    return songs
  }

  load_queue = async (queue, pos) => {
    var songs_to_load = []
    
    for(var i=pos; i<queue.length; i++){
      var song = queue[i]
      if(songs_to_load.length < 3){
        songs_to_load.push(song['track'])
      }
    }

    for(var i=0; i<songs_to_load.length; i++){
      var song = songs_to_load[i]
      await this.fetch_uploaded_data_from_ipfs([song], false)
      if(i == 0){
        //if its the song thats to be played
        await this.wait(150)
        this.audio_pip_page.current?.start_playing()
        this.setState({play_pause_state: 1/* playing */})
      }
    }
  }

  open_full_player(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list){
    this.show_full_audio_bottomsheet(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list)
  }

  when_time_updated(time, current_song){
    var me = this;
    if(me.full_audio_page.current != null){
      me.full_audio_page.current.when_time_updated(time)
    }
    this.update_time_for_future_reference(time, current_song)
    this.when_playing(current_song, time)
  }

  when_next_track_reached(){
    if(this.full_audio_page.current != null){
      this.full_audio_page.current?.when_next_track_reached()
    }
    if(this.state.pos != this.state.queue.length - 1){
      this.setState({pos: this.state.pos +1})
    }
  }

  when_playing(song, time){
    this.setState({current_playing_song: song, current_playing_time: time})
  }

  update_time_for_future_reference(time, current_song){
    var clone = structuredClone(this.state.audio_timestamp_data)
    clone[current_song['song_id']] = time
    this.setState({audio_timestamp_data: clone})
  }

  update_song_plays(song){
    var song_plays_clone = structuredClone(this.state.song_plays)
    if(song_plays_clone[song['song_id']] == null) song_plays_clone[song['song_id']] = []
    song_plays_clone[song['song_id']].push(new Date().getTime())
    
    if(!this.is_song_available_for_adding_to_playlist(song)){
      this.setState({should_update_song_plays:true})
    }
    this.setState({song_plays: song_plays_clone, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 500));
  }

  notify_account_to_make_purchase(){
    this.prompt_top_notification(this.getLocale()['3022']/* 'Please purchase the song to play it.' */, 11000)
  }

  is_song_available_for_adding_to_playlist(song){
    var my_songs = this.state.my_tracks
    if(my_songs.includes(song['song_id'])){
      return true
    }
    return false
  }

  when_audio_play_paused_from_pip(state){
    this.setState({play_pause_state: state})
  }











  render_full_audio_bottomsheet(){
    if(this.state.full_audio_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.full_audio_bottomsheet} onClose={this.open_full_audio_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_full_audio_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_full_audio_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_full_audio_bottomsheet.bind(this)} open={this.state.full_audio_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_full_audio_element()}
      </SwipeableBottomSheet>
    )
  }

  render_full_audio_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FullAudioPage ref={this.full_audio_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} play_pause={this.play_pause.bind(this)} play_previous={this.play_previous.bind(this)} play_next={this.play_next.bind(this)} skip_to={this.skip_to.bind(this)} update_time={this.update_time.bind(this)} repeat_current_song={this.repeat_current_song.bind(this)} shuffle_songs_in_pip={this.shuffle_songs_in_pip.bind(this)}/>
      </div>
    )
  }

  open_full_audio_bottomsheet(){
    if(this.state.full_audio_bottomsheet == true){
      //closing
      this.full_audio_bottomsheet = this.full_audio_page.current?.state;

      this.setState({full_audio_bottomsheet: !this.state.full_audio_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({full_audio_bottomsheet2: false});
        me.audio_pip_page.current?.when_expanded_player_closed()
      }, (1 * 1000));
    }else{
      //opening
      this.setState({full_audio_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({full_audio_bottomsheet: !me.state.full_audio_bottomsheet});

          if(me.full_audio_bottomsheet != null){
            me.full_audio_page.current?.setState(me.full_audio_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_full_audio_bottomsheet(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list){
    this.open_full_audio_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.full_audio_page.current != null){
        me.full_audio_page.current.set_data(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list)
      }
    }, (1 * 500));
  }

  play_pause(){
    this.audio_pip_page.current?.play_pause()
    if(this.state.play_pause_state == 0/* paused */){
      this.setState({play_pause_state: 1/* playing */})
    }else{
      this.setState({play_pause_state: 0/* paused */})
    }
  }

  play_previous(){
    this.audio_pip_page.current?.play_previous()
    if(this.state.pos != 0){
      this.setState({pos: this.state.pos -1})
    }
  }

  play_next(){
    this.audio_pip_page.current?.play_next()
    if(this.state.pos != this.state.queue.length - 1){
      this.setState({pos: this.state.pos +1})
    }
  }

  skip_to(index){
    this.audio_pip_page.current?.skip_to(index)
    this.setState({pos: index})
  }

  update_time(number){
    this.audio_pip_page.current?.handleNumber(number)
  }

  repeat_current_song(){
    this.audio_pip_page.current?.repeat_current_song()
  }

  shuffle_songs_in_pip(shuffle_list, its_pos){
    this.audio_pip_page.current?.shuffle_songs_in_pip(shuffle_list, its_pos)
    if(this.state.is_shuffling == true){
      this.setState({is_shuffling: !this.state.is_shuffling, queue: shuffle_list, pos:its_pos})
    }else{
      this.setState({is_shuffling: !this.state.is_shuffling, queue: shuffle_list})
    }
  }




  play_pause_from_stack(){
    this.audio_pip_page.current?.play_pause()
    if(this.state.play_pause_state == 0/* paused */){
      this.setState({play_pause_state: 1/* playing */})
    }else{
      this.setState({play_pause_state: 0/* paused */})
    }
  }

  open_full_screen_viewer(){
    this.audio_pip_page.current?.expand_player()
  }














  render_add_to_playlist_bottomsheet(){
    if(this.state.add_to_playlist_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.add_to_playlist_bottomsheet} onClose={this.open_add_to_playlist_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_add_to_playlist_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_add_to_playlist_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_add_to_playlist_bottomsheet.bind(this)} open={this.state.add_to_playlist_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_add_to_playlist_element()}
      </SwipeableBottomSheet>
    )
  }

  render_add_to_playlist_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AddToPlaylist ref={this.add_to_playlist_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}
            create_new_playlist_with_song={this.create_new_playlist_with_song.bind(this)} add_song_to_existing_playlist={this.add_song_to_existing_playlist.bind(this)}
            />
      </div>
    )
  }

  open_add_to_playlist_bottomsheet(){
    if(this.state.add_to_playlist_bottomsheet == true){
      //closing
      this.add_to_playlist_bottomsheet = this.add_to_playlist_page.current?.state;

      this.setState({add_to_playlist_bottomsheet: !this.state.add_to_playlist_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({add_to_playlist_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({add_to_playlist_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({add_to_playlist_bottomsheet: !me.state.add_to_playlist_bottomsheet});

          if(me.add_to_playlist_bottomsheet != null){
            me.add_to_playlist_page.current?.setState(me.add_to_playlist_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_add_to_playlist_bottomsheet(song){
    this.open_add_to_playlist_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_to_playlist_page.current != null){
        me.add_to_playlist_page.current.set_data(song)
      }
    }, (1 * 500));
  }

  create_new_playlist_with_song(playlist_with_song){
    var me = this;
    setTimeout(function() {
      me.open_add_to_playlist_bottomsheet()
    }, (1 * 500));
    var clone = this.state.my_playlists.slice()
    clone.push(playlist_with_song)
    this.setState({my_playlists: clone, should_update_playlists_in_E5: true})

    setTimeout(function() {
      me.set_cookies_after_stack_action(me.state.stack_items)
    }, (1 * 500));
  }

  add_song_to_existing_playlist(playlist, song, index){
    var me = this;
    setTimeout(function() {
      me.open_add_to_playlist_bottomsheet()
    }, (1 * 500));
    var clone = this.state.my_playlists.slice()
    clone[index]['songs'].push(song)
    this.setState({my_playlists: clone, should_update_playlists_in_E5: true})
    
    setTimeout(function() {
      me.set_cookies_after_stack_action(me.state.stack_items)
    }, (1 * 500));
  }


















  render_full_video_bottomsheet(){
    if(this.state.full_video_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.full_video_bottomsheet} onClose={this.open_full_video_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_full_video_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_full_video_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_full_video_bottomsheet.bind(this)} open={this.state.full_video_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_full_video_element()}
      </SwipeableBottomSheet>
    )
  }

  render_full_video_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FullVideoPage ref={this.full_video_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} load_video_queue={this.load_video_queue.bind(this)} when_picture_in_picture_exited={this.when_picture_in_picture_exited.bind(this)} show_images={this.show_images.bind(this)}
            update_video_time_for_future_reference={this.update_video_time_for_future_reference.bind(this)}
            />
      </div>
    )
  }

  open_full_video_bottomsheet(){
    if(this.state.full_video_bottomsheet == true){
      //closing
      if(this.is_picture_in_pictiure_showing()){
        //just hide the page
        this.setState({full_video_bottomsheet: !this.state.full_video_bottomsheet});
      }else{
        this.full_video_bottomsheet = this.full_video_page.current?.state;
        this.setState({full_video_bottomsheet: !this.state.full_video_bottomsheet});
        var me = this;
        setTimeout(function() {
          me.setState({full_video_bottomsheet2: false});
          me.video_pip_page.current?.when_expanded_player_closed()
        }, (1 * 1000));
      }
      
    }else{
      //opening
      this.setState({full_video_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({full_video_bottomsheet: !me.state.full_video_bottomsheet});

          if(me.full_video_bottomsheet != null){
            me.full_video_page.current?.setState(me.full_video_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_full_video_bottomsheet(queue, object){
    this.open_full_video_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.full_video_page.current != null){
        me.full_video_page.current.set_data(queue, object, 0)
      }
    }, (1 * 500));
  }

  play_video(video, object){
    var queue = this.get_video_queue(video, object)
    this.show_full_video_bottomsheet(queue, object)
    this.load_video_queue(queue, 0)
  }

  load_video_queue = async (queue, pos) => {
    var videos_to_load = []
    
    for(var i=pos; i<queue.length; i++){
      var video = queue[i]
      if(videos_to_load.length < 1){
        videos_to_load.push(video['video'])
      }
    }

    for(var i=0; i<videos_to_load.length; i++){
      var video = videos_to_load[i]
      await this.fetch_uploaded_data_from_ipfs([video], false)
      if(i == 0){
        //if its the video thats to be played
        await this.wait(150)
        this.full_video_page.current?.start_playing()
      }
    }
  }

  get_video_queue(item, object){
    var videos = []
    var video_ids = []
    item['album_art'] = object['ipfs'].album_art
    item['object'] = object
    videos.push(item)
    video_ids.push(item['video_id'])

    var objects_videos = object['ipfs'].videos
    var should_start_adding = false
    objects_videos.forEach(video => {
      if(should_start_adding && !video_ids.includes(video['video_id'])){
        video['album_art'] = object['ipfs'].album_art
        video['object'] = object
        videos.push(video)
        video_ids.push(video['video_id'])
      }
      if(!should_start_adding && video['video_id'] == item['video_id']){
        should_start_adding = true;
      }
    });

    return videos
  }

  is_picture_in_pictiure_showing(){
    return document.pictureInPictureElement != null
  }

  when_picture_in_picture_exited(){
    this.setState({full_video_bottomsheet: true});
  }

  update_video_time_for_future_reference(time, current_video){
    var clone = structuredClone(this.state.video_timestamp_data)
    clone[current_video['video_id']] = time
    this.setState({video_timestamp_data: clone})
  }
















  render_dialer_bottomsheet(){
    // if(this.state.dialer_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.dialer_bottomsheet} onClose={this.open_dialer_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_dialer_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_dialer_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_dialer_bottomsheet.bind(this)} open={this.state.dialer_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_dialer_element()}
      </SwipeableBottomSheet>
    )
  }

  render_dialer_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <DialerPage ref={this.dialer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} 
        
        />
      </div>
    )
  }

  open_dialer_bottomsheet(){
    if(this.state.dialer_bottomsheet == true){
      //closing
      this.dialer_bottomsheet = this.dialer_page.current?.state;

      this.setState({dialer_bottomsheet: !this.state.dialer_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({dialer_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({dialer_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({dialer_bottomsheet: !me.state.dialer_bottomsheet});

          if(me.dialer_bottomsheet != null){
            me.dialer_page.current?.setState(me.dialer_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_dialer_bottomsheet(data){
    this.open_dialer_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.dialer_page.current != null){
        me.dialer_page.current.set_data(data)
      }
    }, (1 * 500));
  }












































  /* prompts an alert notification from the top */
  prompt_top_notification(data, duration){
      var os = getOS()
      var id = "id"
      if(os == 'iOS' && !this.state.syncronizing_page_bottomsheet) id = "id2";
      // console.log('top_notification', 'showing', data, 'on id:', id)
      var time = duration == null ? 1000: duration;
      // data = 'toast item blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah '
      // time = 1500000
      if(toast.isActive(data)) return;
      toast(this.render_toast_item(data), {
          position: "top-center",
          autoClose: time,
          closeButton: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          transition: Slide,
          containerId:id,
          toastId:data,
          hideProgressBar: true,
          style:{'background-color':'transparent','box-shadow': '0px 0px 0px 0px #CECDCD', width:'auto'}
      });
  }


  /* renders the toast item used */
  render_toast_item(message){
    var width = this.state.width
    if(width > 330){
      width = 330
    }
    return (
          <div style={{'display': 'flex', 'align-items':'center','justify-content':'center',}}>
              <div style={{'background-color':this.state.theme['toast_background_color'], 'border-radius': '20px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['card_shadow_color'],'padding': '3px 3px 3px 3px','display': 'flex','flex-direction': 'row', width: width-40}}>
                  <div style={{'padding': '6px 0px 5px 5px','display': 'flex','align-items': 'center', height:35}}> 
                      <img src={this.state.theme['alert_icon']} style={{height:25,width:'auto','scale': '0.9'}} />
                  </div>
                  <div style={{'padding': '0px 0px 0px 8px', 'margin':'1px 0px 0px 0px','display': 'flex','align-items': 'center'}}>
                      <p style={{'font-size': '13px', 'color':this.state.theme['primary_text_color'],'text-shadow': '-0px -0px 0px #A1A1A1', 'margin':'0px', 'font-family': this.state.font}}>{message}</p>
                  </div>
              </div>
          </div>
      );
  }














  load_e5_data = async () => {
    this.setState({should_keep_synchronizing_bottomsheet_open: true});
    // var obj = {name:'hello world'}
    // var cid = await this.store_data_in_web3(JSON.stringify(obj))
    // console.log('---------------------load_e5_data-------------------------------')
    // console.log(cid)
    // var data = await this.fetch_objects_data_from_nft_storage(cid)
    // console.log(data)
    // const node = await IPFS.create()
    // var data = node.cat(cid)
    // console.log(data)

    if(this.is_allowed_in_e5()){
      this.load_cities_data()
      this.load_coin_and_ether_coin_prices()
      // await this.check_if_beacon_node_is_online()
      
      // await this.load_static_assets()
      // this.inc_synch_progress()
      // await this.load_coin_static_assets()
      // this.inc_synch_progress()
      // await this.load_all_wallets_icons()
      // this.inc_synch_progress()
      if(this.state.accounts[this.state.selected_e5] != null){
        var me = this
        setTimeout(function() {
            me.start_get_accounts_data(true, false)
        }, (3 * 1000));
      }else{
        this.when_wallet_data_updated(['(32)'], 0, '', true,) 
      }
    } 
  }

  inc_synch_progress(){
    const steps = this.state.sync_steps;
    const incr_count = 100/steps;
    if(this.state.syncronizing_progress+incr_count >= 99 && this.state.should_keep_synchronizing_bottomsheet_open == true){
      this.prompt_top_notification(this.getLocale()['2727']/* 'syncronized.' */, 1000);
      this.setState({should_keep_synchronizing_bottomsheet_open: false})
    }
    this.setState({syncronizing_progress:this.state.syncronizing_progress+incr_count})

  }

  send_ether_to_target(recipientAddress, amount, gasPrice, state, e5, set_max_priority_per_gas, set_max_fee_per_gas, ether){
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const me = this;

    web3.eth.accounts.wallet.add(state.accounts[e5].privateKey);
    var gas_price = (gasPrice == null || gasPrice == 0 || gasPrice > 100**18) ? 10**9 : gasPrice

    var tx = {
      from: state.accounts[e5].address,
      to: recipientAddress,
      value: amount.toString(),
      gas: 23000,
      gasPrice: gas_price.toString()
    }

    if(this.state.e5s[e5].type == '1559'){
      tx = {
        from: state.accounts[e5].address,
        to: recipientAddress,
        value: amount.toString(),
        gas: 23000,
        maxPriorityFeePerGas: set_max_priority_per_gas.toString(),
        maxFeePerGas: set_max_fee_per_gas.toString()
      }
    }

    web3.eth.sendTransaction(tx)
    .on('transactionHash', function (hash) {
      me.start_get_accounts_data(false)
      console.log('send_result: ',hash)
      me.show_successful_send_bottomsheet({'tx':tx, 'hash':hash, 'e5':e5, 'ether':ether, 'type':'ether'}, )
      // me.get_transaction_receipt({'tx':tx, 'hash':hash, 'e5':e5, 'ether':ether}, hash, web3)
    })
    .on('error', function (error) {
      console.error('Failed to send transaction:', error);
      if(error == 'Error: Invalid JSON RPC response: {}'){
        me.start_get_accounts_data(false)
        // me.prompt_top_notification(me.getLocale()['2728']/* 'send complete!' */, 15600)
        me.show_successful_send_bottomsheet({'tx':tx, 'hash':'', 'e5':e5, 'ether':ether, 'type':'ether'})
      }else{
        me.prompt_top_notification(me.getLocale()['2729']/* 'send failed, ' */+error, 16000)
      }
    });

  }







  when_wallet_data_updated2(added_tags, set_salt, selected_item, is_synching){
    var seed = added_tags.join(' | ') + set_salt + selected_item;
    this.generate_one_account_for_all_e5s(seed)
    this.generate_account_data_for_each_coin(seed)
    this.setState({account_balance: {}, account_seed: seed});
    
    var me = this
    setTimeout(function() {
        me.start_get_accounts_data(is_synching, false)
    }, (3 * 10));

    this.setState({has_wallet_been_set: true})

    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  generate_one_account_for_all_e5s(seed){
    var _accounts = {}
    var e5 = this.state.e5s['data'][0]
    var web3_url = this.get_web3_url_from_e5(e5)
    var account = this.get_account_from_seed(seed, web3_url)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i];
      _accounts[focused_e5] = {privateKey:account.privateKey, address: account.address}
    }
    // console.log(_accounts)
    this.setState({accounts: _accounts})
  }


  when_wallet_data_updated(added_tags, set_salt, selected_item, is_synching){
    var seed = added_tags.join(' | ') + set_salt + selected_item;
    if(selected_item != '') {
      this.setState({account_seed: seed});
    }
    this.generate_one_account_for_all_e5s(seed)
    if(this.state.coin_data['BTC'] == null){
      this.generate_account_data_for_each_coin(seed)
    }
    var me = this
    setTimeout(function() {
        me.start_get_accounts_data(is_synching, false)
    }, (3 * 1000));

    if(selected_item != ''){
      this.setState({has_wallet_been_set: true})
    }

    // this.send_filecoin(seed)
  }

  generate_account_for_each_e5(seed){
    var _accounts = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var account = this.get_account_from_seed(seed, web3_url)
      _accounts[e5] = account
    }
    this.setState({accounts: _accounts})
  }

  get_account_from_seed(seed, web3_url){
    const web3 = new Web3(web3_url);
    const mnemonic = seed.trim();
    window.Buffer = window.Buffer || Buffer;
    const seedBytes = mnemonicToSeedSync(mnemonic);
    const hdNode = ethers.utils.HDNode.fromSeed(seedBytes);
    const wallet = new ethers.Wallet(hdNode.privateKey);

    const account = web3.eth.accounts.privateKeyToAccount(wallet.privateKey);
    return account;
  }




  

  generate_account_data_for_each_coin = async (seed1) => {
    this.setState({coin_data_status: 'pending'})
    var seed = seed1.replace('|',' ')
    seed = this.get_formatted_seed(seed)
    this.setState({final_seed: seed})
    console.log('coin', 'starting...')
    var coin_data = this.state.coin_data
    coin_data['BTC'] = await this.get_and_set_bitcoin_wallet_info(seed)
    // console.log('coin', 'bitcoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['FIL'] = await this.get_and_set_filecoin_wallet_info(seed)
    // console.log('coin', 'filecoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['BCH'] = await this.get_and_set_bitcoin_cash_wallet_info(seed)
    // console.log('coin', 'bitcoin cash...')
    // console.log('coin', this.state.coin_data)
    coin_data['LTC'] = await this.get_and_set_litecoin_wallet_info(seed)
    // console.log('coin', 'litecoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['DOGE'] = await this.get_and_set_dogecoin_wallet_info(seed)
    // console.log('coin', 'dogecoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['DASH'] = await this.get_and_set_dash_wallet_info(seed)
    // console.log('coin', 'dash...')
    // console.log('coin', this.state.coin_data)
    coin_data['TRX'] = await this.get_and_set_tron_wallet_info(seed)
    // console.log('coin', 'tron...')
    // console.log('coin', this.state.coin_data)
    coin_data['XRP'] = await this.get_and_set_xrp_wallet_info(seed)
    // console.log('coin', 'xrp...')
    // console.log('coin', this.state.coin_data)
    coin_data['XLM'] = await this.get_and_set_xlm_wallet_info(seed)
    // console.log('coin', 'xlm...')
    // console.log('coin', this.state.coin_data)
    coin_data['DOT'] = await this.get_and_set_dot_wallet_info(seed)
    // console.log('coin', 'dot...')
    // console.log('coin', this.state.coin_data)
    coin_data['KSM'] = await this.get_and_set_kusama_wallet_info(seed)
    // console.log('coin', 'kusama...')
    // console.log('coin', this.state.coin_data)
    coin_data['ALGO'] = await this.get_and_set_algorand_wallet_info(seed)
    // console.log('coin', 'algorand...')
    // console.log('coin', this.state.coin_data)
    coin_data['XTZ'] = await this.get_and_set_tezos_wallet_info(seed)
    // console.log('coin', 'tezos...')
    // console.log('coin', this.state.coin_data)
    coin_data['ATOM'] = await this.get_and_set_cosmos_wallet_info(seed)
    // console.log('coin', 'cosmos...')
    // console.log('coin', this.state.coin_data)
    coin_data['SOL'] = await this.get_and_set_solana_wallet_info(seed)
    // console.log('coin', 'solana...')
    // console.log('coin', this.state.coin_data)
    coin_data['APT'] = await this.get_and_set_aptos_wallet_info(seed)
    // console.log('coin', 'aptos...')
    // console.log('coin', this.state.coin_data)
    coin_data['ADA'] = await this.get_and_set_cardano_wallet_info(seed)
    // console.log('coin', 'cardano...')
    // console.log('coin', this.state.coin_data)
    coin_data['STX'] = await this.get_and_set_stacks_wallet_info(seed)
    // console.log('coin', 'stacks...')
    // console.log('coin', this.state.coin_data)


    //should be last
    coin_data['AR'] = await this.get_and_set_arweave_wallet_info(seed)
    // console.log('coin', 'arweave...')
    // console.log('coin', this.state.coin_data)
    console.log('coin', coin_data)
    this.setState({coin_data_status: 'set', coin_data:coin_data})
  }

  get_formatted_seed(seed){
    var arr = seed.split(' ')
    var new_arr = ''
    arr.forEach(element => {
      if(element.length > 32){
        const hash = CryptoJS.SHA256(element).toString();
        const truncatedHash = hash.substring(0, 16);
        new_arr = new_arr+truncatedHash+' '
      }else{
        new_arr = new_arr+element+' '
      }
    });
    new_arr = new_arr.replace(/[^\w\s]/g, '')
    new_arr = new_arr.replace('_','')
    return new_arr.trim()
  }

  update_coin_balances = async (coin, should_update_all) => {
    if(this.state.account_seed == '') return;
    var coin_data = this.state.coin_data
    if(!should_update_all){
      if(this.update_time == null) this.update_time = {}
      if(this.update_time[coin] == null) this.update_time[coin] = 0
      if(Date.now() - this.update_time[coin] < (30*1000)){
        return;
      }
      this.update_time[coin] = Date.now()
      this.prompt_top_notification(this.getLocale()['2927g']/* Refreshing Wallet... */, 800)
    }
    if(coin == 'FIL' || should_update_all) coin_data = await this.update_filecoin_wallet_balance(coin_data);
    if(coin == 'BTC' || should_update_all) coin_data = await this.update_bitcoin_balance(coin_data);
    if(coin == 'BCH' || should_update_all) coin_data = await this.update_bitcoin_cash_balance(coin_data);
    if(coin == 'LTC' || should_update_all) coin_data = await this.update_litecoin_balance(coin_data);
    if(coin == 'DOGE' || should_update_all) coin_data = await this.update_dogecoin_balance(coin_data);
    if(coin == 'DASH' || should_update_all) coin_data = await this.update_dash_balance(coin_data);
    if(coin == 'TRX' || should_update_all) coin_data = await this.update_tron_balance(coin_data);
    if(coin == 'XRP' || should_update_all) coin_data = await this.update_xrp_balance(coin_data);
    if(coin == 'XLM' || should_update_all) coin_data = await this.update_xlm_balance(coin_data);
    if(coin == 'DOT' || should_update_all) coin_data = await this.update_dot_balance(coin_data);
    if(coin == 'KSM' || should_update_all) coin_data = await this.update_ksm_balance(coin_data);
    if(coin == 'ALGO' || should_update_all) coin_data = await this.update_algorand_balance(coin_data);
    if(coin == 'XTZ' || should_update_all) coin_data = await this.update_tezos_balance(coin_data);
    if(coin == 'ATOM' || should_update_all) coin_data = await this.update_cosmos_balance(coin_data);
    if(coin == 'SOL' || should_update_all) coin_data = await this.update_solana_balance(coin_data);
    if(coin == 'APT' || should_update_all) coin_data = await this.update_aptos_balance(coin_data);
    if(coin == 'ADA' || should_update_all) coin_data = await this.update_ada_balance(coin_data);
    if(coin == 'STX' || should_update_all) coin_data = await this.update_stacks_balance(coin_data);
    
    
    if(coin == 'AR' || should_update_all) coin_data = await this.update_arweave_balance(coin_data);
    this.setState({coin_data: coin_data})
  }

  is_address_set(address){
    var default_addresses = this.state.default_addresses
    if(default_addresses.includes(address)){
      return false
    }
    return true;
  }





  get_and_set_filecoin_wallet_info = async (seed) => {
    const connector = new HttpJsonRpcConnector({ url: 'https://rpc.ankr.com/filecoin', token: '' });
    const hdWalletMnemonic = seed;
    const hdDerivationPath = `m/44'/461'/0'/0/0`;
    const lotusClient = new LotusClient(connector);
    const walletProvider = new MnemonicWalletProvider( lotusClient, hdWalletMnemonic, hdDerivationPath );

    const myAddress = await walletProvider.getDefaultAddress();
    const balance = await this.get_filecoin_balance(myAddress, lotusClient)

    var fee_info = {'fee':await this.get_filecoin_transaction_fee(), 'type':'variable', 'per':'gas'}

    var filecoin_data = {'balance':(balance.toString()), 'address':myAddress, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['FIL'] = filecoin_data;
    // this.setState({coin_data: clone})
    return filecoin_data
  }

  get_filecoin_balance = async (address, lotusClient) => {
    var balance = 0
    if(!this.is_address_set(address)) return 0
    try{
      balance = await lotusClient.wallet.balance(address);
      console.log('filecoin wallet balance:', balance);
    }catch(e){
      console.log(e)
    }
    return balance
  }

  get_filecoin_transaction_fee = async () => {
    return 2_000_000_000
  }

  update_filecoin_wallet_balance = async (clone) => {
    const connector = new HttpJsonRpcConnector({ url: 'https://rpc.ankr.com/filecoin', token: '' });
    const lotusClient = new LotusClient(connector);

    // var clone = structuredClone(this.state.coin_data)
    var address = clone['FIL']['address']
    const balance = await this.get_filecoin_balance(address, lotusClient)
    clone['FIL']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_bitcoin_wallet_info = async (seed) => {
    try{  
      const path = "m/44'/0'/0'/0/0" // bitcoin mainnet
      const network = bitcoin.networks.bitcoin;
      var wallet = await this.get_bitcoin_wallet(seed, network, path)
      const address = wallet.address
      var utxos = await this.get_bitcoin_utxos(address)
      var balance = this.get_total_bitcoin_balance_from_utxos(utxos)

      var fee = await this.get_bitcoin_fees()
      var fee_info = {'fee':fee, 'type':'variable', 'per':'byte'}

      var bitcoin_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
      // console.log('coin', 'bitcoin data:', bitcoin_data)
      // var clone = structuredClone(this.state.coin_data)
      // clone['BTC'] = bitcoin_data;
      // this.setState({coin_data: clone})
      // await this.wait(100)
      return bitcoin_data
    }catch(e){
      console.log('coin', e)
    }
    
  }

  get_bitcoin_wallet = async (mnemonic, network, path) => {
    const seed = mnemonicToSeedSync(mnemonic); 
    const master = bitcoin.HDNode.fromSeedBuffer(seed, network);
    const derived = master.derivePath(path);
    const address = derived.getAddress();
    const privateKey = derived.keyPair.toWIF();
    return {address: address, privateKey: privateKey}

    
  }

  get_bitcoin_utxos = async (address) => {
    var request = `https://blockchain.info/unspent?active=${address}`
    // if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('existential:',response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return {}
      }
      var data = await response.text();
      return JSON.parse(data);
    }
    catch(e){
      console.log('existential:', e)
      return {}
    }
  }

  get_total_bitcoin_balance_from_utxos(utxos){
    var bal = 0
    if(utxos['unspent_outputs'] == null) return
    utxos['unspent_outputs'].forEach(utxo => {
      bal += utxo['value'];
    });
    return bal;
  }

  get_bitcoin_fees = async () => {
    var request = `https://api.blockcypher.com/v1/btc/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 14.37
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return (parsed_obj['medium_fee_per_kb'] / 1024)
    }
    catch(e){
      console.log('coin',e)
      return 14.37
    }
  }

  update_bitcoin_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['BTC']['address']
    var utxos = await this.get_bitcoin_utxos(address)
    var balance = this.get_total_bitcoin_balance_from_utxos(utxos)
    var fees = await this.get_bitcoin_fees()
    clone['BTC']['balance'] = balance
    clone['BTC']['utxos'] = utxos
    clone['BTC']['fee']['fee'] = fees
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_bitcoin_cash_wallet_info = async (seed) =>{
    try{
      const network = bitcoin.networks.bitcoin;
      const path = "m/44'/145'/0'/0/0" // bitcoin cash mainnet
      var wallet = await this.get_bitcoin_wallet(seed, network, path)
      const address = wallet.address
      var utxos = await this.get_bitcoin_cash_utxos(address)
      var balance = this.get_total_bitcoin_cash_balance_from_utxos(utxos)

      var fee_info = {'fee':await this.get_bitcoin_cash_fees(), 'type':'variable', 'per':'byte'}
      var bitcoin_cash_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
      // var clone = structuredClone(this.state.coin_data)
      // clone['BCH'] = bitcoin_cash_data;
      // this.setState({coin_data: clone})
      // await this.wait(100)
      return bitcoin_cash_data
    }catch(e){
      console.log('coin', e)
    }
    
  }

  get_bitcoin_cash_utxos = async (address) => {
    var request = `https://api.fullstack.cash/v5/electrumx/utxos/${address}`
    // if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return {}
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return {}
    }
  }

  get_total_bitcoin_cash_balance_from_utxos(utxos){
    var bal = 0
    if(utxos['utxos'] == null) return 0
    utxos['utxos'].forEach(utxo => {
      bal += utxo['value'];
    });
    return bal;
  }

  get_bitcoin_cash_fees = async () => {
    return (0.0000015 * 100_000_000)
  }

  update_bitcoin_cash_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['BCH']['address']
    var utxos = await this.get_bitcoin_cash_utxos(address)
    var balance = this.get_total_bitcoin_cash_balance_from_utxos(utxos)
    clone['BCH']['balance'] = balance
    clone['BCH']['utxos'] = utxos
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_litecoin_wallet_info = async (seed) => {
    const network = bitcoin.networks.litecoin;
    const path = "m/44'/2'/0'/0/0" // litecoin mainnet
    var wallet = await this.get_bitcoin_wallet(seed, network, path)
    const address = wallet.address

    var utxos = await this.get_litecoin_utxos(address)
    var balance = this.get_total_litecoin_balance_from_utxos(utxos)

    var fee_info = {'fee':await this.get_litecoin_fees(), 'type':'variable', 'per':'byte'}

    var litecoin_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['LTC'] = litecoin_data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return litecoin_data
  }

  get_litecoin_utxos = async (address) => {
    const request = `https://litecoinspace.org/api/address/${address}/utxo`
    if(!this.is_address_set(address)) return []
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        return []
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return []
    }

  }

  get_total_litecoin_balance_from_utxos(utxos){
    var bal = 0
    if(utxos.length == 0) return 0
    utxos.forEach(utxo => {
      bal += utxo['value'];
    });
    return bal;
  }

  get_litecoin_fees = async () => {
    var request = `https://api.blockcypher.com/v1/ltc/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 32.5
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return parsed_obj['medium_fee_per_kb'] / 1024
    }
    catch(e){
      console.log('coin',e)
      return 32.5
    }
  }

  update_litecoin_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['LTC']['address']
    var utxos = await this.get_litecoin_utxos(address)
    var balance = this.get_total_litecoin_balance_from_utxos(utxos)
    clone['LTC']['balance'] = balance
    clone['LTC']['utxos'] = utxos
    clone['LTC']['fee']['fee'] = await this.get_litecoin_fees()
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_dogecoin_wallet_info = async (seed) => {
    const network = {
      messagePrefix: '\x19Dogecoin Signed Message:\n',
      // bech32: null,
      bip32: {
        public: 0x02facafd,  // Public key (xpub) prefix
        private: 0x02fac398  // Private key (xprv) prefix
      },
      pubKeyHash: 0x1e,      // Starts with 'D' for mainnet
      scriptHash: 0x16,      // Starts with '9' or 'A' for mainnet
      wif: 0x9e,             // WIF (Wallet Import Format) prefix
    };
    const wallet = await this.make_dogecoin_wallet(seed, network)
    const address = wallet.address
    
    var utxos = await this.get_dogecoin_utxos(address)
    const balance = this.get_total_dogecoin_balance_from_utxos(utxos)

    var fee_info = {'fee':await this.get_dogecoin_fees(), 'type':'variable', 'per':'byte'}

    var dogecoin_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['DOGE'] = dogecoin_data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return dogecoin_data
  }

  make_dogecoin_wallet = async (mnemonic, network) => {
    const path = "m/44'/3'/0'/0/0"
    const seed = mnemonicToSeedSync(mnemonic);
    const master = bitcoin.HDNode.fromSeedBuffer(seed, network)
    const derived = master.derivePath(path);
    const address = derived.getAddress();
    const privateKey = derived.keyPair.toWIF();
    return {address: address, privateKey: privateKey}
  }

  get_dogecoin_utxos = async (address) => {
    var key = `${process.env.REACT_APP_DOGECOIN_API_KEY}`;
    const request = `https://xdg-mainnet.gomaestro-api.org/v0/addresses/${address}/utxos?count=100`
    var header = {
      headers: {
        'Accept': 'application/json',
        'api-key': key
      }
    }
    if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request, header);
      if (!response.ok) {
        console.log(response)
        return {}
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return {}
    }
  }

  get_total_dogecoin_balance_from_utxos(utxos){
    var bal = 0
    if(utxos['data'] == null) return 0;
    utxos['data'].forEach(utxo => {
      bal += parseInt(utxo['satoshis']);
    });
    return bal;
  }

  get_dogecoin_fees = async () => {
    var request = `https://api.blockcypher.com/v1/doge/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 1600000
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return parsed_obj['medium_fee_per_kb'] / 1024
    }
    catch(e){
      console.log('coin', e)
      return 1600000
    }
  }

  update_dogecoin_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['DOGE']['address']
    var utxos = await this.get_dogecoin_utxos(address)
    const balance = this.get_total_dogecoin_balance_from_utxos(utxos)
    clone['DOGE']['balance'] = balance
    clone['DOGE']['utxos'] = utxos
    clone['DOGE']['fee']['fee'] = await this.get_dogecoin_fees()
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_dash_wallet_info = async (seed) => {
    const network = {
      messagePrefix: '\x19Dash Signed Message:\n',
      bip32: {
        public: 0x02fe52f8, // xpub prefix for Dash
        private: 0x02fe52cc // xprv prefix for Dash
      },
      pubKeyHash: 0x4c,      // P2PKH addresses start with 'X'
      scriptHash: 0x10,      // P2SH addresses start with '7'
      wif: 0xcc              // WIF starts with 'X' for Dash
    };
    const wallet = await this.make_dash_wallet(seed, network)
    const address = wallet.address

    var utxos = await this.get_dash_utxos(address)
    const balance = this.get_total_dash_balance_from_utxos(utxos)

    var fee_info = {'fee':await this.get_dash_fees(), 'type':'variable', 'per':'byte'}
    var dash_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
    
    // var clone = structuredClone(this.state.coin_data)
    // clone['DASH'] = dash_data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return dash_data
  }

  make_dash_wallet = async (mnemonic, network) => {
    const path = "m/44'/5'/0'"
    const seed = mnemonicToSeedSync(mnemonic);

    const master = bitcoin.HDNode.fromSeedBuffer(seed, network)
    const derived = master.derivePath(path);
    const address = derived.getAddress();
    const privateKey = derived.keyPair.toWIF();
    return {address: address, privateKey: privateKey}
  }

  get_dash_utxos = async (address) => {
    const request = `https://insight.dash.org/insight-api/addr/${address}/utxo`
    if(!this.is_address_set(address)) return []
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
        return []
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return []
    }
  }

  get_total_dash_balance_from_utxos(utxos){
    var bal = 0
    utxos.forEach(utxo => {
      bal += parseInt(utxo['satoshis']);
    });
    return bal;
  }

  get_dash_fees = async () => {
    var request = `https://api.blockcypher.com/v1/dash/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('coin',response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 100
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return parsed_obj['medium_fee_per_kb'] / 1024
    }
    catch(e){
      console.log('coin',e)
      return 100
    }
  }

  update_dash_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['DASH']['address']
    var utxos = await this.get_dash_utxos(address)
    const balance = this.get_total_dash_balance_from_utxos(utxos)
    clone['DASH']['balance'] = balance
    clone['DASH']['utxos'] = utxos
    clone['DASH']['fee']['fee'] = await this.get_dash_fees()
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_tron_wallet_info = async (seed) => {
    var wallet = await this.make_tron_wallet(seed)
    const address = wallet.address
    const balance = await this.get_tron_balance(address, wallet.tronWeb);

    var fee_info = {'fee':await this.get_tron_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':1_000_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['TRX'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  make_tron_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    var key = `${process.env.REACT_APP_TRON_API_KEY}`;
    const hdNode = ethers.utils.HDNode.fromSeed(seed);
    const w = new ethers.Wallet(hdNode.privateKey);

    var private_key = w.privateKey.toString().slice(2)
    const tronWeb = new TronWeb({
      fullHost: 'https://api.trongrid.io',
      headers: { 'TRON-PRO-API-KEY': key },
      privateKey: private_key
    });

    const wallet = tronWeb.defaultAddress.base58
    return {address: wallet, privateKey: private_key, tronWeb:tronWeb}
  }

  get_tron_balance = async (address, tronWeb) => {
    if(!this.is_address_set(address)) return 0
    try{
      const balance = await tronWeb.trx.getBalance(address);
      return balance
    }catch(e){
      console.log(e)
      return 0
    }
  }

  get_tron_transaction_fee = async () => {
    return 1_100_000
  }

  update_tron_balance = async (clone) => {
    var wallet = await this.make_tron_wallet('hello world')
    const address = clone['TRX']['address']
    const balance = await this.get_tron_balance(address, wallet.tronWeb);
    clone['TRX']['balance'] = balance
    return clone
  }




  get_and_set_xrp_wallet_info = async (seed) => {
    const client = new xrpl.Client("wss://xrplcluster.com/")
    await client.connect()
    const wallet = await this.make_xrp_wallet(seed)
    const address = wallet['classicAddress']

    const balance = await this.get_xrp_balance(address, client)
    await client.disconnect()

    var fee_info = {'fee':await this.get_xrp_transaction_fee(), 'type':'fixed', 'per':'transaction'}

    var data = {'balance':balance, 'address':address, 'min_deposit':10_000_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['XRP'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  make_xrp_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    const hdNode = ethers.utils.HDNode.fromSeed(seed);
    const w = new ethers.Wallet(hdNode.privateKey);
    var private_key = w.privateKey.toString()
    const rs_api = require('ripple-secret-codec')
    const secret_from_hex_seed = rs_api.encodeHex(private_key)
    
    const test_wallet = xrpl.Wallet.fromSeed(secret_from_hex_seed['secret_b58'])
    console.log(test_wallet)

    /* 
    {
        "publicKey": "ED27F84605FB92FF678F42B5E20C392BA7FFBF26FDD5F6D929753B01AD603EA507",
        "privateKey": "ED8D2336E46F4E7B4FF341367CEE4C66D6163FA875BB06810EE9F1C35363F82EA0",
        "classicAddress": "rfpQdN77NiBM4igPW1Rah3KogmaXMJiys3",
        "seed": "spj8jWNZxCjQ7WndBWkkMsdHnFQem"
    }
    */
    
    return test_wallet
  }

  get_xrp_balance = async (address, client) => {
    var balance = 0
    if(!this.is_address_set(address)) return 0
    try{
      const response = await client.request({
        "command": "account_info",
        "account": address,
        "ledger_index": "validated"
      })
      balance = parseInt(response['result']['account_data']['Balance'])
    }catch(e){
      console.log(e)
    }
    return balance
  }

  get_xrp_transaction_fee = async () => {
    return 10
  }

  update_xrp_balance = async (clone) => {
    const client = new xrpl.Client("wss://xrplcluster.com/")
    await client.connect()
    // var clone = structuredClone(this.state.coin_data)
    const address = clone['XRP']['address']
    const balance = await this.get_xrp_balance(address, client)
    await client.disconnect()
    clone['XRP']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_xlm_wallet_info = async (seed) => {
    const server = new StellarSdk.Horizon.Server("https://horizon.stellar.org/")
    const wallet = await this.make_xlm_wallet(seed)
    const address = wallet.publicKey()
    var account = await this.load_xlm_account_info(address, server)
    const balance = this.get_xlm_balance_from_address(account)

    var fee_info = {'fee':await this.get_xlm_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':10_000_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['XLM'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  make_xlm_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    var buff = Buffer.from(seed.toString('hex').substring(0, 32))
    const pair = StellarSdk.Keypair.fromRawEd25519Seed(buff)
    // var pub_key = pair.publicKey()
    return pair
  }

  load_xlm_account_info = async (address, server) => {
    try {
      const account = await server.loadAccount(address);
      return account;
    } catch (error) {
      return null
    }
  }

  get_xlm_balance_from_address(account){
    var balance = 0
    if(account != null){
      account['balances'].forEach(b => {
        if(b['asset_type'] == 'native'){
          balance = (parseFloat(b['balance']) * 10000000)
        }
      });
    }
    return balance
  }

  get_xlm_transaction_fee = async () => {
    return 100
  }

  update_xlm_balance = async (clone) => {
    const server = new StellarSdk.Horizon.Server("https://horizon.stellar.org/")
    // var clone = structuredClone(this.state.coin_data)
    const address = clone['XLM']['address']
    var account = await this.load_xlm_account_info(address, server)
    const balance = this.get_xlm_balance_from_address(account)
    clone['XLM']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_dot_wallet_info = async (seed1) => {
    // var seed = seed1
    // const wallet = await this.generate_dot_wallet(seed)
    // const address = wallet.dot_address
    // const wsProvider = new WsProvider('wss://polkadot-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;
    // const existential_deposit = await this.get_existential_dot_deposit(api)
    // const address_balance = await this.get_dot_balance(address, api)
    // await api.disconnect()

    // var fee_info = {'fee':await this.get_dot_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    // var data = {'balance':address_balance, 'address':address, 'min_deposit':existential_deposit.toString(), 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['DOT'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    // return data
  }

  generate_dot_wallet = async (mnemonic) => {
    // await waitReady();
    // const keyring = new Keyring({ type: 'sr25519' });
    
    // const keys = keyring.addFromMnemonic(mnemonic)
    // const public_address = encodeAddress(keys.publicKey, 0) //2 is Kusama
    // return {keys: keys, dot_address: public_address}
  }

  get_dot_balance = async (address, api) => {
    // if(!this.is_address_set(address)) return 0
    // try{
    //   const { nonce, data: balance } = await api.query.system.account(address);
    //   const address_balance = (balance.free.toString())
    //   return address_balance
    // }catch(e){
    //   console.log(e)
    //   return 0
    // }
  }

  get_existential_dot_deposit = async (api) => {
    // try{
    //   return api.consts.balances.existentialDeposit.toNumber()
    // }catch(e){
    //   console.log(e)
    // }
  }

  get_dot_transaction_fee = async () => {
    return (0.015 * 10_000_000_000)
  }

  update_dot_balance = async (clone) => {
    // // var clone = structuredClone(this.state.coin_data)
    // const address = clone['DOT']['address']
    // const wsProvider = new WsProvider('wss://polkadot-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;
    // const address_balance = await this.get_dot_balance(address, api)
    // await api.disconnect()
    // clone['DOT']['balance'] = address_balance
    // // this.setState({coin_data: clone})
    // return clone
  }




  get_and_set_kusama_wallet_info = async (seed) => {
    // const wallet = await this.generate_ksm_wallet(seed)
    // const address = wallet.ksm_address
    // const wsProvider = new WsProvider('wss://kusama-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady
    // const existential_deposit = await this.get_existential_ksm_deposit(api)
    // const balance = await this.get_ksm_balance(address, api)
    // await api.disconnect()

    // var fee_info = {'fee':await this.get_ksm_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    // var data = {'balance':balance, 'address':address, 'min_deposit':existential_deposit.toString(), 'fee':fee_info}
    // // var clone = structuredClone(this.state.coin_data)
    // // clone['KSM'] = data;
    // // this.setState({coin_data: clone})
    // // await this.wait(100)
    // return data
  }

  generate_ksm_wallet = async (mnemonic) => {
    // await waitReady();
    // const keyring = new Keyring({ type: 'sr25519' });
    // const keys = keyring.addFromMnemonic(mnemonic)
    // const public_address = encodeAddress(keys.publicKey, 2) //2 is Kusama
    // return {keys: keys, ksm_address: public_address}
  }

  get_ksm_balance = async (address, api) => {
    // if(!this.is_address_set(address)) return 0
    // try{
    //   const { nonce, data: balance } = await api.query.system.account(address);
    //   const address_balance = (balance.free.toString())
    //   return address_balance
    // }catch(e){
    //   console.log(e)
    //   return 0
    // }
  }

  get_existential_ksm_deposit = async (api) => {
    // try{
    //   return api.consts.balances.existentialDeposit.toNumber()
    // }catch(e){
    //   console.log(e)
    // }
  }

  get_ksm_transaction_fee = async () => {
    return (0.01 * 1_000_000_000_000)
  }

  update_ksm_balance = async (clone) => {
    // const address = clone['KSM']['address']
    // const wsProvider = new WsProvider('wss://kusama-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;
    // const address_balance = await this.get_ksm_balance(address, api)
    // await api.disconnect()
    // clone['KSM']['balance'] = address_balance
    // return clone
  }




  get_and_set_algorand_wallet_info = async (seed) => {
    const wallet = await this.generate_algo_wallet(seed)
    const address = wallet.addr.toString()
    
    const algodServer = 'https://mainnet-api.4160.nodely.dev';
    const algodPort = 443;
    const algodClient = new algosdk.Algodv2('', algodServer, algodPort);

    const acctInfo = await algodClient.accountInformation(address).do();
    const balance = (acctInfo.amount.toString())

    var fee_info = {'fee':await this.get_algo_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':100_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['ALGO'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_algo_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    const account = algosdk.secretKeyToMnemonic(Buffer.from(seed.toString('hex')));
    const recoveredAccount = algosdk.mnemonicToSecretKey(account);
    const address = recoveredAccount.addr.toString()
    return recoveredAccount
  }

  get_algo_transaction_fee = async () => {
    return (0.001 * 1_000_000)
  }

  update_algorand_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['ALGO']['address']

    const algodServer = 'https://mainnet-api.4160.nodely.dev';
    const algodPort = 443;
    const algodClient = new algosdk.Algodv2('', algodServer, algodPort);

    const acctInfo = await algodClient.accountInformation(address).do();
    const balance = (acctInfo.amount.toString())
    clone['AlGO']['balance'] = balance
    // this.setState({coin_dcloneata: clone})
    return clone
  }




  get_and_set_tezos_wallet_info = async (seed) => {
    const wallet = await this.generate_tezos_wallet(seed)
    const Tezos = new TezosToolkit('https://mainnet.ecadinfra.com');
    Tezos.setProvider({ signer: wallet });
    const address = await Tezos.signer.publicKeyHash();
    const balance = (await Tezos.tz.getBalance(address)).toString()

    var fee_info = {'fee':await this.get_tezos_transaction_fee(), 'type':'variable', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['XTZ'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_tezos_wallet = async (mnemonic) => {
    await sodium.ready;
    const seed = sodium.crypto_generichash(32, sodium.from_string(mnemonic));
    const keyPair = sodium.crypto_sign_seed_keypair(seed);
    const privateKey = b58cencode(keyPair.privateKey.slice(0, 64), prefix.edsk);
    const signer = await InMemorySigner.fromSecretKey(privateKey);
    return signer
  }

  get_tezos_transaction_fee = async () => {
    return (0.064544 * 1_000_000)
  }

  update_tezos_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['XTZ']['address']
    const Tezos = new TezosToolkit('https://mainnet.ecadinfra.com');
    const balance = (await Tezos.tz.getBalance(address)).toString()
    clone['XTZ']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_cosmos_wallet_info = async (seed) => {
    const wallet = await this.generate_atom_wallet(seed)
    const address = wallet.cosmosAddress
    const rpc = "https://cosmos-rpc.publicnode.com:443"
    const client = await StargateClient.connect(rpc)
    const balance = await this.get_atom_address_balance(address, client)
    client.disconnect()

    var fee_info = {'fee':await this.get_atom_transaction_fee(), 'type':'variable', 'per':'transaction'}
    var data = {'balance':(balance.toString()), 'address':address, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['ATOM'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_atom_wallet = async (mnemonic) => {
    const hash = sha256(Buffer.from(mnemonic));
    const privateKey = await Secp256k1.makeKeypair(hash)
    const wallet = await DirectSecp256k1Wallet.fromKey(privateKey.privkey, "cosmos")
    const address = (await wallet.getAccounts())[0].address

    return {keys: privateKey, cosmosAddress:address, wall: wallet}
  }

  get_atom_address_balance = async (address, client) => {
    const balance = await client.getAllBalances(address)
    var bal = 0;
    balance.forEach(item => {
      if(item['denom'] == "uatom"){
        bal = parseInt(item['amount'])
      }
    });
    return bal
  }

  get_atom_transaction_fee = async () => {
    return (0.00640 * 1_000_000)
  }

  update_cosmos_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['ATOM']['address']

    const rpc = "https://cosmos-rpc.publicnode.com:443"
    const client = await StargateClient.connect(rpc)
    const balance = await this.get_atom_address_balance(address, client)
    client.disconnect()

    clone['ATOM']['balance'] = balance;
    // this.setState({coin_data: clone})
    return clone
  }







  get_and_set_solana_wallet_info = async (seed) => {
    const wallet = await this.generate_sol_wallet(seed)
    const address = wallet.address

    var key = `${process.env.REACT_APP_SOLANA_API_KEY}`
    const connection = new Connection(`https://mainnet.helius-rpc.com/?api-key=${key}`);
    const balance = await this.get_solana_address_balance(address, connection)
    
    var fee_info = {'fee':await this.get_sol_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['SOL'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_sol_wallet = async (mnemonic) => {
    const seed = await mnemonicToSeed(mnemonic);
    const derivationPath = "m/44'/501'/0'";
    const derivedSeed = derivePath(derivationPath, seed.toString('hex')).key;
    const keypair = Keypair.fromSeed(derivedSeed);
    return {address: keypair.publicKey.toBase58(), keypair: keypair}
  }

  get_solana_address_balance = async (address, connection) => {
    if(!this.is_address_set(address)) return 0
    try{
      const publicKey = new PublicKey(address);
      return await connection.getBalance(publicKey);
    }
    catch(e){
      console.log(e)
      return 0
    }
  }

  get_sol_transaction_fee(){
    return 5000
  }

  update_solana_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['SOL']['address']
    
    var key = `${process.env.REACT_APP_SOLANA_API_KEY}`
    const connection = new Connection(`https://mainnet.helius-rpc.com/?api-key=${key}`);
    const balance = await this.get_solana_address_balance(address, connection)

    clone['SOL']['balance'] = balance;
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_aptos_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_aptos_wallet(seed)
      const address = wallet.address
      const NODE_URL = 'https://fullnode.mainnet.aptoslabs.com/v1'; 
      const client = new AptosClient(NODE_URL);
      const balance = await this.get_aptos_wallet_balance(wallet.address, client)
      const network_fee = await this.get_aptos_gas_prices(client)
      
      var fee_info = {'fee':network_fee, 'type':'fixed', 'per':'transaction'}
      var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info}
      // var clone = structuredClone(this.state.coin_data)
      // clone['APT'] = data;
      // this.setState({coin_data: clone})
      // await this.wait(100)
      return data
    }catch(e){
      console.log('coin',e)
    }
    
  }

  generate_aptos_wallet = async (mnemonic) => {
    const seed = await mnemonicToSeed(mnemonic);
    const path = "m/44'/637'/0'/0'/0'"
    const { key } = derivePath(path, Buffer.from(seed).toString('hex'));
    const account = new AptosAccount(key);

    return {address: account.address().toString(), account: account}
  }

  get_aptos_wallet_balance = async (address, client) => {
    try{
      const resource = await client.getAccountResource(address, '0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>');
      console.log(resource)
      const balance = resource.data.coin.value;
      return balance;
    }catch(e){
      console.log(e)
      return 0
    }
  }

  get_aptos_gas_prices = async (client) => {
    return 0.000009 * 100_000_000
  }

  update_aptos_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['APT']['address']

    const NODE_URL = 'https://fullnode.mainnet.aptoslabs.com/v1'; 
    const client = new AptosClient(NODE_URL);
    const balance = await this.get_aptos_wallet_balance(address, client)

    clone['APT']['balance'] = balance;
    // this.setState({coin_data: clone})
    return clone
  }



  




  get_and_set_cardano_wallet_info = async (seed) => {
    // try{
    //   const wallet = await this.generate_cardano_wallet(seed)
    //   const address = wallet.address
    //   const balance_and_utxos = await this.get_cardano_wallet_balance(wallet)
    //   const fees = await this.get_cardano_transaction_fees(wallet, balance_and_utxos)

    //   var fee_info = {'fee':fees, 'type':'fixed', 'per':'transaction'}
    //   var data = {'balance':balance_and_utxos.balance, 'address':address,'utxos':balance_and_utxos.utxos, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
    //   return data
    // }catch(e){
    //   console.log('coin',e)
    // }
  }

  generate_cardano_wallet = async (mnemonic) => {
    // var hash = await this.generate_hash(mnemonic)
    // let bytes = Buffer.from(hash, "utf8");
    // if (bytes.length < 16) {
    //   bytes = Buffer.concat([bytes, Buffer.alloc(16 - bytes.length)]); // Pad with zeros
    // } else if (bytes.length > 16) {
    //   bytes = bytes.slice(0, 16); // Trim excess bytes
    // }
    // const mnemonic_entropy = bytes.toString("hex");
    // const new_mnemonic = entropyToMnemonic(mnemonic_entropy);

    // const key = `${process.env.REACT_APP_BLOCKFROST_KEY}`
    // const blockfrost = new Blockfrost("https://cardano-mainnet.blockfrost.io/api/v0", key)
    // const lucid = await Lucid( blockfrost, "Mainnet" );
    // lucid.selectWallet.fromSeed(new_mnemonic);
    // const address = await lucid.wallet().address();

    // return {address: address, lucid: lucid}
  }

  generate_hash = async (data) => {
    // Encode the data as a Uint8Array
    const encoder = new TextEncoder();
    const encodedData = encoder.encode(data);
    // Generate the hash using the SubtleCrypto API
    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedData);
    // Convert the hash to a hexadecimal string
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');

    return hashHex.substring(0, 64);
  }

  get_cardano_wallet_balance = async (wallet) => {
    // const wallet_utxos = await wallet.lucid.wallet().getUtxos();
    // var total_balance = bigInt(0)
    // wallet_utxos.forEach(utxo => {
    //   var assets = utxo['assets']
    //   var lovelace = assets['lovelace']
    //   if(lovelace != null){
    //     total_balance = bigInt(total_balance).plus(lovelace)
    //   }
    // });
    // return {balance: total_balance, utxos: wallet_utxos}
  }

  get_cardano_transaction_fees = async (wallet, balance_and_utxos) => {
    // if(balance_and_utxos.utxos.length > 0){
    //   var test_recipient = 'addr1qy80v2j6xpk7zgrqv74c6lt55nw5ppkc34cwd0vxf247rk7lu29fpk40pdwalsjjrp9dlwvwhp7jg8v9g24lmnfh9tcqfq7f90'
    //   const draftTx = await wallet.lucid.newTx()
    //   .pay.ToAddress(test_recipient, { lovelace: 1n })
    //   .complete();
    //   const fee = (await draftTx.complete()).toTransaction().body().fee();
    //   return fee
    // }else{
    //   return 168_317
    // }
  }

  update_ada_balance = async (clone) => {
    // var wallet = clone['ADA']['wallet']
    // const balance_and_utxos = await this.get_cardano_wallet_balance(wallet)
    // const fees = await this.get_cardano_transaction_fees(wallet, balance_and_utxos)
    // clone['ADA']['balance'] = balance_and_utxos.balance;
    // clone['ADA']['utxos'] = balance_and_utxos.utxos;
    // clone['ADA']['fee']['fee'] = fees;
    // return clone
  }








  get_and_set_stacks_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_stacks_wallet(seed)
      const address = wallet.address
      const balance_object = await this.fetch_stacks_balance(wallet.address)
      const nonce = balance_object.nonce
      const balance = parseInt(balance_object.balance, 16);
      
      const fees_obj = await this.fetch_stacks_network_fees()
      const fees = fees_obj * 200

      var fee_info = {'fee':fees, 'type':'variable', 'per':'transaction'}
      var data = {'balance':bigInt(balance), 'address':address,'nonce':nonce, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
      return data
    }catch(e){
      console.log('coin',e)
    }
  }

  generate_mnemonic_from_seed = async (mnemonic) => {
    var hash = await this.generate_hash(mnemonic)
    let bytes = Buffer.from(hash, "utf8");
    if (bytes.length < 16) {
      bytes = Buffer.concat([bytes, Buffer.alloc(16 - bytes.length)]); // Pad with zeros
    } else if (bytes.length > 16) {
      bytes = bytes.slice(0, 16); // Trim excess bytes
    }
    const mnemonic_entropy = bytes.toString("hex");
    return entropyToMnemonic(mnemonic_entropy); 
  }

  generate_stacks_wallet = async (mnemonic) => {
    const wallet_skd = require('@stacks/wallet-sdk');
    var entropic_mnemonic = await this.generate_mnemonic_from_seed(mnemonic)
    const wallet = await wallet_skd.generateWallet({
      secretKey: entropic_mnemonic,
      password: '',
    });
    const address = getAddressFromPrivateKey(wallet.accounts[0].stxPrivateKey, STACKS_MAINNET);
    return {wallet: wallet, address: address}
  }

  fetch_stacks_balance = async (address) => {
    const STACKS_API = 'https://api.mainnet.hiro.so';
    const request = `${STACKS_API}/v2/accounts/${address}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return null
    }
  }

  fetch_stacks_network_fees = async () => {
    const STACKS_API = 'https://api.mainnet.hiro.so';
    const request = `${STACKS_API}/v2/fees/transfer`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return null
    }
  }

  update_stacks_balance = async (clone) => {
    var address = clone['STX']['address']
    const balance_object = await this.fetch_stacks_balance(address)
    const nonce = balance_object.nonce
    const balance = parseInt(balance_object.balance, 16);
    clone['STX']['balance'] = balance;
    clone['STX']['nonce'] = nonce;
    return clone
  }











  get_and_set_arweave_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_arweave_wallet(seed)
      const address = wallet.address
      const balance = await arweave.wallets.getBalance(wallet.address)
      const fees = await this.estimate_arweave_network_fees('-zdLm14FOLtTWxTEVzhh2N9AGCnW_-O_6DIcLxgk-W0')

      var fee_info = {'fee':fees, 'type':'fixed', 'per':'transaction'}
      var data = {'balance':bigInt(balance), 'address':address, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
      return data
    }catch(e){
      console.log('coin',e)
    }
  }

  generate_arweave_wallet = async (mnemonic) => {
    var entropic_mnemonic = await this.generate_mnemonic_from_seed(mnemonic)
    let wallet = await getKeyFromMnemonic(entropic_mnemonic)
    const address = await arweave.wallets.jwkToAddress(wallet);
    return { key: wallet, address: address };
  }

  estimate_arweave_network_fees = async (target) => {
    const key = await arweave.wallets.generate();
    const tx = await arweave.createTransaction({
      target: target,
      quantity: arweave.ar.arToWinston('1')
    }, key);
    return tx.reward
  }

  update_arweave_balance = async (clone) => {
    var address = clone['AR']['address']
    const balance = await arweave.wallets.getBalance(address)
    const fees = await this.estimate_arweave_network_fees('-zdLm14FOLtTWxTEVzhh2N9AGCnW_-O_6DIcLxgk-W0')
    clone['AR']['balance'] = balance;
    clone['AR']['fee']['fee'] = fees;
    return clone
  }







  

  //unused
  get_transaction_history = async (account) => {
    const web3 = new Web3(this.get_selected_web3_url());
    
    let block = await web3.eth.getBlock('latest');
    this.setState({current_block: block});

    let number = block.number;
    const targetAddress = account.address;
    var transactions = []
    var start = 0;
    const blocks_checked = 50;
    if(number > blocks_checked){
      start = number - blocks_checked
    }
    for (let i = start; i <= number; i++) {
      web3.eth.getBlock(i).then(block => {
        let txs = block.transactions;
        if (block != null && txs != null) {
          for (let txHash of txs) {

            web3.eth.getTransaction(txHash).then(tx => {
              if (targetAddress == tx.to || targetAddress == tx.from) {
                transactions.push(tx)
                const sortedData = this.sortByAttributeDescending(transactions, 'blockNumber');
                this.setState({account_transaction_history: sortedData})
              }
            })
            
          }
        }
      });
    }
  }

  sortByAttributeDescending(array, attribute) {
      return array.sort((a, b) => {
          if (a[attribute] < b[attribute]) {
          return 1;
          }
          if (a[attribute] > b[attribute]) {
          return -1;
          }
          return 0;
      });
  }





  load_coin_and_ether_coin_prices = async () => {
    var api_key = `${process.env.REACT_APP_COINAPI_KEY}`;
    var assets = this.get_all_coin_and_ether_symbols()
    const assetFilter = assets.join(',');
    var request = `https://rest.coinapi.io/v1/assets?filter_asset_id=${assetFilter}`
    
    var body = {
      method: "GET", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json", // Set content type to JSON
        "X-CoinAPI-Key": api_key
      },
    }

    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var json_data = JSON.parse(data)
      var price_data = {}
      for(var i=0; i<json_data.length; i++){
        var asset_id = json_data[i].asset_id
        var asset_name = json_data[i].name
        var price_usd = json_data[i].price_usd
        var volume_1day_usd = json_data[i].volume_1day_usd
        var volume_1hrs_usd = json_data[i].volume_1hrs_usd
        if(price_usd != null){
          var data = {'id':asset_id, 'name':asset_name, 'price':price_usd, 'day_volume':volume_1day_usd, 'hour_volume':volume_1hrs_usd}
          price_data[asset_id] = data
        }
      }
      this.setState({asset_price_data: price_data})
    }
    catch(e){

    }
  }

  get_all_coin_and_ether_symbols(){
    var all_symbols = []
    this.state.e5s['data'].forEach(e5 => {
      var symbol = this.state.e5s[e5].token
      all_symbols.push(symbol)
    });
    var coins = this.state.coins
    for (const coin in coins) {
        if (coins.hasOwnProperty(coin)) {
          all_symbols.push(coin)
        }
    }
    return all_symbols
  }

  check_if_beacon_node_is_online = async () => {
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    var request = `${beacon_node}/marco`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == true){
        console.log('beacon node online!')
        this.setState({beacon_node_enabled: true, beacon_data: obj})
      }
    }
    catch(e){
      // console.log(e)
    }
  }

  get_browser_cache_size_limit(){
        if (localStorage && !localStorage.getItem('size')) {
            var i = 0;
            try {
                // Test up to 10 MB
                for (i = 250; i <= 10000; i += 250) {
                    localStorage.setItem('test', new Array((i * 1024) + 1).join('a'));
                }
            } catch (e) {
                localStorage.removeItem('test');
                localStorage.setItem('size', i - 250);            
            }
        }
        return localStorage.getItem('size')
  }

  start_get_accounts_data = async (is_synching, should_skip_account_data) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      await this.start_get_accounts_for_specific_e5(is_synching, e5, should_skip_account_data)
    }
  }

  start_get_accounts_for_specific_e5 = async (is_syncing, e5, should_skip_account_data) =>{
    var web3_url = this.get_web3_url_from_e5(e5)
    var e5_address = this.state.e5s[e5].e5_address;
    var account_for_e5 = this.state.accounts[e5]
    if(web3_url != ''){
      this.get_wallet_data(account_for_e5, is_syncing, web3_url, e5_address, e5)
      await this.wait(300)
      if(this.get_contract_from_e5(e5) != ''){
        this.get_all_events_from_e5(account_for_e5, is_syncing, web3_url, e5_address, e5, should_skip_account_data)
      }
    }
  }

  load_all_event_data = async (_web3, contract_instance, event_id, e5, filter, starting_block) => {
    var web3 = this.get_web3_instance_from_e5(e5)
    var latest = await web3.eth.getBlockNumber()
    var events = []
    var iteration = this.get_iteration(e5)
    if(this.log_directory == null) this.log_directory = {}
    
    if(latest - starting_block < iteration){
      events = await contract_instance.getPastEvents(event_id, { fromBlock: starting_block, toBlock: 'latest' }, (error, events) => {});
    }
    else{
      var pos = starting_block
      while (pos < latest) {
        var to = pos+iteration < latest ? pos+iteration : latest
        var from = pos

        // await this.wait(10)
        events = events.concat(await contract_instance.getPastEvents(event_id, { fromBlock: from, toBlock: to }, (error, events) => {}))

        pos = to+1
      }
    }

    if(this.from == null) this.from = {}
    this.from[e5] = latest

    return events
  }

  //needs revision
  load_event_data = async (_web3, contract_instance, event_id, e5, filter) => {
    if(this.state.beacon_node_enabled == true){
      return await this.load_events_from_nitro(_web3, contract_instance, event_id, e5, filter)
    }

    var focused_events = this.e5_events[e5]

    if(contract_instance['_address'] == this.e5_contract_addresses[e5][1]){
      focused_events = this.e52_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][2]){
      focused_events = this.f5_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][3]){
      focused_events = this.g5_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][4]){
      focused_events = this.g52_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][5]){
      focused_events = this.h5_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][6]){
      focused_events = this.h52_events[e5]
    }

    var filtered_events = []
    // focused_events.forEach(event => {
    //   var accepted = true
    //   if(event['event'] != event_id){
    //     accepted = false
    //   }

    //   if(accepted == true){
    //     for (const key in filter) {
    //       if(filter[key] instanceof Array){
    //         if(!filter[key].includes(event['returnValues'][key])){
    //           accepted = false
    //         }
    //       }else{
    //         if(event['returnValues'][key] != filter[key]){
    //           accepted = false
    //         }
    //       }
          
    //     }
    //   }
      
    //   if(accepted){
    //     filtered_events.push(event)
    //   }
    // });

    const check_event = (eventt) => {
        var accepted = true
        if(eventt['event'] != event_id){
          accepted = false
        }

        if(accepted == true){
          for (const key in filter) {
            if(filter[key] instanceof Array){
              if(!filter[key].includes(eventt['returnValues'][key])){
                accepted = false
              }
            }else{
              if(eventt['returnValues'][key] != filter[key]){
                accepted = false
              }
            }
            
          }
        }
        return accepted
    }

    filtered_events = focused_events.filter(check_event)


    return filtered_events
  }

  load_events_from_nitro = async (_web3, contract_instance, event_id, e5, filter) => {
    var requested_contract = this.get_contract_id_from_contract(e5, contract_instance)
    var event_request = {'requested_e5':e5, 'requested_contract':requested_contract, 'requested_event_id':event_id, 'filter':filter}
    const params = new URLSearchParams({
      arg_string:JSON.stringify({requests:[event_request]}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/events?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('all_data2',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      return obj['data'][0]
    }
    catch(e){
      // console.log(e)
      return []
    }
  }

  get_contract_id_from_contract(e5, contract_instance){
    var requested_contract = 'E5'
    if(contract_instance['_address'] == this.e5_contract_addresses[e5][1]){
      requested_contract = 'E52'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][2]){
      requested_contract = 'F5'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][3]){
      requested_contract = 'G5'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][4]){
      requested_contract = 'G52'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][5]){
      requested_contract = 'H5'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][6]){
      requested_contract = 'H52'
    }
    return requested_contract
  }

  

  load_event_data_the_old_way = async (_web3, contract_instance, event_id, e5, f) => {
    var web3 = this.get_web3_instance_from_e5(e5)
    var latest = await web3.eth.getBlockNumber()
    var events = []
    var iteration = this.get_iteration(e5)
    var starting_block = this.get_first_block(e5)
    
    if(latest - starting_block < iteration){
      events = await contract_instance.getPastEvents(event_id, {filter: f, fromBlock: starting_block, toBlock: 'latest' }, (error, events) => {});
    }
    else{
      var pos = starting_block
      while (pos < latest) {
        await this.wait(this.state.web3_delay)
        var to = pos+iteration < latest ? pos+iteration : latest
        var from = pos

        events = events.concat(await contract_instance.getPastEvents(event_id, {filter: f, fromBlock: from, toBlock: to }, (error, events) => {}))
        pos = to+1
      }
    }

    return events
  }

  /* here */
  get_all_events_from_e5 = async (_account, is_syncing, web3_url, e5_address, e5, should_skip_account_data) => {
    const web3 = new Web3(web3_url);
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    const address_account = _account

    var contract_addresses_events = await contractInstance.getPastEvents('e7', { fromBlock: this.get_first_block(e5), toBlock: this.get_first_block(e5)+20 }, (error, events) => {})
    var contract_addresses = contract_addresses_events[0].returnValues.p5
    if(this.e5_contract_addresses == null) this.e5_contract_addresses = {}
    this.e5_contract_addresses[e5] = contract_addresses

    // await this.get_accounts_data(_account, is_syncing, web3_url, e5_address, e5)
    // return;

    if(!this.state.beacon_node_enabled){
      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const F5contractArtifact = require('./contract_abis/F5.json');
      const F5_address = contract_addresses[2];
      const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


      const H5contractArtifact = require('./contract_abis/H5.json');
      const H5_address = contract_addresses[5];
      const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

      const H52contractArtifact = require('./contract_abis/H52.json');
      const H52_address = contract_addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

      if(this.from == null) this.from = {}
      var from = this.from[e5] == null ? this.get_first_block(e5) : this.from[e5] + 1
      
      var all_e5_events = await this.load_all_event_data(web3, contractInstance, 'allEvents', e5, {}, from) 
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_e52_events = await this.load_all_event_data(web3, E52contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_f5_events = await this.load_all_event_data(web3, F5contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_g5_events = await this.load_all_event_data(web3, G5contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_g52_events = await this.load_all_event_data(web3, G52contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_h5_events = await this.load_all_event_data(web3, H5contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_h52_events = await this.load_all_event_data(web3, H52contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      await this.wait(this.state.web3_delay)

      if(this.e5_events == null) this.e5_events = {}
      if(this.e52_events == null) this.e52_events = {}
      if(this.f5_events == null) this.f5_events = {}
      if(this.g5_events == null) this.g5_events = {}
      if(this.g52_events == null) this.g52_events = {}
      if(this.h5_events == null) this.h5_events = {}
      if(this.h52_events == null) this.h52_events = {}

      if(this.e5_events[e5] == null) this.e5_events[e5] = []
      if(this.e52_events[e5] == null) this.e52_events[e5] = []
      if(this.f5_events[e5] == null) this.f5_events[e5] = []
      if(this.g5_events[e5] == null) this.g5_events[e5] = []
      if(this.g52_events[e5] == null) this.g52_events[e5] = []
      if(this.h5_events[e5] == null) this.h5_events[e5] = []
      if(this.h52_events[e5] == null) this.h52_events[e5] = []

      all_e5_events.forEach(element => {
        this.e5_events[e5].push(element)
      });
      all_e52_events.forEach(element => {
        this.e52_events[e5].push(element)
      });
      all_f5_events.forEach(element => {
        this.f5_events[e5].push(element)
      });
      all_g5_events.forEach(element => {
        this.g5_events[e5].push(element)
      });
      all_g52_events.forEach(element => {
        this.g52_events[e5].push(element)
      });
      all_h5_events.forEach(element => {
        this.h5_events[e5].push(element)
      });
      all_h52_events.forEach(element => {
        this.h52_events[e5].push(element)
      });
    }else{
      if(is_syncing){
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
      }
    }

    this.set_cookies()
    if(!should_skip_account_data){
      await this.get_accounts_data(_account, is_syncing, web3_url, e5_address, e5)
    }

    this.update_watched_account_data()
  }






  get_wallet_data_for_specific_e5(e5){
    this.prompt_top_notification(this.getLocale()['2730']/* 'reloading your wallet...' */, 2000)
    var web3_url = this.get_web3_url_from_e5(e5)
    var account_for_e5 = this.state.accounts[e5]
    this.get_wallet_data(account_for_e5, false, web3_url, null, e5)
  }

  get_wallet_data = async (_account, is_syncing, web3_url, e5_address, e5) => {
    const web3 = new Web3(web3_url);
    const address_account = _account

    var wallet_status_clone = structuredClone(this.state.wallet_status)
    wallet_status_clone[e5] = 'synchronizing'
    this.setState({wallet_status: wallet_status_clone})


    this.load_rpc_times(e5)

    var clone = structuredClone(this.state.account_balance)
    clone[e5] = 0
    if(clone[e5] == null)this.setState({account_balance: clone});

    var balance = await web3.eth.getBalance(address_account.address)
    var clone = structuredClone(this.state.account_balance)
    clone[e5] = parseInt(balance)
    this.setState({account_balance: clone});
    if(is_syncing)this.inc_synch_progress()
   

    // this.load_ether_history(e5, address_account.address)

    var gasPrice = await web3.eth.getGasPrice();
    var clone = structuredClone(this.state.gas_price)
    clone[e5] = parseInt(gasPrice)
    this.setState({gas_price: clone})
    if(is_syncing)this.inc_synch_progress()

    var id = await web3.eth.net.getId()
    var clone = structuredClone(this.state.chain_id)
    clone[e5] = id
    this.setState({chain_id: clone});
    if(is_syncing)this.inc_synch_progress()
    await this.wait(this.state.web3_delay)


    // var peers = await web3.eth.net.getPeerCount()
    // var clone = structuredClone(this.state.number_of_peers)
    // clone[e5] = parseInt(peers)
    // this.setState({ number_of_peers: clone});
    // console.log('number of peers: ', peers)
    // this.inc_synch_progress()

    var blockNumber = await web3.eth.getBlockNumber()
    await this.wait(this.state.web3_delay)
    var last_blocks = [];
    var count = 5
    var start = parseInt(blockNumber)-count;
    if(blockNumber < count){
      start = 0;
    }
    for (let i = start; i <= blockNumber; i++) {
      await this.wait(this.state.web3_delay)
      var block = await web3.eth.getBlock(i)
      last_blocks.push(block)
    }

    var last_blocks_clone = structuredClone(this.state.last_blocks)
    last_blocks_clone[e5] = last_blocks

    var number_of_blocks_clone = structuredClone(this.state.number_of_blocks)
    number_of_blocks_clone[e5] = blockNumber
    this.setState({last_blocks: last_blocks_clone, number_of_blocks: number_of_blocks_clone});
    if(is_syncing)this.inc_synch_progress()



    // var mempool = await web3.eth.getPendingTransactions()
    // var mempool_clone = structuredClone(this.state.mempool)
    // mempool_clone[e5] = mempool
    // this.setState({mempool: mempool_clone})



    var wallet_status_clone = structuredClone(this.state.wallet_status)
    wallet_status_clone[e5] = 'done'
    this.setState({wallet_status: wallet_status_clone})


    // this.load_e5_wallet_icons(e5)

  } 






  load_all_wallets_icons = async () => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      await this.load_e5_wallet_icons(e5)
    }
  }

  load_e5_wallet_icons = async (e5) => {
    var end_request = this.state.e5s[e5].end_image
    var spend_request = this.state.e5s[e5].spend_image
    var ether_request = this.state.e5s[e5].ether_image
    var e5_image_request = this.state.e5s[e5].e5_img
    try{
      var clone = structuredClone(this.state.e5s)
      if(end_request != null){
        var response = await fetch(end_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].end_image = data
      }

      if(spend_request != null){
        var response = await fetch(spend_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].spend_image = data
      }

      if(ether_request != null){
        var response = await fetch(ether_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].ether_image = data
      }

      if(e5_image_request != null){
        var response = await fetch(e5_image_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].e5_img = data
      }
      this.setState({e5s: clone});
    }
    catch(e){
       console.log(e)
    }
  }

  convertBlobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result); // Remove the "data:image/..." prefix if desired
      reader.onerror = reject;
      reader.readAsDataURL(blob); // Reads the blob as a data URL
    });
  }

  load_static_assets = async () => {
    var clone = structuredClone(this.state.static_assets)
    for (const asset in clone) {
      if (clone.hasOwnProperty(asset)) {
        var url = clone[asset]
        try{
          var response = await fetch(url);
          var blob = await response.blob()
          var data = await this.convertBlobToBase64(blob);
          clone[asset] = data
        }
        catch(e){
          console.log(e)
        }
      }
    }
    this.setState({static_assets: clone})
  }

  load_coin_static_assets = async () => {
    var clone = structuredClone(this.state.coins)
    for (const asset in clone) {
      if (clone.hasOwnProperty(asset)) {
        var url = clone[asset]['label']['image']
        try{
          var response = await fetch(url);
          var blob = await response.blob()
          var data = await this.convertBlobToBase64(blob);
          clone[asset]['label']['image'] = data
          clone[asset]['banner-icon']['image'] = data
        }
        catch(e){
          console.log(e)
        }
      }
    }
    this.setState({coins: clone})
  }

  load_cities_data = async () => {
    var request = this.state.static_assets['all_cities']
    // if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('something went wrong:',response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return
      }
      var data = await response.text();
      var json_obj = JSON.parse(data);
      var storage_obj = []
      for(var i=0; i<json_obj.length; i++){
        var city = json_obj[i]['name'].toLowerCase()
        var country = json_obj[i]['country']
        var id = parseInt(json_obj[i]['id'])
        storage_obj.push({'city':city, 'country':country, 'id':id})
      }
      this.setState({all_cities: storage_obj})
    }
    catch(e){
      console.log('something went wrong:', e)
      
    }
  }




  
  //here
  get_accounts_data = async (_account, is_syncing, web3_url, e5_address, e5) => {
    const web3 = new Web3(web3_url);
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    const address_account = _account


    /* ---------------------------------------- CONTRACT ADDRESSES -------------------------------------- */
    var contract_addresses_events = await contractInstance.getPastEvents('e7', { fromBlock: this.get_first_block(e5), toBlock: this.get_first_block(e5)+50 }, (error, events) => {})
    var contract_addresses = contract_addresses_events[0].returnValues.p5
    var addresses_clone = structuredClone(this.state.addresses)
    addresses_clone[e5] = contract_addresses
    this.setState({addresses: addresses_clone})
    console.log('contract_addresses', addresses_clone)

    if(is_syncing){
      this.inc_synch_progress()
    }


    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    


    /* ---------------------------------------- ACCOUNT DATA ------------------------------------------- */
    var accounts = await contractInstance.methods.f167([],[address_account.address], 2).call((error, result) => {});
    console.log('account_id',accounts[0], 'for e5 ',e5)
    var account = accounts[0] == 0 ? 1 : accounts[0]

    var clone = structuredClone(this.state.user_account_id)
    clone[e5] = account
    this.setState({user_account_id: clone})

    if(is_syncing){
      this.inc_synch_progress()
    }






    /* ---------------------------------------- NITRO LINK DATA -------------------------------------- */
    await this.get_my_nitro_link_data(web3, E52contractInstance, e5, account);
    if(is_syncing){
      this.inc_synch_progress()
    }





    /* ---------------------------------------- BALANCE DATA -------------------------------------- */
    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = contract_addresses[2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);
    await this.get_nitro_data(E52contractInstance, web3, e5, contract_addresses, [], account, F5contractInstance)
    if(is_syncing){
      this.inc_synch_progress()
    }




    /* ---------------------------------------- BALANCE DATA -------------------------------------- */
    await this.load_e5_balance_data(web3, contractInstance, account, e5, contract_addresses);
    this.load_pending_withdraw_event_data(web3, contractInstance, account, e5, contract_addresses)
    if(is_syncing){
      this.inc_synch_progress()
    }







    /* ---------------------------------------- EVENT DATA ------------------------------------------- */
    this.load_all_e5_runs_data(web3, contractInstance, e5, account)
    this.load_my_e5_runs_data(web3, contractInstance, e5, account)

    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- CONTACTS DATA------------------------------------------- */
    this.get_contacts_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }








    /* ---------------------------------------- BLOCKED ACCOUNTS DATA ------------------------------------------- */
    this.get_blocked_accounts_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- FOLLOWED ACCOUNTS DATA ------------------------------------------- */
    this.get_my_followed_accounts_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- MY BLOCKED POSTS DATA ------------------------------------------- */
    this.load_my_blocked_posts(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- MY CENSORED KEYWORDS DATA ------------------------------------------- */
    this.load_my_censored_keywords(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- ALBUM COLLECTION DATA ------------------------------------------- */
    await this.get_my_collection_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- PLAYLIST COLLECTION DATA ------------------------------------------- */
    await this.get_my_playlists_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- SECTION TAGS DATA ------------------------------------------- */
    await this.get_section_tags_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- MY PLAYS DATA ------------------------------------------- */
    await this.get_my_plays_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- MY VIDEOS DATA ------------------------------------------- */
    await this.get_my_videos_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- UPLOADED DATA ------------------------------------------- */
    this.get_e5_uploaded_cid_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- ALIAS DATA------------------------------------------- */
    this.get_alias_data(E52contractInstance, e5, account, web3);
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }









    /* ---------------------------------------- SUBSCRIPTION DATA ------------------------------------------- */
    

    // this.get_subscription_data(contractInstance, F5contractInstance, account, web3, e5, contract_addresses, E52contractInstance)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ---------------------------------------- CONTRACT DATA ------------------------------------------- */
    const G5contractArtifact = require('./contract_abis/G5.json');
    const G5_address = contract_addresses[3];
    const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = contract_addresses[4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    this.load_main_contracts(e5)
    // this.get_contract_data(contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- PROPOSAL DATA ------------------------------------------- */
    // this.get_proposal_data(G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ---------------------------------------- TOKEN DATA ------------------------------------------- */
    const H5contractArtifact = require('./contract_abis/H5.json');
    const H5_address = contract_addresses[5];
    const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = contract_addresses[6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    
    var priority_ids = await this.get_my_token_ids(web3, contractInstance, e5, account)
    this.get_token_data(contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, priority_ids)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }



    /* ---------------------------------------- JOB DATA ------------------------------------------- */
    var posts_to_prioritize = await this.load_prioritised_job_posts(e5, web3, contract_addresses)
    if(is_syncing) this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, 0, posts_to_prioritize)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }


    /* ---------------------------------------- POST DATA ------------------------------------------- */
    // this.get_post_data(E52contractInstance, web3, e5, contract_addresses)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- CHANNEL DATA ------------------------------------------- */
    // this.get_channel_data(E52contractInstance, web3, e5, contract_addresses, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- MAIL DATA ------------------------------------------- */
    // this.get_sent_mail_data(E52contractInstance, e5, account, web3)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }
    
    // this.get_received_mail_data(E52contractInstance, e5, account, web3);
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- STOREFRONT DATA ------------------------------------------- */  
    // this.get_storefront_data(E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- BAG DATA ------------------------------------------- */
    // this.get_bag_data(contractInstance, web3, e5, contract_addresses, E52contractInstance, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- CONTRACTOR DATA ------------------------------------------- */
    // this.get_contractor_data(E52contractInstance, contract_addresses, e5, web3, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    this.load_run_data(contractInstance, E52contractInstance, e5, web3, H52contractInstance)


    // this.get_total_supply_of_ether(e5)

    /* ---------------------------------------- ------------------------------------------- */
    /* ---------------------------------------- ------------------------------------------- */
    /* ---------------------------------------- ------------------------------------------- */
    /* ---------------------------------------- ------------------------------------------- */
  }

  load_all_e5_runs_data = async (web3, contractInstance, e5, account) => {
    var events = await this.load_event_data(web3, contractInstance, 'e4', e5, {})
    events = events.reverse()
    var clone = structuredClone(this.state.all_E5_runs)
    clone[e5] = events
    this.setState({all_E5_runs: clone});
  }

  load_my_e5_runs_data = async (web3, contractInstance, e5, account) => {
    var events = await this.load_event_data(web3, contractInstance, 'e4', e5, {p1/* sender_account_id */: account})
    events = events.reverse()
    var clone = structuredClone(this.state.E5_runs)
    clone[e5] = events
    this.setState({E5_runs: clone});
  }

  load_e5_balance_data = async (web3, contractInstance, account, e5, contract_addresses) => {
    var withdraw_balance = await contractInstance.methods.f167([account], [], 1).call((error, result) => {});
    var clone = structuredClone(this.state.withdraw_balance)
    clone[e5] = withdraw_balance[0]
    this.setState({withdraw_balance: clone})
    console.log('withdraw balance for e5: ',e5,' : ',withdraw_balance[0])

    var basic_transaction_data = await contractInstance.methods.f287([account]).call((error, result) => {});
    var clone = structuredClone(this.state.basic_transaction_data)
    clone[e5] = basic_transaction_data[0]
    this.setState({basic_transaction_data: clone})
    console.log('basic transaction data for e5: ',e5,' : ',basic_transaction_data[0])

    var E5_balance = await contractInstance.methods.f147(1).call((error, result) => {});
    var clone = structuredClone(this.state.E5_balance)
    clone[e5] = E5_balance
    this.setState({E5_balance: clone})
    console.log('E5 balance for e5: ',e5,' : ',E5_balance)


    var end_balance_of_E5 = await this.get_balance_in_exchange(3, 2, e5, contract_addresses)
    var spend_balance_of_E5 = await this.get_balance_in_exchange(5, 2, e5, contract_addresses)
    var end_balance_of_burn_account = await this.get_balance_in_exchange(3, 0, e5, contract_addresses)


    console.log('end_balance: ', end_balance_of_E5, ' spend_balance: ',spend_balance_of_E5, ' burn account balance: ', end_balance_of_burn_account)


    var end_balance_of_E5_clone = JSON.parse(JSON.stringify(this.state.end_balance_of_E5))
    end_balance_of_E5_clone[e5] = end_balance_of_E5

    var spend_balance_of_E5_clone = JSON.parse(JSON.stringify(this.state.spend_balance_of_E5))
    spend_balance_of_E5_clone[e5] = spend_balance_of_E5

    var end_balance_of_burn_account_clone = JSON.parse(JSON.stringify(this.state.end_balance_of_burn_account))
    end_balance_of_burn_account_clone[e5] = end_balance_of_burn_account

    this.setState({end_balance_of_E5:end_balance_of_E5_clone, spend_balance_of_E5:spend_balance_of_E5_clone, end_balance_of_burn_account: end_balance_of_burn_account_clone})

  }

  load_pending_withdraw_event_data = async (web3, contractInstance, account, e5, contract_addresses) => {
    var withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e2', e5, {p1/* sender_account_id */: account})

    var pending_withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e3', e5, {p1/* receiver_account_id */: account})

    var withdraw_clone = structuredClone(this.state.withdraw_event_data)
    withdraw_clone[e5] = withdraw_event_data

    var pending_withdraw_clone = structuredClone(this.state.pending_withdraw_event_data)
    pending_withdraw_clone[e5] = pending_withdraw_event_data

    this.setState({withdraw_event_data: withdraw_clone, pending_withdraw_event_data: pending_withdraw_clone})
  }

  get_contacts_data = async (web3, E52contractInstance, e5, account) => {
    var contacts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:1})

    if(contacts_data.length > 0){
      var latest_event = contacts_data[contacts_data.length - 1];
      var contacts_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var contacts = contacts_data['contacts']

      console.log('loaded contacts for e5: ',e5,' : ',contacts.length)
      console.log(contacts)
      
      var clone = structuredClone(this.state.contacts)
      var existing_contacts = clone[e5]
      if(existing_contacts == null){
        existing_contacts = []
      }
      clone[e5] = this.combine_contacts(existing_contacts, contacts)
      if(!this.state.should_update_contacts_onchain){
        this.setState({contacts: clone})
      }
    }else{
      console.log('loaded no contacts')
      var clone = structuredClone(this.state.contacts)
      var existing_contacts = clone[e5]
      if(existing_contacts == null){
        existing_contacts = []
      }
      clone[e5] = this.combine_contacts(existing_contacts, [])
      if(!this.state.should_update_contacts_onchain) this.setState({contacts: clone})
    }
  }

  get_blocked_accounts_data = async (web3, E52contractInstance, e5, account) => {
    var blocked_contacts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:2})

    if(blocked_contacts_data.length > 0){
      var latest_event = blocked_contacts_data[blocked_contacts_data.length - 1];
      var blocked_contacts_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_blocked_accounts = blocked_contacts_data['blocked_accounts']

      console.log('loaded blocked accounts for e5: ',e5,' : ',loaded_blocked_accounts.length)
      console.log(loaded_blocked_accounts)
      
      var clone = structuredClone(this.state.blocked_accounts)
      var existing_blocked_accounts = clone[e5]
      if(existing_blocked_accounts == null){
        existing_blocked_accounts = []
      }
      clone[e5] = this.combine_contacts(existing_blocked_accounts, loaded_blocked_accounts)
      if(!this.state.should_update_blocked_accounts_onchain){
        this.setState({blocked_accounts: clone})
        console.log('setting blocked accounts from chain')
      }
    }else{
      console.log('loaded no blocked accounts')
      var clone = structuredClone(this.state.blocked_accounts)
      var existing_blocked_accounts = clone[e5]
      if(existing_blocked_accounts == null){
        existing_blocked_accounts = []
      }
      clone[e5] = this.combine_contacts(existing_blocked_accounts, [])
      if(!this.state.should_update_blocked_accounts_onchain){
        this.setState({blocked_accounts: clone})
        console.log('setting blocked accounts from chain')
      }else{
        console.log('not setting blocked accounts from chain')
      }
    }
  }

  get_section_tags_data = async (web3, E52contractInstance, e5, account) => {
    var section_tags_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:3})

    if(section_tags_data_events.length != 0){
      var latest_event = section_tags_data_events[section_tags_data_events.length - 1];
      var section_tag_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var job_section_tags = section_tag_data['job_section_tags']
      var explore_section_tags = section_tag_data['explore_section_tags']

      // console.log('get_section_tags_data', section_tag_data)
      
      if(!this.state.should_update_section_tags_onchain){
        this.setState({job_section_tags: job_section_tags, explore_section_tags: explore_section_tags})
      }else{
        var job_section_tags_clone = this.state.job_section_tags.slice()
        var explore_section_tags_clone = this.state.explore_section_tags.slice()
        
        job_section_tags.forEach(tag => {
          if(!job_section_tags_clone.includes(tag)){
            job_section_tags_clone.push(tag)
          }
        });

        explore_section_tags.forEach(tag => {
          if(!explore_section_tags_clone.includes(tag)){
            explore_section_tags_clone.push(tag)
          }
        });

        this.setState({job_section_tags: job_section_tags_clone, explore_section_tags: explore_section_tags_clone})
        
      }
    }else{
      if(this.section_tags_data_user != account && this.section_tags_data_user != null && this.section_tags_data_user != 1){
        this.setState({job_section_tags: [], explore_section_tags: []})
      }
    }

    this.section_tags_data_user = account
  }

  get_my_token_ids = async (web3, contractInstance, e5, account) => {
    var created_token_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */, p3/* sender_account_id */:account})
    var ids = []
    created_token_events.forEach(event => {
      var id = event.returnValues.p1
      ids.push(id)
    });
    return ids
  }

  get_e5_uploaded_cid_data  = async (web3, E52contractInstance, e5, account) => {
    var section_cid_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:4})

    // console.log('get_e5_uploaded_cid_data', section_cid_data_events)

    if(section_cid_data_events.length != 0){
      var latest_event = section_cid_data_events[section_cid_data_events.length - 1];
      var section_cid_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
      var cids = section_cid_data['cids'];

      var clone = this.state.uploaded_data_cids.slice();
      cids.forEach(cid => {
        if(!clone.includes(cid)){
          clone.push(cid)
        }
      });
      this.fetch_uploaded_data_from_ipfs(clone, true)
    }else{
      if(this.uploaded_data_user != account && this.uploaded_data_user != null && this.uploaded_data_user != 1){
        this.setState({uploaded_data_cids:[]})
      }else{
        if(this.state.uploaded_data_cids.length != 0){
          var clone = this.state.uploaded_data_cids.slice();
          this.fetch_uploaded_data_from_ipfs(clone, true)
        }
      }
    }

    this.uploaded_data_user = account
  }

  fetch_uploaded_data_from_ipfs = async (cids, is_my_cids) => {
    var clone = structuredClone(this.state.uploaded_data) 
    for(var i=0; i<cids.length; i++){
      // console.log('datas', 'fetching', cids[i])
      var ecid_obj = this.get_cid_split(cids[i])
      var id = ecid_obj['cid']
      var filetype = ecid_obj['filetype']
      var storage_id = ecid_obj['storage']
      var file_name = ecid_obj['file_name']
      // console.log('datas', 'fetching object', ecid_obj)
      var data = this.fetch_from_storage(cids[i])
      if(data == null){
        data = await this.fetch_file_data_from_respective_storage(id, storage_id, file_name, 0)
        this.store_in_local_storage(cids[i], data)
      }
      if(data != null){
        // console.log('datas', 'obtained object', data)
        if(clone[filetype] == null) clone[filetype] = {}
        clone[filetype][cids[i]] = data
        if(is_my_cids){
          var cid_clone = this.state.uploaded_data_cids.slice()
          cid_clone.push(cids[i])
          this.setState({uploaded_data_cids: cids, uploaded_data: clone})
        }else{
          this.setState({uploaded_data: clone})
        }
      }
    }
  }

  get_cid_split(ecid){
    var split_cid_array = ecid.split('_');
    var filetype = split_cid_array[0]
    var cid_with_storage = split_cid_array[1]
    var cid = cid_with_storage
    var storage_with_filename = 'ch.data1'
    var storage = 'ch'
    var file_name = 'data1'
    if(cid_with_storage.includes('.')){
      var split_cid_array2 = cid_with_storage.split('.')
      cid = split_cid_array2[0]
      storage_with_filename = split_cid_array2[1]
      if(storage_with_filename.includes(',')){
        var split_cid_array3 = storage_with_filename.split(',')
        storage = split_cid_array3[0]
        file_name = split_cid_array3[1]
      }
    }

    return {'filetype':filetype, 'cid':cid, 'storage':storage, 'file_name':file_name, 'full':ecid}
  }

  fetch_uploaded_files_for_object = async (object) => {
    var ecids = [];
    if(object['ipfs'] != null){
      var images_to_add = object['ipfs'].entered_image_objects == null ? [] : object['ipfs'].entered_image_objects
      if(images_to_add.length > 0){
        images_to_add.forEach(item => {
          if(this.is_ecid(item)) ecids.push(item)
        });
      }

      var pdfs_to_add = object['ipfs'].entered_pdf_objects == null ? [] : object['ipfs'].entered_pdf_objects
      if(pdfs_to_add.length > 0){
        pdfs_to_add.forEach(item => {
          if(this.is_ecid(item)) ecids.push(item)
        });
      }

      var zips_to_add = object['ipfs'].entered_zip_objects == null ? [] : object['ipfs'].entered_zip_objects
      if(zips_to_add.length > 0){
        zips_to_add.forEach(item => {
          if(this.is_ecid(item)) ecids.push(item)
        });
      }

      var items = object['ipfs'].entered_objects == null ? [] : object['ipfs'].entered_objects
      if(items.length > 0){
        items.forEach(item => {
          if(item['type'] == '11'){
            var image = item['data']['image']
            if(this.is_ecid(image)) ecids.push(image)
          }
        });
      }

      var variants = object['ipfs'].variants == null ? [] : object['ipfs'].variants
      if(variants.length > 0){
        variants.forEach(variant => {
          var variant_images = variant['image_data']['data']['images']
          if(variant_images.length > 0){
            variant_images.forEach(image => {
              if(this.is_ecid(image)) ecids.push(image)
            });
          }
        });
      }
    }

    if(object['image-data'] != null){
      var images = object['image-data']['images']
      if(images != null && images.length > 0){
        images.forEach(image => {
          if(this.is_ecid(image)) ecids.push(image)
        });
      }
    }

    if(object['pdf-data'] != null){
      var pdfs = object['pdf-data']
      if(pdfs.length > 0){
        pdfs.forEach(pdf => {
          if(this.is_ecid(pdf)) ecids.push(pdf)
        });
      }
    }

    if(ecids.length > 0){
      this.fetch_uploaded_data_from_ipfs(ecids, false)
    }
  }

  is_ecid(ecid){
    if(ecid.startsWith('image') || ecid.startsWith('audio') || ecid.startsWith('video') || ecid.startsWith('pdf')|| ecid.startsWith('zip')){
      return true;
    }else{
      return false
    }
  }

  get_my_collection_data = async (web3, E52contractInstance, e5, account) => {
    var my_acquired_album_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:5})

    if(my_acquired_album_data_events.length > 0){
      var latest_event = my_acquired_album_data_events[my_acquired_album_data_events.length - 1];
      var my_acquired_album_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var my_albums = my_acquired_album_data['my_albums']
      var my_tracks = my_acquired_album_data['my_tracks']
      var timestamp = my_acquired_album_data['time']

      if(this.my_collection_timestamp == null){
        this.my_collection_timestamp = 0
      }

      if(this.my_collection_account != account && this.my_collection_account != 1 && this.my_collection_account != null){
        this.my_collection_timestamp = 0
      }

      if(parseInt(this.my_collection_timestamp) < parseInt(timestamp)){
        console.log('my_collection_data', my_albums, my_tracks)
        this.setState({my_albums: my_albums, my_tracks: my_tracks})
        this.my_collection_timestamp = timestamp
      }
    }

    this.my_collection_account = account
  }

  get_my_playlists_data = async (web3, E52contractInstance, e5, account) => {
    var playlists_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:6})

    if(playlists_event_data.length > 0){
      var latest_event = playlists_event_data[playlists_event_data.length - 1];
      var playlists_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_playlists = playlists_data['playlists']
      
      var clone = structuredClone(this.state.my_playlists)
      if(this.my_playlist_account != account && this.my_playlist_account != 1 && this.my_playlist_account != null){
        clone = []
      }
      var new_playlist = this.combine_playlists(loaded_playlists, clone)
      this.setState({my_playlists: new_playlist})
    }

    this.my_playlist_account = account
  }

  combine_playlists(loaded_playlists, clone){
    var new_playlist = [].concat(loaded_playlists)
    clone.forEach(playlist => {
      if(this.get_item_in_array(new_playlist, playlist['id']) == null){
        new_playlist.push(playlist)
      }
    });
    return new_playlist
  }

  get_item_in_array(object_array, id){
    var object = object_array.find(x => x['id'] === id);
    return object
  }

  get_my_plays_data = async (web3, E52contractInstance, e5, account) => {
    var plays_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:7})

    if(plays_event_data.length > 0){
      var latest_event = plays_event_data[plays_event_data.length - 1];
      var plays_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_plays = plays_data['plays']

      var clone = structuredClone(this.state.song_plays)
      if(this.my_plays_account != account && this.my_plays_account != 1 && this.my_plays_account != null){
        clone = {}
      }
      for (const song_id in loaded_plays) {
        if (loaded_plays.hasOwnProperty(song_id)) {
          var count_array = loaded_plays[song_id]
          if(clone[song_id] == null){
            clone[song_id] = []
          }
          count_array.forEach(time_element => {
            if(!clone[song_id].includes(time_element)){
              clone[song_id].push(time_element)
            }
          });
        }
      }
      this.setState({song_plays: clone})
    }

    this.my_plays_account = account
  }

  get_my_videos_data = async (web3, E52contractInstance, e5, account) => {
    var my_acquired_videos_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:8})

    if(my_acquired_videos_data_events.length > 0){
      var latest_event = my_acquired_videos_data_events[my_acquired_videos_data_events.length - 1];
      var my_acquired_video_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var my_videoposts = my_acquired_video_data['my_videoposts']
      var my_videos = my_acquired_video_data['my_videos']
      var timestamp = my_acquired_video_data['time']

      if(this.my_video_collection_timestamp == null){
        this.my_video_collection_timestamp = 0
      }

      if(this.my_video_collection_account != account && this.my_video_collection_account != 1 && this.my_video_collection_account != null){
        this.my_video_collection_timestamp = 0
      }

      if(parseInt(this.my_video_collection_timestamp) < parseInt(timestamp)){
        this.setState({my_videoposts: my_videoposts, my_videos: my_videos})
        this.my_video_collection_timestamp = timestamp
      }
    }

    this.my_video_collection_account = account
  }

  get_my_nitro_link_data = async (web3, E52contractInstance, e5, account) => {
    var nitro_link_registry = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:400});
    var registered_nitro_links = {}
    var registered_nitro_links_authors = {}
    nitro_link_registry.forEach(event => {
      var id = event.returnValues.p1/* target_id */
      var data = event.returnValues.p4/* string_data */
      var author = event.returnValues.p2/* sender_acc_id */
      if(registered_nitro_links[(id+e5)] != null){
        if(author.toString() == registered_nitro_links_authors[(id+e5)].toString()){
          //link was reset by author
          registered_nitro_links[(id+e5)] = data
        }
      }else{
        registered_nitro_links[(id+e5)] = data
        registered_nitro_links_authors[(id+e5)] = author
      }
      
    });
    var registered_nitro_links_clone = structuredClone(this.state.nitro_links)
    registered_nitro_links_clone[e5] = registered_nitro_links
    this.setState({nitro_links: registered_nitro_links_clone})
  }

  get_my_followed_accounts_data = async (web3, E52contractInstance, e5, account) => {
    var followed_accounts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:8})

    if(followed_accounts_data.length > 0){
      var latest_event = followed_accounts_data[followed_accounts_data.length - 1];
      var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_followed_accounts = followed_account_data['followed_accounts']

      var clone = []
      for(var i=0; i<loaded_followed_accounts.length; i++){
        var account = loaded_followed_accounts[i]
        if(!clone.includes(account)){
          clone.push(account)
        }
      }
      if(this.has_my_followed_accounts_loaded[e5] != account){
        this.setState({followed_accounts: clone})
        this.has_my_followed_accounts_loaded[e5] = account
      }
    }

    if(this.state.followed_accounts.length != 0){
      this.load_blocked_posts(web3, E52contractInstance, e5, account)
      this.load_censored_keywords(web3, E52contractInstance, e5, account)
    }
  }

  load_my_blocked_posts = async (web3, E52contractInstance, e5, account) => {
    var my_blocked_posts_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:9})

    if(my_blocked_posts_event_data.length > 0){
      var latest_event = my_blocked_posts_event_data[my_blocked_posts_event_data.length - 1];
      var blocked_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var posts_blocked_by_me = blocked_account_data['posts_blocked_by_me']

      var clone = this.state.posts_blocked_by_me.slice()
      for(var i=0; i<posts_blocked_by_me.length; i++){
        var post = posts_blocked_by_me[i]
        if(!clone.includes(post)){
          clone.push(post)
        }
      }
      if(this.has_posts_blocked_by_me_loaded[e5] != account){
        this.setState({posts_blocked_by_me: clone})
        this.has_posts_blocked_by_me_loaded[e5] = account
      }
      
    }

    
  }

  load_blocked_posts = async (web3, E52contractInstance, e5, account) => {
    var accounts_to_load = this.filter_followed_accounts_by_e5(e5)
    var followed_accounts_blocked_posts_events_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: accounts_to_load, p3/* context */:9})

    var accounts_obj = {}
    followed_accounts_blocked_posts_events_data.forEach(event => {
      accounts_obj[event.returnValues.p2/* sender_acc_id */] = event;
    });

    followed_accounts_blocked_posts_events_data = []
    for (const account in accounts_obj) {
      if (accounts_obj.hasOwnProperty(account)) {
        followed_accounts_blocked_posts_events_data.push(accounts_obj[account])
      }
    }

    if(followed_accounts_blocked_posts_events_data.length != 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(followed_accounts_blocked_posts_events_data, 0, 'p4')
      }

      var clone = this.state.posts_blocked_by_my_following.slice()
      for(var i=0; i<followed_accounts_blocked_posts_events_data.length; i++){
        var latest_event = followed_accounts_blocked_posts_events_data[i]
        var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
        var blocked_post = followed_account_data['posts_blocked_by_me']
        blocked_post.forEach(post_id => {
          if(!clone.includes(post_id)){
            clone.push(post_id)
          }
        });
      }
      this.setState({posts_blocked_by_my_following: clone})
    }
  }

  filter_followed_accounts_by_e5(e5){
    var loaded_followed_accounts = this.state.followed_accounts
    var accepted_ids = []
    for(var i=0; i<loaded_followed_accounts.length; i++){
      var item = loaded_followed_accounts[i]
      var split_account_array = item.split(':')
      var item_e5 = split_account_array[0]
      var account = split_account_array[1]
      if(item_e5 == e5){
        accepted_ids.push(account)
      }
    }
    return accepted_ids
  }

  load_my_censored_keywords = async (web3, E52contractInstance, e5, account) => {
    var my_censored_keywords_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:10})

    if(my_censored_keywords_event_data.length > 0){
      var latest_event = my_censored_keywords_event_data[my_censored_keywords_event_data.length - 1];
      var censored_keywords_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var censored_keywords_by_me = censored_keywords_data['censored_keywords']

      var clone = this.state.censored_keyword_phrases.slice()
      for(var i=0; i<censored_keywords_by_me.length; i++){
        var post = censored_keywords_by_me[i]
        if(!clone.includes(post)){
          clone.push(post)
        }
      }
      if(this.has_censored_keywords_by_me_loaded[e5] != account){
        this.setState({censored_keyword_phrases: clone})
        this.has_censored_keywords_by_me_loaded[e5] = account
      }
    }
  }

  load_censored_keywords = async (web3, E52contractInstance, e5, account) => {
    var accounts_to_load = this.filter_followed_accounts_by_e5(e5)
    var followed_accounts_censored_keywords_events_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: accounts_to_load, p3/* context */:10})

    var accounts_obj = {}
    followed_accounts_censored_keywords_events_data.forEach(event => {
      accounts_obj[event.returnValues.p2/* sender_acc_id */] = event;
    });

    followed_accounts_censored_keywords_events_data = []
    for (const account in accounts_obj) {
      if (accounts_obj.hasOwnProperty(account)) {
        followed_accounts_censored_keywords_events_data.push(accounts_obj[account])
      }
    }

    if(followed_accounts_censored_keywords_events_data.length != 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(followed_accounts_censored_keywords_events_data, 0, 'p4')
      }

      var clone = this.state.censored_keywords_by_my_following.slice()
      for(var i=0; i<followed_accounts_censored_keywords_events_data.length; i++){
        var latest_event = followed_accounts_censored_keywords_events_data[i]
        var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
        var censored_keywords = followed_account_data['censored_keywords']
        censored_keywords.forEach(keyword => {
          if(!clone.includes(keyword)){
            clone.push(keyword)
          }
        });
      }
      this.setState({censored_keywords_by_my_following: clone})
    }
  }








  //here
  load_ether_history = async (e5, address) =>{
    if(address.toString() == '0xB5195BA86F7a2D6AE1bFE15129Dbc9202f04B4c1') return;
    console.log('loading ether history from e5: ',e5)
    var link = ''
    var body = {}
    var e5_address_obj = {}

    if(e5 == 'E35'){
      // link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E25'){
      // link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E45'){
      try {
        const response = await fetch('https://api.harmony.one', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            'jsonrpc': '2.0',
            'method': 'hmyv2_getTransactionsHistory',
            'params': [
              {
                'address': toBech32(address),
                'pageIndex': 0,
                'pageSize': 1000,
                'fullTx': true,
                'txType': 'ALL',
                'order': 'DESC'
              }
            ],
            'id': 1
          })
        });
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('------------------------load_ether_history---------------------------')
        console.log(toBech32(address))
        console.log(e5_address_obj)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E55'){
      link = `https://explorer.celo.org/mainnet/api?module=account&action=tokentx&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E55:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E65'){
      link = `https://flare-explorer.flare.network/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E65:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E75'){
      var key = ''+process.env.REACT_APP_GNOSIS_API_KEY
      // link = `https://gnosis.blockscout.com/api/v2/addresses/${address}/transactions`
      link = `https://api.gnosisscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E75:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E85'){
      link = `https://explorer.fuse.io/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E85:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E95'){
      var key = ''+process.env.REACT_APP_MOONBEAM_API_KEY
      link = `https://api-moonbeam.moonscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=latest&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E95:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E105'){
      var key = ''+process.env.REACT_APP_MOONRIVER_API_KEY
      link = `https://api-moonriver.moonscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=2&sort=desc&apikey=${key}`

      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E105:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E125'){
      var key = ''+process.env.REACT_APP_POLYGONSCAN_API_KEY
      link = `https://api.polygonscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E125:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E135'){
      var key = ''+process.env.REACT_APP_BINANCE_API_KEY
      link = `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E135:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E115'){
      var xdc_add = this.replace_0x_with_xdc(address)
      link = `https://xdc.blocksscan.io/api/txs/listByAccount/${xdc_add}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E115:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E155'){
      link = `http://explorer-mainnet.thundercore.com/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E155:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E145'){
      link=`http://explorer.energi.network/api?module=account&action=tokentx&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E145:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E165'){
      link = `https://tomoscan.io/api/transaction/list?account=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E145:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E185'){
      link = `https://eth.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E195'){
      link = `https://optimism.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E205'){
      link = `https://base.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E215'){
      var key = ''+process.env.REACT_APP_ARBITRUM_API_KEY
      link = `https://api.arbiscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E215:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E225'){
      link = `https://blockscout.com/astar/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E225:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E235'){
      link = `https://cronos.org/explorer/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E235:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E245'){
      link = `https://kavascan.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E245:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E255'){
      link = `https://neon.blockscout.com/api/v2/addresses/${address}/transactions`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E255:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E265'){
      link = `https://explorer-mainnet-cardano-evm.c1.milkomeda.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E265:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E275'){
      var key = ''+process.env.REACT_APP_FANTOM_API_KEY
      link = `https://api.ftmscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E275:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E285'){
      link = `https://brisescan.com/api/v2/addresses/${address}/transactions`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E285:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E295'){
      link = `https://explorer.syscoin.org/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E295:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E305'){
      link = `https://api-beta.avascan.info/v2/network/mainnet/evm/43114/address/${address}/transactions?ecosystem=avalanche&sort=desc`

      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E305:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E315'){
      link = `https://evm.findorascan.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E315:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E325'){
      link = `https://blockscout.bellecour.iex.ec/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E325:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E335'){
      link = `https://explorer.emerald.oasis.dev/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E335:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E345'){
      link = `https://ozonescan.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E345:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E355'){
      link = `https://scan.chain.pixie.xyz/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E355:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E365'){
      link = `https://scan.rei.network/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E365:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E385'){
      link = `https://explorer.mantle.xyz/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E385:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E395'){
      link = `https://api.scan.pulsechain.com/api/v2/addresses/${address}/transactions`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E395:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E485'){
      link = `https://explorer.energyweb.org/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E485:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E495'){
      link = `https://explorer.callisto.network/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E495:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E505'){
      link = `https://blockscout.com/shiden/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E505:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E515'){
      link = `https://tenetscan.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E515:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E565'){
      link = `https://evmapi.confluxscan.net/api?module=account&action=txlist&address=${address}&page=1&offset=100&sort=desc`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E515:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E625'){
      link = `https://seeleview.net/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E625:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E675'){
      link = `http://edgscan.live/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E675:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E685'){
      link = `http://blockexplorer.bloxberg.org/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E685:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E695'){
      link = `http://phoenixplorer.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E695:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E705'){
      link = `http://explorer.omchain.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E705:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E735'){
      link = `https://explorer.ecredits.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E735:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E755'){
      link = `https://explorer.ethoprotocol.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        // console.log('--------------------------------E745:load_ether_history-----------------------------------')
        // console.log(e5_address_obj)
        // console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    

    var clone = structuredClone(this.state.e5_ether_tx_history)
    clone[e5] = e5_address_obj
    this.setState({e5_ether_tx_history: clone})
    
  }

  replace_0x_with_xdc(address){
    return 'xdc'+address.toString().slice(2)
  }

  //unused
  get_total_supply_of_ether = async (e5) => {
    var link = ''

    if(e5 == 'E35'){
      // link = `https://etc.blockscout.com/api/v2/stats/charts/market&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/stats/charts/market`
    }
    else if(e5 == 'E25'){
      // link = `https://etc.blockscout.com/api/v2/stats/charts/market&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/stats/charts/market`
    }

    var e5_supply_obj = {}
    try {
      const response = await fetch(link);
      if (!response.ok) {
        throw new Error(`Failed to retrieve ether supply data. Status: ${response}`);
      }
      const data = await response.text();
      e5_supply_obj = JSON.parse(data);
      
    } catch (error) {
      console.log('Error fetching data: ', error)
    }

    var clone = structuredClone(this.state.e5_ether_supply_data)
    clone[e5] = e5_supply_obj
    this.setState({e5_ether_supply_data: clone})

  }

  combine_contacts(existing_contacts, updated_contact_list){
    var new_contact_list = structuredClone(existing_contacts)

    updated_contact_list.forEach(contact => {
      if(!this.check_if_includes(new_contact_list, contact)){
        new_contact_list.push(contact)
      }
    });

    return new_contact_list
  }

  check_if_includes(array, item){
    var includes = array.find(e => e['id'] === item['id'])
    // for(var i=0; i<array.length; i++){
    //   if(array[i]['id'] == item['id']){
    //     includes = true
    //     break;
    //   }
    // }
    return includes != null
  }

  get_alias_data = async (E52contractInstance, e5, account, web3) => {
    var alias_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 11})

    var my_alias_events = []
    var alias_bucket = {}
    var alias_owners = {}
    var alias_timestamp = {}
    var is_first_time = this.state.my_alias_events[e5] == null
    for(var i=0; i<alias_events.length; i++){
      var alias_string = alias_events[i].returnValues.p4
      if(alias_string.length > 23){
        alias_string = await this.fetch_objects_data_from_ipfs_using_option(alias_events[i].returnValues.p4)
      } 
      var alias_sender = alias_events[i].returnValues.p2/* owner */

      if(alias_owners[alias_string] == null){
        // console.log('setting alias: ',alias_string, ' for account: ',alias_sender)
        alias_owners[alias_string] = alias_sender
        alias_bucket[alias_sender] = alias_string 
        alias_timestamp[alias_string] = alias_events[i].returnValues.p6

        if(alias_sender == account){
          //my alias
          my_alias_events.push({'alias':alias_string, 'event':alias_events[i]})
        }
      }
      else if(alias_owners[alias_string] == alias_sender){
        //ownership was revoked
        // console.log('revoking alias: ',alias_string, ' for account: ',alias_sender)
        alias_owners[alias_string] = null
        alias_bucket[alias_sender] = null
        var pos = -1
        for(var k=0; k<my_alias_events.length; k++){
          if(my_alias_events[k]['alias'] == alias_string){
            pos = k
            break
          }
        }
        if(pos != -1){
          my_alias_events.splice(pos, 1)
        }
      }
      
      if(is_first_time){
        var alias_bucket_clone = structuredClone(this.state.alias_bucket)
        alias_bucket_clone[e5] = alias_bucket

        var alias_owners_clone = structuredClone(this.state.alias_owners)
        alias_owners_clone[e5] = alias_owners

        var my_alias_events_clone = structuredClone(this.state.my_alias_events)
        my_alias_events_clone[e5] = my_alias_events

        var alias_timestamp_clone = structuredClone(this.state.alias_timestamp)
        alias_timestamp_clone[e5] = alias_timestamp

        this.setState({alias_bucket: alias_bucket_clone, alias_owners:alias_owners_clone, my_alias_events:my_alias_events_clone, alias_timestamp:alias_timestamp_clone})
      }
    }

    var alias_bucket_clone = structuredClone(this.state.alias_bucket)
    alias_bucket_clone[e5] = alias_bucket

    var alias_owners_clone = structuredClone(this.state.alias_owners)
    alias_owners_clone[e5] = alias_owners

    var my_alias_events_clone = structuredClone(this.state.my_alias_events)
    my_alias_events_clone[e5] = my_alias_events

    var alias_timestamp_clone = structuredClone(this.state.alias_timestamp)
    alias_timestamp_clone[e5] = alias_timestamp

    this.setState({alias_bucket: alias_bucket_clone, alias_owners:alias_owners_clone, my_alias_events:my_alias_events_clone, alias_timestamp:alias_timestamp_clone})

  }

  record_number_of_items(e5, object_type, count){
    var obj = {'subscriptions':this.state.load_subscription_metrics, 'contracts':this.state.load_contracts_metrics, 'proposals':this.state.load_proposal_metrics, 'tokens':this.state.load_tokens_metrics, 'posts':this.state.load_posts_metrics, 'channels':this.state.load_channels_metrics, 'jobs':this.state.load_jobs_metrics, 'sent_mail':this.state.load_sent_mail_metrics, 'received_mail':this.state.load_received_mail_metrics, 'storefront':this.state.load_storefront_metrics, 'bags':this.state.load_bags_metrics, 'contractor':this.state.load_contractors_metrics, 'audio':this.state.load_audio_metrics, 'video':this.state.load_video_metrics, 'nitro':this.state.load_nitro_metrics}

    var load_metrics_clone = structuredClone(obj[object_type])
    if(load_metrics_clone[e5] == null){
      load_metrics_clone[e5] = {}
    }
    load_metrics_clone[e5] = count

    if(object_type == 'subscriptions'){
      this.setState({load_subscription_metrics: load_metrics_clone})
    }
    else if(object_type == 'contracts'){
      this.setState({load_contracts_metrics: load_metrics_clone})
    }
    else if(object_type == 'proposals'){
      this.setState({load_proposal_metrics: load_metrics_clone})
    }
    else if(object_type == 'tokens'){
      this.setState({load_tokens_metrics: load_metrics_clone})
    }
    else if(object_type == 'posts'){
      this.setState({load_posts_metrics: load_metrics_clone})
    }
    else if(object_type == 'channels'){
      this.setState({load_channels_metrics: load_metrics_clone})
    }
    else if(object_type == 'jobs'){
      this.setState({load_jobs_metrics: load_metrics_clone})
    }
    else if(object_type == 'sent_mail'){
      this.setState({load_sent_mail_metrics: load_metrics_clone})
    }
    else if(object_type == 'received_mail'){
      this.setState({load_received_mail_metrics: load_metrics_clone})
    }
    else if(object_type == 'storefront'){
      this.setState({load_storefront_metrics: load_metrics_clone})
    }
    else if(object_type == 'bags'){
      this.setState({load_bags_metrics: load_metrics_clone})
    }
    else if(object_type == 'contractor'){
      this.setState({load_contractors_metrics: load_metrics_clone})
    }
    else if(object_type == 'audio'){
      this.setState({load_audio_metrics: load_metrics_clone})
    }
    else if(object_type == 'video'){
      this.setState({load_video_metrics: load_metrics_clone})
    }
    else if(object_type == 'nitro'){
      this.setState({load_nitro_metrics: load_metrics_clone})
    }
  }







  get_subscription_data = async (contractInstance, F5contractInstance, account, web3, e5, contract_addresses, E52contractInstance, prioritized_accounts) => {
    var created_subscription_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ })

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ , p1/* object_id */: prioritized_accounts})

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p1)
        final_object_events.push(element)
      });
      created_subscription_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_subscription_events = final_object_events
    }

    var payment_history_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account})

    var created_subscriptions = []
    for(var i=0; i<created_subscription_events.length; i++){
      var id = created_subscription_events[i].returnValues.p1
      created_subscriptions.push(id)
    }

    this.record_number_of_items(e5, 'subscriptions', created_subscriptions.length)

    var created_subscription_data = await F5contractInstance.methods.f74(created_subscriptions).call((error, result) => {});
    var created_subscription_object_data = []
    var created_subscription_object_mapping = {}
    var is_first_time = this.state.created_subscriptions[e5] == null
    

    var account_as_list = []
    for(var i=0; i<created_subscriptions.length; i++){
      account_as_list.push([account])
    }
    var my_payments_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await F5contractInstance.methods.f229(created_subscriptions, account_as_list).call((error, result) => {});

    var interactible_checker_status_values_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f254(created_subscriptions,0).call((error, result) => {});

    var my_interactable_time_value_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f256(created_subscriptions, account_as_list, 0,2).call((error, result) => {})

    var my_blocked_time_value_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f256(created_subscriptions, account_as_list, 0,3).call((error, result) => {});

    var all_data = await this.fetch_multiple_objects_data(created_subscriptions, web3, e5, contract_addresses)

    for(var i=0; i<created_subscriptions.length; i++){
      var subscription_data = all_data[created_subscriptions[i]] == null ? await this.fetch_objects_data(created_subscriptions[i], web3, e5, contract_addresses): all_data[created_subscriptions[i]]
      var my_payment = my_payments_for_all_subscriptions[i]

      var paid_accounts = [];
      var paid_amounts = [];

      if(created_subscription_events[i].returnValues.p3 == account){
        //if the sender is the authority of the subscription
        var all_subscription_payment_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */:created_subscriptions[i]})

        var accounts_in_focus_as_list = []
        for(var j=0; j<all_subscription_payment_events.length; j++){
          var account_in_focus = all_subscription_payment_events[j].returnValues.p2
          accounts_in_focus_as_list.push(account_in_focus)
        }

        var collectible_time_value_for_all_accounts = created_subscription_data[i][1][2/* can_cancel_subscription */] == 1? 
        await F5contractInstance.methods.f235([created_subscriptions[i]], [accounts_in_focus_as_list]).call((error, result) => {}) :
        await F5contractInstance.methods.f229([created_subscriptions[i]], [accounts_in_focus_as_list]).call((error, result) => {});

        
        for(var j=0; j<all_subscription_payment_events.length; j++){
          var account_in_focus = all_subscription_payment_events[j].returnValues.p2
          
          if(!paid_accounts.includes(account_in_focus)){
            if(created_subscription_data[i][1][2/* can_cancel_subscription */] == 1){
              var collectible_time_value = /* await F5contractInstance.methods.f235([created_subscriptions[i]], [[account_in_focus]]).call((error, result) => {}); */ collectible_time_value_for_all_accounts
              
              if(collectible_time_value[0][j] != 0){
                paid_accounts.push(account_in_focus)
                paid_amounts.push(collectible_time_value[0][j])
              }
            }
            else{
              var collectible_time_value = /* await F5contractInstance.methods.f229([created_subscriptions[i]], [[account_in_focus]]).call((error, result) => {}); */ collectible_time_value_for_all_accounts

              if(collectible_time_value[0][j] != 0){
                paid_accounts.push(account_in_focus)
                paid_amounts.push(collectible_time_value[0][j])
              }
            }
          }
        }
      }

      var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_subscriptions[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
      var old_moderators = []

      for(var e=0; e<moderator_data.length; e++){
        var mod_id = moderator_data[e].returnValues.p3
        old_moderators.push(mod_id)
      }

      var mod_status_values = await E52contractInstance.methods.f255([created_subscriptions[i]], [old_moderators]).call((error, result) => {});

      var moderators = []
      for(var e=0; e<old_moderators.length; e++){
        var their_status = mod_status_values[0][e]
        if(their_status == true){
          moderators.push(old_moderators[e])
        }
      }

      var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_subscriptions[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_subscriptions[i]

      var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_subscriptions[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_subscriptions[i]

      var my_blocked_time_value = /* await E52contractInstance.methods.f256([created_subscriptions[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_subscriptions[i]

      var subscription_config = created_subscription_data[i][1]
      var time_unit = subscription_config[5] == 0 ? 60*53 : subscription_config[5]
      var last_expiration_time = this.get_last_expiration_time(payment_history_events, created_subscriptions[i], time_unit, my_payment/* [0] */[0] )

      var subscription_object = {'id':created_subscriptions[i], 'e5_id':created_subscriptions[i]+e5, 'data':created_subscription_data[i], 'ipfs':subscription_data, 'event':created_subscription_events[i], 'payment':my_payment/* [0] */[0], 'paid_accounts':paid_accounts, 'paid_amounts':paid_amounts, 'moderators':moderators, 'access_rights_enabled':interactible_checker_status_values[0], 'e5':e5, 'timestamp':created_subscription_events[i].returnValues.p4, 'author':created_subscription_events[i].returnValues.p3, 'last_expiration_time':last_expiration_time}

      if(interactible_checker_status_values/* [0] */[0] == true && (my_interactable_time_value/* [0] */[0] < Date.now()/1000 && !moderators.includes(account) && created_subscription_events[i].returnValues.p3 != account )){}
      else if(my_blocked_time_value/* [0] */[0] > Date.now()/1000){}
      else{
        if(created_subscription_object_mapping[created_subscriptions[i]+e5] == null)created_subscription_object_data.push(subscription_object)
      }

      created_subscription_object_mapping[created_subscriptions[i]+e5] = subscription_object

      if(is_first_time){
        var created_subscription_object_data_clone = structuredClone(this.state.created_subscriptions)
        created_subscription_object_data_clone[e5] = created_subscription_object_data
        
        var created_subscription_object_mapping_clone = structuredClone(this.state.created_subscription_object_mapping)
        created_subscription_object_mapping_clone[e5] = created_subscription_object_mapping

        this.setState({created_subscriptions: created_subscription_object_data_clone, created_subscription_object_mapping: created_subscription_object_mapping_clone})
      }
    }

    var created_subscription_object_data_clone = structuredClone(this.state.created_subscriptions)
    created_subscription_object_data_clone[e5] = created_subscription_object_data
    
    var created_subscription_object_mapping_clone = structuredClone(this.state.created_subscription_object_mapping)
    created_subscription_object_mapping_clone[e5] = created_subscription_object_mapping

    this.setState({created_subscriptions: created_subscription_object_data_clone, created_subscription_object_mapping: created_subscription_object_mapping_clone})
    
    // console.log('subscription count for e5: ',e5,' : ',created_subscription_object_data.length)
  }

  get_last_expiration_time(payment_history_events, subscription_id, time_unit, expiration_time){
    if(expiration_time != 0) return expiration_time
    var subscription_id_payment_history_events = []
    payment_history_events.forEach(event => {
      if(event.returnValues.p1 == subscription_id){
        subscription_id_payment_history_events.push(event)
      }
    });
    if(subscription_id_payment_history_events.length == 0) return 0
    var last_payment_expiration_time_event = subscription_id_payment_history_events[subscription_id_payment_history_events.length -1];

    var timestamp = bigInt(last_payment_expiration_time_event.returnValues.p5/* timestamp */).plus(bigInt(last_payment_expiration_time_event.returnValues.p3/* time_units_paid_for */).multiply(time_unit))

    return timestamp
  }

  get_contract_data = async (contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance, prioritized_accounts) => {
    var created_contract_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */ })

    created_contract_events = created_contract_events.reverse()

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */ , p1/* object_id */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p1)
        final_object_events.push(element)
      });
      created_contract_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_contract_events = final_object_events
    }

    var created_contracts = [2]
    var accounts_for_expiry_time = [[account]]
    for(var i=0; i<created_contract_events.length; i++){
      var id = created_contract_events[i].returnValues.p1
      created_contracts.push(id)
      accounts_for_expiry_time.push([account])
    }

    this.record_number_of_items(e5, 'contracts',created_contracts.length)

    var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});
    var entered_timestamp_data = await G52contractInstance.methods.f266(created_contracts, accounts_for_expiry_time, 3).call((error, result) => {});
    var created_contract_object_data = []
    var created_contract_mapping = {}
    // var is_first_time = this.has_gotten_contracts == false
    var is_first_time = this.state.created_contracts[e5].length <= 1 ? true : false
    // this.has_gotten_contracts = true



    var account_as_list = []
    for(var i=0; i<created_contracts.length; i++){
      account_as_list.push([account])
    }

    var interactible_checker_status_values_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f254(created_contracts,0).call((error, result) => {});

    var my_interactable_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,2).call((error, result) => {});

    var my_blocked_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,3).call((error, result) => {});


    var enter_exit_accounts_notifications = []

    var all_data = await this.fetch_multiple_objects_data(created_contracts, web3, e5, contract_addresses)
    
    for(var i=0; i<created_contracts.length; i++){
      var contracts_data = all_data[created_contracts[i]] == null ? await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses) : all_data[created_contracts[i]]
      var event = i>0 ? created_contract_events[i-1]: null
      var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
      var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

      var entered_accounts = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:3/* enter_contract(3) */,p1/* contract_id */:created_contracts[i]})

      var contract_entered_accounts = []
      var archive_accounts = []
      for(var e=0; e<entered_accounts.length; e++){
        // var account_entered_time = await G52contractInstance.methods.f266([created_contracts[i]], [[entered_accounts[e].returnValues.p2]], 3).call((error, result) => {});

        if(!contract_entered_accounts.includes(entered_accounts[e].returnValues.p2) /* && account_entered_time > Date.now()/1000 */){
          contract_entered_accounts.push(entered_accounts[e].returnValues.p2)
        }
        if(!archive_accounts.includes(entered_accounts[e].returnValues.p2)){
          archive_accounts.push(entered_accounts[e].returnValues.p2)
        }
      }

      var entered_account_times = await G52contractInstance.methods.f266([created_contracts[i]], [contract_entered_accounts], 3).call((error, result) => {});
      var entered_account_times_data = {}
      for(var e=0; e<contract_entered_accounts.length; e++){
        var time = entered_account_times[0][e]
        var account = contract_entered_accounts[e]
        entered_account_times_data[account] = time
      }


      var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_contracts[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
      var old_moderators = []

      for(var e=0; e<moderator_data.length; e++){
        var mod_id = moderator_data[e].returnValues.p3
        old_moderators.push(mod_id)
      }

      var mod_status_values = await E52contractInstance.methods.f255([created_contracts[i]], [old_moderators]).call((error, result) => {});

      var moderators = []
      for(var e=0; e<old_moderators.length; e++){
        var their_status = mod_status_values[0][e]
        if(their_status == true){
          moderators.push(old_moderators[e])
        }
      }

      var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_contracts[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_contracts

      var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_contracts

      var my_blocked_time_value =/*  await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_contracts

      var timestamp = event == null ? 0 : parseInt(event.returnValues.p4)
      var author = event == null ? 0 : event.returnValues.p3
      var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'entry_expiry':entered_timestamp_data[i][0], 'end_balance':end_balance, 'spend_balance':spend_balance, 'participants':contract_entered_accounts, 'participant_times':entered_account_times_data, 'archive_accounts':archive_accounts, 'moderators':moderators, 'access_rights_enabled':interactible_checker_status_values[i], 'my_interactable_time_value':my_interactable_time_value[i][0], 'my_blocked_time_value':my_blocked_time_value[i][0], 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5 }

      if(interactible_checker_status_values[0] == true && (my_interactable_time_value[i][0] < Date.now()/1000 && !moderators.includes(account) && event.returnValues.p3 != account )){
      }
      else if(my_blocked_time_value[i][0] > Date.now()/1000){

      }
      else{
        created_contract_object_data.push(contract_obj)
      }
      created_contract_mapping[created_contracts[i]] = contract_obj

      
      if(contract_obj['author'] == account){
        for(var e=0; e<entered_accounts.length; e++){
          enter_exit_accounts_notifications.push({'type':'contract_entry_notification', 'event':entered_accounts[e], 'e5':e5, 'timestamp':entered_accounts[e].returnValues.p7})
        }

        var exited_accounts = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:11/* exit_contract(11) */,p1/* contract_id */:created_contracts[i]})
        for(var e=0; e<exited_accounts.length; e++){
          enter_exit_accounts_notifications.push({'type':'contract_exit_notification', 'event':exited_accounts[e],'e5':e5, 'timestamp':exited_accounts[e].returnValues.p7})
        }
      }

      if(is_first_time){
        var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
        created_contract_object_data_clone[e5] = created_contract_object_data

        var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
        created_contract_mapping_clone[e5] = created_contract_mapping

        var enter_exit_accounts_notifications_clone = structuredClone(this.state.enter_exit_accounts_notifications)
        enter_exit_accounts_notifications_clone[e5] = enter_exit_accounts_notifications
        

        this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone, enter_exit_accounts_notifications: enter_exit_accounts_notifications_clone})
      }
    }

    var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
    created_contract_object_data_clone[e5] = created_contract_object_data

    var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
    created_contract_mapping_clone[e5] = created_contract_mapping

    var enter_exit_accounts_notifications_clone = structuredClone(this.state.enter_exit_accounts_notifications)
    enter_exit_accounts_notifications_clone[e5] = enter_exit_accounts_notifications


    this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone, enter_exit_accounts_notifications: enter_exit_accounts_notifications_clone})
    console.log('contract count for : ',e5, ' : ',created_contract_object_data.length)
    
  }

  get_proposal_data = async (G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account) => {
    var contracts_ive_entered_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */:account, p3/* action */:3 /* <3>enter_contract */})
    
    var contracts_ive_entered = []
    for(var i=0; i<contracts_ive_entered_events.length; i++){
      var contract = contracts_ive_entered_events[i].returnValues.p1
      contracts_ive_entered.push(contract)
    }

    var contracts_ive_exited_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */:account, p3/* action */:11 /* <11>exit_contract */})
    for(var i=0; i<contracts_ive_exited_events.length; i++){
      var contract = contracts_ive_exited_events[i].returnValues.p1
      const index = contracts_ive_entered.indexOf(contract);
      if (index > -1) { // only splice array when item is found
          contracts_ive_entered.splice(index, 1); // 2nd parameter means remove one item only
      }
    }

    var all_force_exit_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:18 /* <18>contract_force_exit_accounts */})

    for(var i=0; i<all_force_exit_events.length; i++){
      if(all_force_exit_events[i].returnValues.p5 == account.toString()){
        var force_exit_contract_id = all_force_exit_events[i].returnValues.p1
        const index = contracts_ive_entered.indexOf(force_exit_contract_id);
        if (index > -1) { // only splice array when item is found
            contracts_ive_entered.splice(index, 1); // 2nd parameter means remove one item only
        }
      }
    }

    var my_proposals_events = []
    var my_proposal_ids = []

    var all_contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:contracts_ive_entered})
    for(var j=0; j<all_contracts_proposals.length; j++){
      my_proposal_ids.push(parseInt(all_contracts_proposals[j].returnValues.p2)) //<--------issue! should be p4
      my_proposals_events.push(all_contracts_proposals[j])
    }

    my_proposal_ids = my_proposal_ids.reverse()
    my_proposals_events = my_proposals_events.reverse()

    var contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:2})
    for(var i=contracts_proposals.length-1; i>=0; i--){
      my_proposal_ids.push(parseInt(contracts_proposals[i].returnValues.p2))//<--------issue! should be p4
      my_proposals_events.push(contracts_proposals[i])
    }



    

    var created_proposal_object_data = []
    var created_proposal_data = await G5contractInstance.methods.f78(my_proposal_ids, false).call((error, result) => {});
    var consensus_data = await G52contractInstance.methods.f266(my_proposal_ids, [], 0).call((error, result) => {});
    var is_first_time = this.state.my_proposals[e5] == null


    var all_exchanges_in_list = []
    var depths = []
    var proposal_modify_target_types = []
    var account_as_list = []
    for(var i=0; i<my_proposal_ids.length; i++){
      all_exchanges_in_list.push([3, 5])
      depths.push(0)
      proposal_modify_target_types.push(created_proposal_data[i][1][9])
      account_as_list.push([account])
    }

    var balances = await this.get_balance_in_exchange_for_multiple_accounts(my_proposal_ids, all_exchanges_in_list, e5, contract_addresses, depths, 1)

    var proposal_modify_target_type_data = await E52contractInstance.methods.f134(proposal_modify_target_types).call((error, result) => {});

    var senders_vote_in_proposal_for_all_proposals = await G52contractInstance.methods.f237(my_proposal_ids, account_as_list).call((error, result) => {});

    this.record_number_of_items(e5, 'proposals',my_proposal_ids.length)

    var all_data = await this.fetch_multiple_objects_data(my_proposal_ids, web3, e5, contract_addresses)

    for(var i=0; i<my_proposal_ids.length; i++){
      var proposals_data = all_data[my_proposal_ids[i]] == null ? await this.fetch_objects_data(my_proposal_ids[i], web3, e5, contract_addresses) : all_data[my_proposal_ids[i]]
      var event = my_proposals_events[i]
      var end_balance = /* await this.get_balance_in_exchange(3, my_proposal_ids[i], e5, contract_addresses); */ balances[i][0]
      var spend_balance = /* await this.get_balance_in_exchange(5, my_proposal_ids[i], e5, contract_addresses); */ balances[i][1]

      var proposal_modify_target_type = /* await E52contractInstance.methods.f135(created_proposal_data[i][1][9]).call((error, result) => {}); */ proposal_modify_target_type_data[i]

      var senders_vote_in_proposal = /* await G52contractInstance.methods.f237([my_proposal_ids[i]], [[account]]).call((error, result) => {}); */ senders_vote_in_proposal_for_all_proposals[i]

      var proposal_voters = await this.load_event_data(web3, G52contractInstance, 'e1', e5, {p2/* consensus_id */:my_proposal_ids[i]})

      var archive_participants = []
      for(var o=0; o<proposal_voters.length; o++){
        if(!archive_participants.includes(proposal_voters[o].returnValues.p3)){
          archive_participants.push(proposal_voters[o].returnValues.p3)
        }
      }

      var obj = {'id':my_proposal_ids[i], 'data':created_proposal_data[i], 'ipfs':proposals_data, 'event':event, 'end_balance':end_balance, 'spend_balance':spend_balance, 'consensus_data':consensus_data[i], 'modify_target_type':proposal_modify_target_type, 'account_vote':senders_vote_in_proposal/* [0] */[0], 'archive_accounts':archive_participants, 'e5':e5, 'timestamp':parseInt(event.returnValues.p5), 'author':event.returnValues.p3, 'e5_id':my_proposal_ids[i]+e5 }

      created_proposal_object_data.push(obj)

      if(is_first_time){
        var my_proposals_clone = structuredClone(this.state.my_proposals)
        my_proposals_clone[e5] = created_proposal_object_data
        this.setState({my_proposals: my_proposals_clone})
      }
    }

    var my_proposals_clone = structuredClone(this.state.my_proposals)
    my_proposals_clone[e5] = created_proposal_object_data
    this.setState({my_proposals: my_proposals_clone})

    console.log('proposal count for e5: ',e5,' : ',created_proposal_object_data.length)
  }

  get_token_data = async (contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts) => {
    var created_token_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */})

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */ , p1/* object_id */: prioritized_accounts})

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p1)
        final_object_events.push(element)
      });
      created_token_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_token_events = final_object_events
    }

    var token_registry = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */:19/* 19(token_symbol_registry) */});
    var registered_token_names = {}
    var registered_token_symbols = {}
    token_registry.forEach(event => {
      var data = event.returnValues.p4/* string_data */
      var object = JSON.parse(data)
      registered_token_names[object['name']] = object['time']
      registered_token_symbols[object['symbol']] = object['time']
    });
    var registered_token_names_clone = structuredClone(this.state.registered_token_names)
    var registered_token_symbols_clone = structuredClone(this.state.registered_token_symbols)
    registered_token_names_clone[e5] = registered_token_names
    registered_token_symbols_clone[e5] = registered_token_symbols
    this.setState({registered_token_names:registered_token_names_clone, registered_token_symbols:registered_token_symbols_clone})


    var created_tokens = [3, 5]
    var created_token_depths = [0,0]
    var exchange_accounts = [account, account]
    for(var i=0; i<created_token_events.length; i++){
      var id = created_token_events[i].returnValues.p1
      created_tokens.push(id)
      created_token_depths.push(0)
      exchange_accounts.push(account)
    }

    this.record_number_of_items(e5, 'tokens', created_tokens.length)

    var created_token_data = await H5contractInstance.methods.f86(created_tokens).call((error, result) => {});
    // var token_balances = await H52contractInstance.methods.f140e(created_tokens, account, created_token_depths).call((error, result) => {});
    var token_balances_and_data = await this.get_balance_from_multiple_exchanges(created_tokens, account, H52contractInstance, created_token_depths)
    var token_balances = token_balances_and_data['bal']
    var token_balances_data = token_balances_and_data['bal_data']

    var accounts_exchange_data = await H5contractInstance.methods.f241(exchange_accounts, created_tokens).call((error, result) => {});
    
    var created_token_object_data = []
    var created_token_object_mapping = {}
    var is_first_time = this.state.created_tokens[e5] == null

    var account_as_list = []
    for(var i=0; i<created_tokens.length; i++){
      account_as_list.push([account])
    }

    var interactible_checker_status_values_for_all_tokens = await E52contractInstance.methods.f254(created_tokens,0).call((error, result) => {});

    var my_interactable_time_value_for_all_tokens = await E52contractInstance.methods.f256(created_tokens, account_as_list, 0,2).call((error, result) => {});

    var my_blocked_time_value_for_all_tokens = await E52contractInstance.methods.f256(created_tokens, account_as_list, 0,3).call((error, result) => {});


    var token_symbol_directory = {}
    var token_name_directory = {}
    token_symbol_directory[0] = 'wei'
    token_symbol_directory['wei'] = 0
    token_name_directory[e5+'0'] = this.state.e5s[e5].token

    var all_data = await this.fetch_multiple_objects_data(created_tokens, web3, e5, contract_addresses)

    for(var i=0; i<created_tokens.length; i++){
      var tokens_data = all_data[created_tokens[i]] == null ? await this.fetch_objects_data(created_tokens[i], web3, e5, contract_addresses) : all_data[created_tokens[i]]
      var event = i>1 ? created_token_events[i-2]: null

      var depth_values = []
      for(var j=0; j<created_token_data[i][3].length; j++){
        depth_values.push(0)
      }
      var exchanges_balances = await H52contractInstance.methods.f140e(created_token_data[i][3], created_tokens[i], depth_values).call((error, result) => {});

      // var exchanges_balances = await this.get_balance_from_multiple_exchanges(created_token_data[i][3], created_tokens[i], H52contractInstance)

      var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_tokens[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
      var old_moderators = []

      for(var e=0; e<moderator_data.length; e++){
        var mod_id = moderator_data[e].returnValues.p3
        old_moderators.push(mod_id)
      }

      var mod_status_values = await E52contractInstance.methods.f255([created_tokens[i]], [old_moderators]).call((error, result) => {});

      var moderators = []
      for(var e=0; e<old_moderators.length; e++){
        var their_status = mod_status_values[0][e]
        if(their_status == true){
          moderators.push(old_moderators[e])
        }
      }

      var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_tokens[i]],0).call((error, result) => {}); */ interactible_checker_status_values_for_all_tokens

      var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_tokens[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_tokens

      var my_blocked_time_value = /* await E52contractInstance.methods.f256([created_tokens[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_tokens



      var update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p1/* exchange */: created_tokens[i]})

      var update_proportion_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e2', e5, {p1/* exchange */: created_tokens[i]})

      var timestamp = event == null ? 0 : parseInt(event.returnValues.p4)
      var author = event == null ? 0 : event.returnValues.p3

      var balance = token_balances[i]
      var token_balance_data = token_balances_data[i]

      var exchanges_depth = 0
      if(tokens_data != null){
        exchanges_depth = tokens_data.default_depth == null ? 0 : tokens_data.default_depth
      }

      if(exchanges_depth > 13){
        var token_balances_and_data2 = await this.get_balance_from_multiple_exchanges([created_tokens[i]], account, H52contractInstance, [exchanges_depth])
        balance = token_balances_and_data2['bal'][0]
        token_balance_data = token_balances_and_data2['bal_data'][0]
      }

      if(tokens_data != null && tokens_data.token_image != null && tokens_data.token_image.startsWith('image')) this.fetch_uploaded_data_from_ipfs([tokens_data.token_image], false)

      var token_obj = {
        'id':created_tokens[i], 'data':created_token_data[i], 'ipfs':tokens_data, 'event':event, 'balance':balance, 'account_data':accounts_exchange_data[i], 'exchanges_balances':exchanges_balances, 'moderators':moderators, 'access_rights_enabled':interactible_checker_status_values[i],'e5':e5, 'timestamp':timestamp, 'exchange_ratio_data':update_exchange_ratio_event_data, 'proportion_ratio_data':update_proportion_ratio_event_data, 'author':author, 'e5_id':created_tokens[i]+e5, 
        'token_balances_data':token_balance_data
      }

      if(interactible_checker_status_values[i] == true && (my_interactable_time_value[i][0] < Date.now()/1000 && !moderators.includes(account) && event.returnValues.p3 != account )){

      }
      else if(my_blocked_time_value[i][0] > Date.now()/1000){

      }
      else{
        created_token_object_data.push(token_obj)
      }
      created_token_object_mapping[created_tokens[i]] = token_obj

      var token_name = tokens_data == null ? 'tokens' : tokens_data.entered_symbol_text
      var token_title = tokens_data == null ? 'tokens' : tokens_data.entered_title_text
      var token_id = created_tokens[i]

      if(token_id == 3){
        token_name = 'END'
        token_title = e5
      } 
      if(token_id == 5) {
        token_name = 'SPEND'
        token_title = e5.replace('E','3')
      }
      token_symbol_directory[token_id] = token_name;
      token_symbol_directory[token_name] = token_id;
      token_name_directory[e5+token_id] = token_title;


      if(is_first_time){
        var created_tokens_clone = structuredClone(this.state.created_tokens)
        created_tokens_clone[e5] = created_token_object_data

        var created_token_object_mapping_clone = structuredClone(this.state.created_token_object_mapping)
        created_token_object_mapping_clone[e5] = created_token_object_mapping

        var token_directory_clone = structuredClone(this.state.token_directory)
        token_directory_clone[e5] = token_symbol_directory

        var token_name_directory_clone = structuredClone(this.state.token_name_directory)
        token_name_directory_clone[e5] = token_name_directory

        this.setState({created_tokens: created_tokens_clone, created_token_object_mapping: created_token_object_mapping_clone, token_directory: token_directory_clone, token_name_directory: token_name_directory_clone,})
      }
    }

    var created_tokens_clone = this.structuredClone(this.state.created_tokens)
    created_tokens_clone[e5] = created_token_object_data

    var created_token_object_mapping_clone = structuredClone(this.state.created_token_object_mapping)
    created_token_object_mapping_clone[e5] = created_token_object_mapping

    var token_directory_clone = structuredClone(this.state.token_directory)
    token_directory_clone[e5] = token_symbol_directory

    var token_name_directory_clone = structuredClone(this.state.token_name_directory)
    token_name_directory_clone[e5] = token_name_directory

    this.setState({created_tokens: created_tokens_clone, created_token_object_mapping: created_token_object_mapping_clone, token_directory: token_directory_clone, token_name_directory: token_name_directory_clone,})
    // console.log('token count for e5: ',e5,' : ',created_token_object_data.length)

    if(e5 == 'E25'){
      console.log('token data: ', created_tokens_clone)
    }


    //load my received token events
    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account})
    var my_token_event_notifications_data = []
    for(var i=0; i<received_tokens_event_data.length; i++){
      my_token_event_notifications_data.push({'type':'token_event_notification', 'event':received_tokens_event_data[i], 'e5':e5, 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }

    var my_token_event_notifications_clone = structuredClone(this.state.my_token_event_notifications)
    my_token_event_notifications_clone[e5] = my_token_event_notifications_data

    this.setState({/* token_directory: token_directory_clone, token_name_directory: token_name_directory_clone, */ my_token_event_notifications: my_token_event_notifications_clone});
  }

  structuredClone(page_data){
    var clone = {}
    for (var key in page_data) {
      if (page_data.hasOwnProperty(key)) {
        clone[key] = page_data[key];
      }
    }
    return clone

    // return JSON.parse(JSON.stringify(page_data))
  }

  get_post_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts) => {
    var created_post_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 18/* 18(post object) */})
    created_post_events = created_post_events.reverse()

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:18/* post_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_post_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_post_events = final_object_events
    }

    
    this.record_number_of_items(e5, 'posts', created_post_events.length)
    var created_posts = []
    var is_first_time = this.state.created_posts[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_post_events), web3, e5, contract_addresses)
    console.log('all_data', all_data)

    for(var i=0; i<created_post_events.length; i++){
      var id = created_post_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_post_events[i].returnValues.p1.toString() == hash.toString()){
        var post_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
        
        created_posts.push({'id':id, 'ipfs':post_data, 'event': created_post_events[i], 'e5':e5, 'timestamp':parseInt(created_post_events[i].returnValues.p6), 'author':created_post_events[i].returnValues.p5, 'e5_id':id+e5})
      }

      if(is_first_time){
        var created_posts_clone = structuredClone(this.state.created_posts)
        created_posts_clone[e5] = created_posts
        this.setState({created_posts: created_posts_clone})        
      }
    }

    var created_posts_clone = structuredClone(this.state.created_posts)
    created_posts_clone[e5] = created_posts
    this.setState({created_posts: created_posts_clone})

    console.log('post count: '+created_posts.length)
  }

  get_channel_data = async (E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts) => {
    var created_channel_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 36/* 36(type_channel_target) */})
    created_channel_events = created_channel_events.reverse()

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:36/* channel_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_channel_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_channel_events = final_object_events
    }

    this.record_number_of_items(e5, 'channels', created_channel_events.length)
    var created_channel = []
    var is_first_time = this.state.created_channels[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_channel_events), web3, e5, contract_addresses)

    for(var i=0; i<created_channel_events.length; i++){
      var id = created_channel_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_channel_events[i].returnValues.p1.toString() == hash.toString()){
        var channel_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]

        var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:id, p2/* action_type */:4/* <4>modify_moderator_accounts */})
        var old_moderators = []

        for(var e=0; e<moderator_data.length; e++){
          var mod_id = moderator_data[e].returnValues.p3
          old_moderators.push(mod_id)
        }

        var mod_status_values = await E52contractInstance.methods.f255([id], [old_moderators]).call((error, result) => {});

        var moderators = []
        for(var e=0; e<old_moderators.length; e++){
          var their_status = mod_status_values[0][e]
          if(their_status == true){
            moderators.push(old_moderators[e])
          }
        }

        var interactible_checker_status_values = await E52contractInstance.methods.f254([id],0).call((error, result) => {});

        var my_interactable_time_value = await E52contractInstance.methods.f256([id], [[account]], 0,2).call((error, result) => {});

        var my_blocked_time_value = await E52contractInstance.methods.f256([id], [[account]], 0,3).call((error, result) => {});

        if(interactible_checker_status_values[0] == true && (my_interactable_time_value[0][0] < Date.now()/1000 || !moderators.includes(account))){

        }
        else if(my_blocked_time_value[0][0] > Date.now()/1000){

        }
        else{
          created_channel.push({'id':id, 'ipfs':channel_data, 'event': created_channel_events[i], 'messages':[], 'moderators':moderators, 'access_rights_enabled':interactible_checker_status_values[0], 'my_interactible_time_value':my_interactable_time_value[0][0], 'my_blocked_time_value':my_blocked_time_value[0][0],'e5':e5, 'timestamp':parseInt(created_channel_events[i].returnValues.p6), 'author':created_channel_events[i].returnValues.p5, 'e5_id':id+e5 });
        }
      }

      if(is_first_time){
        var created_channels_clone = structuredClone(this.state.created_channels)
        created_channels_clone[e5] = created_channel
        this.setState({created_channels: created_channels_clone})
      }
    }

    var created_channels_clone = structuredClone(this.state.created_channels)
    created_channels_clone[e5] = created_channel
    this.setState({created_channels: created_channels_clone})

    console.log('channel count: '+created_channel.length)
  }

  get_job_data = async (E52contractInstance, web3, e5, contract_addresses, account, loop_count, prioritized_accounts) => {
    var created_job_events =  await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 17/* 17(job_object) */})
    created_job_events = created_job_events.reverse()
    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:17/* job_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_job_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_job_events = final_object_events
    }

    // console.log('created_job_events', created_job_events)
    this.record_number_of_items(e5, 'jobs', created_job_events.length)

    var created_job = []
    var created_job_mappings = {}
    var my_jobs = []
    var my_job_ids = []
    var is_first_time = this.state.created_jobs[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_job_events), web3, e5, contract_addresses)

    for(var i=0; i<created_job_events.length; i++){
      var id = created_job_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_job_events[i].returnValues.p1.toString() == hash.toString()){
        var job_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
        if(job_data != null){
          var response_count = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:36})
          await this.wait(90)
          var job = {'id':id, 'ipfs':job_data, 'event': created_job_events[i], 'e5':e5, 'timestamp':parseInt(created_job_events[i].returnValues.p6), 'author':created_job_events[i].returnValues.p5 ,'e5_id':id+e5, 'responses':response_count.length}
          created_job.push(job)
          created_job_mappings[id] = job

          if(job['author'] == account){
            my_jobs.push(job)
            my_job_ids.push(job['id'])
          }
        }
      }

      if(is_first_time){
        var created_jobs_clone = structuredClone(this.state.created_jobs)
        created_jobs_clone[e5] = created_job

        var created_job_mappings_clone = structuredClone(this.state.created_job_mappings)
        created_job_mappings_clone[e5] = created_job_mappings

        this.setState({created_jobs: created_jobs_clone, created_job_mappings:created_job_mappings_clone});
      }
    }

    //my job applications
    var my_created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* target_id */: account, p3/* context */:36})
    var my_applications = []
    var my_application_targets = []
    var my_application_int_data = []
    for(var i=0; i<my_created_job_respnse_data.length; i++){
      var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_created_job_respnse_data[i].returnValues.p4)

      if(ipfs_data['type'] == 'job_application'){
        my_applications.push({'ipfs':ipfs_data, 'event':my_created_job_respnse_data[i], 'e5':e5, 'timestamp':my_created_job_respnse_data[i].returnValues.p6})
        my_application_targets.push(my_created_job_respnse_data[i].returnValues.p1)
        my_application_int_data.push(my_created_job_respnse_data[i].returnValues.p5)
      }

      if(is_first_time){
        var my_applications_clone = structuredClone(this.state.my_applications)
        my_applications_clone[e5] = my_applications
        this.setState({my_applications:my_applications_clone})
      }
    }

    //------------ my job application responses
    var my_accepted_applications_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_application_targets, p3/* context */:37})
    var my_accepted_applications = []
    for(var i=0; i<my_accepted_applications_events.length; i++){
      if(my_application_int_data.includes(my_accepted_applications_events[i].returnValues.p5)){
        my_accepted_applications.push({'type':'my_job_application_response_notification', 'event':my_accepted_applications_events[i], 'e5':e5, 'timestamp':my_accepted_applications_events[i].returnValues.p6})

        if(is_first_time){
          var my_job_application_responses_clone = structuredClone(this.state.my_job_application_responses_notifications)
          my_job_application_responses_clone[e5] = my_accepted_applications
          this.setState({my_job_application_responses_notifications: my_job_application_responses_clone})
        }
      }
    }

    //------------ when someone responds to my job
    var my_job_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_job_ids, p3/* context */:36})
    var notifications = []
    for(var i=0; i<my_job_responses.length; i++){
      var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_job_responses[i].returnValues.p4)
      if(ipfs_data['type'] == 'job_application'){
        notifications.push({'type':'job_response_notification', 'ipfs':ipfs_data, 'event':my_job_responses[i], 'e5':e5, 'timestamp':my_job_responses[i].returnValues.p6})
      }

      if(is_first_time){
        var my_received_applications_clone = structuredClone(this.state.my_job_responses_notifications)
        my_received_applications_clone[e5] = notifications
        this.setState({my_job_responses_notifications: my_received_applications_clone})
      }
    }


    var created_jobs_clone = structuredClone(this.state.created_jobs)
    created_jobs_clone[e5] = created_job

    var created_job_mappings_clone = structuredClone(this.state.created_job_mappings)
    created_job_mappings_clone[e5] = created_job_mappings

    var my_applications_clone = structuredClone(this.state.my_applications)
    my_applications_clone[e5] = my_applications

    var my_received_applications_clone = structuredClone(this.state.my_job_responses_notifications)
    my_received_applications_clone[e5] = notifications

    var my_job_application_responses_clone = structuredClone(this.state.my_job_application_responses_notifications)
    my_job_application_responses_clone[e5] = my_accepted_applications

    this.setState({created_jobs: created_jobs_clone, created_job_mappings:created_job_mappings_clone, my_applications:my_applications_clone, my_job_responses_notifications: my_received_applications_clone, my_job_application_responses_notifications: my_job_application_responses_clone})
    
    console.log(e5, 'job count: ',created_job.length)
    console.log(e5, 'job applications count: ', my_applications.length)

    // if(created_job.length == 0 && loop_count < 3){
    //   this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, loop_count+1)
    // }
  }

  get_sent_mail_data = async (E52contractInstance, e5, account, web3) => {
    if(this.state.accounts[e5].privateKey == '') return;
    var my_created_mail_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:30})
    my_created_mail_events = my_created_mail_events

    this.record_number_of_items(e5, 'sent_mail',my_created_mail_events.length)
    var created_mail = []
    var mail_activity = {}
    var is_first_time = this.state.created_mail[e5] == null

    await this.fetch_multiple_cids_from_nitro(my_created_mail_events, 0, 'p4')

    for(var i=0; i<my_created_mail_events.length; i++){
      var convo_id = my_created_mail_events[i].returnValues.p5
      var cid = my_created_mail_events[i].returnValues.p4
      
      var ipfs = await this.fetch_objects_data_from_ipfs_using_option(cid)

      if(!created_mail.includes(convo_id)){
        created_mail.push(convo_id)
        if(mail_activity[convo_id] == null){
          mail_activity[convo_id] = []
        }
      }
      var ipfs_obj = await this.fetch_and_decrypt_ipfs_object(ipfs, e5)
      if(ipfs_obj != null && ipfs_obj['time'] != null){
        ipfs_obj['time'] = my_created_mail_events[i].returnValues.p6
      }else{
        console.log('ipfs data thats null: ', ipfs)
      } 

      mail_activity[convo_id].push({'convo_id':convo_id,'id':cid, 'event':my_created_mail_events[i], 'ipfs':ipfs_obj, 'type':'sent', 'time':my_created_mail_events[i].returnValues.p6, 'convo_with':my_created_mail_events[i].returnValues.p1, 'sender':my_created_mail_events[i].returnValues.p2, 'recipient':my_created_mail_events[i].returnValues.p1, 'e5':e5, 'timestamp':parseInt(my_created_mail_events[i].returnValues.p6), 'author':my_created_mail_events[i].returnValues.p2, 'e5_id':cid})

      if(mail_activity[convo_id].length > 1){
        this.fetch_uploaded_files_for_object(ipfs_obj)
      }
      
      if(is_first_time){
        var created_mail_clone = structuredClone(this.state.created_mail)
        created_mail_clone[e5] = {'created_mail':created_mail, 'mail_activity':mail_activity}
        this.setState({created_mail: created_mail_clone})
      }
    }

    var created_mail_clone = structuredClone(this.state.created_mail)
    created_mail_clone[e5] = {'created_mail':created_mail, 'mail_activity':mail_activity}
    this.setState({created_mail: created_mail_clone})
    
    console.log('aactivity: ', mail_activity)
    console.log('created mail count: ',created_mail.length)
  }

  get_received_mail_data = async (E52contractInstance, e5, account, web3) => {
    if(this.state.accounts[e5].privateKey == '') return;
    var my_received_mail_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:30})
    this.record_number_of_items(e5, 'received_mail', my_received_mail_events.length)

    var received_mail = []
    var mail_activity = {}
    var parent_mail_id = {}
    var is_first_time = this.state.received_mail[e5] == null
    var received_mail_notifications = []

    await this.fetch_multiple_cids_from_nitro(my_received_mail_events, 0, 'p4')

    for(var i=0; i<my_received_mail_events.length; i++){
      var convo_id = my_received_mail_events[i].returnValues.p5
      var cid = my_received_mail_events[i].returnValues.p4
      var ipfs = await this.fetch_objects_data_from_ipfs_using_option(cid)

      if(!received_mail.includes(convo_id)){
        received_mail.push(convo_id)
        if(mail_activity[convo_id] == null){
          mail_activity[convo_id] = []
        }
      }
      var ipfs_obj = await this.fetch_and_decrypt_ipfs_object(ipfs, e5)
      ipfs_obj['time'] = my_received_mail_events[i].returnValues.p6
      
      var obj = {'convo_id':convo_id,'id':cid, 'event':my_received_mail_events[i], 'ipfs':ipfs_obj, 'type':'received', 'time':my_received_mail_events[i].returnValues.p6, 'convo_with':my_received_mail_events[i].returnValues.p2, 'sender':my_received_mail_events[i].returnValues.p2, 'recipient':my_received_mail_events[i].returnValues.p1, 'e5':e5, 'timestamp':parseInt(my_received_mail_events[i].returnValues.p6), 'author':my_received_mail_events[i].returnValues.p2, 'e5_id':cid}
      
      if(ipfs_obj['message'] != null){
        received_mail_notifications.push({'type':'mail_message_notification', 'event':my_received_mail_events[i], 'e5':e5, 'timestamp':my_received_mail_events[i].returnValues.p6, 'ipfs':ipfs_obj, 'convo_id':convo_id,'id':cid})
      }

      mail_activity[convo_id].push(obj)

      if(mail_activity[convo_id].length > 1){
        this.fetch_uploaded_files_for_object(ipfs_obj)
      }

      if(is_first_time){
        var received_mail_clone = structuredClone(this.state.received_mail)
        received_mail_clone[e5] = {'received_mail':received_mail, 'mail_activity':mail_activity}

        var received_mail_notifications_clone = structuredClone(this.state.received_mail_notifications)
        received_mail_notifications_clone[e5] = received_mail_notifications

        this.setState({received_mail: received_mail_clone, received_mail_notifications: received_mail_notifications_clone})
      }

    }

    var received_mail_clone = structuredClone(this.state.received_mail)
    received_mail_clone[e5] = {'received_mail':received_mail, 'mail_activity':mail_activity}

    var received_mail_notifications_clone = structuredClone(this.state.received_mail_notifications)
    received_mail_notifications_clone[e5] = received_mail_notifications

    this.setState({received_mail: received_mail_clone, received_mail_notifications: received_mail_notifications_clone})

    console.log('received mail count: '+received_mail.length)
    console.log('mail activity: ', mail_activity)
  }

  get_storefront_data = async (E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account, prioritized_accounts, load_prioritized_accounts_exclusively) => {
    var created_store_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 27/* 27(storefront-item) */})
    created_store_events = created_store_events.reverse()

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:27/* storefront_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_store_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2) && !load_prioritized_accounts_exclusively){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_store_events = final_object_events
    }

    this.record_number_of_items(e5, 'storefront', created_store_events.length)
    var created_stores = []
    var created_store_mappings = {}
    var my_stores = []
    var is_first_time = this.state.created_stores[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_store_events), web3, e5, contract_addresses)

    for(var i=0; i<created_store_events.length; i++){
      var id = created_store_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_store_events[i].returnValues.p1.toString() == hash.toString()){
        var data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
        if(data != null){
          if(data != null && data.storefront_item_art != null && data.storefront_item_art.startsWith('image')) this.fetch_uploaded_data_from_ipfs([data.storefront_item_art], false)

          var obj = {'id':id, 'ipfs':data, 'event': created_store_events[i], 'e5':e5, 'timestamp':parseInt(created_store_events[i].returnValues.p6), 'author':created_store_events[i].returnValues.p5, 'e5_id':id+e5}
          created_stores.push(obj)
          created_store_mappings[id] = obj

          if(obj['author'] == account){
            my_stores.push(id)
          }

          if(load_prioritized_accounts_exclusively){
            this.fetch_uploaded_files_for_object(obj)
          }
        }
      }
      if(is_first_time){
        var created_stores_clone = structuredClone(this.state.created_stores)
        created_stores_clone[e5] = created_stores

        var created_store_mappings_clone = structuredClone(this.state.created_store_mappings)
        created_store_mappings_clone[e5] = created_store_mappings
        
        this.setState({created_stores: created_stores_clone, created_store_mappings:created_store_mappings_clone})
      }
    }


    var my_store_direct_purchases = await this.load_event_data(web3, H52contractInstance, 'e5', e5, {p3/* awward_context */: my_stores})
    var my_store_direct_purchases_notifications = []
    for(var i=0; i<my_store_direct_purchases.length; i++){
      my_store_direct_purchases_notifications.push({'type':'direct_purchase_notification', 'event':my_store_direct_purchases[i], 'e5':e5, 'timestamp':my_store_direct_purchases[i].returnValues.p5})
    }


    var created_stores_clone = structuredClone(this.state.created_stores)
    created_stores_clone[e5] = created_stores

    var created_store_mappings_clone = structuredClone(this.state.created_store_mappings)
    created_store_mappings_clone[e5] = created_store_mappings

    var my_store_direct_purchases_notifications_clone = structuredClone(this.state.my_store_direct_purchases_notifications)
    my_store_direct_purchases_notifications_clone[e5] = my_store_direct_purchases_notifications
    
    this.setState({created_stores: created_stores_clone, created_store_mappings:created_store_mappings_clone, my_store_direct_purchases_notifications: my_store_direct_purchases_notifications_clone})
    
    console.log('store count: '+created_stores.length)
  }

  get_bag_data = async (contractInstance, web3, e5, contract_addresses, E52contractInstance, account, prioritized_accounts) => {
    var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */})
    created_bag_events = created_bag_events.reverse();
    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:25/* bag_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_bag_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_bag_events = final_object_events
    }

    this.record_number_of_items(e5, 'bags', created_bag_events.length)
    var created_bags = []
    var my_created_bag_ids = []
    var is_first_time = this.state.created_bags[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events3(created_bag_events), web3, e5, contract_addresses)

    var response_count_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:36})

    var my_bag_responses = []

    for(var i=0; i<created_bag_events.length; i++){
      var id = created_bag_events[i].returnValues.p1
      var data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
      // var response_count = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:36})
      var response_count = []
      var responded_to = false;
      response_count_data.forEach(event => {
        if(event.returnValues.p1 == id){
          response_count.push(event)
          if(event.returnValues.p2/* sender_acc_id */ == account){
            //sender is author of response
            responded_to = true
          }
        }
      });

      // console.log('all_data2', 'loaded data for ', id)

      if(data != null && id != 1523 && id != 1538){
        // console.log('all_data2', 'loaded data successfully ', data)
        var bag = {'id':id, 'ipfs':data, 'event': created_bag_events[i], 'e5':e5, 'timestamp':parseInt(created_bag_events[i].returnValues.p4), 'author':created_bag_events[i].returnValues.p3, 'e5_id':id+e5, 'responses':response_count.length, 'responded_to':responded_to}
        created_bags.push(bag)

        var images = this.get_bag_images(bag)
        // console.log('all_data2', 'staged images for bag ', bag, images)
        if(images.length > 0){
          // console.log('all_data2', 'starting fetch of images', images)
          this.fetch_uploaded_data_from_ipfs(images, false)
          // console.log('all_data2', 'finished calling fetch of images', images)
        }

        if(bag['author'] == account){
          // console.log('all_data2', 'bag is my bag')
          my_created_bag_ids.push(id)
          my_bag_responses = my_bag_responses.concat(response_count)
        }
      }
      if(is_first_time){
        var created_bags_clone = structuredClone(this.state.created_bags)
        created_bags_clone[e5] = created_bags
        this.setState({created_bags: created_bags_clone})
      }
    }
    // console.log('all_data2', 'reached end of loading bag data')


    //------------ when someone responds to my bag
    // var my_bag_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_created_bag_ids, p3/* context */:36})
    // console.log('all_data2', 'my_bag_responses', my_bag_responses)
    // var notifications = []
    // if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
    //   await this.fetch_multiple_cids_from_nitro(my_bag_responses, 0, 'p4')
    // }
    // for(var i=0; i<my_bag_responses.length; i++){
    //   var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_bag_responses[i].returnValues.p4)

    //   if(ipfs_data['type'] == 'bag_application'){
    //     notifications.push({'type':'bag_response_notification', 'ipfs':ipfs_data, 'event':my_bag_responses[i], 'e5':e5, 'timestamp':my_bag_responses[i].returnValues.p6})
    //   }

    //   if(is_first_time){
    //     var my_received_applications_clone = structuredClone(this.state.my_bag_responses_notifications)
    //     my_received_applications_clone[e5] = notifications
    //     this.setState({my_bag_responses_notifications: my_received_applications_clone})
    //   }
    // }

    // console.log('all_data2', 'reached end of loading bag responses data', notifications)



    //my bag applications
    // var my_created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* target_id */: account, p3/* context */:36})
    // var my_applications = []
    // var my_application_targets = []
    // var my_application_int_data = []
    // if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
    //   await this.fetch_multiple_cids_from_nitro(my_created_job_respnse_data, 0, 'p4')
    // }
    // for(var i=0; i<my_created_job_respnse_data.length; i++){
    //   var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_created_job_respnse_data[i].returnValues.p4)

    //   if(ipfs_data['type'] == 'bag_application'){
    //     my_applications.push({'ipfs':ipfs_data, 'event':my_created_job_respnse_data[i], 'e5':e5, 'timestamp':my_created_job_respnse_data[i].returnValues.p6})
    //     my_application_targets.push(my_created_job_respnse_data[i].returnValues.p1)
    //     my_application_int_data.push(my_created_job_respnse_data[i].returnValues.p5)
    //   }

    //   if(is_first_time){
    //     var my_applications_clone = structuredClone(this.state.my_bag_applications)
    //     my_applications_clone[e5] = my_applications
    //     this.setState({my_bag_applications: my_applications_clone})
    //   }
    // }

    // console.log('all_data2', 'reached end of loading my bag applications data')


    //------------ my bag application responses
    // var my_accepted_applications_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_application_targets, p3/* context */:37})
    // console.log('all_data2', 'my_accepted_applications_events: ', my_accepted_applications_events)
    // var my_accepted_applications = []
    // for(var i=0; i<my_accepted_applications_events.length; i++){
    //   if(my_application_int_data.includes(my_accepted_applications_events[i].returnValues.p5)){
    //     my_accepted_applications.push({'type':'my_bag_application_response_notification', 'event':my_accepted_applications_events[i], 'e5':e5, 'timestamp':my_accepted_applications_events[i].returnValues.p6})

    //     if(is_first_time){
    //       var my_job_application_responses_clone = structuredClone(this.state.my_bag_application_responses_notifications)
    //       my_job_application_responses_clone[e5] = my_accepted_applications
    //       this.setState({my_bag_application_responses_notifications: my_job_application_responses_clone})
    //     }
    //   }
    // }

    // console.log('all_data2', 'reached end of loading my bag application responses data')


    var created_bags_clone = structuredClone(this.state.created_bags)
    created_bags_clone[e5] = created_bags

    // var my_received_applications_clone = structuredClone(this.state.my_bag_responses_notifications)
    // my_received_applications_clone[e5] = notifications

    // var my_applications_clone = structuredClone(this.state.my_bag_applications)
    // my_applications_clone[e5] = my_applications

    // var my_job_application_responses_clone = structuredClone(this.state.my_bag_application_responses_notifications)
    // my_job_application_responses_clone[e5] = my_accepted_applications

    this.setState({created_bags: created_bags_clone, /* my_bag_responses_notifications: my_received_applications_clone, my_bag_applications: my_applications_clone, my_bag_application_responses_notifications: my_job_application_responses_clone */})

    console.log(e5, ' bag count: '+created_bags.length)
  }

  get_bag_images(object){
    var images = []
    for(var i=0; i<object['ipfs']['bag_orders'].length; i++){
        var bag_order = object['ipfs']['bag_orders'][i]
        var variant_images = bag_order['variant_images']
        if(variant_images != null && variant_images.length > 0){
            variant_images.forEach(image => {
              if(image.startsWith('image')){
                images.push(image)
              }
            });
        }
    }
    return images
  }

  get_contractor_data = async (E52contractInstance, contract_addresses, e5, web3, account, prioritized_accounts) => {
    var created_contractor_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 26/* 26(contractor_object) */ })
    created_contractor_events = created_contractor_events.reverse()
    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:26/* contractor_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_contractor_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_contractor_events = final_object_events
    }

    this.record_number_of_items(e5, 'contractor', created_contractor_events.length)
    var created_contractor = []
    var my_contractor_posts = []
    var is_first_time = this.state.created_contractors[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_contractor_events), web3, e5, contract_addresses)

    for(var i=0; i<created_contractor_events.length; i++){
      var id = created_contractor_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_contractor_events[i].returnValues.p1.toString() == hash.toString()){
        var contractor_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        
        if(contractor_data != null){
          var requests = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:38})

          var post = {'id':id, 'ipfs':contractor_data, 'event': created_contractor_events[i], 'e5':e5, 'timestamp':parseInt(created_contractor_events[i].returnValues.p6), 'author':created_contractor_events[i].returnValues.p5, 'e5_id':id+e5, 'requests':requests.length}
          created_contractor.push(post)

          if(post['author'] == account){
            my_contractor_posts.push(id)
          }
        }
      }

      if(is_first_time){
        var created_contractors_clone = structuredClone(this.state.created_contractors)
        created_contractors_clone[e5] = created_contractor
        this.setState({created_contractors: created_contractors_clone,})
      }
    }


    var my_contractor_job_requests = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_contractor_posts, p3/* context */:38})
    var my_contractor_job_request_notifications = []
    for(var i=0; i<my_contractor_job_requests.length; i++){
      my_contractor_job_request_notifications.push({'type':'contractor_request_notification', 'event':my_contractor_job_requests[i], 'e5':e5, 'timestamp':my_contractor_job_requests[i].returnValues.p6})
    }

    var created_contractors_clone = structuredClone(this.state.created_contractors)
    created_contractors_clone[e5] = created_contractor

    var my_contractor_job_request_notifications_clone = structuredClone(this.state.my_contractor_job_request_notifications)
    my_contractor_job_request_notifications_clone[e5] = my_contractor_job_request_notifications

    this.setState({created_contractors: created_contractors_clone, my_contractor_job_request_notifications: my_contractor_job_request_notifications_clone})

    console.log('contractor count: '+created_contractor.length)
  }

  get_audio_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts) => {
    var created_audio_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 19/* 19(audio_object) */})
    created_audio_events = created_audio_events.reverse()

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:19/* 19(audio_object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_audio_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_audio_events = final_object_events
    }
    
    this.record_number_of_items(e5, 'audio', created_audio_events.length)
    var created_audios = this.state.created_audios[e5] == null ? [] : this.state.created_audios[e5].slice()
    var my_acquired_audios = []
    var created_audio_mappings = this.state.created_audio_mappings[e5] == null ? {} : structuredClone(this.state.created_audio_mappings[e5])
    var is_first_time = this.state.created_audios[e5] == null
    is_first_time = true

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_audio_events), web3, e5, contract_addresses)

    for(var i=0; i<created_audio_events.length; i++){
      var id = created_audio_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_audio_events[i].returnValues.p1.toString() == hash.toString()){
        var audio_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        
        if(audio_data != null && audio_data.album_art != null && audio_data.album_art.startsWith('image')) this.fetch_uploaded_data_from_ipfs([audio_data.album_art], false)

        var requests = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 21, p3/* context */:id})
        var album_sales = 0
        var song_sales = 0
        requests.forEach(event => {
          if(event.returnValues.p5/* sales_type */ == 0/* entire_album */){
            album_sales++
          }else{
            song_sales++
          }
        });

        const data = {'id':id, 'ipfs':audio_data, 'event': created_audio_events[i], 'e5':e5, 'timestamp':parseInt(created_audio_events[i].returnValues.p6), 
        'author':created_audio_events[i].returnValues.p5, 'e5_id':id+e5, 'album_sales':album_sales, 'song_sales':song_sales
        }

        var obj = this.get_item_in_array(created_audios, id)
        if(obj == null){
          created_audios.push(data)
        }else{
          var pos = created_audios.indexOf(obj)
          if(pos != -1){
            created_audios[pos] = data
          }
        }
        created_audio_mappings[id] = data
        if(this.state.my_albums.includes(id)){
          my_acquired_audios.push(data)
        }
      }

      if(is_first_time){
        var created_audios_clone = structuredClone(this.state.created_audios)
        var created_audio_mappings_clone = structuredClone(this.state.created_audio_mappings)
        created_audios_clone[e5] = created_audios
        created_audio_mappings_clone[e5] = created_audio_mappings
        this.setState({created_audios: created_audios_clone, created_audio_mappings:created_audio_mappings_clone, my_acquired_audios: my_acquired_audios})        
      }
    }

    var created_audios_clone = structuredClone(this.state.created_audios)
    var created_audio_mappings_clone = structuredClone(this.state.created_audio_mappings)
    created_audios_clone[e5] = created_audios
    created_audio_mappings_clone[e5] = created_audio_mappings
    this.setState({created_audios: created_audios_clone, created_audio_mappings:created_audio_mappings_clone, my_acquired_audios: my_acquired_audios})

    console.log('audio count: '+created_audios.length)
  }

  get_video_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts) => {
    var created_video_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 20/* 20(video_object) */})

    created_video_events = created_video_events.reverse()
    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:20/* 20(video_object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_video_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_video_events = final_object_events
    }
    
    this.record_number_of_items(e5, 'video', created_video_events.length)
    var created_videos = this.state.created_videos[e5] == null ? [] : this.state.created_videos[e5].slice()
    var created_video_mappings = this.state.created_video_mappings[e5] == null ? {} : structuredClone(this.state.created_video_mappings[e5])
    var my_acquired_videos = []
    var is_first_time = this.state.created_videos[e5] == null
    is_first_time = true

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_video_events), web3, e5, contract_addresses)

    for(var i=0; i<created_video_events.length; i++){
      var id = created_video_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_video_events[i].returnValues.p1.toString() == hash.toString()){
        var video_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        console.log('video_data', video_data)
        if(video_data != null){
          if(video_data.album_art != null && video_data.album_art.startsWith('image')) {
            this.fetch_uploaded_data_from_ipfs([video_data.album_art], false)
          }

          var sales_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 21, p3/* context */:id})
          var videopost_sales = 0
          var video_sales = 0
          sales_events.forEach(event => {
            if(event.returnValues.p5/* sales_type */ == 0/* entire_album */){
              videopost_sales++
            }else{
              video_sales++
            }
          });

          const data = {'id':id, 'ipfs':video_data, 'event': created_video_events[i], 'e5':e5, 'timestamp':parseInt(created_video_events[i].returnValues.p6), 
          'author':created_video_events[i].returnValues.p5, 'e5_id':id+e5, 'videopost_sales':videopost_sales, 'video_sales':video_sales,
          }

          var obj = this.get_item_in_array(created_videos, id)
          if(obj == null){
            created_videos.push(data)
          }else{
            var pos = created_videos.indexOf(obj)
            if(pos != -1){
              created_videos[pos] = data
            }
          }
          created_video_mappings[id] = data
          if(this.state.my_videoposts.includes(id)){
            my_acquired_videos.push(data)
          }
        }
      }

      if(is_first_time){
        var created_videos_clone = structuredClone(this.state.created_videos)
        var created_video_mappings_clone = structuredClone(this.state.created_video_mappings)
        created_videos_clone[e5] = created_videos
        created_video_mappings_clone[e5] = created_video_mappings
        this.setState({created_videos: created_videos_clone, created_video_mappings:created_video_mappings_clone, my_acquired_videos: my_acquired_videos})        
      }
    }

    var created_videos_clone = structuredClone(this.state.created_videos)
    var created_video_mappings_clone = structuredClone(this.state.created_video_mappings)
    created_videos_clone[e5] = created_videos
    created_video_mappings_clone[e5] = created_video_mappings
    this.setState({created_videos: created_videos_clone, created_video_mappings:created_video_mappings_clone, my_acquired_videos: my_acquired_videos})

    console.log('video count: '+created_videos.length)
    
  }

  get_nitro_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account,F5contractInstance) => {
    var created_nitro_events = null
    var bought_nitro_events = null
    var paid_subscription_events = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */}],
        [web3, E52contractInstance, 'e4', e5, {p1/* target_id */:23, p2/* sender_acc_id */:account}],
        [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account}]
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      created_nitro_events = all_events[0]
      bought_nitro_events = all_events[1]
      paid_subscription_events = all_events[2]
    }
    else{
      created_nitro_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */})
      bought_nitro_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */:23, p2/* sender_acc_id */:account})
      paid_subscription_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account})
    }

    console.log('bought_nitros', bought_nitro_events, 'account', account, 'e5', e5)

    created_nitro_events = created_nitro_events.reverse()
    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:21/* 21(nitro_object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_nitro_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_nitro_events = final_object_events
    }

    const bought_nitros = []
    bought_nitro_events.forEach(event => {
      if(!bought_nitros.includes(event.returnValues.p3/* context */)){
        bought_nitros.push(event.returnValues.p3/* context */)
      }
    });

    var subscriptions_interacted_with = []
    var account_as_list = []
    paid_subscription_events.forEach(event => {
      var subscription = event.returnValues.p1
      if(!subscriptions_interacted_with.includes(subscription)){
        subscriptions_interacted_with.push(subscription)
        account_as_list.push([account])
      }
    });

    var my_payments_for_all_subscriptions = subscriptions_interacted_with.length == 0 ? [] : await F5contractInstance.methods.f229(subscriptions_interacted_with, account_as_list).call((error, result) => {});

    var subscription_payment_obj = {}
    for(var s=0; s<subscriptions_interacted_with.length; s++){
      var sub = subscriptions_interacted_with[s]
      var my_payment = my_payments_for_all_subscriptions[s][0]
      subscription_payment_obj[parseInt(sub)] = my_payment
    }

    var my_subscription_payment_mappings = structuredClone(this.state.my_subscription_payment_mappings)
    my_subscription_payment_mappings[e5] = subscription_payment_obj
    this.setState({my_subscription_payment_mappings: my_subscription_payment_mappings})


    
    this.record_number_of_items(e5, 'nitro', created_nitro_events.length)
    var created_nitros = this.state.created_nitros[e5] == null ? [] : this.state.created_nitros[e5].slice()
    var created_nitro_mappings = this.state.created_nitro_mappings[e5] == null ? {} : structuredClone(this.state.created_nitro_mappings[e5])

    var is_first_time = this.state.created_nitros[e5] == null
    is_first_time = true

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_nitro_events), web3, e5, contract_addresses)

    for(var i=0; i<created_nitro_events.length; i++){
      var id = created_nitro_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_nitro_events[i].returnValues.p1.toString() == hash.toString()){
        var nitro_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        if(nitro_data != null){
          if(nitro_data.album_art != null && nitro_data.album_art.startsWith('image')) {
            this.fetch_uploaded_data_from_ipfs([nitro_data.album_art], false)
          }

          var is_bought = bought_nitros.includes(id)
          const data = {'id':id, 'ipfs':nitro_data, 'event': created_nitro_events[i], 'e5':e5, 'timestamp':parseInt(created_nitro_events[i].returnValues.p6),
          'author':created_nitro_events[i].returnValues.p5, 'e5_id':id+e5, 'bought':is_bought,
          }

          if(this.state.my_preferred_nitro == (id+e5) || true){
            this.load_nitro_node_details(data, false)
            this.load_my_account_storage_info(data)
          }

          var obj = this.get_item_in_array(created_nitros, id)
          if(obj == null){
            created_nitros.push(data)
          }else{
            var pos = created_nitros.indexOf(obj)
            if(pos != -1){
              created_nitros[pos] = data
            }
          }
          created_nitro_mappings[id] = data
        }
      }

      if(is_first_time){
        var created_nitros_clone = structuredClone(this.state.created_nitros)
        var created_nitro_mappings_clone = structuredClone(this.state.created_nitro_mappings)
        
        created_nitros_clone[e5] = created_nitros
        created_nitro_mappings_clone[e5] = created_nitro_mappings
        
        this.setState({created_nitros: created_nitros_clone, created_nitro_mappings:created_nitro_mappings_clone})        
      }
    }

    var created_nitros_clone = structuredClone(this.state.created_nitros)
    var created_nitro_mappings_clone = structuredClone(this.state.created_nitro_mappings)
    
    created_nitros_clone[e5] = created_nitros
    created_nitro_mappings_clone[e5] = created_nitro_mappings
    
    this.setState({created_nitros: created_nitros_clone, created_nitro_mappings:created_nitro_mappings_clone})

    console.log('nitro count',created_nitros.length)
    
  }

  load_run_data = async (contractInstance, E52contractInstance, e5, web3, H52contractInstance) => {
    if(this.state.beacon_node_enabled == true){
      var event_params = [
        /* 0 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ }],
        /* 1 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */}],
        /* 2 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:32/* 32(consensus_request) */}],
        /* 3 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */}],
        /* 4 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 18/* 18(post object) */ }],
      /* 5 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 36/* 36(type_channel_target) */ }],
        /* 6 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 17/* 17(job_object) */}],
        /* 7 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 27/* 27(storefront-item) */}],
      /* 8 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */}],
        /* 9 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 26/* 26(contractor_object) */}],
        /* 10 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 19/* 19(audio_object) */}],
        /* 11 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 20/* 20(video_object) */}],
        /* 12 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */}],
        /* 13 */[web3, E52contractInstance, 'e4', e5, {}],/* data */
        /* 14 */[web3, E52contractInstance, 'e5', e5, {}],/* metadata */
        /* 15 */[web3, contractInstance, 'e2', e5, {}],/* withdraw */
        /* 16 */[web3, contractInstance, 'e4', e5, {}],/* transaction */
        /* 17 */[web3, H52contractInstance, 'e1', e5, {}],/* transfer */
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      var obj = {'subscription':all_events[0], 'contract':all_events[1], 'proposal':all_events[2], 'exchange':all_events[3], 'post':all_events[4], 'channel':all_events[5], 'job':all_events[6], 'store':all_events[7], 'bag':all_events[8], 'contractor':all_events[9], 'data':all_events[13], 'metadata':all_events[14], 'withdraw':all_events[15], 'transaction':all_events[16], 'transfer':all_events[17], 'audio':all_events[10], 'video':all_events[11], 'nitro':all_events[12]}

      var all_data_clone = structuredClone(this.state.all_data)
      all_data_clone[e5] = obj
      this.setState({all_data: all_data_clone})
    }
    else{
      var created_subscription_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ })

      var created_contract_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */})

      var created_proposals_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:32/* 32(consensus_request) */})

      var created_token_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */})

      var created_post_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 18/* 18(post object) */ })

      var created_channel_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 36/* 36(type_channel_target) */ })

      var created_job_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 17/* 17(job_object) */})

      var created_store_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 27/* 27(storefront-item) */})

      var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */})

      var created_contractor_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 26/* 26(contractor_object) */})

      var created_audio_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 19/* 19(audio_object) */})

      var created_video_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 20/* 20(video_object) */})

      var created_nitro_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */})

      var data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {})

      var metadata_events = await this.load_event_data(web3, E52contractInstance, 'e5', e5, {})

      var withdraw_events = await this.load_event_data(web3, contractInstance, 'e2', e5, {})

      var transaction_events = await this.load_event_data(web3, contractInstance, 'e4', e5, {})

      var transfer_events = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {})

      var obj = {'subscription':created_subscription_events, 'contract':created_contract_events, 'proposal':created_proposals_events, 'exchange':created_token_events, 'post':created_post_events, 'channel':created_channel_events, 'job':created_job_events, 'store':created_store_events, 'bag':created_bag_events, 'contractor':created_contractor_events, 'data':data_events, 'metadata':metadata_events, 'withdraw':withdraw_events, 'transaction':transaction_events, 'transfer':transfer_events, 'audio':created_audio_events, 'video':created_video_events, 'nitro':created_nitro_events}

      var all_data_clone = structuredClone(this.state.all_data)
      all_data_clone[e5] = obj
      this.setState({all_data: all_data_clone})
    }
  }

  load_multiple_events_from_nitro = async (event_params) => {
    var event_requests = []
    for(var i=0; i<event_params.length; i++){
      const _web3 = event_params[i][0]
      const contract_instance = event_params[i][1]
      const event_id = event_params[i][2]
      const e5 = event_params[i][3]
      const filter = event_params[i][4]
      var requested_contract = this.get_contract_id_from_contract(e5, contract_instance)
      var event_request = {'requested_e5':e5, 'requested_contract':requested_contract, 'requested_event_id':event_id, 'filter':filter}
      event_requests.push(event_request)
    }

    console.log('all_data', event_requests)
    
    const params = new URLSearchParams({
      arg_string:JSON.stringify({requests: event_requests}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/events?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('all_data', response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('all_data', obj)
      return obj['data']
    }
    catch(e){
      return []
    }
  }

  get_ids_from_events(events){
    var ids = []
    events.forEach(event => {
      var id = event.returnValues.p2
      ids.push(id)
    });
    return ids
  }

  get_ids_from_events3(events){
    var ids = []
    events.forEach(event => {
      var id = event.returnValues.p1
      ids.push(id)
    });
    return ids
  }







  load_data_from_page_in_focus = async (page) => {
    this.focused_page = page
    var posts_to_load = this.posts_to_load
    if(page == this.getLocale()['1196']/* 'jobs' */){
      this.load_contract_data(posts_to_load)
      this.load_jobs_data(posts_to_load)
    }
    if(page == this.getLocale()['1197']/* 'contracts' */){
      this.load_contract_data(posts_to_load)
    }
    if(page == this.getLocale()['1199']/* 'proposals' */){
      this.load_proposal_data(posts_to_load)
    }
    if(page == this.getLocale()['1198']/* 'contractors' */){
      this.load_contract_data(posts_to_load)
      this.load_contractor_data(posts_to_load)
    }
    if(page == this.getLocale()['1200']/* 'subscriptions' */){
      this.load_subscription_data(posts_to_load)
    }
    if(page == this.getLocale()['1201']/* 'mail' */){
      this.load_mail_data(posts_to_load)
    }
    if(page == this.getLocale()['1213']/* 'posts' */){
      this.load_subscription_data(posts_to_load)
      this.load_post_data(posts_to_load)
    }
    if(page == this.getLocale()['1214']/* 'channels' */){
      this.load_subscription_data(posts_to_load)
      this.load_channel_data(posts_to_load)
    }
    if(page == this.getLocale()['1215']/* 'storefront' */){
      this.load_storefront_data(posts_to_load)
      this.load_bag_data(posts_to_load)
    }
    if(page == this.getLocale()['1216']/* 'bags' */){
      this.load_bag_data(posts_to_load)
      this.load_storefront_data(posts_to_load)
      this.load_contract_data(posts_to_load)
    }
    if(page == this.getLocale()['1264k']/* 'audioport' */){
      this.load_subscription_data(posts_to_load)
      this.load_audio_data(posts_to_load)
    }
    if(page == this.getLocale()['1264p']/* videoport */){
      this.load_subscription_data(posts_to_load)
      this.load_video_data(posts_to_load)
    }
    if(page == this.getLocale()['1264s']/* 'nitro' */){
      this.load_nitro_data(posts_to_load)
    }

    if(page == 'w'){
      this.load_token_data(posts_to_load)
    }
  }

  load_jobs_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
        this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, posts_to_load)
      }
    }
  }

  load_contract_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = contract_addresses[3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = contract_addresses[4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

        this.get_contract_data(contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance, posts_to_load)
      }
    }
    // this.has_gotten_contracts = true
  }

  load_proposal_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = contract_addresses[3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = contract_addresses[4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


        this.get_proposal_data(G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account)
      }
    }
  }

  load_contractor_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_contractor_data(E52contractInstance, contract_addresses, e5, web3, account, posts_to_load)
      }
    }
  }

  load_subscription_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const F5contractArtifact = require('./contract_abis/F5.json');
        const F5_address = contract_addresses[2];
        const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

        this.get_subscription_data(contractInstance, F5contractInstance, account, web3, e5, contract_addresses, E52contractInstance, posts_to_load)
      }
    }
  }

  load_mail_data = async () => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]
        console.log('contract_addresses: ', e5, contract_addresses)

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_received_mail_data(E52contractInstance, e5, account, web3);
        this.get_sent_mail_data(E52contractInstance, e5, account, web3)
      }
    }
  }

  load_post_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_post_data(E52contractInstance, web3, e5, contract_addresses, posts_to_load)
      }
    }
  }

  load_channel_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_channel_data(E52contractInstance, web3, e5, contract_addresses, account, posts_to_load)
      }
    }
  }

  load_storefront_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = contract_addresses[6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        this.get_storefront_data(E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account, posts_to_load, false)
      }
    }
  }

  load_bag_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_bag_data(contractInstance, web3, e5, contract_addresses, E52contractInstance, account, posts_to_load)
      }
    }
  }

  load_token_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const H5contractArtifact = require('./contract_abis/H5.json');
        const H5_address = contract_addresses[5];
        const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = contract_addresses[6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        this.get_token_data(contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, posts_to_load)
      }
    }
  }

  load_my_contracts = async () => {
    var e5 = this.state.selected_e5
    var e5_address = this.state.e5s[e5].e5_address;

    var web3_url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(web3_url);

    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const G5contractArtifact = require('./contract_abis/G5.json');
    const G5_address = contract_addresses[3];
    const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = contract_addresses[4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var created_contract_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */, p3/* sender_account_id */:account })

    var created_contracts = []
    var accounts_for_expiry_time = [[account]]
    for(var i=0; i<created_contract_events.length; i++){
      var id = created_contract_events[i].returnValues.p1
      created_contracts.push(id)
      accounts_for_expiry_time.push([account])
    }

    var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});
    var entered_timestamp_data = await G52contractInstance.methods.f266(created_contracts, accounts_for_expiry_time, 3).call((error, result) => {});
    var created_contract_object_data = []
    var created_contract_mapping = {}

    for(var i=0; i<created_contracts.length; i++){
      var contracts_data = await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses);
      var event = created_contract_events[i]
      var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
      var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

      var timestamp = event == null ? 0 : event.returnValues.p4
      var author = event == null ? 0 : event.returnValues.p3
      var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'entry_expiry':entered_timestamp_data[i][0], 'end_balance':end_balance, 'spend_balance':spend_balance, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5 }

      created_contract_object_data.push(contract_obj)
      created_contract_mapping[created_contracts[i]] = contract_obj
    }

    var created_contract_object_data_clone = structuredClone(this.state.my_created_contracts)
    created_contract_object_data_clone[e5] = created_contract_object_data

    var created_contract_mapping_clone = structuredClone(this.state.my_created_contract_mapping)
    created_contract_mapping_clone[e5] = created_contract_mapping

    this.setState({my_created_contracts: created_contract_object_data_clone, my_created_contract_mapping: created_contract_mapping_clone})
  }

  load_my_subscriptions = async () => {
    var e5 = this.state.selected_e5
    var web3_url = this.get_web3_url_from_e5(e5)
    var e5_address = this.state.e5s[e5].e5_address;

    const web3 = new Web3(web3_url);
    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = contract_addresses[2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

    var created_subscription_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */, p3/* sender_account_id */:account })

    var created_subscriptions = []
    for(var i=0; i<created_subscription_events.length; i++){
      var id = created_subscription_events[i].returnValues.p1
      created_subscriptions.push(id)
    }
    var created_subscription_data = await F5contractInstance.methods.f74(created_subscriptions).call((error, result) => {});
    var created_subscription_object_data = []
    var created_subscription_object_mapping = {}

    var account_as_list = []
    for(var i=0; i<created_subscriptions.length; i++){
      account_as_list.push([account])
    }

    for(var i=0; i<created_subscriptions.length; i++){
      var subscription_data = await this.fetch_objects_data(created_subscriptions[i], web3, e5, contract_addresses);

      var subscription_object = {'id':created_subscriptions[i], 'e5_id':created_subscriptions[i]+e5, 'data':created_subscription_data[i], 'ipfs':subscription_data, 'event':created_subscription_events[i],  'e5':e5, 'timestamp':created_subscription_events[i].returnValues.p4, 'author':created_subscription_events[i].returnValues.p3}

      created_subscription_object_data.push(subscription_object)
      created_subscription_object_mapping[created_subscriptions[i]+e5] = subscription_object
    }

    var created_subscription_object_data_clone = structuredClone(this.state.my_created_subscriptions)
    created_subscription_object_data_clone[e5] = created_subscription_object_data
    
    var created_subscription_object_mapping_clone = structuredClone(this.state.my_created_subscription_object_mapping)
    created_subscription_object_mapping_clone[e5] = created_subscription_object_mapping

    this.setState({my_created_subscriptions: created_subscription_object_data_clone, my_created_subscription_object_mapping: created_subscription_object_mapping_clone})
  }

  load_main_contracts = async (e5) => {
    if(this.state.created_contracts[e5] != null){
      return;
    }
    var e5_address = this.state.e5s[e5].e5_address;
    if(e5_address != ''){
      var web3_url = this.get_web3_url_from_e5(e5)
      const web3 = new Web3(web3_url);

      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = e5_address
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

      var created_contracts = [2]
      var created_contract_object_data = []
      var created_contract_mapping = {}

      var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});

      for(var i=0; i<created_contracts.length; i++){
        var contracts_data = await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses);
        var event = null
        var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
        var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

        var timestamp = event == null ? 0 : event.returnValues.p4
        var author = event == null ? 0 : event.returnValues.p3
        var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'end_balance':end_balance, 'spend_balance':spend_balance, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5 }

        created_contract_object_data.push(contract_obj)
        created_contract_mapping[created_contracts[i]] = contract_obj
      }

      var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
      created_contract_object_data_clone[e5] = created_contract_object_data

      var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
      created_contract_mapping_clone[e5] = created_contract_mapping

      this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone})
    }
  }

  load_contract_item = async (e5, contract_id) => {
    var e5_address = this.state.e5s[e5].e5_address;

    if(e5_address != ''){
      var web3_url = this.get_web3_url_from_e5(e5)
      const web3 = new Web3(web3_url);
      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = e5_address
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

      var created_contracts = [contract_id]
      var created_contract_object_data = []
      var created_contract_mapping = {}

      var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});

      for(var i=0; i<created_contracts.length; i++){
        var contracts_data = await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses);
        var event = null
        var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
        var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

        var timestamp = event == null ? 0 : event.returnValues.p4
        var author = event == null ? 0 : event.returnValues.p3
        var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'end_balance':end_balance, 'spend_balance':spend_balance, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5 }

        created_contract_object_data.push(contract_obj)
        created_contract_mapping[created_contracts[i]] = contract_obj

      }



      var contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:contract_id})
      contracts_proposals = contracts_proposals.reverse()
      var proposal_ids = []
      var proposal_ids_events = []
      contracts_proposals.forEach(proposal_event => {
        proposal_ids.push(parseInt(proposal_event.returnValues.p2))//<--------issue! should be p4
        proposal_ids_events.push(proposal_event)
      });

      var created_proposal_object_data = []
      var created_proposal_data = await G5contractInstance.methods.f78(proposal_ids, false).call((error, result) => {});
      var consensus_data = await G52contractInstance.methods.f266(proposal_ids, [], 0).call((error, result) => {});
      for(var i=0; i<proposal_ids.length; i++){
        var proposals_data = await this.fetch_objects_data(proposal_ids[i], web3, e5, contract_addresses);
        var event = proposal_ids_events[i]
        var submit_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: proposal_ids_events[i] })

        var obj = {'id':proposal_ids[i], 'data':created_proposal_data[i], 'ipfs':proposals_data, 'event':event, 'consensus_data':consensus_data[i], 'e5':e5, 'timestamp':event.returnValues.p5, 'author':event.returnValues.p3, 'e5_id':proposal_ids[i]+e5, 'submitted': submit_proposal_event_data.length > 0}

        created_proposal_object_data.push(obj)
      }

      return {'contract':created_contract_object_data[0], 'proposals':created_proposal_object_data}
    }
  }

  load_bags_stores = async (e5, store_ids) => {
    var web3_url = this.get_web3_url_from_e5(e5)
    var e5_address = this.state.e5s[e5].e5_address;
    if(e5_address != ''){
      const web3 = new Web3(web3_url);

      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const H52contractArtifact = require('./contract_abis/H52.json');
      const H52_address = contract_addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

      this.get_storefront_data(E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account, store_ids, true)
    }
  }

  load_contracts_proposals = async (e5, contract_id) => {
    var e5_address = this.state.e5s[e5].e5_address;

    if(e5_address != ''){
      var web3_url = this.get_web3_url_from_e5(e5)
      const web3 = new Web3(web3_url);
      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = e5_address
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


      var contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:contract_id})
      contracts_proposals = contracts_proposals.reverse()
      var proposal_ids = []
      var proposal_ids_events = []
      contracts_proposals.forEach(proposal_event => {
        proposal_ids.push(parseInt(proposal_event.returnValues.p2))//<--------issue! should be p4
        proposal_ids_events.push(proposal_event)
      });

      var created_proposal_object_data = []
      var created_proposal_data = await G5contractInstance.methods.f78(proposal_ids, false).call((error, result) => {});
      var consensus_data = await G52contractInstance.methods.f266(proposal_ids, [], 0).call((error, result) => {});
      for(var i=0; i<proposal_ids.length; i++){
        var proposals_data = await this.fetch_objects_data(proposal_ids[i], web3, e5, contract_addresses);
        var submit_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: proposal_ids_events[i] })

        var event = proposal_ids_events[i]

        var obj = {'id':proposal_ids[i], 'data':created_proposal_data[i], 'ipfs':proposals_data, 'event':event, 'consensus_data':consensus_data[i], 'e5':e5, 'timestamp':event.returnValues.p5, 'author':event.returnValues.p3, 'e5_id':proposal_ids[i]+e5, 'submitted': submit_proposal_event_data.length > 0}

        created_proposal_object_data.push(obj)
      }

      var clone = this.structuredClone(this.state.contracts_proposals)
      clone[contract_id] = created_proposal_object_data
      this.setState({contracts_proposals: clone})

    }
  }

  load_audio_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_audio_data(E52contractInstance, web3, e5, contract_addresses, posts_to_load)
      }
    }
  }

  load_video_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_video_data(E52contractInstance, web3, e5, contract_addresses, posts_to_load)
      }
    }
  }

  load_nitro_data = async (posts_to_load) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const F5contractArtifact = require('./contract_abis/F5.json');
        const F5_address = contract_addresses[2];
        const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

        this.get_nitro_data(E52contractInstance, web3, e5, contract_addresses, posts_to_load, account, F5contractInstance)
      }
    }
  }
  


  



  fetch_objects_to_load_from_searched_tags = async (searched_tags, page, search) => {
    var target_type = this.get_target_type_from_page(page)
    if(target_type == 0) return;

    var searched_tags_including_prioritized_tags = (this.load_selected_tags(page)).concat(searched_tags)

    if((page == this.getLocale()['1197']/* 'contracts' */ || page == this.getLocale()['1200']/* 'subscriptions' */ || page == this.getLocale()['1198']/* 'contractors' */) && searched_tags.length == 0 && this.state.user_account_id[this.state.selected_e5] != 1){
      //prioritize my accounts data first
      searched_tags_including_prioritized_tags = [this.state.user_account_id[this.state.selected_e5]].concat(searched_tags_including_prioritized_tags)
    }

    if(searched_tags.length != 0) searched_tags_including_prioritized_tags = searched_tags

    var posts_to_load = []
    // for(var i=0; i<this.state.e5s['data'].length; i++){
    //   var e5 = this.state.e5s['data'][i]
    //   var e5_address = this.state.e5s[e5].e5_address;
    //   if(e5_address != ''){
    //     var web3_url = this.get_web3_url_from_e5(e5)
    //     const web3 = new Web3(web3_url);
    //     var contract_addresses = this.state.addresses[e5]

    //     const E52contractArtifact = require('./contract_abis/E52.json');
    //     const E52_address = contract_addresses[1];
    //     const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    //     var all_indexed_tags_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */: 20/* 20(tag_registry) */, p5/* int_data */:target_type});

    //     all_indexed_tags_events.forEach(event_item => {
    //       var items_tag = event_item.returnValues.p4/* string_data */
    //       var items_id = event_item.returnValues.p1/* target_id */
    //       var item_poster = event_item.returnValues.p2/* sender_acc_id */
    //       if(searched_tags_including_prioritized_tags.includes(items_tag) || searched_tags_including_prioritized_tags.includes(items_id) || searched_tags_including_prioritized_tags.includes(item_poster)){
    //         posts_to_load.push(items_id)
    //       }
    //     });
    //   }
    // }

    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }

    if(searched_tags.length != 0 && this.state.beacon_node_enabled == true){
      var arg_obj = {tags: searched_tags, target_type: target_type}
      const params = new URLSearchParams({
        arg_string: JSON.stringify(arg_obj)
      });
      var request = `${beacon_node}/tags?${params.toString()}`
      try{
        const response = await fetch(request);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        obj['data'].forEach(element => {
          if(!posts_to_load.includes(parseInt(element))) posts_to_load.push(parseInt(element))
        });
      }
      catch(e){
        
      }
    }

    if(search != null && search != '' && this.state.beacon_node_enabled == true){
      var arg_obj = {title: search, target_type: target_type}
      const params = new URLSearchParams({
        arg_string: JSON.stringify(arg_obj)
      });
      var request = `${beacon_node}/title?${params.toString()}`
      try{
        const response = await fetch(request);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        obj['data'].forEach(element => {
          if(!posts_to_load.includes(parseInt(element))) posts_to_load.push(parseInt(element))
        });
      }
      catch(e){
        console.log(e)
      }
    }


    this.posts_to_load = posts_to_load
    this.load_data_from_page_in_focus(page)
  }

  get_target_type_from_page(page){
    var obj={'e':0}
    obj[this.getLocale()['1196']/* 'jobs' */] = 17
    obj[this.getLocale()['1197']/* 'contracts' */] = 30
    obj[this.getLocale()['1199']/* 'proposals' */] = 32
    obj[this.getLocale()['1198']/* 'contractors' */] = 26
    obj[this.getLocale()['1200']/* 'subscriptions' */] = 33
    obj[this.getLocale()['1213']/* 'posts' */] = 18
    obj[this.getLocale()['1214']/* 'channels' */] = 36
    obj[this.getLocale()['1215']/* 'storefront' */] = 28
    obj[this.getLocale()['1216']/* 'bags' */] = 25
    obj[this.getLocale()['1264k']/* 'audioport' */] = 19
    obj[this.getLocale()['1264p']/* 'videoport' */] = 20
    obj[this.getLocale()['1264s']/* 'nitro' */] = 21
    obj['w'] = 31

    return obj[page]
  }

  load_selected_tags(page){
    var job_section_tags = this.state.job_section_tags;
    var explore_section_tags = this.state.explore_section_tags;

    var should_prioritise_followed_tags = this.state.section_tags_setting === this.getLocale()['1427'] /* 'filtered' */

    var return_obj = [this.state.content_channeling]

    if(!should_prioritise_followed_tags){
      return return_obj
    } 

    if(page == this.getLocale()['1196']/* 'jobs' */ || page == this.getLocale()['1197']/* 'contracts' */ || page == this.getLocale()['1198']/* 'contractors' */ || page == this.getLocale()['1200']/* 'subscriptions' */){
      return_obj =  return_obj.concat(job_section_tags)
    }
    else{
      return_obj =  return_obj.concat(explore_section_tags)
    }

    return return_obj
  }

  load_prioritised_job_posts = async (e5, web3, contract_addresses) => {
    var searched_tags_including_prioritized_tags = this.load_selected_tags(this.getLocale()['1196']/* 'jobs' */)
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var all_indexed_tags_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */: 20/* 20(tag_registry) */, p5/* int_data */:17/* jobs */});

    var posts_to_load = []
    all_indexed_tags_events.forEach(event_item => {
      var items_tag = event_item.returnValues.p4/* string_data */
      var items_id = event_item.returnValues.p1/* target_id */
      if(searched_tags_including_prioritized_tags.includes(items_tag) || searched_tags_including_prioritized_tags.includes(items_id)){
        posts_to_load.push(items_id)
      }
    });

    return posts_to_load
  }







  fetch_multiple_objects_data = async (ids, web3, e5, addresses) => {
    if(this.state.beacon_node_enabled == false){
      console.log('all_data', 'beacon node offline')
      return {}
    }else{
      console.log('all_data', 'beacon node online, loading: ', ids)
    }
    var event_params = []
    for(var i=0; i<ids.length; i++){
      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
      var target_id = ids[i];
      event_params.push([web3, E52contractInstance, 'e5', e5, {p1/* target_obj_id */: target_id}])
    }
    var all_events = await this.load_multiple_events_from_nitro(event_params)
    var obj_id_ecid = {}
    var hashes = []
    var valid_ids = []

    console.log('all_data', 'all events length', all_events.length)

    for(var i=0; i<all_events.length; i++){
      var objects_event = all_events[i]
      if(objects_event.length != 0){
        var ecid = objects_event[objects_event.length - 1].returnValues.p4
        if(ecid != 'e3' && ecid != 'e2' && ecid != 'e1' && ecid != 'e'){
          var cid = ecid
          if(ecid.includes('.')){
            var split_cid_array = ecid.split('.');
            cid = split_cid_array[1]
          }
          var id = cid;
          var internal_id = ''
          if(cid.includes('_')){
            var split_cid_array2 = cid.split('_');
            id = split_cid_array2[0]
            internal_id = split_cid_array2[1]
          }
          obj_id_ecid[ids[i]] = {'id':id, 'internal_id':internal_id}
          if(this.fetch_from_storage(id) == null) hashes.push(id)
          valid_ids.push(ids[i])
        }
      }
    }

    console.log('all_data', 'obj_id_ecid', obj_id_ecid, 'hashes', hashes)
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes: hashes}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var object_data = obj['data']
      console.log('all_data', 'data', obj)
      for(var i=0; i<hashes.length; i++){
        var cid_data = object_data[hashes[i]]
        if(cid_data != null){
          this.store_in_local_storage(hashes[i], cid_data)
        }
      }
    }
    catch(e){
      return {}
    }

    var data = {}
    for(var i=0; i<valid_ids.length; i++){
      var valid_id = valid_ids[i]
      var valid_id_cid = obj_id_ecid[valid_id]['id']
      var valid_id_internal_id = obj_id_ecid[valid_id]['internal_id']
      var valid_id_data = this.fetch_from_storage(valid_id_cid)
      if(valid_id_data != null){
        var final_data = valid_id_data
        if(valid_id_internal_id != ''){
          final_data = valid_id_data[valid_id_internal_id]
        }
        data[valid_id] = final_data
      }
    }

    console.log('all_data', 'return', data)
    return data
  }

  fetch_objects_data = async (id, web3, e5, addresses) => {
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
    var target_id = id;
    var events = await this.load_event_data(web3, E52contractInstance, 'e5', e5, {p1/* target_obj_id */: target_id})
    if(events.length == 0) return;
    var cid = events[events.length - 1].returnValues.p4
    if(cid == 'e3' || cid == 'e2' || cid == 'e1' || cid == 'e') return;

    return await this.fetch_objects_data_from_ipfs_using_option(cid)
  }



  fetch_objects_data_from_ipfs_using_option = async (ecid) => {
    if(ecid == 'ar.MY_Kh9i3VhChJuTzo_Cyu6bG6hCvasqzWGfo4oniNnA_1xjiAYxW') return null
    if(!ecid.includes('.')){
      var data = await this.fetch_object_data_from_infura(ecid)
      return data
    }
    var split_cid_array = ecid.split('.');
    var option = split_cid_array[0]
    var cid = split_cid_array[1]

    var included_underscore = false
    var id = cid;
    var internal_id = ''
    if(cid.includes('_')){
      included_underscore = true;
      var split_cid_array2 = cid.split('_');
      id = split_cid_array2[0]
      internal_id = split_cid_array2[1]
    }
    
    if(option == 'in'){
      var data = this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_object_data_from_infura(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        // console.log('found_underscore', data)
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'we'){
      var data = this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_objects_data_from_web3(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'nf'){
      var data = this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_objects_data_from_nft_storage(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'ni'){
      var data = this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_data_from_nitro(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'ar'){
      var data = this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_data_from_arweave(id)
        if(data != null) this.store_in_local_storage(id, data);
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
  }

  store_image_in_ipfs = async (data) => {
    var cid = await this.store_objects_data_in_ipfs_using_option(data, true, true)
    return `https://nftstorage.link/ipfs/${cid}`
  }

  store_objects_data_in_ipfs_using_option = async (data, unappend_identifier, unencrypt_image) => {
    var set_storage_option = this.state.storage_option
    var my_preferred_nitro = this.state.my_preferred_nitro

    if(my_preferred_nitro != ''){
      //upload to nitro storage
      var cid = await this.store_data_in_nitro(data, unencrypt_image, my_preferred_nitro)
      if(unappend_identifier == true) return cid
      return 'ni.'+cid;
    }
    if(set_storage_option == 'infura'){
      var cid = await this.store_data_in_infura(data, unencrypt_image)
      if(unappend_identifier == true) return cid
      return 'in.'+cid;
    }
    else if(set_storage_option == 'web3-storage'){
      var cid = await this.store_data_in_web3(data, unencrypt_image)
      if(unappend_identifier == true) return cid
      return 'we.'+cid;
    }
    else if(set_storage_option == 'nft-storage'){
      var cid = await this.store_data_in_nft_storage(data, unencrypt_image)
      if(unappend_identifier == true) return cid
      return 'nf.'+cid;
    }
    else if(set_storage_option == 'chainsafe'){
      var cid = await this.store_data_in_chainsafe_storage(data, unencrypt_image)
      if(unappend_identifier == true) return cid
      return 'ch.'+cid;
    }
    else if(set_storage_option == 'arweave'){
      var cid = await this.store_data_in_arweave_storage(data, unencrypt_image)
      if(unappend_identifier == true) return cid
      return 'ar.'+cid;
    }
  }





  store_data_in_arweave_storage = async (_data, unencrypt_image) => {
    var final_data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    var wallet_data = this.state.coin_data['AR']
    if(wallet_data != null){
      const wallet = wallet_data['wallet']
      try{
        var transaction = await arweave.createTransaction({
          data: final_data
        }, wallet.key);
        transaction.addTag('Content-Type', 'text');
        transaction.addTag('Client', 'E5')
        transaction.addTag('Version', this.state.version)
        await arweave.transactions.sign(transaction, wallet.key);

        const transaction_hash = transaction['id']
        var uploader = await arweave.transactions.getUploader(transaction);
        while (!uploader.isComplete) {
          await uploader.uploadChunk();
        }

        this.prompt_top_notification(this.getLocale()['2738g']/* 'Arweave uploade complete, waiting for 5 network confirmations...' */, 15000)

        this.is_uploading_arweave_file = true
        while (this.is_uploading_arweave_file == true) {
          if (this.is_uploading_arweave_file == false) break
          console.log('appdata','Waiting for data to be uploaded')
          this.check_if_required_confirmations(transaction_hash)
          await new Promise(resolve => setTimeout(resolve, 15_000))
        }

        var me = this;
        setTimeout(function() {
          me.update_coin_balances('AR', false)
        }, (7 * 60_000));

        this.prompt_top_notification(this.getLocale()['2738i']/* 'Arweave transaction confirmed! proceeding with run...' */, 5000)

        const encoded = Buffer.from(transaction_hash).toString('base64')
        return encoded
      }catch(e){
        console.log('Error uploading data: ', e)
        this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
        return '';
      }
    }
  }

  check_if_required_confirmations = async (transaction_hash) => {
    const pending_status = await arweave.transactions.getStatus(transaction_hash)
    if(pending_status.confirmed != null && pending_status.confirmed.number_of_confirmations != null && pending_status.confirmed.number_of_confirmations > 1){
      this.is_uploading_arweave_file = false
    }
    console.log(pending_status)
  }

  fetch_data_from_arweave = async (id) => {
    try{
      const decoded = Buffer.from(id, 'base64').toString();
      console.log(decoded)
      // var data = await arweave.transactions.getData(decoded, {decode: true, string: true})
      var return_data = await fetch(`https://arweave.net/${decoded}`)
      var data = await return_data.text()
      console.log('appdata', data)
      var decrypted_data = this.decrypt_storage_data(data)
      console.log('appdata', decrypted_data)
      var obj = JSON.parse(decrypted_data)
      console.log('appdata', obj)
      return obj
    }catch(e){
      console.log('appdata',e)
      return null
    }
    
  }




  store_data_in_nitro = async (_data, unencrypt_image, my_preferred_nitro) => {
    var node_details = this.state.nitro_node_details[my_preferred_nitro]
    if(node_details == null){
      this.prompt_top_notification(this.getLocale()['1593db']/* 'Please wait a few moments for your selected node to come online.' */, 5000)
      return '';
    }
    var data = _data
    var block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_account_e5'])
    if(block_hash_and_signature == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return '';
    }

    var node_url = this.get_nitro_link_from_e5_id(my_preferred_nitro)
    var arg_obj = {
      signature_data: block_hash_and_signature.data,
      signature:block_hash_and_signature.signature,
      file_datas: [JSON.stringify(data)],
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/store_data`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == false){
        this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */+' '+obj.message, 8000)
        return '';
      }else{
        return my_preferred_nitro+'-'+obj.files[0]
      }
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return '';
    }

  }

  fetch_data_from_nitro = async (cid, depth) => {
    await this.wait(this.state.ipfs_delay)
    var split_cid_array = cid.split('-');
    var e5_id = split_cid_array[0]
    var nitro_cid = split_cid_array[1]

    var nitro_url = this.get_nitro_link_from_e5_id(e5_id)
    if(nitro_url == null) return
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes:[nitro_cid]}),
    });
    var request = `${nitro_url}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var object_data = obj['data']
      var cid_data = JSON.parse(object_data[nitro_cid])
      
      return cid_data
    }
    catch(e){
      if(depth < 3){
        return await this.fetch_data_from_nitro(cid, depth+1)
      }
    }
  }




  store_data_in_infura = async (_data, unencrypt_image) => {
    var data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    const projectId = `${process.env.REACT_APP_INFURA_API_KEY}`;
    const projectSecret = `${process.env.REACT_APP_INFURA_API_SECRET}`;
    const auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');
    const client = create({
      host: 'ipfs.infura.io',
      port: 5001,
      protocol: 'https',
      apiPath: '/api/v0',
      headers: {
        authorization: auth,
      }
    })

    try {
      const added = await client.add(data)
      return added.path.toString()
    } catch (error) {
      console.log('Error uploading file: ', error)
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return '';
    }
  }

  fetch_object_data_from_infura = async (cid, depth) => {
    await this.wait(this.state.ipfs_delay)
    var gateways = [
      `https://ipfs.io/ipfs/${cid}`,
      `https://gateway.ipfs.io/ipfs/${cid}`,
      `https://cloudflare-ipfs.com/ipfs/${cid}`,
      `https://dweb.link/ipfs/${cid}`,
      // `https://gateway.pinata.cloud/ipfs/${cid}`,
      `https://nftstorage.link/ipfs/${cid}`,
      `https://hardbin.com/ipfs/${cid}`,
      `https://4everland.io/ipfs/${cid}`,
      `https://cf-ipfs.com/ipfs/${cid}`,
      `https://ipfs.decentralized-content.com/ipfs/${cid}`,
      `https://ipfs.eth.aragon.network/ipfs/${cid}`,
      `https://pz-acyuix.meson.network/ipfs/${cid}`,
      `https://fleek.ipfs.io/ipfs/${cid}`,
      `https://ipfs.w3s.link/ipfs/${cid}`,
    ]

    var gateways = [
      // `https://ipfs.io/ipfs/${cid}`,
      //https://ipfs.algonode.xyz/ipfs/${cid}
      `https://gateway.pinata.cloud/ipfs/${cid}`
    ]
    
    await this.wait(this.state.ipfs_delay)
    // var selected_gateway = gateways[Math.round(Math.random() * 12)]
    var selected_gateway = gateways[0]
    selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS. Status: ${response}`);
      }
      var data = await response.text();
      data = this.decrypt_storage_data(data)
      return JSON.parse(data);
      // Do something with the retrieved data
    } catch (error) {
      console.log('Error fetching infura file: ', error)

      if(depth<5){
        return await this.fetch_object_data_from_infura(cid, depth+1)
      }
    }
  }

  get_selected_gateway_if_custom_set(cid, default_gateway){
    if(this.state.custom_gateway != ''){
      var my_gateway = `${this.state.custom_gateway}`
      return my_gateway.replace('cid', cid)
    }else{
      return default_gateway
    }
  }





  store_data_in_web3 = async (_data, unencrypt_image) => {
    return null;
    // var data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    // const client = new Web3Storage({ token: `${process.env.REACT_APP_WEB3_STORAGE_ACCESS_TOKEN}` })

    // var file = this.makeFileObjects(data);
    // const cid = await client.put(file)
    // return cid
  }

  makeFileObjects(data) {
    // You can create File objects from a Blob of binary data
    // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob
    // Here we're just storing a JSON object, but you can store images,
    // audio, or whatever you want!
    const obj = { data: data }
    const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })

    const files = [
      new File([blob], 'bry.json'),
      new File(['contents-of-file-1'], 'plain-utf8.txt')
    ]
    return files
  }

  fetch_objects_data_from_web3 = async (cid, depth) => {
    // const client = new Web3Storage({ token: `${process.env.REACT_APP_WEB3_STORAGE_ACCESS_TOKEN}` })

    // try{
    //   const res = await client.get(cid)
    //   const files = await res.files()

    //   var file = files[0]
    //   return JSON.parse(JSON.parse(await file.text()).data);
    // }catch(e){
    //   console.log(e)
    //   return null
    // }

    var gateways = [
      `https://ipfs.io/ipfs/${cid}/bry.json`,
      `https://gateway.ipfs.io/ipfs/${cid}/bry.json`,
      `https://cloudflare-ipfs.com/ipfs/${cid}/bry.json`,
      `https://dweb.link/ipfs/${cid}/bry.json`,
      // `https://gateway.pinata.cloud/ipfs/${cid}/bry.json`,
      `https://nftstorage.link/ipfs/${cid}/bry.json`,
      `https://hardbin.com/ipfs/${cid}/bry.json`,
      `https://4everland.io/ipfs/${cid}/bry.json`,
      `https://cf-ipfs.com/ipfs/${cid}/bry.json`,
      `https://ipfs.decentralized-content.com/ipfs/${cid}/bry.json`,
      `https://ipfs.eth.aragon.network/ipfs/${cid}/bry.json`,
      `https://pz-acyuix.meson.network/ipfs/${cid}/bry.json`,
      `https://fleek.ipfs.io/ipfs/${cid}/bry.json`,
      `https://ipfs.w3s.link/ipfs/${cid}/bry.json`,
    ]

    var gateways = [
      `https://nftstorage.link/ipfs/${cid}`
    ]
    
    await this.wait(this.state.ipfs_delay)
    // var selected_gateway = gateways[Math.round(Math.random() * 11)]
    var selected_gateway = gateways[0]
    selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS. Status: ${response}`);
      }
      var data = await response.text();
      data = this.decrypt_storage_data(data)
      var json = JSON.parse((JSON.parse(data)).data);
      return json
      // Do something with the retrieved data
    } catch (error) {
      console.log('Error fetching web3.storage file: ', error)

      if(depth<5){
        return this.fetch_objects_data_from_web3(cid, depth+1)
      }
    }
    
  }




  store_data_in_nft_storage = async (_data, unencrypt_image) => {
    var data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    const NFT_STORAGE_TOKEN = `${process.env.REACT_APP_NFT_STORAGE_ACCESS_TOKEN}`
    const client = new NFTStorage({ token: NFT_STORAGE_TOKEN })

    const someData = new Blob([data])
    const cid = await client.storeBlob(someData)

    return cid;
  }

  fetch_objects_data_from_nft_storage = async (cid, depth) => {
    await this.wait(this.state.ipfs_delay)

    var gateways = [
      `https://ipfs.io/ipfs/${cid}`,
      `https://gateway.ipfs.io/ipfs/${cid}`,
      `https://cloudflare-ipfs.com/ipfs/${cid}`,
      `https://dweb.link/ipfs/${cid}`,
      // `https://gateway.pinata.cloud/ipfs/${cid}`,
      `https://nftstorage.link/ipfs/${cid}`,
      `https://hardbin.com/ipfs/${cid}`,
      `https://4everland.io/ipfs/${cid}`,
      `https://cf-ipfs.com/ipfs/${cid}`,
      `https://ipfs.decentralized-content.com/ipfs/${cid}`,
      `https://ipfs.eth.aragon.network/ipfs/${cid}`,
      `https://pz-acyuix.meson.network/ipfs/${cid}`,
      `https://fleek.ipfs.io/ipfs/${cid}`,
      `https://ipfs.w3s.link/ipfs/${cid}`,
    ]

    var gateways = [
      `https://nftstorage.link/ipfs/${cid}`
    ]
    
    await this.wait(this.state.ipfs_delay)
    // var selected_gateway = gateways[Math.round(Math.random() * 12)]
    var selected_gateway = gateways[0]
    selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS. Status: ${response}`);
      }
      var data = await response.text();
      data = this.decrypt_storage_data(data)
      return JSON.parse(data);
      // Do something with the retrieved data
    } catch (error) {
      console.log('Error fetching nft storage file: ', error)

      if(depth<5){
        return this.fetch_objects_data_from_nft_storage(cid, depth+1)
      }
    }
  }





  store_data_in_chainsafe_storage = async(_data, unencrypt_image) => {
    var data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    const CHAINSAFE_STORAGE_KEY = `${process.env.REACT_APP_CHAINSAFE_API_KEY}`
    const CHAINSAFE_STORAGE_BUCKET_ID = `${process.env.REACT_APP_CHAINSAFE_BUCKET_ID}`
   
    const form = new FormData();
    const now = Date.now()
    const file_data = this.make_file(data, (makeid(32)+now))
    form.append('file', file_data);
    form.append('path', '/');

    var request = `https://api.chainsafe.io/api/v1/bucket/${CHAINSAFE_STORAGE_BUCKET_ID}/upload`
    var request_data = {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${CHAINSAFE_STORAGE_KEY}`
      },
      body: form
    }

    try{
      const response = await fetch(request, request_data);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return '';
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      var cid = parsed_obj['files_details'][0]['cid']
      return cid
    }
    catch(e){
      console.log(e)
      return ''
    }
  }

  make_file(data, file_name){
    const obj = { data: data }
    const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })
    // const now = Date.now()
    return new File([blob], `${file_name}.json`)
  }

  fetch_file_data_from_respective_storage = async (cid, storage_id, file_name, depth) => {
    if(storage_id == 'ni'){
      console.log('datas', 'file is a nitro object, fetching from nitro storage instead...')
      return await this.fetch_file_data_from_nitro_storage(cid, depth)
    }
    await this.wait(this.state.ipfs_delay)
    var gateways = [
      `https://ipfs.chainsafe.io/ipfs/${cid}`,
      `https://${cid}.ipfs.w3s.link/${file_name}.json`
    ]
    await this.wait(this.state.ipfs_delay)
    var selected_gateway = storage_id == 'ch' ? gateways[0] : gateways[1]
    if(storage_id == 'ch'){
      selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    }else{
      selected_gateway = this.get_selected_gateway_if_custom_set2(cid, selected_gateway, file_name)
    }
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS`);
      }
      var data = await response.text();
      var encrypted_data = (JSON.parse(data)).data
      // console.log('stackdata','encrypted data', encrypted_data)
      var unencrypted_data = this.decrypt_storage_data(encrypted_data)
      // console.log('stackdata','decrypted data', unencrypted_data)
      var json = JSON.parse(unencrypted_data);
      // console.log('stackdata','decrypted data', json)
      return json
      // Do something with the retrieved data
    } catch (error) {
      console.log('stackdata','Error fetching web3.storage file: ', error)
      if(depth<2){
        return this.fetch_file_data_from_respective_storage(cid, storage_id, file_name, depth+1)
      }
    }
  }

  get_selected_gateway_if_custom_set2(cid, default_gateway, file_name){
    if(this.state.custom_gateway != ''){
      var my_gateway = `${this.state.custom_gateway}`
      var new_gateway = my_gateway.replace('cid', cid)
      if(new_gateway.endsWith('/')){
        return `${new_gateway}${file_name}.json`
      }else{
        return `${new_gateway}/${file_name}.json`
      }
    }else{
      return default_gateway
    }
  }

  fetch_file_data_from_nitro_storage = async (cid, depth) => {
    await this.wait(this.state.ipfs_delay)
    var split_cid_array = cid.split('-');
    var e5_id = split_cid_array[0]
    var nitro_cid = split_cid_array[1]

    var nitro_url = this.get_nitro_link_from_e5_id(e5_id)
    // console.log('datas', nitro_url)
    if(nitro_url == null) return

    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes:[nitro_cid]}),
    });
    var request = `${nitro_url}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var object_data = obj['data']
      // console.log('datas', object_data)
      var cid_data = object_data[nitro_cid]

      if(cid_data != null){
        var file_pointer_link = cid_data['data']
        var split_cid_array2 = file_pointer_link.split('-');
        var e5_id2 = split_cid_array2[0]
        var nitro_cid2 = split_cid_array2[1]

        var nitro_url = this.get_nitro_link_from_e5_id(e5_id2)
        var content_type = this.get_file_extension(cid_data['name'])
        if(nitro_url != null){
          cid_data['data'] = `${nitro_url}/stream_file/${content_type}/${nitro_cid2}.${content_type}`
        }
        console.log('datas', cid_data)

        return cid_data
      }
    }
    catch(e){
      if(depth < 3){
        await this.fetch_file_data_from_nitro_storage(cid, depth+1)
      }
    }
  }

  get_nitro_link_from_e5_id(e5_id){
    var all_nitro_pointer_mappings = this.get_all_sorted_objects_mappings(this.state.nitro_links)
    return all_nitro_pointer_mappings[e5_id]
  }








  upload_multiple_files_to_web3_or_chainsafe = async (datas, type) => {
    this.prompt_top_notification(this.getLocale()['1593bq']/* Uploading.. */, 8000)
    // console.log('stackpage',datas)
    if(this.state.web3_account_email != ''){
      //upload to web3
      const client = await createW3UpClient()
      const myAccount = await client.login(this.state.web3_account_email)
      while (true) {
        const res = await myAccount.plan.get()
        if (res.ok) break
        console.log('stackdata','Waiting for payment plan to be selected...')
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      var data_files = []
      for(var i=0; i<datas.length; i++){
        var _data = datas[i]
        var file_name = _data['name']
        data_files.push(this.make_file2(_data['data'], file_name))
      }
      //upload the streamable files
      const streamable_cid_obj = await client.uploadDirectory(data_files)
      var streamable_cid = streamable_cid_obj.toString()

      var files = []
      for(var i=0; i<datas.length; i++){
        var _data = structuredClone(datas[i])
        var file_name = 'data'+i
        _data['data'] = `https://${streamable_cid}.ipfs.w3s.link/${_data['name']}`
        files.push(this.make_file(this.encrypt_storage_data(JSON.stringify(_data)), file_name))
      }
      const directoryCid = await client.uploadDirectory(files)
      var cid = directoryCid.toString()
      var e_cids = []
      var cids = []
      for(var i=0; i<datas.length; i++){
        var file_name = 'data'+i
        var _data = datas[i]
        const ecid = _data['type']+'_'+cid+'.w3'+','+file_name
        e_cids.push(ecid)
        cids.push(cid)
      }
      this.when_uploading_multiple_files_complete(e_cids, cids, datas)
      this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 2000)
    }else{
      //upload to chainsasfe
      var e_cids = []
      var cids = []
      for(var i=0; i<datas.length; i++){
        var _data = datas[i]
        var cid = await this.store_data_in_chainsafe_storage(JSON.stringify(_data))
        if(cid == ''){
          this.prompt_top_notification(this.getLocale()['1593bo']/* Something went wrong with the upload. */, 5000)
          return;
        }else{
          var e_cid = _data['type']+'_'+cid+'.ch'
          e_cids.push(e_cid)
          cids.push(cid)
        }
      }
      this.when_uploading_multiple_files_complete(e_cids, cids, datas)
      this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 2000)
      
      this.setState({storage_permissions:this.getLocale()['1428']/* 'enabled' */})
      var me = this;
      setTimeout(function() {
        me.set_cookies()
      }, (1 * 1000));
    }
  }

  upload_multiple_files_to_nitro_node = async(datas, type, nitro_object, node_details) => {
    this.prompt_top_notification(this.getLocale()['1593bq']/* Uploading.. */, 8000)
    var file_datas = []
    var file_types = []
    for(var i=0; i<datas.length; i++){
      var data = datas[i]
      file_datas.push(data['data'])
      file_types.push(this.get_file_extension(data['name']))
    }

    var file_names = await this.upload_multiple_datas_to_nitro_node(file_datas, file_types, nitro_object, node_details)
    if(file_names == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    var nitro_object_e5_id = nitro_object['e5_id']
    var final_objects = []
    var datas_clone = JSON.parse(JSON.stringify({'data':datas}))['data']
    for(var i=0; i<datas_clone.length; i++){
      var data2 = structuredClone(datas_clone[i])
      var file_cid = file_names[i]
      var link = nitro_object_e5_id+'-'+file_cid
      data2['data'] = link
      final_objects.push(JSON.stringify(data2))
    }

    var file_object_cids = await this.upload_file_objects_to_nitro(final_objects, nitro_object, node_details)
    if(file_names == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    var e_cids = []
    for(var i=0; i<datas.length; i++){
      var cid = nitro_object_e5_id+'-'+file_object_cids[i]
      var _data = datas[i]
      const ecid = _data['type']+'_'+cid+'.ni'+',0';
      e_cids.push(ecid)
    }

    this.when_uploading_multiple_files_complete(e_cids, '', datas)
    this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 2000)
    
    this.setState({storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));

  }

  get_file_extension(fileName) {
    const lastDotIndex = fileName.lastIndexOf('.');
    if (lastDotIndex === -1 || lastDotIndex === 0) {
      return null; // No extension or hidden file
    }
    return fileName.substring(lastDotIndex + 1);
  }

  upload_multiple_datas_to_nitro_node = async (file_datas, file_types, nitro_object, node_details) =>{
    var block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_account_e5'])
    if(block_hash_and_signature == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    var node_url = nitro_object['ipfs'].node_url
    var arg_obj = {
      signature_data: block_hash_and_signature.data,
      signature:block_hash_and_signature.signature,
      file_datas: file_datas,
      file_types: file_types,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/store_files`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == false){
        return null
      }else{
        return obj.files
      }
    }
    catch(e){
      return null
    }
  }

  get_block_hash_and_signature = async (e5) => {
    try{
      const web3 = new Web3(this.get_web3_url_from_e5(e5))
      var current_block_number = parseInt(await web3.eth.getBlockNumber())
      var round_down_value = await this.get_round_down_value(web3, current_block_number)
      var round_down_block = this.round_down(current_block_number, round_down_value)
      var current_block = await web3.eth.getBlock(round_down_block);
      var block_hash = current_block.hash.toString()

      var address = this.state.accounts[e5].address
      web3.eth.accounts.wallet.add(this.state.accounts[e5].privateKey);
      var signature = await web3.eth.sign(block_hash, address)
      return {data: block_hash, signature: signature}
    }catch(e){
      console.log(e)
      return null
    }
  }

  round_down(number, round_down_value){
    var n = (Math.floor(number / round_down_value)) * round_down_value
    return n
  }

  get_round_down_value = async (web3, blockNumber) => {
    try{
      const currentBlock = await web3.eth.getBlock(blockNumber - 1);
      const previousBlock = await web3.eth.getBlock(blockNumber - 2);
      const miningTime = currentBlock.timestamp - previousBlock.timestamp;
      return Math.round(1 / (miningTime / 120))
    }
    catch(e){
      console.log(e)
      return 10
    }
  }

  upload_file_objects_to_nitro = async (file_objects, nitro_object, node_details) => {
    var block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_account_e5'])
    if(block_hash_and_signature == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    var node_url = nitro_object['ipfs'].node_url
    var arg_obj = {
      signature_data: block_hash_and_signature.data,
      signature:block_hash_and_signature.signature,
      file_datas: file_objects,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/store_data`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == false){
        return null
      }else{
        return obj.files
      }
    }
    catch(e){
      return null
    }
  }









  when_uploading_multiple_files_complete(e_cids, cids, datas){
    // console.log('datas', datas)
    var clone = structuredClone(this.state.uploaded_data)
    var cid_clone = this.state.uploaded_data_cids.slice()
    for(var i=0; i<datas.length; i++){
      var _data = datas[i]
      if(clone[_data['type']] == null) clone[_data['type']] = {}
      clone[_data['type']][e_cids[i]] = _data
      cid_clone.push(e_cids[i])
    }

    this.setState({uploaded_data: clone, uploaded_data_cids: cid_clone, update_data_in_E5: true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  make_file2(dataURL, file_name){
    const [metadata, base64Data] = dataURL.split(',');
    const mimeType = metadata.match(/:(.*?);/)[1]; // Extract the MIME type

    // Decode the Base64 data into binary data
    const binaryString = atob(base64Data);
    const binaryData = new Uint8Array(binaryString.length);

    for (let i = 0; i < binaryString.length; i++) {
      binaryData[i] = binaryString.charCodeAt(i);
    }

    // Create a Blob from the binary data
    const blob = new Blob([binaryData], { type: mimeType });
    return new File([blob], file_name, { type: mimeType });
  }









  encrypt_storage_data(data){
    const APP_KEY = `${process.env.REACT_APP_APPKEY_API_KEY}`
    var ciphertext = CryptoJS.AES.encrypt(data, APP_KEY).toString();
    return ciphertext
  }

  decrypt_storage_data(data){
    const APP_KEY = `${process.env.REACT_APP_APPKEY_API_KEY}`
    try{
      var bytes  = CryptoJS.AES.decrypt(data, APP_KEY);
      var originalText = bytes.toString(CryptoJS.enc.Utf8);
      return originalText
    }catch(e){
      console.log('stackdata', e)
      return data
    }
  }



  fetch_from_storage(cid){
    if(this.gateway_traffic_cache == null){
      this.gateway_traffic_cache = {}
    }
    return this.gateway_traffic_cache[cid] 
  }

  store_in_local_storage(cid, data){
    if(this.gateway_traffic_cache == null){
      this.gateway_traffic_cache = {}
    }
    this.gateway_traffic_cache[cid] = data
  }

  wait = async (t) => {
    await this.sleep(t)
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }



  get_balance_from_multiple_exchanges = async (exchanges, account, H52contractInstance, exchanges_depth) => {
    var exchange_ids = []
    var depths = []
    var positions = []
    for(var j=0; j<exchanges.length; j++){
      var exchange_depth = exchanges_depth[j]
      for(var i=exchange_depth; i>=0; i--){
        exchange_ids.push(exchanges[j])
        depths.push(i)
        positions.push(j)
      }
    }
    
    var token_balances = await H52contractInstance.methods.f140e(exchange_ids, account, depths).call((error, result) => {});

    var bal = [];
    var balance_data = []
    // console.log('positions: ', positions)
    for(var i=0; i<token_balances.length; i++){
      // var bal_pos = Math.floor(i/(exchanges_depth+1))
      var bal_pos = positions[i]
      if(bal_pos == bal.length){
        bal.push(0)
        balance_data.push({})
      }
      var balance = bal[bal_pos]
      var balance_at_depth = bigInt(this.get_actual_number(token_balances[i], depths[i]))
      
      balance = bigInt(balance).add(balance_at_depth)
      bal[bal_pos] = balance.toString().toLocaleString('fullwide', {useGrouping:false})
      // console.log('balance data pos: ',bal_pos, 'balance_data: ',balance_data)
      balance_data[bal_pos][depths[i]] = token_balances[i].toString().toLocaleString('fullwide', {useGrouping:false})
    }



    // return bal
    return { 'bal':bal, 'bal_data':balance_data }
  }

  get_balance_in_exchange = async (exchange_id, account, e5, addresses) => {
      const web3 = new Web3(this.get_web3_url_from_e5(e5));
      const H52contractArtifact = require('./contract_abis/H52.json');
      const H52_address = addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

      var exchange = this.state.created_token_object_mapping[e5] == null ? null : this.state.created_token_object_mapping[e5][exchange_id];
      var exchanges_depth = 0
      if(exchange != null && exchange['ipfs'] != null){
        exchanges_depth = exchange['ipfs'].default_depth == null ? 0 : exchange['ipfs'].default_depth
      }
      var exchange_ids = []
      var depths = []
      for(var i=exchanges_depth; i>=0; i--){
        exchange_ids.push(exchange_id)
        depths.push(i)
      }
      
      var token_balances = await H52contractInstance.methods.f140e(exchange_ids, account, depths).call((error, result) => {});

      var bal = 0;
      for(var i=0; i<token_balances.length; i++){
        var balance_at_depth = bigInt(this.get_actual_number(token_balances[i], depths[i]))
        bal = bigInt(bal).add(balance_at_depth)
      }


      return bal
  }

  get_balance_in_exchange_for_multiple_accounts = async (exchange_ids, accounts, e5, addresses, depths, action) => {
      const web3 = new Web3(this.get_web3_url_from_e5(e5));
      const H52contractArtifact = require('./contract_abis/H52.json');
      const H52_address = addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
      
      var token_balances = await H52contractInstance.methods.f270(exchange_ids, accounts, depths, 1, action).call((error, result) => {});

      return token_balances
  }

  get_actual_number(number, depth){
    var p = (bigInt(depth).times(72)).toString().toLocaleString('fullwide', {useGrouping:false})
    var depth_vaule = bigInt(('1e'+p))
    return (bigInt(number).times(depth_vaule)).toString().toLocaleString('fullwide', {useGrouping:false})
  }







  // encrypt_data = async () => {
  //   var address = await this.get_accounts_address(1002)
  //   console.log(address)

  //   const web3 = new Web3(this.state.web3);
  //   console.log(this.state.account)
  //   const privateKey = this.state.account.privateKey
  //   var hash = web3.utils.keccak256(privateKey.toString()).slice(34)

  //   // const pubKey = secp256k1.publicKeyCreate(Uint8Array.from(this.state.account.privateKey.slice(1)), false)
  //   // const publicKey = privateKeyToPublicKey(privateKey).toString('hex')
    
  //   var data = 'hello world'
  //   var private_key_to_use = Buffer.from(hash)
  //   const publicKeyA = await ecies.getPublic(private_key_to_use);
  //   // console.log(publicKeyA)
    
  //   const encrypted_data = (await ecies.encrypt(publicKeyA, Buffer.from(data)))
  //   // console.log(encrypted_data)
  //   var string = (new Uint8Array(encrypted_data)).toString()

  //   var uint8array = Uint8Array.from(string.split(',').map(x=>parseInt(x,10)));
  //   // console.log(uint8array)
  //   var plain_text = await ecies.decrypt(private_key_to_use, uint8array)
  //   // console.log(plain_text.toString())


  //   var ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123').toString();
  //   var bytes  = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');
  //   var originalText = bytes.toString(CryptoJS.enc.Utf8);
  //   // console.log(originalText)

  //   this.get_accounts_public_key(1002)
  // }

  // get_accounts_address = async (account_id) => {
  //   const web3 = new Web3(this.state.web3);
  //   const contractArtifact = require('./contract_abis/E5.json');
  //   const contractAddress = this.state.e5_address
  //   const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

  //   return await contractInstance.methods.f289(account_id).call((error, result) => {});
  // }






  get_account_public_key = async () => {
    const web3 = new Web3(this.get_selected_web3_url());
    const privateKey = this.state.accounts[this.state.selected_e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)
    const publicKeyA = await ecies.getPublic(private_key_to_use);
    var key = (new Uint8Array(publicKeyA)).toString()//oh my god

    var object_as_string = JSON.stringify({'key':key})
    var obj_cid = await this.store_objects_data_in_ipfs_using_option(object_as_string)
    return obj_cid
  }

  get_account_raw_public_key = async () => {
    const web3 = new Web3(this.get_selected_web3_url());
    const privateKey = this.state.accounts[this.state.selected_e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)
    const publicKeyA = await ecies.getPublic(private_key_to_use);
    return publicKeyA
  }

  encrypt_data_object(tx, key){
    var object_as_string = JSON.stringify(tx)
    var ciphertext = CryptoJS.AES.encrypt(object_as_string, key).toString();
    return ciphertext
  }

  get_accounts_public_key = async (account, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    console.log(this.state.addresses)
    console.log(e5)
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
    var events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:'0'})

    var filtered_events = events;

    if(filtered_events.length == 0){
      return ''
    }
    var obj_key = await this.fetch_objects_data_from_ipfs_using_option(filtered_events[filtered_events.length-1].returnValues.p4)
    var uint8array = Uint8Array.from(obj_key['key'].split(',').map(x=>parseInt(x,10))); 
    return uint8array
  }

  encrypt_key_with_accounts_public_key_hash = async (key, pub_key_hash) => {
    const encrypted_data = (await ecies.encrypt(pub_key_hash, Buffer.from(key)))
    var string = (new Uint8Array(encrypted_data)).toString()
    return string
  }

  fetch_and_decrypt_ipfs_object = async (encrypted_ipfs_obj, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const privateKey = this.state.accounts[e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)

    if(encrypted_ipfs_obj == null || encrypted_ipfs_obj['recipient_data'] == null){
      return null
    }

    try{
      var encrypted_key = encrypted_ipfs_obj['recipient_data'][this.state.user_account_id[e5]]
      var uint8array = Uint8Array.from(encrypted_key.split(',').map(x=>parseInt(x,10)));
    
      var my_key = await ecies.decrypt(private_key_to_use, uint8array)
      var encrypted_object = encrypted_ipfs_obj['obj']
    
      var bytes  = CryptoJS.AES.decrypt(encrypted_object, my_key.toString());
      var originalText = bytes.toString(CryptoJS.enc.Utf8);
      return JSON.parse(originalText);
    }catch(e){
      console.log(e)
      return null
    }
    
  }


  encrypt_nitro_node_key_with_my_public_key = async (key) => {
    var uint8array = await this.get_account_raw_public_key()
    var encrypted_key = this.encrypt_key_with_accounts_public_key_hash(key, uint8array)
    return encrypted_key
  }

  decrypt_nitro_node_key_with_my_public_key = async (encrypted_key, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const privateKey = this.state.accounts[e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)

    var uint8array = Uint8Array.from(encrypted_key.split(',').map(x=>parseInt(x,10)));
    var my_key = await ecies.decrypt(private_key_to_use, uint8array)

    return my_key.toString()
  }







  get_objects_messages = async (id, e5) => {
    var messages = []
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i]
      const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
      const E52contractArtifact = require('./contract_abis/E52.json');
      if(this.state.addresses[focused_e5] != null){
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var e5_id = parseInt(e5.replace('E',''))
        var cutoff_timestamp = Math.round(Date.now()/1000) - (60*60*24*400)
        var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 17, p3/* context */:id, p5: e5_id,})
        created_channel_data = created_channel_data.reverse()

        if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
          await this.fetch_multiple_cids_from_nitro(created_channel_data, 0, 'p4')
        }

        var is_first_time = this.state.object_messages[id] == null ? true: false
        for(var j=0; j<created_channel_data.length; j++){
          if(parseInt(created_channel_data[j].returnValues.p6) > cutoff_timestamp){
            var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_channel_data[j].returnValues.p4)
            if(ipfs_message != null){
              ipfs_message['time'] = created_channel_data[j].returnValues.p6
              this.fetch_uploaded_files_for_object(ipfs_message)

              if(!messages.includes(ipfs_message)){
                messages = [ipfs_message].concat(messages)
              }
              if(is_first_time){
                var clone = JSON.parse(JSON.stringify(this.state.object_messages))
                clone[id] = messages
                this.setState({object_messages: clone})
              }
            }
          }
        }
      }
      
    }

    var clone = JSON.parse(JSON.stringify(this.state.object_messages))
    clone[id] = messages
    this.setState({object_messages: clone})
  }

  get_job_objects_responses = async (id, e5) =>{
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:36})

    var application_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:37})

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_job_respnse_data, 0, 'p4')
      await this.fetch_multiple_cids_from_nitro(application_responses, 0, 'p4')
    }

    var messages = []
    var is_first_time = this.state.job_responses[id] == null ? true: false
    for(var j=0; j<created_job_respnse_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_job_respnse_data[j].returnValues.p4)

      // console.log('foundd', 'ipfs', id, ipfs_message)
      
      if(ipfs_message != null && ipfs_message['picked_contract_id'] != null){
        var data = await this.load_contract_item(e5, ipfs_message['picked_contract_id'])
        console.log('foundd', 'contract', data)
        if(data != null){
          ipfs_message['contract'] = data['contract']
          ipfs_message['proposals'] = data['proposals']
          ipfs_message['id'] = created_job_respnse_data[j].returnValues.p5
          ipfs_message['job_id'] = id;
          ipfs_message['e5'] = e5

          var filtered_events = []
          for(var i=0; i<application_responses.length; i++){
            if(application_responses[i].returnValues.p5 == created_job_respnse_data[j].returnValues.p5){
              filtered_events.push(application_responses[i])
            }
          }
          if(filtered_events.length > 0){
            var last_response = filtered_events[filtered_events.length -1]
            var last_response_ipfs_obj = await this.fetch_objects_data_from_ipfs_using_option(last_response.returnValues.p4)
            ipfs_message['is_response_accepted'] = last_response_ipfs_obj['accepted'];
          }else{
            ipfs_message['is_response_accepted'] = false
          }
          // console.log('foundd', 'final', ipfs_message)
          messages.push(ipfs_message)
          if(is_first_time){
            var clone = JSON.parse(JSON.stringify(this.state.job_responses))
            clone[id] = messages
            this.setState({job_responses: clone})
          }
        }else{
          console.log('get_job_objects_responses', 'data is null')
        }
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.job_responses))
    clone[id] = messages
    this.setState({job_responses: clone})

  }

  get_direct_purchase_events = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var created_awward_data = await this.load_event_data(web3, H52contractInstance, 'e5', e5, {p3/* awward_context */: id})

    console.log('direct_purchase', created_awward_data)
    
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_awward_data, 0, 'p4')
    }

    var direct_purchases = []
    var is_first_time_for_direct_purchases = this.state.direct_purchases[id] == null ? true: false
    for(var j=0; j<created_awward_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_awward_data[j].returnValues.p4)
      if(ipfs_message != null){
        console.log('direct_purchase', ipfs_message)
        direct_purchases.push(ipfs_message)
      }

      if(is_first_time_for_direct_purchases){
        var clone = JSON.parse(JSON.stringify(this.state.direct_purchases))
        clone[id] = direct_purchases
        this.setState({direct_purchases: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.direct_purchases))
    clone[id] = direct_purchases
    this.setState({direct_purchases: clone})


    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_fulfilment_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id})
    
    var fulfilments = {}
    var is_first_time_for_fulfilments = this.state.direct_purchase_fulfilments[id] == null ? true: false
    for(var j=0; j<created_fulfilment_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_fulfilment_data[j].returnValues.p4)
      if(ipfs_message != null){
        var signature_data = ipfs_message['signature_data']
        fulfilments[signature_data] = ipfs_message
      }

      if(is_first_time_for_fulfilments){
        var fulfilment_clone = JSON.parse(JSON.stringify(this.state.direct_purchase_fulfilments))
        fulfilment_clone[id] = fulfilments
        this.setState({direct_purchase_fulfilments: fulfilment_clone})
      }
    }

    var fulfilment_clone = JSON.parse(JSON.stringify(this.state.direct_purchase_fulfilments))
    fulfilment_clone[id] = fulfilments
    this.setState({direct_purchase_fulfilments: fulfilment_clone})
  }

  get_contractor_applications = async (id, E5) =>{
    const web3 = new Web3(this.get_web3_url_from_e5(E5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[E5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', E5, {p1/* target_id */: id, p3/* context */:38})

    var application_responses = await this.load_event_data(web3, E52contractInstance, 'e4', E5, {p1/* target_id */: id, p3/* context */:39})

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_job_respnse_data, 0, 'p4')
    }

    var messages = []
    var is_first_time = this.state.contractor_applications[id] == null ? true: false
    for(var j=0; j<created_job_respnse_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_job_respnse_data[j].returnValues.p4)
      if(ipfs_message != null && ipfs_message['contractor_post_id'] != null){
        ipfs_message['request_id'] = created_job_respnse_data[j].returnValues.p5
        ipfs_message['contractor_post_id'] = id;
        ipfs_message['e5'] = E5


        var filtered_events = []
        for(var i=0; i<application_responses.length; i++){
          if(application_responses[i].returnValues.p5 == created_job_respnse_data[j].returnValues.p5){
            filtered_events.push(application_responses[i])
          }
        }
        if(filtered_events.length > 0){
          var last_response = filtered_events[filtered_events.length -1]
          var last_response_ipfs_obj = await this.fetch_objects_data_from_ipfs_using_option(last_response.returnValues.p4)
          ipfs_message['is_response_accepted'] = last_response_ipfs_obj['accepted'];
          
          var data = await this.load_contract_item(E5, last_response_ipfs_obj['contract_id'])
          ipfs_message['contract'] = data['contract']
          ipfs_message['proposals'] = data['proposals']
        }else{
          ipfs_message['is_response_accepted'] = false
        }

        messages.push(ipfs_message)
      }
      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.contractor_applications))
        clone[id] = messages
        this.setState({contractor_applications: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.contractor_applications))
    clone[id] = messages
    this.setState({contractor_applications: clone})

  }

  get_all_sorted_objects_mappings(object){
        var all_objects = {}
        for(var i=0; i<this.state.e5s['data'].length; i++){
            var e5 = this.state.e5s['data'][i]
            var e5_objects = object[e5]
            var all_objects_clone = structuredClone(all_objects)
            all_objects = { ...all_objects_clone, ...e5_objects}
        }

        return all_objects
  }


  load_job_request_messages = async (contractor_id, request_id, e5) =>{
    var messages = []
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i]
      const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
      const E52contractArtifact = require('./contract_abis/E52.json');
      
      if(this.state.addresses[focused_e5] != null){
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 17/* shadow_object_container */, p3/* context */:contractor_id, p5/* int_data */:request_id})
        if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
          await this.fetch_multiple_cids_from_nitro(created_channel_data, 0, 'p4')
        }
        var is_first_time = this.state.object_messages[request_id] == null ? true: false
        for(var j=0; j<created_channel_data.length; j++){
          var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_channel_data[j].returnValues.p4)
          if(ipfs_message != null && ipfs_message['e5'] == e5){
            this.fetch_uploaded_files_for_object(ipfs_message)
            messages.push(ipfs_message)
          }
          if(is_first_time){
            var clone = JSON.parse(JSON.stringify(this.state.object_messages))
            clone[request_id] = messages
            this.setState({object_messages: clone})
          }
        }
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.object_messages))
    clone[request_id] = messages
    this.setState({object_messages: clone})
  }

  get_post_award_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var created_awward_data = (await this.load_event_data(web3, H52contractInstance, 'e5', e5, {p3/* awward_context */: id})).reverse()

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_awward_data, 0, 'p4')
    }

    var award_events = []
    var is_first_time = this.state.award_data[id] == null ? true: false
    for(var j=0; j<created_awward_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_awward_data[j].returnValues.p4)
      if(ipfs_message != null){
        award_events.push(ipfs_message)
      }

      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.award_data))
        clone[id] = award_events
        this.setState({award_data: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.award_data))
    clone[id] = award_events
    this.setState({award_data: clone})
  }





  load_modify_item_data = async (modify_target, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var modify_id = parseInt(modify_target)
    var modify_id_type = await E52contractInstance.methods.f135(modify_id).call((error, result) => {});

    if(modify_id_type == 31/* 31(token_exchange) */){
      const H5contractArtifact = require('./contract_abis/H5.json');
      const H5_address = this.state.addresses[e5][5];
      const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

      var exchange_data = await H5contractInstance.methods.f85(modify_id).call((error, result) => {});
      return {'data': exchange_data, 'type':modify_id_type};
    }
    else if(modify_id_type == 33/* 33(subscription_object) */){
      const F5contractArtifact = require('./contract_abis/F5.json');
      const F5_address = this.state.addresses[e5][2];
      const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

      var subscription_data = await F5contractInstance.methods.f73(modify_id).call((error, result) => {});
      return {'data': subscription_data, 'type':modify_id_type};
    }
    else{
      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = this.state.addresses[e5][3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      var contract_data = await G5contractInstance.methods.f77(modify_id, false).call((error, result) => {});
      return {'data': contract_data, 'type':modify_id_type};
    }
  }

  test_generate_signature= async (account) => {
    const web3 = new Web3(this.state.web3);

    var data = 'hello world'
    var address = account.address
    console.log('----------------------www----------------------')
    console.log('account address: ',address)

    web3.eth.accounts.wallet.add(account.privateKey);
    var signature = await web3.eth.sign(data, address)
    
    console.log('signature: ',signature)
    var original_address = await web3.eth.accounts.recover(data, signature)
    console.log('original address: ',original_address)


  }




  add_account_to_contacts = async (account) => {
    if(this.check_for_duplicates(account)){
      this.prompt_top_notification(this.getLocale()['2734']/* 'A matching contact was found' */, 3600)
      return
    }

    var me = this.state.user_account_id[this.state.selected_e5]
    if(account == me){
      this.prompt_top_notification(this.getLocale()['2735']/* 'You cant add yourself.' */, 3600)
      return
    }

    this.prompt_top_notification(this.getLocale()['2736']/* 'Adding account ID to Contacts...' */, 3600)
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    var account_address = await contractInstance.methods.f289(account).call((error, result) => {});
    var contacts_object_clone = structuredClone(this.state.contacts)
    if(contacts_object_clone[this.state.selected_e5] == null){
      contacts_object_clone[this.state.selected_e5] = []
    }
    contacts_object_clone[this.state.selected_e5].push({'id':account.toString(), 'address':account_address.toString()})

    this.setState({contacts: contacts_object_clone, should_update_contacts_onchain: true})

    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  check_for_duplicates(account){
    var do_duplicates_exist = false
    if(this.state.contacts[this.state.selected_e5] == null){
      return do_duplicates_exist;
    }
    this.state.contacts[this.state.selected_e5].forEach(contact => {
      if(contact['id'] == account){
        do_duplicates_exist = true
      }
    });
    return do_duplicates_exist
  }
 
  add_account_to_blocked_list = async (account) => {
    if(this.check_for_blocked_duplicates(account)){
      this.prompt_top_notification(this.getLocale()['2731']/* 'A matching blocked account was found' */, 2600)
      return
    }
    var me = this.state.user_account_id[this.state.selected_e5]
    if(account == me){
      this.prompt_top_notification(this.getLocale()['2732']/* 'You cant block yourself!' */, 2600)
      return
    }
    this.prompt_top_notification(this.getLocale()['2733']/* 'Adding account ID to blocked list...' */, 1600)
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    var account_address = await contractInstance.methods.f289(account).call((error, result) => {});
    var blocked_object_clone = structuredClone(this.state.blocked_accounts)
    if(blocked_object_clone[this.state.selected_e5] == null){
      blocked_object_clone[this.state.selected_e5] = []
    }
    blocked_object_clone[this.state.selected_e5].push({'id':account.toString(), 'address':account_address.toString()})

    this.setState({blocked_accounts: blocked_object_clone, should_update_blocked_accounts_onchain: true})

    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  check_for_blocked_duplicates(account){
    var do_duplicates_exist = false
    if(this.state.blocked_accounts[this.state.selected_e5] == null){
      return do_duplicates_exist
    }
    this.state.blocked_accounts[this.state.selected_e5].forEach(contact => {
      if(contact['id'] == account){
        do_duplicates_exist = true
      }
    });
    return do_duplicates_exist
  }
  






  get_contract_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const G5contractArtifact = require('./contract_abis/G5.json');
    const G5_address = this.state.addresses[e5][3];
    const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);


    var make_proposal_event_data = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */: id})

    var modify_object_event_data = await this.load_event_data(web3, G5contractInstance, 'e2', e5, {p1/* contract_or_proposal_id */: id})

    // console.log('---------------------------get_contract_event_data-----------------------------------')
    // console.log(make_proposal_event_data)

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = this.state.addresses[e5][4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var enter_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 3})

    var extend_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 14})

    var exit_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 11})

    var force_exit_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 18})


    var contract_token_event_data = await this.get_token_event_data(id, e5);

    var clone = structuredClone(this.state.contract_events)
    clone[id] = {'modify_object':modify_object_event_data.reverse(), 'make_proposal':make_proposal_event_data.reverse(), 'enter_contract':enter_contract_event_data.reverse(), 'extend_contract':extend_contract_event_data.reverse(), 'exit_contract':exit_contract_event_data.reverse(), 'force_exit':force_exit_contract_event_data.reverse(), 'transfer':contract_token_event_data}
    

    var me = this;
    setTimeout(function() {
      me.setState({contract_events: clone})
    }, (1 * 200));
    
  }

  get_token_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p2/* sender */: id})

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: id})

    // console.log('get_token_event_data',received_tokens_event_data)

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = this.sortByAttributeDescending(all_events, 'timestamp');

    return sorted_events;

  }

  get_proposal_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = this.state.addresses[e5][4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var record_proposal_vote_event_data = null
    var submit_proposal_event_data = null
    var archive_proposal_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, G52contractInstance, 'e1', e5, {p2/* consensus_id */: id}],
        [web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: id }],
        [web3, G52contractInstance, 'archive', e5, {p1/* proposal_id */: id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      
      record_proposal_vote_event_data = all_events[0]
      submit_proposal_event_data = all_events[1]
      archive_proposal_event_data = all_events[2]
    }
    else{
      record_proposal_vote_event_data = await this.load_event_data(web3, G52contractInstance, 'e1', e5, {p2/* consensus_id */: id})

      submit_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: id })

      archive_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'archive', e5, {p1/* proposal_id */: id})
    }
    var proposal_token_event_data = await this.get_token_event_data(id, e5);

    var clone = structuredClone(this.state.proposal_events)
    clone[id] = {'vote':record_proposal_vote_event_data, 'submit':submit_proposal_event_data, 'archive':archive_proposal_event_data, 'transfer':proposal_token_event_data}

    this.setState({proposal_events: clone})
  }

  get_subscription_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = this.state.addresses[e5][2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

    var pay_subscription_event_data = null
    var cancel_subscription_event_data = null
    var modify_subscription_event_data = null
    var collect_subscription_event_data = null
    
    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */: id}],
        [web3, F5contractInstance, 'e2', e5, {p1/* subscription_id */: id}],
        [web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */: id}],
        [web3, F5contractInstance, 'e4', e5, {p1/* subscription_id */: id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      
      pay_subscription_event_data = all_events[0]
      cancel_subscription_event_data = all_events[1]
      modify_subscription_event_data = all_events[2]
      collect_subscription_event_data = all_events[3]
    }else{
      pay_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */: id})

      cancel_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e2', e5, {p1/* subscription_id */: id})

      modify_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */: id})

      collect_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e4', e5, {p1/* subscription_id */: id})
    }

    var subscription_token_event_data = await this.get_token_event_data(id, e5);

    var clone = structuredClone(this.state.subscription_events)
    clone[id] = {'transfer':subscription_token_event_data, 'pay':pay_subscription_event_data.reverse(), 'cancel':cancel_subscription_event_data, 'modify':modify_subscription_event_data, 'collect':collect_subscription_event_data}

    this.setState({subscription_events: clone})


  }

  get_exchange_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H5contractArtifact = require('./contract_abis/H5.json');
    const H5_address = this.state.addresses[e5][5];
    const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var transfer_event_data = await this.get_accounts_token_event_data(id, this.state.user_account_id[e5], e5) 
    var exchange_token_event_data = await this.get_token_event_data(id, e5);

    var update_exchange_ratio_event_data = null
    var update_proportion_ratio_event_data = null
    var modify_exchange_event_data = null
    var update_balance_event_data = null
    var freeze_unfreeze_event_data = null
    var depth_mint_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, H5contractInstance, 'e1', e5, {p1/* exchange */: id}],
        [web3, H5contractInstance, 'e2', e5, {p1/* exchange */: id}],
        [web3, H5contractInstance, 'e3', e5, {p1/* exchange */: id}],
        [web3, H52contractInstance, 'e2', e5, {p1/* exchange */: id}],
        [web3, H52contractInstance, 'e3', e5, {p1/* exchange */: id}],
        [web3, H52contractInstance, 'power', e5, {p1/* exchange */: id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)

      update_exchange_ratio_event_data = all_events[0]
      update_proportion_ratio_event_data = all_events[1]
      modify_exchange_event_data = all_events[2]
      update_balance_event_data = all_events[3]
      freeze_unfreeze_event_data = all_events[4]
      depth_mint_event_data = all_events[5]
    }else{
      update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p1/* exchange */: id})

      update_proportion_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e2', e5, {p1/* exchange */: id})

      modify_exchange_event_data = await this.load_event_data(web3, H5contractInstance, 'e3', e5, {p1/* exchange */: id})

      update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p1/* exchange */: id})

      freeze_unfreeze_event_data = await this.load_event_data(web3, H52contractInstance, 'e3', e5, {p1/* exchange */: id})

      depth_mint_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p1/* exchange */: id})
    }


    var clone = structuredClone(this.state.exchange_events)
    clone[id] = {'transfer':transfer_event_data, 'exchange_ratio':update_exchange_ratio_event_data.reverse(), 'proportion_ratio':update_proportion_ratio_event_data.reverse(), 'modify':modify_exchange_event_data.reverse(), 'exchange-transfer': exchange_token_event_data, 'update_balance':update_balance_event_data.reverse(), 'freeze_unfreeze':freeze_unfreeze_event_data.reverse(), 'depth_mint':depth_mint_event_data.reverse()}

    this.setState({exchange_events: clone});
  }

  get_accounts_token_event_data = async (exchange, id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */:exchange,  p2/* sender */: id})

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */:exchange, p3/* receiver */: id})

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = this.sortByAttributeDescending(all_events, 'timestamp');

    return sorted_events

  }

  get_moderator_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);


    var modify_moderator_event_data = null
    var enable_disable_interactible_checkers_event_data = null
    var add_interactible_account_event_data = null
    var block_accounts_event_data = null
    var revoke_author_privelages_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:4}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:5}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:2}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:17}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:16}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      
      modify_moderator_event_data = all_events[0]
      enable_disable_interactible_checkers_event_data = all_events[1]
      add_interactible_account_event_data = all_events[2]
      block_accounts_event_data = all_events[3]
      revoke_author_privelages_event_data = all_events[4]
    }else{
      modify_moderator_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:4})

      enable_disable_interactible_checkers_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:5})

      add_interactible_account_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:2})

      block_accounts_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:17})

      revoke_author_privelages_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:16})
    }

    var clone = structuredClone(this.state.moderator_events)
    clone[id] = {'modify_moderator':modify_moderator_event_data, 'enable_interactible':enable_disable_interactible_checkers_event_data, 'add_interactible':add_interactible_account_event_data, 'block_account':block_accounts_event_data, 'revoke_privelages':revoke_author_privelages_event_data}

    this.setState({moderator_events: clone});
  }

  get_channel_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id})

    var clone = structuredClone(this.state.channel_events)
    clone[id] = {'channel_data':created_channel_data}

    this.setState({channel_events: clone});
  }






  get_accounts_payment_information = async (id, e5, account) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = this.state.addresses[e5][2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

    var pay_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */: id, p2/* sender_account_id */:account})

    var their_payment = await F5contractInstance.methods.f229([id], [[account]]).call((error, result) => {});

    var clone = structuredClone(this.state.subscription_search_result)
    clone[id+account] = {'events':pay_subscription_event_data, 'payment':their_payment[0][0]}

    this.setState({subscription_search_result: clone})

    if(pay_subscription_event_data.length == 0){
      this.prompt_top_notification('Search complete, '+pay_subscription_event_data.length+' entries found.', 2000)
    }
  }

  get_searched_account_data = async (id, typed_search) => {
    var data = []
    var data_found = false;
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      if(this.state.e5s[e5].active == true){
        const web3 = new Web3(this.get_web3_url_from_e5(e5));
        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = this.get_contract_from_e5(e5)
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const F5contractArtifact = require('./contract_abis/F5.json');
        const F5_address = this.state.addresses[e5][2];
        const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = this.state.addresses[e5][4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

        const H5contractArtifact = require('./contract_abis/H5.json');
        const H5_address = this.state.addresses[e5][5];
        const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = this.state.addresses[e5][6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        var account_address = await contractInstance.methods.f289(id).call((error, result) => {});

        var alias = this.state.alias_bucket[e5][id] == null ? 'Unknown' : this.state.alias_bucket[e5][id]
        var should_include_id = true;
        if(id != typed_search){
          if(alias != typed_search){
            should_include_id = false
          }
        }

        if(account_address.toString() != '0x0000000000000000000000000000000000000000' && should_include_id){
          data_found = true
          var pending_withdraw_balance = await contractInstance.methods.f167([id], [], 1).call((error, result) => {});

          var run_data = await contractInstance.methods.f287([id]).call((error, result) => {});

          var make_object_event_data = null
          var withdraw_event_data = null
          var pending_withdraw_event_data = null
          var transaction_event_data = null
          var pay_subscription_event_data = null
          var cancel_subscription_event_data = null
          var enter_contract_event_data = null
          var exit_contract_event_data = null
          var record_proposal_vote_event_data = null
          var update_exchange_ratio_event_data = null

          if(this.state.beacon_node_enabled == true){
            var event_params = [
              [web3, contractInstance, 'e1', e5, {p3/* sender_account_id */: id}],
              [web3, contractInstance, 'e2', e5, {p1/* sender_account_id */: id}],
              [web3, contractInstance, 'e3', e5, {p1/* receiver_account_id */: id}],
              [web3, contractInstance, 'e4', e5, {p1/* sender_account_id */: id}],
              [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */: id}],
              [web3, F5contractInstance, 'e2', e5, {p2/* sender_acc_id */: id}],
              [web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 3}],
              [web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 11}],
              [web3, G52contractInstance, 'e1', e5, {p3/* voter_account_id */: id}],
              [web3, H5contractInstance, 'e1', e5, {p3/* sender_account */: id }],
            ]
            var all_events = await this.load_multiple_events_from_nitro(event_params)
            make_object_event_data = all_events[0]
            withdraw_event_data = all_events[1]
            pending_withdraw_event_data = all_events[2]
            transaction_event_data = all_events[3]
            pay_subscription_event_data = all_events[4]
            cancel_subscription_event_data = all_events[5]
            enter_contract_event_data = all_events[6]
            exit_contract_event_data = all_events[7]
            record_proposal_vote_event_data = all_events[8]
            update_exchange_ratio_event_data = all_events[9]
          }else{
            make_object_event_data = await this.load_event_data(web3, contractInstance, 'e1', e5, {p3/* sender_account_id */: id})

            withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e2', e5, {p1/* sender_account_id */: id})

            pending_withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e3', e5, {p1/* receiver_account_id */: id})

            transaction_event_data = await this.load_event_data(web3, contractInstance, 'e4', e5, {p1/* sender_account_id */: id})

            pay_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */: id})

            cancel_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e2', e5, {p2/* sender_acc_id */: id})

            enter_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 3})

            exit_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 11})

            record_proposal_vote_event_data = await this.load_event_data(web3, G52contractInstance, 'e1', e5, {p3/* voter_account_id */: id})

            update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p3/* sender_account */: id })
          }

          var contract_token_event_data = await this.get_token_event_data(id, e5);

          var ether_balance = await web3.eth.getBalance(account_address)

          var end_spend_balance = await H52contractInstance.methods.f140e([3,5], id, [0,0]).call((error, result) => {});

          var interacted_exchanges_data = this.get_searched_account_interacted_exchanges(update_exchange_ratio_event_data, contract_token_event_data, e5)

          var interacted_exchanges = interacted_exchanges_data['exchanges']
          var interacted_exchanges_depths = interacted_exchanges_data['depths']

          var token_balances_and_data = await this.get_balance_from_multiple_exchanges(interacted_exchanges, id, H52contractInstance, interacted_exchanges_depths)
          var token_balances = token_balances_and_data['bal']

          var searched_accounts_exchange_interactions_data = await this.load_searched_accounts_exchange_interactions_data(id, e5)

          var obj = {'e5':e5,'id':id,'address':account_address,'alias':alias, 'ether_balance':ether_balance, 'withdraw_balance':pending_withdraw_balance, 'run_data':run_data[0], 'make_object':make_object_event_data.reverse(), 'withdraw':withdraw_event_data.reverse(), 'pending_withdraw':pending_withdraw_event_data.reverse(),'transactions':transaction_event_data.reverse(), 'pay_subscription':pay_subscription_event_data.reverse(), 'cancel_subscription':cancel_subscription_event_data.reverse(), 'enter_contract':enter_contract_event_data.reverse(), 'exit_contract':exit_contract_event_data.reverse(),'vote':record_proposal_vote_event_data.reverse(), 'exchange_ratio':update_exchange_ratio_event_data.reverse(), 'tokens':contract_token_event_data, 'end_balance':end_spend_balance[0], 'spend_balance':end_spend_balance[1], 'interacted_exchanges':interacted_exchanges, 'interacted_exchanges_balances':token_balances, 'searched_accounts_exchange_interactions_data': searched_accounts_exchange_interactions_data}

          data.push(obj)

          this.get_accounts_uploaded_object_data(make_object_event_data, e5, web3, id);
          this.get_accounts_message_activities(id, e5);
        }
      }
    }

    if(!data_found){
      this.prompt_top_notification(this.getLocale()['2737']/* 'Search complete, no account data found' */, 5000)
      return;
    }
    console.log('data: ,', this.state.searched_accounts_data)
    var clone = structuredClone(this.state.searched_accounts_data)
    clone[id] = data
    this.setState({searched_accounts_data: clone})

    // var me = this;
    // setTimeout(function() {
    //   console.log('data: ,', me.state.searched_accounts_data)
    // }, (1 * 1000));
    
  }

  get_searched_account_interacted_exchanges(update_exchange_ratio_event_data, contract_token_event_data, e5){
    var exchanges = []
    var exchanges_depth_data = []
    update_exchange_ratio_event_data.forEach(event => {
      var exchange_id = parseInt(event.returnValues.p1)
      if(!exchanges.includes(exchange_id)){
        exchanges.push(exchange_id)
        var depth_item = this.state.created_token_object_mapping[e5][exchange_id]['ipfs'] == null ? 0 : this.state.created_token_object_mapping[e5][exchange_id]['ipfs'].default_depth
        if(depth_item == null) depth_item = 0
        exchanges_depth_data.push(parseInt(depth_item))
      }
    });

    contract_token_event_data.forEach(event => {
      var exchange_id = parseInt(event['event'].returnValues.p1)
      if(!exchanges.includes(exchange_id)){
        exchanges.push(exchange_id)
        var depth_item = this.state.created_token_object_mapping[e5][exchange_id]['ipfs'] == null ? 0 : this.state.created_token_object_mapping[e5][exchange_id]['ipfs'].default_depth
        if(depth_item == null) depth_item = 0
        exchanges_depth_data.push(parseInt(depth_item))
      }
    });

    // return exchanges
    return {'exchanges':exchanges, 'depths':exchanges_depth_data}
  }

  get_accounts_message_activities = async (account_id, e5) => {
    var messages = []
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    if(this.state.addresses[e5] != null){
      const E52_address = this.state.addresses[e5][1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
      var e5_id = parseInt(e5.replace('E',''))

      var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 17, p2/* sender_id */:account_id, p5: e5_id,})
      // created_channel_data = created_channel_data.reverse()
      var is_first_time = this.state.account_message_history[account_id] == null ? true: false
      for(var j=0; j<created_channel_data.length; j++){
        var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_channel_data[j].returnValues.p4)
        if(ipfs_message != null){
          ipfs_message['time'] = created_channel_data[j].returnValues.p6
          if(!messages.includes(ipfs_message)){
            messages = [ipfs_message].concat(messages)
          }
        }
        if(is_first_time){
          var clone = JSON.parse(JSON.stringify(this.state.account_message_history))
          clone[account_id] = messages
          this.setState({account_message_history: clone})
        }
      }
    }
    var clone = JSON.parse(JSON.stringify(this.state.account_message_history))
    clone[account_id] = messages
    this.setState({account_message_history: clone})
  }

  get_accounts_uploaded_object_data = async (events, e5, web3, account_id) => {
    var data = []
    var contract_addresses = this.state.addresses[e5]
    if(contract_addresses != null){
      var is_first_time = this.state.account_post_history[account_id] == null ? true: false

      var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events2(events), web3, e5, contract_addresses)

      for(var i=0; i<events.length; i++){
        var event = events[i]
        var id = event.returnValues.p1 /* object_id */
        var object_type = event.returnValues.p2/* object_type */
        var author = event.returnValues.p3/* sender_account_id */
        var timestamp = event.returnValues.p4/* timestamp */
        var block = event.returnValues.p5/* blocknumber */
        var ipfs = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id];
        if(object_type == 31){
          if(ipfs != null && ipfs.token_image != null && ipfs.token_image.startsWith('image')) this.fetch_uploaded_data_from_ipfs([ipfs.token_image], false)
        }
        else if(object_type == 19 || object_type == 20 || object_type == 21){
          if(ipfs != null && ipfs.album_art != null && ipfs.album_art.startsWith('image')) this.fetch_uploaded_data_from_ipfs([ipfs.album_art], false)
        }

        if(ipfs != null){
          data.push({'e5':e5, 'author':author, 'id':id, 'type':object_type, 'ipfs':ipfs, 'block':block, 'timestamp':timestamp})
        }
        if(is_first_time){
          var clone = JSON.parse(JSON.stringify(this.state.account_post_history))
          clone[account_id] = data
          this.setState({account_post_history: clone})
        }
      }
    }
    var clone = JSON.parse(JSON.stringify(this.state.account_post_history))
    clone[account_id] = data
    this.setState({account_post_history: clone})
  }

  get_ids_from_events2(events){
    var ids = []
    events.forEach(event => {
      var id = event.returnValues.p1
      ids.push(id)
    });
    return ids
  }





  update_watched_account_data(){
    var watched_account = this.state.watched_account_id
    if(watched_account != ''){
      this.get_watched_account_data(watched_account, this.state.selected_e5)
    }
  }

  get_watched_account_data = async (id, e5) => {
    var contract_token_event_data = await this.get_token_event_data(id, e5);
    var watched_account_data_clone = structuredClone(this.state.watched_account_data)
    var pointer = e5+id
    watched_account_data_clone[pointer] = contract_token_event_data
    this.setState({watched_account_data: watched_account_data_clone})
  }



  load_exchanges_royalty_information = async (token_item) => {
    var e5 = token_item['e5'];
    var exchange_id = token_item['id']
    if(!this.should_load_exchange_royalty_data(exchange_id)){
      console.log('hella','not loading royalty info')
      return
    }
    const web3 = new Web3(this.get_web3_url_from_e5(e5));

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var transaction_history_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */: exchange_id })
    var interacted_accounts = []
    transaction_history_event_data.forEach(event => {
      var sender_account = event.returnValues.p2
      var receiver_account = event.returnValues.p3
      if(!interacted_accounts.includes(sender_account)){
        interacted_accounts.push((sender_account))
      }
      if(!interacted_accounts.includes(receiver_account)){
        interacted_accounts.push((receiver_account))
      }
    });

    var returned_balances = await H52contractInstance.methods.f270([exchange_id], [interacted_accounts], [0], 1, 0).call((error, result) => {});
    var balances = returned_balances[0]
    var now = (new Date().getTime()/1000)

    var account_balances = []
    for(var i=0; i<interacted_accounts.length; i++){
      var obj = {'account':interacted_accounts[i], 'balance':balances[i]}
      if(balances[i] != 0){
        account_balances.push(obj)
      }
    }

    let sorted_account_balances = this.sortByAttributeDescending(account_balances, 'balance').reverse()
    var data = {'balance_data':sorted_account_balances, 'time':now}

    var clone = structuredClone(this.state.exchange_royalty_data)
    clone[exchange_id] = data
    this.setState({exchange_royalty_data: clone})
  }

  should_load_exchange_royalty_data(exchange_id){
    return true
    var should = true
    if(this.state.exchange_royalty_data[exchange_id] != null){
      var data = this.state.exchange_royalty_data[exchange_id]
      var now = (new Date().getTime()/1000)
      if(now - data['time'] > (60*10/* 10min */)){
        should = false
      }
    }
    return should
  }

  load_exchanges_royalty_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_exchange_royalty_events = (await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 12/* 12(stage_royalty_id) */, p3/* context */: id})).reverse()

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_exchange_royalty_events, 0, 'p4')
    }

    var royalty_events = []
    var is_first_time = this.state.token_royalty_data_staging_data[id] == null ? true: false
    for(var j=0; j<created_exchange_royalty_events.length; j++){
      var ipfs_object = await this.fetch_objects_data_from_ipfs_using_option(created_exchange_royalty_events[j].returnValues.p4)
      if(ipfs_object != null){
        royalty_events.push(ipfs_object)
      }
      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.token_royalty_data_staging_data))
        clone[id] = royalty_events
        this.setState({token_royalty_data_staging_data: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.token_royalty_data_staging_data))
    clone[id] = royalty_events
    this.setState({token_royalty_data_staging_data: clone})
  }

  load_exchanges_royalty_payout_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_exchange_royalty_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 13/* 13(record_royalty_payout_id) */, p3/* context */: id})

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_exchange_royalty_events, 0, 'p4')
    }
    var royalty_payout_events = []
    var is_first_time = this.state.token_royalty_payout_data[id] == null ? true: false
    for(var j=0; j<created_exchange_royalty_events.length; j++){
      var ipfs_object = await this.fetch_objects_data_from_ipfs_using_option(created_exchange_royalty_events[j].returnValues.p4)
      if(ipfs_object != null){
        royalty_payout_events.push(ipfs_object)
      }

      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.token_royalty_payout_data))
        clone[id] = royalty_payout_events
        this.setState({token_royalty_payout_data: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.token_royalty_payout_data))
    clone[id] = royalty_payout_events
    this.setState({token_royalty_payout_data: clone})
  }





  load_contracts_exchange_interactions_data = async (contract_id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, { p2/* sender */: contract_id})

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: contract_id})

    var update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p2/* receiver */: contract_id})

    var depth_swap_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p3/* receiver */: contract_id, p2/* action */:2 /* depth_auth_mint */})

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<update_balance_event_data.length; i++){
      all_events.push({'event':update_balance_event_data[i], 'action':'Update', 'timestamp':update_balance_event_data[i].returnValues.p4})
    }
    for(var i=0; i<depth_swap_event_data.length; i++){
      all_events.push({'event':depth_swap_event_data[i], 'action':'DepthMint', 'timestamp':depth_swap_event_data[i].returnValues.p7})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = (this.sortByAttributeDescending(all_events, 'timestamp')).reverse()

    var data = {}
    sorted_events.forEach(token_event => {
      var exchange = token_event['event'].returnValues.p1
      if(data[exchange] == null){
        data[exchange] = []
      }
      data[exchange].push(token_event)
    });
    
    var clone = structuredClone(this.state.contract_exchange_interactions_data)
    clone[e5+contract_id] = data
    this.setState({contract_exchange_interactions_data: clone})
  }

  load_searched_accounts_exchange_interactions_data = async (account_id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);


    var send_tokens_event_data = null
    var received_tokens_event_data = null
    var update_balance_event_data = null
    var depth_swap_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, H52contractInstance, 'e1', e5, { p2/* sender */: account_id}],
        [web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id}],
        [web3, H52contractInstance, 'e2', e5, {p2/* receiver */: account_id}],
        [web3, H52contractInstance, 'power', e5, {p3/* receiver */: account_id, p2/* action */:2 /* depth_auth_mint */}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      send_tokens_event_data = all_events[0]
      received_tokens_event_data = all_events[1]
      update_balance_event_data = all_events[2]
      depth_swap_event_data = all_events[3]
    }else{
      send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, { p2/* sender */: account_id})

      received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id})

      update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p2/* receiver */: account_id})

      depth_swap_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p3/* receiver */: account_id, p2/* action */:2 /* depth_auth_mint */})
    }

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<update_balance_event_data.length; i++){
      all_events.push({'event':update_balance_event_data[i], 'action':'Update', 'timestamp':update_balance_event_data[i].returnValues.p4})
    }
    for(var i=0; i<depth_swap_event_data.length; i++){
      all_events.push({'event':depth_swap_event_data[i], 'action':'DepthMint', 'timestamp':depth_swap_event_data[i].returnValues.p7})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = (this.sortByAttributeDescending(all_events, 'timestamp')).reverse()

    var data = {}
    sorted_events.forEach(token_event => {
      var exchange = token_event['event'].returnValues.p1
      if(data[exchange] == null){
        data[exchange] = []
      }
      data[exchange].push(token_event)
    });

    return data
  }

  load_burn_address_end_balance_events = async (e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */:3, p3/* receiver */: 0})

    var all_events = [];
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = (this.sortByAttributeDescending(all_events, 'timestamp')).reverse()

    var data = {}
    sorted_events.forEach(token_event => {
      var exchange = 3
      if(data[exchange] == null){
        data[exchange] = []
      }
      data[exchange].push(token_event)
    });
    
    var clone = structuredClone(this.state.e5_deflation_data)
    clone[e5] = data
    this.setState({e5_deflation_data: clone})
  }





  load_nitro_node_details = async (object, should_load_subscription_if_any) =>{
    var link = object['ipfs'] == null ? null : object['ipfs'].node_url
    var request = `${link}/marco`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve nitro data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var success = obj.success
      if(success == true){
        var clone = structuredClone(this.state.nitro_node_details)
        clone[object['e5_id']] = obj
        this.setState({nitro_node_details:clone})
      }else{
        var clone = structuredClone(this.state.nitro_node_details)
        clone[object['e5_id']] = 'unavailable'
        this.setState({nitro_node_details:clone})
      }
    }
    catch(e){
      var clone = structuredClone(this.state.nitro_node_details)
      clone[object['e5_id']] = 'unavailable'
      this.setState({nitro_node_details:clone})
    }
  }

  load_my_account_storage_info = async (object) => {
    var account = this.state.user_account_id[object['e5']]
    if(account != null && account != 1){
      var link = object['ipfs'] == null ? null : object['ipfs'].node_url
      var request = `${link}/account_storage_data/${account}`
      try{
        const response = await fetch(request);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        var success = obj.success
        if(success == true){
          var info = obj.account
          var clone = structuredClone(this.state.nitro_node_storage_payment_info)
          clone[object['e5_id']] = info
          this.setState({nitro_node_storage_payment_info: clone})
        }else{
          var clone = structuredClone(this.state.nitro_node_storage_payment_info)
          clone[object['e5_id']] = 'unavailable'
          this.setState({nitro_node_storage_payment_info: clone})
        }
      }
      catch(e){
        var clone = structuredClone(this.state.nitro_node_storage_payment_info)
        clone[object['e5_id']] = 'unavailable'
        this.setState({nitro_node_storage_payment_info: clone})
      }
    }else{
      var clone = structuredClone(this.state.nitro_node_storage_payment_info)
      clone[object['e5_id']] = 'unavailable'
      this.setState({nitro_node_storage_payment_info: clone})
    }
  }



  fetch_multiple_cids_from_nitro = async (events, depth, p) => {
    var hashes = this.get_cid_from_data_from_events(events, p)
    if(hashes.length == 0) return;
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes: hashes}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      // console.log('appdataa',obj)
      var object_data = obj['data']
      var count = 0
      for(var i=0; i<hashes.length; i++){
        var cid_data = object_data[hashes[i]]
        if(cid_data != null){
          count++
          this.store_in_local_storage(hashes[i], cid_data)
        }
      }
      // this.prompt_top_notification('loaded '+count+' hashes', 3000)
    }
    catch(e){
      if(depth < 3){
        await this.wait(this.state.ipfs_delay)
        return await this.fetch_multiple_cids_from_nitro(events, depth+1, p)
      }
    }
  }

  get_cid_from_data_from_events(events, p){
    var cids = []
    for(var i=0; i<events.length; i++){
      var event = events[i]
      var ecid = event.returnValues[p]

      var cid = ecid
      if(ecid.includes('.')){
        var split_cid_array = ecid.split('.');
        cid = split_cid_array[1]
      }
      var included_underscore = false
      var id = cid;
      var internal_id = ''
      if(cid.includes('_')){
        included_underscore = true;
        var split_cid_array2 = cid.split('_');
        id = split_cid_array2[0]
        internal_id = split_cid_array2[1]
      }
      var data = this.fetch_from_storage(id)
      if(data == null){
        cids.push(id)
      }
    }
    return cids
  }



}

export default App;