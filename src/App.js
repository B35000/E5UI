/* eslint-disable react/jsx-pascal-case */
// Copyright (c) 2023 Bry Onyoni
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
import React, { Component, useState, useImperativeHandle, forwardRef } from 'react';

/* images */
import music_label from './assets/music_default_label.png'
import expand_icon from './assets/expand_icon.png'
import close_pip from './assets/close_pip.png'
import empty_image from './assets/default_image_background.png'
import download_icon from './assets/download_icon.png'
import zoom_in_icon from './assets/zoom_in_icon.png'
import zoom_out_icon from './assets/zoom_out_icon.png'
import video_label from './assets/default_music_icon.png'
import letter from './assets/letter.png'
import e5_empty_icon from './assets/e5empty_icon.png'
import e5_empty_icon3 from './assets/e5empty_icon3.png'
import EndImg from './assets/end_token_icon.png';
import SpendImg from './assets/spend_token_icon.png';
import json_icon from './assets/json_file.png'
import csv_icon from './assets/csv_file.png'
import lyric_icon from './assets/lrc_file.png'
import subtitle_icon from './assets/subtitle_file.png'
import pdf_icon from './assets/pdf_image.png'

import alert_icon from './assets/alert_icon.png'
import add_icon from './assets/add_icon.png'
import background from './assets/background.png'
import JobIcon from './assets/job_icon_light.png'
import ExploreIcon from './assets/explore_icon_light.png'
import WalletIcon from './assets/wallet_icon_light.png'
import StackIcon from './assets/stack_icon_light.png'
import close from './assets/close_icon.png'
import add_text from './assets/add_text_input_item.png'
import play from './assets/play_icon.png'
import pause from './assets/pause_icon.png'
import previous from './assets/previous_icon.png'
import next from './assets/next_icon.png'
import shuffle_icon from './assets/shuffle_icon.png'
import repeat from './assets/repeat_icon.png'
import alert_icon_dark from './assets/alert_icon_dark.png'
import add_icon_dark from './assets/add_icon_dark.png'
import JobIconDark from './assets/job_icon.png'
import ExploreIconDark from './assets/explore_icon.png'
import WalletIconDark from './assets/wallet_icon.png'
import StackIconDark from './assets/stack_icon.png'
import close_dark from './assets/close_icon_dark.png'
import add_text_dark from './assets/add_text_dark.png'
import play_dark from './assets/play_icon_dark.png'
import pause_dark from './assets/pause_icon_dark.png'
import previous_dark from './assets/previous_icon_dark.png'
import next_dark from './assets/next_icon_dark.png'
import shuffle_dark from './assets/shuffle_icon_dark.png'
import repeat_dark from './assets/repeat_icon_dark.png'
import zip_file from './assets/zip_file.png'
import alert_icon_green from './assets/alert_icon_green.png'
import add_icon_green from './assets/add_icon_green.png'
import background_green from './assets/background_green.png'
import job_icon_green from './assets/job_icon_green.png'
import explore_icon_green from './assets/explore_icon_green.png'
import wallet_icon_green from './assets/wallet_icon_green.png'
import stack_icon_green from './assets/stack_icon_green.png'
import close_icon_green from './assets/close_icon_green.png'
import add_text_icon_green from './assets/add_text_green.png'
import play_icon_green from './assets/play_icon_green.png'
import pause_icon_green from './assets/pause_icon_green.png'
import previous_icon_green from './assets/previous_icon_green.png'
import next_icon_green from './assets/next_icon_green.png'
import shuffle_icon_green from './assets/shuffle_icon_green.png'
import repeat_icon_green from './assets/repeat_icon_green.png'
import letter_green from './assets/letter_green.png'
import alert_icon_red from './assets/alert_icon_red.png'
import add_icon_red from './assets/add_icon_red.png'
import background_red from './assets/background_red.png'
import job_icon_red from './assets/job_icon_red.png'
import explore_icon_red from './assets/explore_icon_red.png'
import wallet_icon_red from './assets/wallet_icon_red.png'
import stack_icon_red from './assets/stack_icon_red.png'
import close_icon_red from './assets/close_icon_red.png'
import add_text_icon_red from './assets/add_text_red.png'
import play_icon_red from './assets/play_icon_red.png'
import pause_icon_red from './assets/pause_icon_red.png'
import previous_icon_red from './assets/previous_icon_red.png'
import next_icon_red from './assets/next_icon_red.png'
import shuffle_icon_red from './assets/shuffle_icon_red.png'
import repeat_icon_red from './assets/repeat_icon_red.png'
import letter_red from './assets/letter_red.png'
import alert_icon_blue from './assets/alert_icon_blue.png'
import add_icon_blue from './assets/add_icon_blue.png'
import background_blue from './assets/background_blue.png'
import job_icon_blue from './assets/job_icon_blue.png'
import explore_icon_blue from './assets/explore_icon_blue.png'
import wallet_icon_blue from './assets/wallet_icon_blue.png'
import stack_icon_blue from './assets/stack_icon_blue.png'
import close_icon_blue from './assets/close_icon_blue.png'
import add_text_icon_blue from './assets/add_text_blue.png'
import play_icon_blue from './assets/play_icon_blue.png'
import pause_icon_blue from './assets/pause_icon_blue.png'
import previous_icon_blue from './assets/previous_icon_blue.png'
import next_icon_blue from './assets/next_icon_blue.png'
import shuffle_icon_blue from './assets/shuffle_icon_blue.png'
import repeat_icon_blue from './assets/repeat_icon_blue.png'
import letter_blue from './assets/letter_blue.png'
import alert_icon_yellow from './assets/alert_icon_yellow.png'
import add_icon_yellow from './assets/add_icon_yellow.png'
import background_yellow from './assets/background_yellow.png'
import job_icon_yellow from './assets/job_icon_yellow.png'
import explore_icon_yellow from './assets/explore_icon_yellow.png'
import wallet_icon_yellow from './assets/wallet_icon_yellow.png'
import stack_icon_yellow from './assets/stack_icon_yellow.png'
import close_icon_yellow from './assets/close_icon_yellow.png'
import add_text_icon_yellow from './assets/add_text_yellow.png'
import play_icon_yellow from './assets/play_icon_yellow.png'
import pause_icon_yellow from './assets/pause_icon_yellow.png'
import previous_icon_yellow from './assets/previous_icon_yellow.png'
import next_icon_yellow from './assets/next_icon_yellow.png'
import shuffle_icon_yellow from './assets/shuffle_icon_yellow.png'
import repeat_icon_yellow from './assets/repeat_icon_yellow.png'
import letter_yellow from './assets/letter_yellow.png'
import alert_icon_pink from './assets/alert_icon_pink.png'
import add_icon_pink from './assets/add_icon_pink.png'
import background_pink from './assets/background_pink.png'
import job_icon_pink from './assets/job_icon_pink.png'
import explore_icon_pink from './assets/explore_icon_pink.png'
import wallet_icon_pink from './assets/wallet_icon_pink.png'
import stack_icon_pink from './assets/stack_icon_pink.png'
import close_icon_pink from './assets/close_icon_pink.png'
import add_text_icon_pink from './assets/add_text_pink.png'
import play_icon_pink from './assets/play_icon_pink.png'
import pause_icon_pink from './assets/pause_icon_pink.png'
import previous_icon_pink from './assets/previous_icon_pink.png'
import next_icon_pink from './assets/next_icon_pink.png'
import shuffle_icon_pink from './assets/shuffle_icon_pink.png'
import repeat_icon_pink from './assets/repeat_icon_pink.png'
import letter_pink from './assets/letter_pink.png'
import alert_icon_orange from './assets/alert_icon_orange.png'
import add_icon_orange from './assets/add_icon_orange.png'
import background_orange from './assets/background_orange.png'
import job_icon_orange from './assets/job_icon_orange.png'
import explore_icon_orange from './assets/explore_icon_orange.png'
import wallet_icon_orange from './assets/wallet_icon_orange.png'
import stack_icon_orange from './assets/stack_icon_orange.png'
import close_icon_orange from './assets/close_icon_orange.png'
import add_text_icon_orange from './assets/add_text_orange.png'
import play_icon_orange from './assets/play_icon_orange.png'
import pause_icon_orange from './assets/pause_icon_orange.png'
import previous_icon_orange from './assets/previous_icon_orange.png'
import next_icon_orange from './assets/next_icon_orange.png'
import shuffle_icon_orange from './assets/shuffle_icon_orange.png'
import repeat_icon_orange from './assets/repeat_icon_orange.png'
import letter_orange from './assets/letter_orange.png'

import alert_icon_darkyellow from './assets/alert_icon_darkyellow.png'
import add_icon_darkyellow from './assets/add_icon_darkyellow.png'
import background_darkyellow from './assets/background_darkyellow.png'
import job_icon_darkyellow from './assets/job_icon_darkyellow.png'
import explore_icon_darkyellow from './assets/explore_icon_darkyellow.png'
import wallet_icon_darkyellow from './assets/wallet_icon_darkyellow.png'
import stack_icon_darkyellow from './assets/stack_icon_darkyellow.png'
import close_icon_darkyellow from './assets/close_icon_darkyellow.png'
import add_text_icon_darkyellow from './assets/add_text_darkyellow.png'
import play_icon_darkyellow from './assets/play_icon_darkyellow.png'
import pause_icon_darkyellow from './assets/pause_icon_darkyellow.png'
import previous_icon_darkyellow from './assets/previous_icon_darkyellow.png'
import next_icon_darkyellow from './assets/next_icon_darkyellow.png'
import shuffle_icon_darkyellow from './assets/shuffle_icon_darkyellow.png'
import repeat_icon_darkyellow from './assets/repeat_icon_darkyellow.png'
import letter_darkyellow from './assets/letter_darkyellow.png'

import alert_icon_darkgreen from './assets/alert_icon_darkgreen.png'
import add_icon_darkgreen from './assets/add_icon_darkgreen.png'
import background_darkgreen from './assets/background_green.png'
import job_icon_darkgreen from './assets/job_icon_darkgreen.png'
import explore_icon_darkgreen from './assets/explore_icon_darkgreen.png'
import wallet_icon_darkgreen from './assets/wallet_icon_darkgreen.png'
import stack_icon_darkgreen from './assets/stack_icon_darkgreen.png'
import close_icon_darkgreen from './assets/close_icon_darkgreen.png'
import add_text_icon_darkgreen from './assets/add_text_darkgreen.png'
import play_icon_darkgreen from './assets/play_icon_darkgreen.png'
import pause_icon_darkgreen from './assets/pause_icon_darkgreen.png'
import previous_icon_darkgreen from './assets/previous_icon_darkgreen.png'
import next_icon_darkgreen from './assets/next_icon_darkgreen.png'
import shuffle_icon_darkgreen from './assets/shuffle_icon_darkgreen.png'
import repeat_icon_darkgreen from './assets/repeat_icon_darkgreen.png'
import letter_darkgreen from './assets/letter_darkgreen.png'

import alert_icon_darkred from './assets/alert_icon_darkred.png'
import add_icon_darkred from './assets/add_icon_darkred.png'
import background_darkred from './assets/background_red.png'
import job_icon_darkred from './assets/job_icon_darkred.png'
import explore_icon_darkred from './assets/explore_icon_darkred.png'
import wallet_icon_darkred from './assets/wallet_icon_darkred.png'
import stack_icon_darkred from './assets/stack_icon_darkred.png'
import close_icon_darkred from './assets/close_icon_darkred.png'
import add_text_icon_darkred from './assets/add_text_darkred.png'
import play_icon_darkred from './assets/play_icon_darkred.png'
import pause_icon_darkred from './assets/pause_icon_darkred.png'
import previous_icon_darkred from './assets/previous_icon_darkred.png'
import next_icon_darkred from './assets/next_icon_darkred.png'
import shuffle_icon_darkred from './assets/shuffle_icon_darkred.png'
import repeat_icon_darkred from './assets/repeat_icon_darkred.png'
import letter_darkred from './assets/letter_darkred.png'

import alert_icon_darkblue from './assets/alert_icon_darkblue.png'
import add_icon_darkblue from './assets/add_icon_darkblue.png'
import background_darkblue from './assets/background_blue.png'
import job_icon_darkblue from './assets/job_icon_darkblue.png'
import explore_icon_darkblue from './assets/explore_icon_darkblue.png'
import wallet_icon_darkblue from './assets/wallet_icon_darkblue.png'
import stack_icon_darkblue from './assets/stack_icon_darkblue.png'
import close_icon_darkblue from './assets/close_icon_darkblue.png'
import add_text_icon_darkblue from './assets/add_text_darkblue.png'
import play_icon_darkblue from './assets/play_icon_darkblue.png'
import pause_icon_darkblue from './assets/pause_icon_darkblue.png'
import previous_icon_darkblue from './assets/previous_icon_darkblue.png'
import next_icon_darkblue from './assets/next_icon_darkblue.png'
import shuffle_icon_darkblue from './assets/shuffle_icon_darkblue.png'
import repeat_icon_darkblue from './assets/repeat_icon_darkblue.png'
import letter_darkblue from './assets/letter_darkblue.png'

import alert_icon_darkpink from './assets/alert_icon_darkpink.png'
import add_icon_darkpink from './assets/add_icon_darkpink.png'
import background_darkpink from './assets/background_pink.png'
import job_icon_darkpink from './assets/job_icon_darkpink.png'
import explore_icon_darkpink from './assets/explore_icon_darkpink.png'
import wallet_icon_darkpink from './assets/wallet_icon_darkpink.png'
import stack_icon_darkpink from './assets/stack_icon_darkpink.png'
import close_icon_darkpink from './assets/close_icon_darkpink.png'
import add_text_icon_darkpink from './assets/add_text_darkpink.png'
import play_icon_darkpink from './assets/play_icon_darkpink.png'
import pause_icon_darkpink from './assets/pause_icon_darkpink.png'
import previous_icon_darkpink from './assets/previous_icon_darkpink.png'
import next_icon_darkpink from './assets/next_icon_darkpink.png'
import shuffle_icon_darkpink from './assets/shuffle_icon_darkpink.png'
import repeat_icon_darkpink from './assets/repeat_icon_darkpink.png'
import letter_darkpink from './assets/letter_darkpink.png'

import alert_icon_darkorange from './assets/alert_icon_darkorange.png'
import add_icon_darkorange from './assets/add_icon_darkorange.png'
import background_darkorange from './assets/background_orange.png'
import job_icon_darkorange from './assets/job_icon_darkorange.png'
import explore_icon_darkorange from './assets/explore_icon_darkorange.png'
import wallet_icon_darkorange from './assets/wallet_icon_darkorange.png'
import stack_icon_darkorange from './assets/stack_icon_darkorange.png'
import close_icon_darkorange from './assets/close_icon_darkorange.png'
import add_text_icon_darkorange from './assets/add_text_darkorange.png'
import play_icon_darkorange from './assets/play_icon_darkorange.png'
import pause_icon_darkorange from './assets/pause_icon_darkorange.png'
import previous_icon_darkorange from './assets/previous_icon_darkorange.png'
import next_icon_darkorange from './assets/next_icon_darkorange.png'
import shuffle_icon_darkorange from './assets/shuffle_icon_darkorange.png'
import repeat_icon_darkorange from './assets/repeat_icon_darkorange.png'
import letter_darkorange from './assets/letter_darkorange.png'

import e5_logo_light from './assets/e5_logo_light.png'
import e5_logo_dark from './assets/e5_logo_dark.png'
import e5_logo_green from './assets/e5_logo_green.png'
import e5_logo_darkgreen from './assets/e5_logo_darkgreen.png'
import e5_logo_red from './assets/e5_logo_red.png'
import e5_logo_darkred from './assets/e5_logo_darkred.png'
import e5_logo_blue from './assets/e5_logo_blue.png'
import e5_logo_darkblue from './assets/e5_logo_darkblue.png'
import e5_logo_yellow from './assets/e5_logo_yellow.png'
import e5_logo_darkyellow from './assets/e5_logo_darkyellow.png'
import e5_logo_pink from './assets/e5_logo_pink.png'
import e5_logo_darkpink from './assets/e5_logo_darkpurple.png'
import e5_logo_orange from './assets/e5_logo_orange.png'
import e5_logo_darkorange from './assets/e5_logo_darkorange.png'

import darkblue1 from './assets/darkblue1.jpg'
import darkblue2 from './assets/darkblue2.jpg'
import darkblue3 from './assets/darkblue3.jpg'
import darkblue4 from './assets/darkblue4.jpg'
import darkblue5 from './assets/darkblue5.jpg'
import darkgreen1 from './assets/darkgreen1.jpg'
import darkgreen2 from './assets/darkgreen2.jpg'
import darkgreen3 from './assets/darkgreen3.jpg'
import darkgreen4 from './assets/darkgreen4.jpg'
import darkgreen5 from './assets/darkgreen5.jpg'
import darkorange1 from './assets/darkorange1.jpg'
import darkorange2 from './assets/darkorange2.jpg'
import darkorange3 from './assets/darkorange3.jpg'
import darkorange4 from './assets/darkorange4.jpg'
import darkorange5 from './assets/darkorange5.jpg'
import darkpink1 from './assets/darkpink1.jpg'
import darkpink2 from './assets/darkpink2.jpg'
import darkpink3 from './assets/darkpink3.jpg'
import darkpink4 from './assets/darkpink4.jpg'
import darkpink5 from './assets/darkpink5.jpg'
import darkred1 from './assets/darkred1.jpg'
import darkred2 from './assets/darkred2.jpg'
import darkred3 from './assets/darkred3.jpg'
import darkred4 from './assets/darkred4.jpg'
import darkred5 from './assets/darkred5.jpg'
import darkyellow1 from './assets/darkyellow1.jpg'
import darkyellow2 from './assets/darkyellow2.jpg'
import darkyellow3 from './assets/darkyellow3.jpg'
import darkyellow4 from './assets/darkyellow4.jpg'
import darkyellow5 from './assets/darkyellow5.jpg'
import lightblue1 from './assets/lightblue1.jpg'
import lightblue2 from './assets/lightblue2.jpg'
import lightblue3 from './assets/lightblue3.jpg'
import lightblue4 from './assets/lightblue4.jpg'
import lightblue5 from './assets/lightblue5.jpg'
import lightgreen1 from './assets/lightgreen1.jpg'
import lightgreen2 from './assets/lightgreen2.jpg'
import lightgreen3 from './assets/lightgreen3.jpg'
import lightgreen4 from './assets/lightgreen4.jpg'
import lightgreen5 from './assets/lightgreen5.jpg'
import lightorange1 from './assets/lightorange1.jpg'
import lightorange2 from './assets/lightorange2.jpg'
import lightorange3 from './assets/lightorange3.jpg'
import lightorange4 from './assets/lightorange4.jpg'
import lightorange5 from './assets/lightorange5.jpg'
import lightpink1 from './assets/lightpink1.jpg'
import lightpink2 from './assets/lightpink2.jpg'
import lightpink3 from './assets/lightpink3.jpg'
import lightpink4 from './assets/lightpink4.jpg'
import lightpink5 from './assets/lightpink5.jpg'
import lightred1 from './assets/lightred1.jpg'
import lightred2 from './assets/lightred2.jpg'
import lightred3 from './assets/lightred3.jpg'
import lightred4 from './assets/lightred4.jpg'
import lightred5 from './assets/lightred5.jpg'
import lightyellow1 from './assets/lightyellow1.jpg'
import lightyellow2 from './assets/lightyellow2.jpg'
import lightyellow3 from './assets/lightyellow3.jpg'
import lightyellow4 from './assets/lightyellow4.jpg'
import lightyellow5 from './assets/lightyellow5.jpg'
// import  from './assets/'
// import  from './assets/'
// import  from './assets/'
// import  from './assets/'

import ethereum_classic_logo from './assets/ethereum_testnet.png'
import harmony_logo from './assets/harmony.png'
import celo_logo from './assets/celo.png'
import flare_logo from './assets/flare.png'
import xdai_logo from './assets/xdai.png'
import fuse_logo from './assets/fuse.png'
import xdc_logo from './assets/xdc.png'
import polygon_logo from './assets/matic.png'
import binance_logo from './assets/bnb.png'
import energi_logo from './assets/nrg.png'
import thundercore_logo from './assets/tt.png'
import viction_logo from './assets/viction.png'
import evmos_logo from './assets/evmos.png'
import ethereum_logo from './assets/ethereum.png'
import optimism_logo from './assets/optimism.png'
import base_logo from './assets/base.png'
import arbitrum_logo from './assets/arbitrum.png'
import astar_logo from './assets/astar.png'
import cronos_logo from './assets/cronos.png'
import kava_logo from './assets/kava.png'
import neon_logo from './assets/neon.png'
import milkomeda_logo from './assets/milkomeda.png'
import fantom_logo from './assets/fantom.png'
import brise_logo from './assets/brise.png'
import syscoin_logo from './assets/syscoin.png'
import avalanche_logo from './assets/avalanche.png'
import findora_logo from './assets/findora.png'
import iexec_logo from './assets/iexec.png'
import oasis_logo from './assets/oasis.png'
import ozone_logo from './assets/ozone.png'
import pixie_logo from './assets/pixie.png'
import rei_logo from './assets/rei.png'
import klaytn_logo from './assets/klaytn.png'
import mantle from './assets/mantle.png'
import pulsechain_logo from './assets/pulse.png'
import canto_logo from './assets/canto.png'
import eosnetwork_logo from './assets/eos.png'
import iotex_logo from './assets/iotex.png'
import songbird_logo from './assets/songbird.png'
import ultron_logo from './assets/ultron.png'
import coinex_logo from './assets/coinex.png'
import tfuel_logo from './assets/tfuel.png'
import step_logo from './assets/step.png'
import energyweb_logo from './assets/energyweb.png'
import callisto_logo from './assets/callisto.png'
import shiden_logo from './assets/shiden.png'
import tenet_logo from './assets/tenet.png'
import ubiq_logo from './assets/ubiq.png'
import gochain_logo from './assets/gochain.png'
import omax_logo from './assets/omax.png'
import wemix_logo from './assets/wemix.png'
import conflux_logo from './assets/conflux.png'
import telos_logo from './assets/telos.png'
import rsk_logo from './assets/rsk.png'
import metadium_logo from './assets/metadium.png'
import kardiachain_logo from './assets/kardiachain.png'
import caduceus_logo from './assets/cmp.png'
import seele_logo from './assets/seele.png'
import bittorrentchain_logo from './assets/btt.png'
import doublea_logo from './assets/doublea.png'
import karura_logo from './assets/karura.png'
import acala_logo from './assets/acala.png'
import edgeware_logo from './assets/edgeware.png'
import bloxberg_logo from './assets/bloxberg.png'
import phoenix_logo from './assets/phoenix.png'
import omchain_logo from './assets/omchain.png'
import om_logo from './assets/om.png'
import mintme_logo from './assets/mintme.png'
import ecredits_logo from './assets/ecredits.png'
import eluv_logo from './assets/eluv.png'
import etho_logo from './assets/etho.png'
import oneledger_logo from './assets/oneledger.png'
import sei_logo from './assets/sei.png'
import hyperliquid_logo from './assets/hyperliquid.png'
import xrpl_logo from './assets/xrpl.png'
import abstract_logo from './assets/abstract.png'
import apechain_logo from './assets/apechain.png'
import bitlayer_logo from './assets/bitlayer.png'
import blast_logo from './assets/blast.png'
import bob_logo from './assets/bob.png'
import botanix_logo from './assets/botanix.png'
import bsquared_logo from './assets/bsquared.png'
import core_logo from './assets/core.png'
import corn_logo from './assets/corn.png'
import etherlink_logo from './assets/etherlink.png'
import fraxtal_logo from './assets/fraxtal.png'
import hashkey_logo from './assets/hashkey.png'
import hemi_logo from './assets/hemi.png'
import ink_logo from './assets/ink.png'
import lens_logo from './assets/lens.png'
import linea_logo from './assets/linea.png'
import lisk_logo from './assets/lisk.png'
import merlin_logo from './assets/merlin.png'
import metal_logo from './assets/metal.png'
import metis_logo from './assets/metis.png'
import mind_logo from './assets/mind.png'
import mint_logo from './assets/mint.png'
import mode_logo from './assets/mode.png'
import neox_logo from './assets/neox.png'
import opbnb_logo from './assets/opbnb.png'
import plume_logo from './assets/plume.png'
import katana_logo from './assets/katana.png'
import peth_logo from './assets/peth.png'
import ronin_logo from './assets/ronin.png'
import scroll_logo from './assets/scroll.png'
import shibarium_logo from './assets/shibarium.png'
import soneium_logo from './assets/soneium.png'
import superseed_logo from './assets/superseed.png'
import taiko_logo from './assets/taiko.png'
import treasure_logo from './assets/treasure.png'
import unichain_logo from './assets/unichain.png'
import world_logo from './assets/world.png'
import okb_logo from './assets/okb.png'
import okt_logo from './assets/okt.png'
import zircuit_logo from './assets/zircuit.png'
import zksync_logo from './assets/zksync.png'
import cronoszkevm_logo from './assets/cronoszkevm.png'
import zero_logo from './assets/zero.png'
import sophon_logo from './assets/sophon.png'
import berachain_logo from './assets/berachain.png'
import hedera_logo from './assets/hedera.png'
import iotaevm_logo from './assets/iotaevm.png'
import moonbeam_logo from './assets/moonbeam.png'
import moonriver_logo from './assets/moonriver.png'
import sonic_logo from './assets/sonic.png'
import kaia_logo from './assets/kaia.png'
import manta_logo from './assets/manta.png'

import celestia_logo from './assets/celestia.png'
import algorand_logo from './assets/algorand.png'
import aptos_logo from './assets/aptos.png'
import arweave_logo from './assets/arweave.png'
import bitcoincash_logo from './assets/bitcoin_cash.png'
import bitcoin_logo from './assets/bitcoin.png'
import cardano_logo from './assets/cardano.png'
import cosmos_logo from './assets/cosmos.png'
import dash_logo from './assets/dash.png'
import dogecoin_logo from './assets/dogecoin.png'
import kusama_logo from './assets/kusama.png'
import litecoin_logo from './assets/litecoin.png'
import polkadot_logo from './assets/polkadot.png'
import solana_logo from './assets/solana.png'
import stacks_logo from './assets/stacks.png'
import stellar_logo from './assets/stellar.png'
import sui_logo from './assets/sui.png'
import tezos_logo from './assets/tezos.png'
import tron_logo from './assets/tron.png'
import xrp_logo from './assets/xrp.png'
import filecoin_logo from './assets/filecoin.png'
import solana2_logo from './assets/solana2.png'
import algorand2_logo from './assets/algorand2.png'

import end25_image from './assets/E25.png'
import spend25_image from './assets/325.png'
import E5_E25_image from './assets/End25.png'
import end35_image from './assets/e35_end_token.png'
import spend35_image from './assets/e35_spend_token.png'
import E5_E35_image from './assets/end35.png'


/* blockchain stuff */
import { mnemonicToSeedSync, mnemonicToSeed, entropyToMnemonic } from 'bip39';
import { Buffer } from 'buffer';
import { bech32 } from "bech32";
import * as bitcoin from 'bitcoinjs-lib';
import * as StellarSdk from "@stellar/stellar-sdk";
import { TronWeb } from 'tronweb';
import { Keyring, ApiPromise, WsProvider } from '@polkadot/api'; 
import { waitReady, } from '@polkadot/wasm-crypto';
import { encodeAddress, decodeAddress } from '@polkadot/util-crypto';
import algosdk from 'algosdk';
import { TezosToolkit } from "@taquito/taquito";
import { InMemorySigner } from '@taquito/signer';
import { b58cencode, prefix, validateAddress, ValidationResult } from '@taquito/utils';
import * as sodium from 'libsodium-wrappers';
import { DirectSecp256k1Wallet } from '@cosmjs/proto-signing';
import { Secp256k1 } from '@cosmjs/crypto';
import { sha256 } from '@cosmjs/crypto';
import { SigningStargateClient, StargateClient } from "@cosmjs/stargate"
import bchaddr from 'bchaddrjs';
import { isValidClassicAddress } from 'ripple-address-codec';
import { Keypair, Connection, PublicKey, Transaction, SystemProgram, sendAndConfirmTransaction } from '@solana/web3.js';
import { derivePath } from 'ed25519-hd-key';
import { AptosAccount, AptosClient } from 'aptos';
import { create as createW3UpClient } from '@web3-storage/w3up-client';
import { from } from "@iotexproject/iotex-address-ts";
import { STACKS_MAINNET } from '@stacks/network'
import { makeSTXTokenTransfer, broadcastTransaction, getAddressFromPrivateKey, validateStacksAddress } from '@stacks/transactions';
import Arweave from 'arweave';
import { getKeyFromMnemonic } from 'arweave-mnemonic-keys';
import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';
import { getFullnodeUrl, SuiClient } from '@mysten/sui/client';
import { Transaction as SuiTransaction } from '@mysten/sui/transactions';

/* shared component stuff */
import SwipeableBottomSheet from './externals/SwipeableBottomSheet'; 
import { ToastContainer, toast, Slide } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";
import { Sheet } from 'react-modal-sheet';
import countryFlagEmoji from "country-flag-emoji";
import * as countryCodes from "country-codes-list";
import './main.css';

/* pages stuff */
import Syncronizing_page from './pages/synchronizing_page';
import Home_page from './pages/home_page';
import SendReceiveEtherPage from './pages/send_receive_ether_page'
import StackPage from './pages/stack_page'
import WikiPage from './pages/wiki_page'

import NewJobPage from './pages/create_action_pages/new_job_page'
import NewTokenPage from './pages/create_action_pages/new_token_page'
import NewSubscriptionPage from './pages/create_action_pages/new_subscription_page'
import NewContractPage from './pages/create_action_pages/new_contract_page'
import NewPostPage from './pages/create_action_pages/new_post_page'
import NewChannelPage from './pages/create_action_pages/new_channel_page'
import NewStorefrontItemPage from './pages/create_action_pages/new_storefront_item_page';
import NewProposalPage from './pages/create_action_pages/new_proposal_page';
import NewMailPage from './pages/create_action_pages/new_mail_page';
import NewContractorPage from './pages/create_action_pages/new_contractor_page';
import NewAudioPage from './pages/create_action_pages/new_audio_page'
import NewVideoPage from './pages/create_action_pages/new_video_page';
import NewNitroPage from './pages/create_action_pages/new_nitro_page'
import NewPollPage from './pages/create_action_pages/new_poll_page'

import EditJobPage from './pages/edit_action_pages/edit_job_page'
import EditTokenPage from './pages/edit_action_pages/edit_token_page'
import EditPostPage from './pages/edit_action_pages/edit_post_page'
import EditChannelPage from './pages/edit_action_pages/edit_channel_page'
import EditStorefrontItemPage from './pages/edit_action_pages/edit_storefront_item_page';
import EditContractorPage from './pages/edit_action_pages/edit_contractor_page';
import EditProposalPage from './pages/edit_action_pages/edit_proposal_page';
import EditAudioPage from './pages/edit_action_pages/edit_audiopost_page';
import EditVideoPage from './pages/edit_action_pages/edit_videopost_page';
import EditNitroPage from './pages/edit_action_pages/edit_nitropost_page';
import EditPollPage from './pages/edit_action_pages/edit_poll_page';

import EnterContractPage from './pages/contract_action_pages/enter_contract_page';
import ExtendContractPage from './pages/contract_action_pages/extend_contract_page';
import ExitContractPage from './pages/contract_action_pages/exit_contract_page';
import ModifyContractPage from './pages/contract_action_pages/modify_contract_page';
import ForceExitPage from './pages/contract_action_pages/force_exit_account_page';

import NewMintActionPage from './pages/token_action_pages/mint_dump_token_page';
import NewTransferActionPage from './pages/token_action_pages/transfer_token_page';
import ModifyTokenPage from './pages/token_action_pages/modify_token_page';
import ExchangeTransferPage from './pages/token_action_pages/exchanage_transfer_page';
import FreezeUnfreezePage from './pages/token_action_pages/freeze_unfreeze_page';
import AuthMintPage from './pages/token_action_pages/authmint_page';
import DepthMintPage from './pages/token_action_pages/depthmint_page';
import StageRoyaltiesPage from './pages/token_action_pages/stage_royalties_page';
import ViewStagedRoyaltyPage from './pages/token_action_pages/view_staged_royalty_page';

import VoteProposalPage from './pages/proposal_action_pages/vote_proposal_page';
import SubmitProposalPage from './pages/proposal_action_pages/submit_proposal_page';
import ArchiveProposalPage from './pages/proposal_action_pages/archive_proposals_page';

import PaySubscriptionPage from './pages/subscription_action_pages/pay_subscription_page';
import CancelSubscriptionPage from './pages/subscription_action_pages/cancel_subscription_page';
import CollectSubscriptionPage from './pages/subscription_action_pages/collect_subscription_page';
import ModifySubscriptionPage from './pages/subscription_action_pages/modify_subscription_page';
import PayUpcomingSubscriptions from './pages/subscription_action_pages/pay_upcoming_subscriptions_page'

import ModeratorPage from './pages/moderator_page';
import RespondToJobPage from './pages/respond_to_job_page';
import ViewApplicationContractPage from './pages/view_application_contract_page';
import ViewTransactionPage from './pages/view_transaction_page'
import ViewTransactionLogPage from './pages/view_transaction_log'
import AddToBagPage from './pages/add_to_bag_page'
import FulfilBagPage from './pages/fulfil_bag_page'
import ViewBagApplicationContractPage from './pages/view_bag_application_contract_page'
import DirectPurchasetPage from './pages/direct_purchase_page'
import ClearPurchasePage from './pages/clear_purchase_page'
import ScanQrPage from './pages/scan_qr_page'
import SendJobRequestPage from './pages/send_job_request'
import ViewJobRequestPage from './pages/view_job_request'
import ViewJobRequestContractPage from './pages/view_job_request_contract_page'
import WithdrawEtherPage from './pages/withdraw_ether_page'
import GiveAwardPage from './pages/give_award_page'
import AddCommentPage from './pages/add_comment_page'
import SearchedAccountPage from './pages/view_searched_account'
import RPCSettingsPage from './pages/rpc_settings_page'
import ConfirmRunPage from './pages/confirm_run_page'
import SuccessfulSend from './pages/successful_send'
import ViewNumber from './pages/view_number'
import DialogPage from './pages/dialog_page'
import SendReceiveCoinPage from './pages/send_receive_coin_page'
import PickFilePage from './pages/pick_file_page'
import BuyAlbumPage from './pages/buy_album_page'
import AudioPip from './pages/audio_pip'
import FullAudioPage from './pages/full_audio_page'
import AddToPlaylist from './pages/add_to_playlist'
import BuyVideoPage from './pages/buy_video_page'
import FullVideoPage from './pages/full_video_page'
import BuyNitroPage from './pages/buy_nitro_storage'
import ConfigureNitroNodePage from './pages/configure_nitro_node'
import DialerPage from './pages/dialer_page'
import ViewNotificationLogPage from './pages/view_notification_log_page'
import ContextualTransferPage from './pages/contextual_transfer_page'
import VotePollPage from './pages/vote_poll_page'
import CalculatePollResultPage from './pages/calculate_poll_result'
import StageCreatorPayoutPage from './pages/stage_creator_payout_page'
import BidInAuctionPage from './pages/bid_in_auction_page'

import english from "./texts/english";

import { HttpJsonRpcConnector, MnemonicWalletProvider} from 'filecoin.js';
import { LotusClient } from 'filecoin.js'
import { create } from 'ipfs-http-client'
import { NFTStorage, Blob } from 'nft.storage'

import Draggable from "react-draggable";
import classes2 from "./PIP.module.css";

import Dexie from 'dexie';
import { locale } from 'dayjs';

import { Worker, Viewer } from '@react-pdf-viewer/core';
import '@react-pdf-viewer/core/lib/styles/index.css';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
import { zoomPlugin } from '@react-pdf-viewer/zoom';
import '@react-pdf-viewer/zoom/lib/styles/index.css';

import io from 'socket.io-client';
// import { Lucid, Blockfrost, addressFromHexOrBech32 } from "@lucid-evolution/lucid";

const { toBech32, fromBech32,} = require('@harmony-js/crypto');
const { countries, zones } = require("moment-timezone/data/meta/latest.json");
const Web3 = require('web3');
const { ethers } = require("ethers");
const ecies = require('ecies-geth');
var textEncoding = require('text-encoding'); 
var CryptoJS = require("crypto-js"); 
const xrpl = require("xrpl")
const BITBOXSDK = require('bitbox-sdk').BITBOX;
const pako = require('pako');

const BITBOX = new BITBOXSDK();
const arweave = Arweave.init();

pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
var bigInt = require("big-integer");
var primary_following = []
const root_e5 = 'E25'
const root_account = 1002
const default_nitro_option = '1479E25'



function makeid(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
      counter += 1;
    }
    return result;
}

function bgN(number, power) {
  return bigInt((number+"e"+power)).toString();
}

String.prototype.hexEncode = function(){
    var hex, i;

    var result = "";
    for (i=0; i<this.length; i++) {
        hex = this.charCodeAt(i).toString(16);
        result += ("000"+hex).slice(-4);
    }

    return result
}

function random(min, max) { // min and max included 
  return Math.floor(Math.random() * (max - min + 1) + min)
}

function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

function getOS() {
  // return 'iOS'
  if(iOS()) return 'iOS'
  const userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ['macOS', 'Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
      windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
      iosPlatforms = ['iPhone', 'iPad', 'iPod'];
  let os = null;

  if (macosPlatforms.indexOf(platform) !== -1) {
    os = 'macOS';
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    os = 'iOS';
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    os = 'Windows';
  } else if (/Android/.test(userAgent)) {
    os = 'Android';
  } else if (/Linux/.test(platform)) {
    os = 'Linux';
  }

  return os;
}

function iOS() {
  return [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ].includes(navigator.platform)
  // iPad on iOS 13 detection
  || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
}

function shuffle(array) {
  let currentIndex = array.length;

  // While there remain elements to shuffle...
  while (currentIndex != 0) {

    // Pick a remaining element...
    let randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]];
  }
}

function isJsonObject(data) {
  return typeof data === "object" && data !== null && !Array.isArray(data);
}

function base64ToUint8Array(base64) {
  const binary = atob(base64);
  const len = binary.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binary.charCodeAt(i);
  }
  return bytes;
}

// Helper: Convert Uint8Array to Base64 string
function uint8ArrayToBase64(bytes) {
  let binary = '';
  for (let i = 0; i < bytes.length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}

const PDFViewerWrapper  = forwardRef(({ fileUrl, theme /* , record_page, current_page */ }, ref) => {
  const zoomPluginInstance = zoomPlugin();  
  const zoomLevels = [0.5, 1.0, 1.5, 2.0, 3.0];
  const [currentZoom, setCurrentZoom] = useState(0.5);


  const zoomIn = () => {
    console.log('zooming in')
    const newZoom = Math.min(currentZoom + 0.5, 3.0);
    zoomPluginInstance.zoomTo(newZoom);
    setCurrentZoom(newZoom);
  }

  const zoomOut = () => {
    console.log('zooming out')
    const newZoom = Math.max(currentZoom - 0.5, 0.5);
    zoomPluginInstance.zoomTo(newZoom);
    setCurrentZoom(newZoom);
  }

  const set_default_zoom = () => {
    const newZoom = 1.0
    zoomPluginInstance.zoomTo(newZoom);
    setCurrentZoom(newZoom);
  }



  useImperativeHandle(ref, () => ({
    zoomIn,
    zoomOut,
    set_default_zoom,
  }));

  return (
      <div>
        <Viewer fileUrl={fileUrl} plugins={[zoomPluginInstance]} theme={{theme: theme,}} />
      </div>
  );
});

class App extends Component {

  // render(){
  //   return(
  //     <div>
  //       {makeid(3)}
  //     </div>
  //   )
  // }

  state = {
    version:'3.0', os: getOS(),
    syncronizing_page_bottomsheet:true,/* set to true if the syncronizing page bottomsheet is visible */
    should_keep_synchronizing_bottomsheet_open: false,/* set to true if the syncronizing page bottomsheet is supposed to remain visible */
    send_receive_bottomsheet: false, stack_bottomsheet: false, wiki_bottomsheet: false, new_object_bottomsheet: false, view_image_bottomsheet:false, new_store_item_bottomsheet:false, mint_token_bottomsheet:false, transfer_token_bottomsheet:false, enter_contract_bottomsheet: false, extend_contract_bottomsheet: false, exit_contract_bottomsheet:false, new_proposal_bottomsheet:false, vote_proposal_bottomsheet: false, submit_proposal_bottomsheet:false, pay_subscription_bottomsheet:false, cancel_subscription_bottomsheet: false,collect_subscription_bottomsheet: false, modify_subscription_bottomsheet:false, modify_contract_bottomsheet:false, modify_token_bottomsheet:false,exchange_transfer_bottomsheet:false, force_exit_bottomsheet:false, archive_proposal_bottomsheet:false, freeze_unfreeze_bottomsheet:false, authmint_bottomsheet:false, moderator_bottomsheet:false, respond_to_job_bottomsheet:false, view_application_contract_bottomsheet:false, view_transaction_bottomsheet:false, view_transaction_log_bottomsheet:false, add_to_bag_bottomsheet:false, fulfil_bag_bottomsheet:false, view_bag_application_contract_bottomsheet: false, direct_purchase_bottomsheet: false, scan_code_bottomsheet:false, send_job_request_bottomsheet:false, view_job_request_bottomsheet:false, view_job_request_contract_bottomsheet:false, withdraw_ether_bottomsheet: false, edit_object_bottomsheet:false, edit_token_bottomsheet:false, edit_channel_bottomsheet: false, edit_contractor_bottomsheet: false, edit_job_bottomsheet:false, edit_post_bottomsheet: false, edit_storefront_bottomsheet:false, give_award_bottomsheet: false, add_comment_bottomsheet:false, depthmint_bottomsheet:false, searched_account_bottomsheet: false, rpc_settings_bottomsheet:false, confirm_run_bottomsheet:false, edit_proposal_bottomsheet:false, successful_send_bottomsheet:false, view_number_bottomsheet:false, stage_royalties_bottomsheet:false, view_staged_royalties_bottomsheet:false,
    dialog_bottomsheet:false, pay_upcoming_subscriptions_bottomsheet:false, send_receive_coin_bottomsheet:false, pick_file_bottomsheet:false, buy_album_bottomsheet:false, edit_audiopost_bottomsheet:false, is_audio_pip_showing:false, full_audio_bottomsheet:false, add_to_playlist_bottomsheet:false, view_pdf_bottomsheet:false, buy_video_bottomsheet:false, edit_videopost_bottomsheet:false, full_video_bottomsheet:false, edit_nitropost_bottomsheet:false, buy_nitro_storage_bottomsheet:false, configure_nitro_node_bottomsheet:false, dialer_bottomsheet:false, view_notification_log_bottomsheet:false, view_contextual_transfer_bottomsheet:false, edit_poll_bottomsheet:false, view_vote_poll_bottomsheet:false, view_calculate_poll_result_bottomsheet:false, view_stage_creator_payout_result_bottomsheet:false,

    syncronizing_progress:0,/* progress of the syncronize loading screen */
    account:null, size:'s', height: window.innerHeight, width: window.innerWidth, beacon_node_enabled:false, country_data:this.get_country_data(),

    theme: this.get_theme_data(this.getLocale()['1593a']/* 'auto' */), storage_option:this.getLocale()['1593cw']/* 'nitro 🛰️' *//* infura, arweave */,
    details_orientation: this.getLocale()['1419']/* 'right' */, refresh_speed:this.getLocale()['1422']/* 'slow' */, masked_content:'e', content_channeling:this.getLocale()['1233']/* 'international' */, device_language:this.get_language(), section_tags_setting:this.getLocale()['1202']/* 'all' */, visible_tabs:'e', storage_permissions: 'e', stack_optimizer: 'e', homepage_tags_position:this.getLocale()['1593k']/* 'top' */, font:'Sans-serif', auto_skip_nsfw_warning:'e', graph_type:'area'/* splineArea */, remember_account:'e', hide_pip:'e', preferred_currency:this.getLocale()['1593ef']/* 'USD' */, minified_content:'e', auto_run:'e', explore_display_type:this.getLocale()['1593gv']/* 'default' */, audiplayer_position:this.getLocale()['1593gz']/* 'bottom-right' */, rating_denomination: this.getLocale()['1593hj']/* 'percentage' */,

    new_object_target: '0', edit_object_target:'0',
    account_balance:{}, stack_items:[],
    created_subscriptions:{}, all_subscriptions:{}, created_subscription_object_mapping:{},
    my_proposals:{},
    created_contracts:{}, all_contracts:{}, created_contract_mapping:{},
    created_tokens:{}, all_tokens:{}, created_token_object_mapping:{},end_balance_of_E5:{},spend_balance_of_E5:{},end_balance_of_burn_account:{},token_directory:{},
    created_posts:{},created_channels:{},
    created_jobs:{}, created_job_mappings:{}, my_applications:{}, my_bag_applications:{},
    created_mail:{}, received_mail:{},
    created_stores:{}, created_store_mappings:{}, created_bags:{}, 
    created_contractors:{},created_audios:{}, created_audio_mappings:{},
    mint_dump_actions:[{},], contacts:{}, should_update_contacts_onchain: false, blocked_accounts:{}, should_update_blocked_accounts_onchain: false, view_bid_in_auction_bottomsheet:false,

    web3:'', e5_address:'',
    
    sync_steps:(53), qr_code_scanning_page:'clear_purchaase', tag_size:23, title_size:65, nitro_link_size:65, image_size_limit:5_000_000, ipfs_delay:90, web3_delay:1400, max_tags_count:7, indexed_title_size:32, iTransfer_identifier_size:53, upload_object_size_limit:(1024*135), max_candidates_count:23, max_poll_nitro_calculator_count:35, max_input_text_length:29, max_post_bulk_load_count: 153, fetch_object_time_limit: (1000*60*2), file_load_step_count:23, calculate_creator_payout_time_limit:(1000*60*2),

    object_messages:{}, job_responses:{}, contractor_applications:{}, my_applications:[], my_contract_applications:{}, hidden:[], direct_purchases:{}, direct_purchase_fulfilments:{}, my_contractor_applications:{}, award_data:{},
    
    alias_bucket: {}, alias_owners: {}, my_alias_events: {}, alias_timestamp: {},
    created_token_object_mapping:{}, E5_runs:{}, user_account_id:{}, addresses:{}, last_blocks:{}, number_of_blocks:{}, gas_price:{}, network_type:{}, number_of_peers:{}, chain_id:{}, account_balance:{'E15':0}, withdraw_balance:{'E15':0}, basic_transaction_data:{}, E5_balance:{}, contacts:{},

    contract_events:{}, proposal_events:{}, subscription_events:{}, exchange_events:{}, moderator_events:{},
    subscription_search_result:{}, all_data:{}, gateway_traffic_cache:{}, channel_events:{}, all_E5_runs:{}, 

    e5s:this.get_e5s(),
    selected_e5:'E25', default_e5:'E25',
    accounts:{}, has_wallet_been_set:false, is_running: {},

    device_country:this.get_location_info().userCountry, device_city: this.get_location_info().userCity, device_region: this.get_location_info().userRegion, device_country_code: this.get_country_code(this.get_location_info().userCountry), static_assets: this.get_static_assets(), os:getOS(), languages:this.get_supported_languages(), allowed_countries:this.get_allowed_countries(),
    
    job_section_tags:[], explore_section_tags:[], should_update_section_tags_onchain:false,
    searched_accounts_data:{}, searched_account_exchange_balances:{}, withdraw_event_data:{}, pending_withdraw_event_data:{}, object_directory:{},
    
    e5_ether_tx_history:{}, e5_ether_supply_data:{}, index_db_size:0, calculated_gas_figures:{}, rpc_times:{}, added_providers:[], mempool:{}, token_name_directory:{}, wallet_status:{},

    loc:this.getLocale(), my_job_responses_notifications:{}, my_job_application_responses_notifications:{}, my_contractor_job_request_notifications:{}, my_token_event_notifications:{}, my_bag_responses_notifications:{}, my_bag_application_responses_notifications:{}, enter_exit_accounts_notifications:{}, my_store_direct_purchases_notifications:{}, received_mail_notifications:{},

    my_created_contracts:{}, my_created_contract_mapping:{}, my_created_subscriptions:{}, my_created_subscription_object_mapping:{}, registered_token_names:{}, registered_token_symbols:{},
    
    load_subscription_metrics:{}, load_contracts_metrics:{}, load_proposal_metrics:{}, load_tokens_metrics:{}, load_posts_metrics:{}, load_channels_metrics:{}, load_jobs_metrics:{}, load_sent_mail_metrics:{}, load_received_mail_metrics:{}, load_storefront_metrics:{}, load_bags_metrics:{}, load_contractors_metrics:{}, load_audio_metrics:{}, load_video_metrics:{}, load_nitro_metrics:{}, load_poll_metrics:{},

    frozen_unfrozen_account_balance_data:{}, watched_account_data:null, watched_account_id:'',
    exchange_royalty_data:{}, token_royalty_data_staging_data:{}, token_royalty_payout_data:{},

    number_board:[], clip_number:"0", dialog_size: 400, account_post_history:{}, account_message_history:{}, comment_size: 600, has_account_been_loaded_from_storage:false, show_stack:true,

    coin_data:{}, account_seed:'', coin_data_status: 'set', final_seed:'', coins:this.get_coin_data(), default_addresses:this.get_default_addresses(), contract_exchange_interactions_data:{}, e5_deflation_data:{}, contracts_proposals:{},

    web3_account_email:'', uploaded_data:{}, uploaded_data_cids:[], update_data_in_E5:false,
    my_tracks:[], my_albums:[], audio_timestamp_data:{}, my_playlists:[], should_update_playlists_in_E5: false, song_plays:{}, should_update_song_plays:false,

    run_gas_price:0, all_cities:[], cached_tracks:[], custom_gateway:'', pdf_bookmarks:{}, details_section_syncy_time:50000, created_videos: {}, created_video_mappings:{}, my_videos:[], my_videoposts:[], video_timestamp_data:{},

    nitro_node_details:{}, nitro_links:{}, nitro_node_storage_payment_info:{}, created_nitros:{}, created_nitro_mappings:{}, bought_nitro_arrays:{}, my_preferred_nitro:'', followed_accounts:primary_following, should_update_followed_accounts:false, posts_blocked_by_me:[], should_update_posts_blocked_by_me:false, posts_blocked_by_my_following:[], my_subscription_payment_mappings:{},

    censored_keyword_phrases: [], should_update_censored_keyword_phrases: false, censored_keywords_by_my_following:[],

    queue:[], pos:0, is_repeating:false, is_shuffling:false, original_song_list:[], play_pause_state: 0/* paused */, my_acquired_audios:[], asset_price_data:{}, 
    
    calculated_arewave_storage_fees_figures:{}, graph_slice_proportion:0.25, logo_title: this.get_default_logo_title(), selected_dark_emblem_country:this.get_default_dark_emblem_country(), get_theme_stage_tags_object:'none', get_content_channeling_tags_object:'all', beacon_chain_url:'', ether_data: this.get_ether_data(), 
    
    language_data:this.get_language_data_object(), all_locales:{'en':english}, dialer_addresses:this.get_dialer_addresses(), theme_images:{}, theme_image:'', line_setting:false, subscribed_nitros:[], get_available_for_all_tags_object:'enabled', is_uploading_to_arweave:false, uploader_percentage:0, uncommitted_upload_cids:[], 
    
    recommended_videopost_threshold:10, recommended_video_threshold:20, recommended_audiopost_threshold:10, recommended_audio_threshold:20, theme_images_enabled:false, deleted_files:[], all_mail:{}, mail_message_events:{}, mail_messages:{}, country_moderators:{}, manual_beacon_node_disabled:'e',

    loaded_contract_and_proposal_data:{}, notification_object:{}, link_type_data:{}, searched_objects_data:{}, post_censored_data:{}, video_thumbnails:{}, posts_reposted_by_me:{'audio':[], 'video':[], 'post':[]}, should_update_posts_reposted_by_me:false, posts_reposted_by_my_following:{'audio':[], 'video':[], 'post':[]}, searched_itransfer_results:{}, created_bills:{}, bill_payment_results:{},

    verified_file_statuses:{}, tracked_contextual_transfer_identifier:'', stack_contextual_transfer_data:{}, tracked_contextual_transfer_e5:'E25',
    e5_ether_override:'e', get_objects_votes:{}, poll_consensus_results:{}, count_poll_times:{}, poll_results:{}, created_polls:{}, object_votes:{},

    stack_size_in_bytes:{}, token_thumbnail_directory:{}, end_tokens:{}, can_switch_e5s:true, my_channels:[], my_polls:[], my_objects:[], file_streaming_data:{}, object_creator_files:{}, stage_creator_payout_results:{}, creator_payout_calculation_times:{}, channel_payout_stagings:{}, channel_creator_payout_records:{}, my_channel_files_directory:{}, channel_id_hash_directory:{},

    is_reloading_stack_due_to_ios_run:false, latest_file_renewal_time:{}, boot_times:{}
  };

  get_static_assets(){
    return {
      'letter':letter,
      'e5_empty_icon':e5_empty_icon,
      'e5_empty_icon3':e5_empty_icon3,
      'music_label':music_label,
      'expand_icon':expand_icon,
      'close_pip':close_pip,
      'empty_image':empty_image,
      'all_cities':'https://bafybeihk2oq34yl7elx3fjygtiarq7b2vc6jxjdcbtwizd6clxj57q6yjq.ipfs.w3s.link/',
      'download_icon':download_icon,
      'zoom_in_icon':zoom_in_icon,
      'zoom_out_icon':zoom_out_icon,
      'video_label':video_label,
      'zip_file':zip_file,
      'end_img':EndImg,
      'spend_img':SpendImg,
      'csv_file':csv_icon,
      'json_file':json_icon,
      'lyric_icon':lyric_icon,
      'subtitle_icon': subtitle_icon,
      'pdf_icon':pdf_icon,
    }
  }

  get_e5s(){
    var others = ['E185', 'E195', 'E205', 'E215', 'E225', 'E235', 'E245', 'E255', 'E265', 'E275', 'E285', 'E295', 'E305', 'E315', 'E325', 'E335', 'E345', 'E355', 'E365', 'E375', 'E385', 'E395', 'E405', 'E415', 'E425', 'E435', 'E445', 'E455', 'E465', 'E475', 'E485', 'E495', 'E505', 'E515', 'E525', 'E535', 'E545', 'E555', 'E565', 'E575', 'E585', 'E595', 'E605', 'E615', 'E625', 'E635', 'E645', 'E655', 'E665', 'E675', 'E685', 'E695', 'E705', 'E715', 'E725', 'E735', 'E745', 'E755', 'E765', 'E775', 'E785', 'E795', 'E805', 'E815', 'E825', 'E835', 'E845', 'E855', 'E865', 'E875', 'E885', 'E895', 'E905', 'E915', 'E925', 'E935', 'E945', 'E955', 'E965', 'E975', 'E985', 'E995', 'E1005', 'E1015', 'E1025', 'E1035', 'E1045', 'E1055', 'E1065', 'E1075', 'E1085', 'E1095', 'E1105', 'E1115', 'E1125', 'E1135', 'E1145', 'E1155', 'E1165', 'E1175', 'E1185', 'E1195', 'E1205', 'E1215', 'E1225', 'E1235', 'E1245', 'E1255', 'E1265','E1275', 'E1285', 'E1295']
    return{
      'data':[/* 'E15', */'E25', 'E35', 'E45', 'E55', 'E65', 'E75', 'E85', 'E95', 'E105', 'E115', 'E125', 'E135','E145', 'E155', 'E165', 'E175',].concat(others),
      'E15':{
        web3:['http://127.0.0.1:8545/'], 
        token:'ETHT',
        e5_address:'0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82', 
        first_block:20, end_image:'https://nftstorage.link/ipfs/bafkreibrox62z2x62w4veqmoc6whuu4j4ni7iubhing6j7cjqfv2uigciq', spend_image:'https://nftstorage.link/ipfs/bafkreia5yy5rlxac3wh2i2u4a7hpfkiqthfjjoqvumovzajt2frqo4233e', ether_image:'https://nftstorage.link/ipfs/bafkreidedjpi2oy3xau4wa2sio7o5js7l4wkdmyo2kfw5vx5kdqey5wrrm', iteration:40_000, url:0, active:false, e5_img:'https://nftstorage.link/ipfs/bafkreib2nwt7hxnjzv44mi66odisosg6escg4jeejv3oxhl4lml74bb4mu',
        end_token_power_limit: 990, type:'1559', spend_access:this.get_allowed_countries(), public_enabled:true
      },
      'E25':{
        web3:['https://etc.etcdesktop.com'], 
        token:'ETC',
        e5_address:'0xF3895fe95f423A4EBDdD16232274091a320c5284', 
        first_block:19151130, end_image:end25_image/* 'https://nftstorage.link/ipfs/bafkreiechh4ndeaxlannymv664bp6alq2w7ydp2e2ayt4bdz7meypeifj4' */, spend_image:spend25_image/* 'https://nftstorage.link/ipfs/bafkreifm7bcvh45uw2rra7svi4fphxrwxaik5lzskzxnizttoo4owivs34' */, ether_image:ethereum_classic_logo/* 'https://nftstorage.link/ipfs/bafkreidedjpi2oy3xau4wa2sio7o5js7l4wkdmyo2kfw5vx5kdqey5wrrm' */, 
        iteration:400_000, url:0, active:true, e5_img:E5_E25_image/* 'https://nftstorage.link/ipfs/bafkreib2nwt7hxnjzv44mi66odisosg6escg4jeejv3oxhl4lml74bb4mu' */,
        end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E35':{
        web3:['https://etc.etcdesktop.com'],
        token:'ETC',
        e5_address:''/* '0x4c124f6C90fa3F12A9b6b837B89832E2E460e731' */,
        first_block:19614310, end_image:end35_image/* 'https://nftstorage.link/ipfs/bafkreibrox62z2x62w4veqmoc6whuu4j4ni7iubhing6j7cjqfv2uigciq' */, spend_image:spend35_image/* 'https://nftstorage.link/ipfs/bafkreia5yy5rlxac3wh2i2u4a7hpfkiqthfjjoqvumovzajt2frqo4233e' */, ether_image:ethereum_classic_logo/* 'https://nftstorage.link/ipfs/bafkreidedjpi2oy3xau4wa2sio7o5js7l4wkdmyo2kfw5vx5kdqey5wrrm' */, iteration:400_000, url:0, active:false, e5_img:E5_E35_image/* 'https://nftstorage.link/ipfs/bafkreicte43xko2kmxgdp4pxmxtxal3mxef2bqwhqah3f47gpnocpqhur4' */,
        end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:false
      },
      'E45':{
        web3:['https://api.harmony.one'],
        token:'ONE',
        e5_address:'', /* 0xC621A0305D1826AB1E24C7d78792035cD9204eD4 */
        first_block:50166065, end_image:'https://nftstorage.link/ipfs/bafkreiehe7jgkkhkb6rwh6o3eirbi4hr6rvm256gxuxnpltbcjiymsnaji', spend_image:'https://nftstorage.link/ipfs/bafkreihyjmhty3kqxvicghsh2apwd4n2grvmhcadwuzfuqtpcm4c2h7jwm', ether_image:harmony_logo/* 'https://nftstorage.link/ipfs/bafkreidqivbjiabs2zcyj2qljx5u4wytvhoctjkq4kjrleuyxjrhz3xjl4' */, iteration:1_024/* this limit is horrible. bad blockchain. */, url:0, active:false, e5_img:null
      },
      'E55':{
        web3:['https://1rpc.io/celo', 'https://forno.celo.org'],
        token:'CELO',
        e5_address:'', /* 0xdfaE4E1a8447E560a0064fdB89D1919bF7cC0902 */
        first_block:22528756, end_image:'https://nftstorage.link/ipfs/bafkreihciglctxpprbcf3xx7ykrzfxacfblvdtjnld7p4hfczsyy67aajy', spend_image:'https://nftstorage.link/ipfs/bafkreianjrpyl6xi7vz3aahnvqy6r3liysoc4sg5z742xlawip7if4qjsi', ether_image:celo_logo/* 'https://nftstorage.link/ipfs/bafkreidcfqahs3qwnte4do6di6gvcczfwu4bikwvkqlcrmaekheevohvce' */, iteration:40_000, url:1, active:false, e5_img:null
      },
      'E65':{
        web3:['https://rpc.ftso.au/flare'],
        token:'FLR',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:15492557, end_image:'https://nftstorage.link/ipfs/bafkreibxgvjqeewxnpvlhbr7fdffjqpdlm46jgq46n4ph5ycntc4gkg3iu', spend_image:'https://nftstorage.link/ipfs/bafkreibi6jb4mv3lukllruf5byelbq2hbtnzksefixsf34dozga33urv34', ether_image:flare_logo/* 'https://nftstorage.link/ipfs/bafkreibcju2icekhorub6nhkvuwidz52s3kt5wxq5pivowqkchodczvsru' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E75':{
        web3:['https://rpc.gnosischain.com'],
        token:'XDAI',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:31015240, end_image:'https://nftstorage.link/ipfs/bafkreibgr7powl4htuxigjxl6noyew6taomrmztiwnyo5kvytwxwvrg7xq', spend_image:'https://nftstorage.link/ipfs/bafkreifuqbzibz4efhnbkwllwo5qepsnacyhbcpmuxcfcacbyddyniocsm', ether_image:xdai_logo/* 'https://nftstorage.link/ipfs/bafkreiezzy66goly3tmsbxoknk43372eqnc5y6252n5jkxsyurp5ktfmhe' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E85':{
        web3:['https://rpc.fuse.io'],
        token:'FUSE',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:26508302, end_image:'https://nftstorage.link/ipfs/bafkreifokwa2355i6iaawawx2z2puyhpgi6o75ytayxbqqjoygj3xjb7pa', spend_image:'https://nftstorage.link/ipfs/bafkreictaiv2g4yfnuc4yfshi7ddtukcz7zbmqamii7eqptzre5edwiibi', ether_image:fuse_logo/* 'https://nftstorage.link/ipfs/bafkreibuk5w63v62cd34reirc4xm7ryvz56vlytls2gp5b3bkowhevsbxq' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E95':{
        web3:['https://rpc.api.moonbeam.network'],
        token:'GLMR',
        e5_address:'', /* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:4910897, end_image:'https://nftstorage.link/ipfs/bafkreie6krbxayljpkyl4tdyz554us6i4razp2a5b3wuu77h4prq2n7xju', spend_image:'https://nftstorage.link/ipfs/bafkreibf3jqav6igwprq4wzgf24xbzl6eq44lfjv7anbsd2ufirjjbwu5m', ether_image:moonbeam_logo, iteration:10_000, url:0, active:false, e5_img:null
      },
      'E105':{
        web3:['https://rpc.api.moonriver.moonbeam.network', 'https://moonriver.unitedbloc.com:2000'],
        token:'MOVR',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:5587390, end_image:'https://nftstorage.link/ipfs/bafkreicfqe6oih24rzjc4vkqv6rmamoia6jshilwqhoc7b6qwvoxaftg74', spend_image:'https://nftstorage.link/ipfs/bafkreibhweqzoh2ntnfexepezpt2ktat3wemkc2egjcrliwasz3v2tzyga', ether_image:moonriver_logo, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E115':{
        web3:['https://xdc.public-rpc.com'],
        token:'XDC',
        e5_address:'',/* 0xAf7e201B3424D0Cc43392C8Eae71FBdc983932Fb */
        first_block:68418980, end_image:'https://nftstorage.link/ipfs/bafkreia4rnmraomzhv5ofx4bzp4l2chi4toderqyqkvct6q2vzpxgdtpai', spend_image:'https://nftstorage.link/ipfs/bafkreidxjjqn3muqycclxfddeqzaeboepw6yu3f424a3rwhiedt4tlga5a', ether_image:xdc_logo/* 'https://nftstorage.link/ipfs/bafkreidextl3x3rq4c26vxqwh7q5jjpv6bgcmutad257qyabe6zslxpevi' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E125':{
        web3:['https://polygon-bor-rpc.publicnode.com'],
        token:'POL',
        e5_address:'',/* 0x3D610010C43fC1Af89D8d040ED530398817A8E94 */
        first_block:50258928, end_image:'https://nftstorage.link/ipfs/bafkreihldhuazp6fcbxqvzpl7zzr2zay4zuxnnnma44fg7u7lvydfzrv6y', spend_image:'https://nftstorage.link/ipfs/bafkreih4ctarqvngz5zjyahjlqppslmnpexfyjiso65ywyrepqnv5d7wtm', ether_image:polygon_logo/* 'https://nftstorage.link/ipfs/bafkreid3rpf2wbk4i6y6sd4zltdapek2i3dst5pxzfjy3kvn6iv56obfty' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E135':{
        web3:['https://bsc-rpc.publicnode.com'],
        token:'BNB',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:33723227, end_image:'https://nftstorage.link/ipfs/bafkreif4lbsuzzhu23piwbdv3p47ha46g6egmoh7pddrex6f3tbl76ycii', spend_image:'https://nftstorage.link/ipfs/bafkreigvlzjjujid2f3n7zzfw4jzmwowaq2mvd35d32rauedberpnjl6vq', ether_image:binance_logo/* 'https://nftstorage.link/ipfs/bafkreibsa7mds2mc75oyalixvrycvcn6grk625paucy7ol3sifdz42ew5e' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E145':{
        web3:['https://evm-rpc.sei-apis.com'],
        token:'SEI',
        e5_address:'',/*  */
        first_block:0, end_image:null, spend_image:null, ether_image:sei_logo, iteration:10_000, url:0	, active:false, e5_img:null
      },
      'E155':{
        web3:['https://mainnet-rpc.thundercore.io'],
        token:'TT',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:148816985, end_image:'https://nftstorage.link/ipfs/bafkreihcc4bnygb42rlpib2uev7cbduintrvf72jqf4yzosfoz65s6x7bq', spend_image:'https://nftstorage.link/ipfs/bafkreicxhgrbre7cta2jn5i7sm4lzdige3wiqa3pdpegu7kla5v6g66c74', ether_image:thundercore_logo/* 'https://nftstorage.link/ipfs/bafkreidw4ngkifzyei6dekjjfnpkhwodubkwe2eodrq3yvijeai3sqk74i' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E165':{
        web3:['https://viction.drpc.org'],
        token:'VIC',
        e5_address:'',/* 0xd3B4c06c7514a72284fCe95DCAD911c8EaD9Be3F */
        first_block:73021490, end_image:'https://nftstorage.link/ipfs/bafkreifgogs44o7da3acci3uc2oqv5oxmsmegw437w2zif655ifxtkkr7a', spend_image:'https://nftstorage.link/ipfs/bafkreiht6b53kzxpwomvq7kmrqseav3rwxgrbeovw6zlqhxc4tccylav4u', ether_image:viction_logo/* 'https://nftstorage.link/ipfs/bafkreiaovtind2gl7fguqisxsdlqp2agxr7xe2t3dehietmhygwcx3dcny' */, iteration:40_000, url:0, active:false, e5_img:null
      },
      'E175':{
        web3:['https://evmos-evm-rpc.publicnode.com'],
        token:'EVMOS',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:17475951, end_image:'https://nftstorage.link/ipfs/bafkreibwm67vdnsbnxxm6muhoaqejctvneslseapupegh3yh2kxtarrwly', spend_image:'https://nftstorage.link/ipfs/bafkreidisjbdffry64mz2pdqf3qwsweq43sv7vgfozodxwge7ubxoggfae', ether_image:evmos_logo/* 'https://nftstorage.link/ipfs/bafkreigavsqsyulrxb3l2wyosu34zsj4r32nftdkbvtemmqcka7veudxzi' */, iteration:40_000, url:0, active:false, e5_img:null
      },








      
      'E5':{
        web3:[''],
        token:'',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:'https://nftstorage.link/ipfs/bafkreibsa7mds2mc75oyalixvrycvcn6grk625paucy7ol3sifdz42ew5e', iteration:3_000, url:0, active:false, e5_img:null
      },

      'E185':{
        web3:['https://ethereum-rpc.publicnode.com'],
        token:'ETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:ethereum_logo/* 'https://nftstorage.link/ipfs/bafkreifhlwgbspcfrn2kbu25nevksegskhbns7aesdr6kwy6ikqct7lp7e' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E195':{
        web3:['https://optimism-rpc.publicnode.com'],
        token:'OETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:optimism_logo/* 'https://nftstorage.link/ipfs/bafkreies5rawvabvmzovxqesuor3a43wqmgnec7y7yzlberkwqvicehdse' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E205':{
        web3:['https://base-rpc.publicnode.com'],
        token:'BETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:base_logo/* 'https://nftstorage.link/ipfs/bafkreicwdtpk4fjjh6zmbrreafp7yuuehagxc5iso5iaggezwu2edsrmj4' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E215':{
        web3:['https://arbitrum-one-rpc.publicnode.com'],
        token:'AETH',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:arbitrum_logo/* 'https://nftstorage.link/ipfs/bafkreia5kfqglxtwiyrm7fw4ydrr4dwyrwftxrs6gvksxss7s5wjvc2ndm' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E225':{
        web3:['https://astar-rpc.dwellir.com'],
        token:'ASTR',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:astar_logo/* 'https://nftstorage.link/ipfs/bafkreihq22vobhmkdlrrxv3nei6b757u6acklwsnjcmn6pwpwkh76s7azy' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E235':{
        web3:['https://cronos-evm.publicnode.com'],
        token:'CRO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:cronos_logo/* 'https://nftstorage.link/ipfs/bafkreib7cta7pbzjgd6ys2rxxt7plf6ool4n7xxrndqd5zw6bkqmecablq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E245':{
        web3:['https://evm.kava.io'],
        token:'KAVA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:kava_logo/* 'https://nftstorage.link/ipfs/bafkreieeiyg42q6sb2jk5qz47alefcfc72wyxtkhdhzxqycqroixbt6kke' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E255':{
        web3:['https://neon-proxy-mainnet.solana.p2p.org'],
        token:'NEON',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:neon_logo/* 'https://nftstorage.link/ipfs/bafkreicezjbxf47t7n6welb63atcx4v7jnl36tfbddmpxiu4ajzi2vmad4' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E265':{
        web3:['https://rpc-mainnet-cardano-evm.c1.milkomeda.com'],
        token:'mADA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:milkomeda_logo/* 'https://nftstorage.link/ipfs/bafkreiauduj7d7lhlbiac2y2i6fr5mz3xky2h4jvqjgyxgco4wrfu244oi' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E275':{
        web3:['https://fantom-mainnet.public.blastapi.io'],
        token:'FTM',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:fantom_logo/* 'https://nftstorage.link/ipfs/bafkreidsstxytde2mwe7u63hu54b6bcwgay7ckpgy7fgypflsyki2ntb2m' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E285':{
        web3:['https://flux-rpc2.brisescan.com'],
        token:'BRISE',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:brise_logo/* 'https://nftstorage.link/ipfs/bafkreihqobs4apgub5767t2y5hkn5idhwmxhiwtjkwxhfu566w7l6wt2ym' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E295':{
        web3:['https://syscoin.public-rpc.com'],
        token:'SYS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:syscoin_logo/* 'https://nftstorage.link/ipfs/bafkreibmwawsdkh5tgdcotewbdunarzapcb2qmh6eoo5ynbojy6kkwyaky' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E305':{
        web3:['https://avalanche.drpc.org'],
        token:'AVAX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:avalanche_logo/* 'https://nftstorage.link/ipfs/bafkreiazy7wgqjb3w6owts3xixp527kxdb6mohcrt3rkvvomsvk3rqep4e' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E315':{
        web3:['https://rpc-mainnet.findora.org'],
        token:'FRA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:findora_logo/* 'https://nftstorage.link/ipfs/bafkreiahfewosrjnjrsw22p54go7d5wqu7kghzvqufnzueaxl3trvzn52u' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E325':{
        web3:['https://bellecour.iex.ec'],
        token:'xRLC',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:iexec_logo/* 'https://nftstorage.link/ipfs/bafkreiggejzqvra2hzwdtr42whtzklislx6mch6bffufumnowiusinagvm' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E335':{
        web3:['https://emerald.oasis.dev'],
        token:'ROSE',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:oasis_logo/* 'https://nftstorage.link/ipfs/bafkreiavbox3rj73c4h6qezsdvbbsz52lgd7g3y6fnu62hzn6wqz73bjwm' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E345':{
        web3:['https://node1.ozonechain.io'],
        token:'OZO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:ozone_logo/* 'https://nftstorage.link/ipfs/bafkreifpugp4hawkzc7ouvanhzk33jhxjqhdg63kq2waswq64wip54kfiy' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E355':{
        web3:['https://http-mainnet.chain.pixie.xyz'],
        token:'PIX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:pixie_logo/* 'https://nftstorage.link/ipfs/bafkreifmgqxk23mp3nvsblfszv3wxziy24h7wqssycrh5gulp5tw7jkamq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E365':{
        web3:['https://rpc.rei.network'],
        token:'REI',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:rei_logo/* 'https://nftstorage.link/ipfs/bafkreibpmldmytfxkvz2yprozcfr57hdlcjngcrv4oia6jqqb75wmmxgzq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E375':{
        web3:['https://public-en-cypress.klaytn.net'],
        token:'KLAY',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:klaytn_logo/* 'https://nftstorage.link/ipfs/bafkreiescyzouik566qarxqeqzxoriace6j4stbdchculm5x56tjkp2sqi' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E385':{
        web3:['https://rpc.mantle.xyz'],
        token:'MNT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:mantle/* 'https://nftstorage.link/ipfs/bafkreihsbilx43a554olrkmfhsse7rxyhtg7i4hlshd5kqnydgpihwbi5m' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E395':{
        web3:['https://rpc.pulsechain.com'],
        token:'PLS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:pulsechain_logo/* 'https://nftstorage.link/ipfs/bafkreibrilqmflglo7qylgt3zwbywzzbpp2x6tfz76eqnocrhhprrgir5q' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E405':{
        web3:['https://jsonrpc.canto.nodestake.top'],
        token:'CANTO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:canto_logo/* 'https://nftstorage.link/ipfs/bafkreidpyqijpifjco2jlijkqn7lix7gej4oo5reka2gxbbin6ir6eyepy' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E415':{
        web3:['https://api.evm.eosnetwork.com'],
        token:'EOS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:eosnetwork_logo/* 'https://nftstorage.link/ipfs/bafkreidr7jfavw27kj64fspqcidevjyufkxq6accycnr3e6pckdqfe5lze' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E425':{
        web3:['https://babel-api.mainnet.iotex.io'],
        token:'IOTX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:iotex_logo/* 'https://nftstorage.link/ipfs/bafkreig7l7jsdnuesu2j6cscmwkhumvcuiqx3sumdq36hnswd4iugldqxe' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E435':{
        web3:['https://sgb.ftso.com.au/ext/bc/C/rpc'],
        token:'SGB',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:songbird_logo/* 'https://nftstorage.link/ipfs/bafkreiapvqa26ifxjkyldnukiqaaodkavic3xbbzdbqajgn6v5rdw3u2ni' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E445':{
        web3:['https://ultron-rpc.net'],
        token:'ULX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:ultron_logo/* 'https://nftstorage.link/ipfs/bafkreieswovobb76mebl4hl5amisqsyh4wuaw6vdkdf5iflx4pufeghida' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E455':{
        web3:['https://rpc.coinex.net'],
        token:'CET',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:coinex_logo/* 'https://nftstorage.link/ipfs/bafkreib6gldtkg2yh4oklnznn4zjt6xclqvmurut3s23zai3fuaarqazk4' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E465':{
        web3:['https://eth-rpc-api.thetatoken.org/rpc'],
        token:'TFUEL',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:tfuel_logo/* 'https://nftstorage.link/ipfs/bafkreigg23q3fyi6okevwhrieevuvb3ellj26s3pdhoq4e7tv2qp725dnm' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E475':{
        web3:['https://rpc.step.network'],
        token:'FITFI',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:step_logo/* 'https://nftstorage.link/ipfs/bafkreigqzgwcqib66uivlcmh6c5jr56xfge3cxyc7jb23vghlmiqvkvrky' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E485':{
        web3:['https://rpc.energyweb.org'],
        token:'EWT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:energyweb_logo/* 'https://nftstorage.link/ipfs/bafkreih3rxl7pdkov3yelfkbmsocwvx7gejtvuwjqltyfse5bvxj52gm7e' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E495':{
        web3:['https://rpc.callisto.network'],
        token:'CLO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:callisto_logo/* 'https://nftstorage.link/ipfs/bafkreibewb5rlbvptqvovuzink4y7crot5nkxplgqd7o7ajvqp4ocjz3je' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E505':{
        web3:['https://shiden-rpc.dwellir.com'],
        token:'SDN',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:shiden_logo/* 'https://nftstorage.link/ipfs/bafkreidrlqfkm53twzvh5lnuzoddpv24yrzsaixgxyzfwe4qxzfyjpnmly' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E515':{
        web3:['https://tenet-evm.publicnode.com'],
        token:'TENET',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:tenet_logo/* 'https://nftstorage.link/ipfs/bafkreifxl5uapxvm47vc4hec4bbvvsnazedn36zjiwsw2s4v7dzqn6s74m' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E525':{
        web3:['https://pyrus2.ubiqscan.io'],
        token:'UBQ',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:ubiq_logo/* 'https://nftstorage.link/ipfs/bafkreidh2cvl7y2njzpfuc6z2rdiocdbw2sbczz4rtod3c7pzw3pckob5u' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E535':{
        web3:['https://rpc.gochain.io'],
        token:'GO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:gochain_logo/* 'https://nftstorage.link/ipfs/bafkreihnhyg4dyvptbvh5ykq2wzyraj74n6wcyxxwsb4eepkcds74r46kq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E545':{
        web3:['https://mainapi.omaxray.com'],
        token:'OMAX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:omax_logo/* 'https://nftstorage.link/ipfs/bafkreicf546yuctqunrcfdb73vwdl7bq645f26zkfjodj2rymcqcwicliu' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E555':{
        web3:['https://api.wemix.com'],
        token:'WEMIX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:wemix_logo/* 'https://nftstorage.link/ipfs/bafkreibu5gf53hzlth6qafuaxozwytw2qdtnofoxjvusxpne4pqc3yntju' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E565':{
        web3:['https://evm.confluxrpc.com'],
        token:'CFX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:conflux_logo/* 'https://nftstorage.link/ipfs/bafkreiboh4aov7q7wzvi6be27uskvad6bzir7s5alr2dihvzznrkflhxza' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E575':{
        web3:['https://rpc1.eu.telos.net/evm'],
        token:'TLOS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:telos_logo/* 'https://nftstorage.link/ipfs/bafkreihsqmpt6szoqnam4qpwcjtpn73p5hmlxu53qxnaf4ytzvvrhvqmya' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E585':{
        web3:['https://mycrypto.rsk.co'],
        token:'RSK',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:rsk_logo/* 'https://nftstorage.link/ipfs/bafkreiegatpac6ycp23meknqhihmlxrsb7asnl22yksh44swopk4nluv7a' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E595':{
        web3:['https://api.metadium.com/prod'],
        token:'META',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:metadium_logo/* 'https://nftstorage.link/ipfs/bafkreiem6fmyfzpix5dmokefc7dakf5hd5ouckwtuzo2yxh6yn7g45iioe' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E605':{
        web3:['https://rpc.kardiachain.io'],
        token:'KAI',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:kardiachain_logo/* 'https://nftstorage.link/ipfs/bafkreidkhcnyvp5cwi5cb3sdg4cerrgyzi3qbv7vint4esk7vabceeo54m' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E615':{
        web3:['https://mainnet.block.caduceus.foundation'],
        token:'CMP',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:caduceus_logo/* 'https://nftstorage.link/ipfs/bafkreickyon3ett5kn2lqvhhdfl37mmdnrngh6fvfetqbavyyat2gcbq2u' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E625':{
        web3:['https://rpc.seelen.pro'],
        token:'SEELE',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:seele_logo/* 'https://nftstorage.link/ipfs/bafkreigyvectz4cwg4mj7noyw3eo5txd3fh2feir6loi4xqrxxufu4i4ta' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E635':{
        web3:['https://rpc.bittorrentchain.io'],
        token:'BTT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:bittorrentchain_logo/* 'https://nftstorage.link/ipfs/bafkreigf6kxh5622gndetusjo5wci53kikq4m7j3w5ieha75eewzqg6i5y' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E645':{
        web3:['https://rpc.acuteangle.com'],
        token:'AAC',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:doublea_logo/* 'https://nftstorage.link/ipfs/bafkreidtmpi7bagyu7vtvspkx7nx73bztl7g7raxhprlqhdzt4226gy5ne' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E655':{
        web3:['https://rpc.evm.karura.network'],
        token:'KAR',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:karura_logo/* 'https://nftstorage.link/ipfs/bafkreihmmav45jddg6egaooccb7ywij3ietijnvtzep7vfyy2gjazfsdjq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E665':{
        web3:['https://eth-rpc-acala.aca-staging.network'],
        token:'ACA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:acala_logo/* 'https://nftstorage.link/ipfs/bafkreiajrgopwvl6cpwpi25vdrafi47p27hfgm4imbs6ur5o57xku6xzzq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E675':{
        web3:['https://mainnet3.edgewa.re/evm'],
        token:'EDG',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:edgeware_logo/* 'https://nftstorage.link/ipfs/bafkreicpea6ke2daanmhb73ejaqht2xkpig3yicqotwkm3spkivixb5ju4' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E685':{
        web3:['https://core.bloxberg.org'],
        token:'BERG',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:bloxberg_logo/* 'https://nftstorage.link/ipfs/bafkreif4dsu7lxayad6wkh2xdeplaym5llftknaluwvtxblfasik6wahvm' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E695':{
        web3:['https://rpc.phoenixplorer.com'],
        token:'PHOENIX',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:phoenix_logo/* 'https://nftstorage.link/ipfs/bafkreih6ijcxbidzo2isqlu2hjm43llyv3f2kmkz72tt32li4gl25kzypq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E705':{
        web3:['https://seed.omlira.com'],
        token:'OMC',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:omchain_logo/* 'https://nftstorage.link/ipfs/bafkreieph4yuxvzjxugw5hmdtwlsp7434dwapm65pr5b3o5pk2fb5uvosa' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E715':{
        web3:['https://rpc-cnx.omplatform.com'],
        token:'OM',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:om_logo/* 'https://nftstorage.link/ipfs/bafkreicz56kvmxvnzab5eve3dq624pmptwsrmkceu27wgxzticyyjeobhu' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E725':{
        web3:['https://node1.mintme.com'],
        token:'MINTME',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:mintme_logo/* 'https://nftstorage.link/ipfs/bafkreicpvjaago2uqrvid4x5cq27grwuxapcxs4l2tfwgqcocwbxxq7edq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E735':{
        web3:['https://rpc.ecredits.com'],
        token:'ECS',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:ecredits_logo/* 'https://nftstorage.link/ipfs/bafkreifktidofrlhlkpwnfyf5p3ftk3k2y3dbsq7cxqcjpgs2axqdvhqoi' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E745':{
        web3:['https://host-154-14-192-66.contentfabric.io/eth'],
        token:'ELV',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:eluv_logo/* 'https://nftstorage.link/ipfs/bafkreicchvnsegzclfaz2xnfzlnpjey4ahxnoxzpyhudb524ezstp5cc5u' */, iteration:3_000, url:0, active:false, e5_img:null, type:'1559'
      },
      'E755':{
        web3:['https://rpc.ethoprotocol.com'],
        token:'ETHO',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:etho_logo/* 'https://nftstorage.link/ipfs/bafkreihxyf4fksj7bajilfz2m66v455goeushb2w36kn5h63p7f2gvllgq' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E765':{
        web3:['https://mainnet-rpc.oneledger.network'],
        token:'OLT',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:oneledger_logo/* 'https://nftstorage.link/ipfs/bafkreifn4sbeosn63ogew4z7gm4dw2t5l2xhmtauxwgh4wakaqmxjuuwwm' */, iteration:3_000, url:0, active:false, e5_img:null
      },
      'E775':{
        web3:['https://mainnet.hashio.io/api'],
        token:'HBAR',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:hedera_logo, iteration:400_000, url:0, active:false, e5_img:null
      },
      'E785':{
        web3:['https://json-rpc.evm.iotaledger.net'],
        token:'IOTA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:iotaevm_logo, iteration:400_000, url:0, active:false, e5_img:null
      },
      'E795':{
        web3:['https://public-en.node.kaia.io'],
        token:'KAIA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:kaia_logo, iteration:400_000, url:0, active:false, e5_img:null
      },
      'E805':{
        web3:['https://rpc.soniclabs.com'],
        token:'S',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:sonic_logo, iteration:400_000, url:0, active:false, e5_img:null
      },
      'E815':{
        web3:['https://rpc.berachain.com/'],
        token:'BERA',
        e5_address:'',
        first_block:0, end_image:null, spend_image:null, ether_image:berachain_logo, iteration:400_000, url:0, active:false, e5_img:null
      },
      'E825':{
        web3:['https://nodeapi.energi.network'],
        token:'NRG',
        e5_address:'',/* 0x6433Ec901f5397106Ace7018fBFf15cf7434F6b6 */
        first_block:1955370, end_image:'https://nftstorage.link/ipfs/bafkreicgkrcoqradelnzgdnm3tm7x7atblgskl6uxkywv2klp7ghrv6ndu', spend_image:'https://nftstorage.link/ipfs/bafkreif35wji3e3mcuu5y67mclzb3zwzneckvqo5n4dj7ekbigjsnd2g24', ether_image:energi_logo/* 'https://nftstorage.link/ipfs/bafkreiaoiipzjii67rl6jujy25qbwiauu43ifcrhofw625x4cm34hjmz5e' */, iteration:10_000, url:0	, active:false, e5_img:null
      },
      'E835':{
        web3:['https://rpc.hyperliquid.xyz/evm'],
        token:'HYPE',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:hyperliquid_logo, iteration:10_000, url:0	, active:false, e5_img:null
      },

      'E845':{
        web3:['https://rpc.xrplevm.org'],
        token:'XRP',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:xrpl_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E855':{
        web3:['https://api.mainnet.abs.xyz'],
        token:'ABETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:abstract_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E865':{
        web3:['https://apechain.drpc.org'],
        token:'APE',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:apechain_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E875':{
        web3:['https://rpc.bitlayer.org'],
        token:'BIBTC',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:bitlayer_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E885':{
        web3:['https://rpc.blast.io'],
        token:'BLETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:blast_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E895':{
        web3:['https://rpc.gobob.xyz/'],
        token:'BOETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:bob_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E905':{
        web3:['https://rpc.botanixlabs.com'],
        token:'BOBTC',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:botanix_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E915':{
        web3:['https://rpc.bsquared.network'],
        token:'BSBTC',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:bsquared_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E925':{
        web3:['https://core.drpc.org', 'https://rpc.coredao.org'],
        token:'CORE',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:core_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E935':{
        web3:['https://mainnet.corn-rpc.com'],
        token:'BTCN',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:corn_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E945':{
        web3:['https://node.mainnet.etherlink.com'],
        token:'XTZ',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:etherlink_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E955':{
        web3:['https://rpc.frax.com'],
        token:'FRAX',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:fraxtal_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E965':{
        web3:['https://mainnet.hsk.xyz'],
        token:'HSK',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:hashkey_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E975':{
        web3:['https://rpc.hemi.network/rpc'],
        token:'HETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:hemi_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E985':{
        web3:['https://rpc-qnd.inkonchain.com'],
        token:'IETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:ink_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E995':{
        web3:['https://rpc.lens.xyz'],
        token:'GHO',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:lens_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E1005':{
        web3:['https://rpc.linea.build '],
        token:'LETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:linea_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1015':{
        web3:['https://rpc.api.lisk.com'],
        token:'LIETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:lisk_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1025':{
        web3:['https://merlin.drpc.org'],
        token:'MBTC',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:merlin_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1035':{
        web3:['https://rpc.metall2.com'],
        token:'METH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:metal_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1045':{
        web3:['https://metis-rpc.publicnode.com'],
        token:'METIS',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:metis_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1055':{
        web3:['https://rpc-mainnet.mindnetwork.xyz'],
        token:'MIETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:mind_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1065':{
        web3:['https://rpc.mintchain.io'],
        token:'MINETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:mint_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1075':{
        web3:['https://mainnet.mode.network/'],
        token:'MOETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:mode_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1085':{
        web3:['https://mainnet-1.rpc.banelabs.org', 'https://mainnet-2.rpc.banelabs.org', 'https://mainnet-3.rpc.banelabs.org'],
        token:'GAS',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:neox_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1095':{
        web3:['https://opbnb-rpc.publicnode.com'],
        token:'OBNB',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:opbnb_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1105':{
        web3:['https://rpc.plume.org'],
        token:'PLUME',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:plume_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1115':{
        web3:['https://rpc.katana.network/'],
        token:'KETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:katana_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1125':{
        web3:['https://zkevm-rpc.com'],
        token:'PETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:peth_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E1135':{
        web3:['https://api.roninchain.com/rpc'],
        token:'RON',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:ronin_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1145':{
        web3:['https://scroll-rpc.publicnode.com'],
        token:'SETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:scroll_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1155':{
        web3:['https://www.shibrpc.com'],
        token:'BONE',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:shibarium_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1165':{
        web3:['https://rpc.soneium.org/'],
        token:'SONETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:soneium_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1175':{
        web3:['https://mainnet.superseed.xyz'],
        token:'SUETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:superseed_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1185':{
        web3:['https://rpc.taiko.xyz'],
        token:'TETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:taiko_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1195':{
        web3:['https://rpc.treasure.lol'],
        token:'MAGIC',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:treasure_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E1205':{
        web3:['https://unichain-rpc.publicnode.com'],
        token:'UETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:unichain_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1215':{
        web3:['https://worldchain-mainnet.g.alchemy.com/public'],
        token:'WOETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:world_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1225':{
        web3:['https://rpc.xlayer.tech'],
        token:'OKB',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:okb_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1235':{
        web3:['https://exchainrpc.okex.org/'],
        token:'OKT',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:okt_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1245':{
        web3:['https://mainnet.zircuit.com'],
        token:'ZETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:zircuit_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1255':{
        web3:['https://mainnet.era.zksync.io'],
        token:'ZKETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:zksync_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1265':{
        web3:['https://mainnet.zkevm.cronos.org/'],
        token:'zkCRO',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:cronoszkevm_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000
      },
      'E1275':{
        web3:['https://rpc.zerion.io/v1/zero'],
        token:'ZERETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:zero_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559'
      },
      'E1285':{
        web3:['https://rpc.sophon.xyz'],
        token:'SOPH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:sophon_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000,
      },
      'E1295':{
        web3:['https://pacific-rpc.manta.network/http'],
        token:'MAETH',
        e5_address:'',/*  */
        first_block:0, end_image: null, spend_image: null, ether_image:manta_logo, iteration:10_000, url:0	, active:false, e5_img:null, end_token_power_limit: 72, spend_access:this.get_allowed_countries(), public_enabled:true, notification_blocks:20_000, type:'1559',
      },
    }
  }

  getLocale(){
    var language = this.get_language()
    var data = this.state == null ? {'en':english} : this.state.all_locales;
    if(data[language] == null) return data['en']
    return data[language]
  }

  get_ether_data(){
    var list = [
      // this.get_token('ETHT', 'Ethereum Testnet', 'E15'),
      this.get_token('ETC', 'Ethereum Classic', 'E35'),
      this.get_token('ONE', 'Harmony', 'E45'),
      this.get_token('CELO', 'Celo', 'E55'),
      this.get_token('FLR', 'Flare', 'E65'),
      this.get_token('XDAI', 'Gnosis Chain', 'E75'),
      this.get_token('FUSE', 'Fuse', 'E85'),
      this.get_token('GLMR', 'Moonbeam', 'E95'),
      this.get_token('MOVR', 'Moonriver', 'E105'),
      this.get_token('XDC', 'Xinfin Network', 'E115'),
      this.get_token('POL', 'Polygon', 'E125'),
      this.get_token('BNB', 'Binance S.C.', 'E135'),
      this.get_token('TT', 'ThunderCore', 'E155'),
      this.get_token('SEI', 'Sei', 'E145'),
      this.get_token('VIC', 'Viction', 'E165'),
      this.get_token('EVMOS', 'Evmos EVM', 'E175'),

      this.get_token('ETH', 'Ethereum', 'E185'),
      this.get_token('OETH', 'Optimism', 'E195'),
      this.get_token('BETH', 'Base', 'E205'),
      this.get_token('AETH', 'Arbitrum One', 'E215'),
      this.get_token('ASTR', 'Astar EVM', 'E225'),
      this.get_token('CRO', 'Cronos EVM', 'E235'),
      this.get_token('KAVA', 'Kava EVM', 'E245'),
      this.get_token('NEON', 'Neon EVM', 'E255'),
      this.get_token('mADA', 'Milkomeda', 'E265'),
      this.get_token('FTM', 'Fantom Opera', 'E275', true),
      this.get_token('BRISE', 'Bitgert', 'E285'),
      this.get_token('SYS', 'Syscoin EVM', 'E295', true),
      this.get_token('AVAX', 'Avalanche C-Chain', 'E305'),
      this.get_token('FRA', 'Findora', 'E315'),
      this.get_token('FDX', '5Dax', 'E325'),
      this.get_token('ROSE', 'Oasis Emerald', 'E335', true),
      this.get_token('OZO', 'Ozone Chain', 'E345'),
      this.get_token('PIX', 'Pixie', 'E355'),
      this.get_token('REI', 'Rei Network', 'E365'),
      this.get_token('KLAY', 'Klaytn Mainnet', 'E375', true),
      this.get_token('MNT', 'Mantle', 'E385'),
      this.get_token('PLS', 'Pulse Chain', 'E395'),
      this.get_token('CANTO', 'Canto', 'E405'),
      this.get_token('EOS', 'EOS EVM', 'E415'),
      this.get_token('IOTX', 'IoTeX', 'E425'),
      this.get_token('SGB', 'Songbird Canary', 'E435'),
      this.get_token('ULX', 'Ultron Mainnet', 'E445'),
      this.get_token('CET', 'CoinEx Smart Chain', 'E455'),
      this.get_token('TFUEL', 'Theta Mainnet', 'E465'),
      this.get_token('FITFI', 'Step Network', 'E475'),
      this.get_token('EWT', 'Energy Web Chain', 'E485'),
      this.get_token('CLO', 'Callisto', 'E495', true),
      this.get_token('SDN', 'Shiden', 'E505'),
      this.get_token('TENET', 'Tenet', 'E515'),
      this.get_token('UBQ', 'Ubiq', 'E525'),
      this.get_token('GO', 'GoChain', 'E535'),
      this.get_token('OMAX', 'Omax Mainnet', 'E545'),
      this.get_token('WEMIX', 'Wemix3.0 Mainnet', 'E555'),
      this.get_token('CFX', 'Conflux eSpace', 'E565'),
      this.get_token('TLOS', 'Telos EVM', 'E575'),
      this.get_token('RSK', 'RSK Mainnet', 'E585'),
      this.get_token('META', 'Metadium', 'E595'),
      this.get_token('KAI', 'Kardiachain', 'E605'),
      this.get_token('CMP', 'Caduceus', 'E615'),
      this.get_token('SEELE', 'Seele', 'E625'),
      this.get_token('BTT', 'BitTorrent Chain', 'E635'),
      this.get_token('AAC', 'Double-A Chain', 'E645'),
      this.get_token('KAR', 'Karura EVM', 'E655'),
      this.get_token('ACA', 'Acala EVM', 'E665', true),
      this.get_token('EDG', 'Edgeware EVM', 'E675', true),
      this.get_token('BERG', 'Bloxberg', 'E685', true),
      this.get_token('PHOENIX', 'Phoenix', 'E695'),
      this.get_token('OMC', 'Omchain', 'E705'),
      this.get_token('OM', 'Om', 'E715'),
      this.get_token('MINTME', 'MintMe.com', 'E725'),
      this.get_token('ECS', 'eCredits', 'E735'),
      this.get_token('ELV', 'Eluv.io', 'E745'),
      this.get_token('ETHO', 'Etho Protocol', 'E755'),
      this.get_token('OLT', 'One Ledger', 'E765'),
      this.get_token('HBAR', 'Hedera Hashgraph', 'E775', true),
      this.get_token('IOTA', 'IOTA EVM', 'E785'),
      this.get_token('KAIA', 'KAIA', 'E795'),
      this.get_token('S', 'Sonic', 'E805'),
      this.get_token('BERA', 'Berachain', 'E815'),
      this.get_token('NRG', 'Energi', 'E825', true),
      this.get_token('HYPE', 'HyperEVM', 'E835'),
      this.get_token('XRP', 'XRPL', 'E845'),
      this.get_token('ABETH', 'Abstract', 'E855'),
      this.get_token('APE', 'ApeChain', 'E865'),
      this.get_token('BIBTC', 'Bitlayer', 'E875'),
      this.get_token('BLETH', 'Blast', 'E885'),
      this.get_token('BOETH', 'Bob', 'E895'),
      this.get_token('BOBTC', 'Botanix', 'E905'),
      this.get_token('BSBTC', 'Bsquared', 'E915'),
      this.get_token('CORE', 'Core', 'E925'),
      this.get_token('BTCN', 'Corn', 'E935'),
      this.get_token('XTZ', 'Etherlink', 'E945'),
      this.get_token('FRAX', 'Fraxtal', 'E955'),
      this.get_token('HSK', 'HashKey', 'E965'),
      this.get_token('HETH', 'Hemi', 'E975'),
      this.get_token('IETH', 'Ink', 'E985'),
      this.get_token('GHO', 'lens', 'E995'),
      this.get_token('LETH', 'Linea', 'E1005'),
      this.get_token('LIETH', 'Lisk', 'E1015'),
      this.get_token('MBTC', 'Merlin', 'E1025'),
      this.get_token('METH', 'Metal', 'E1035'),
      this.get_token('METIS', 'Metis', 'E1045'),
      this.get_token('MIETH', 'Mind Network', 'E1055'),
      this.get_token('MINETH', 'Mint', 'E1065'),
      this.get_token('MOETH', 'Mode', 'E1075'),
      this.get_token('GAS', 'Neo X', 'E1085'),
      this.get_token('OBNB', 'opBNB', 'E1095'),
      this.get_token('PLUME', 'Plume', 'E1105'),
      this.get_token('KETH', 'Katana', 'E1115'),
      this.get_token('PETH', 'Polygon zkEVM', 'E1125'),
      this.get_token('RON', 'Ronin', 'E1135'),
      this.get_token('SETH', 'Scroll', 'E1145'),
      this.get_token('BONE', 'Shibarium', 'E1155'),
      this.get_token('SONETH', 'Soneium', 'E1165'),
      this.get_token('SUETH', 'Superseed', 'E1175'),
      this.get_token('TETH', 'Taiko Alethia', 'E1185'),
      this.get_token('MAGIC', 'Treasure', 'E1195'),
      this.get_token('UETH', 'Unichain', 'E1205'),
      this.get_token('WOETH', 'World Chain', 'E1215'),
      this.get_token('OKB', 'X Layer', 'E1225'),
      this.get_token('OKT', 'OKTC', 'E1235'),
      this.get_token('ZETH', 'Zircuit', 'E1245'),
      this.get_token('ZKETH', 'ZKsync Era', 'E1255'),
      this.get_token('zkCRO', 'Cronos zkEVM', 'E1265'),
      this.get_token('ZERETH', 'ZERϴ Network', 'E1275'),
      this.get_token('SOPH', 'Sophon', 'E1285'),
      this.get_token('MAETH', 'Manta Pacific', 'E1295')
    ]

    return list
  }

  get_token(ticker, name, e5, disabled){
    if(disabled !== null && disabled === true) return {symbol: ticker, name: name, e5: e5, disabled: true};
    else return {symbol: ticker, name: name, e5: e5, disabled: false};
  }

  get_coin_data(){
    var list = {
        'BTC': this.get_coin_info('BTC', 'Bitcoin', bitcoin_logo, 'satoshi', 8, 100_000_000, 'UTXO', 'Proof Of Work', '10 min.', this.get_time_difference(1231006505), 3, 1),

        'BCH': this.get_coin_info('BCH', 'Bitcoin Cash', bitcoincash_logo, 'satoshi', 8, 100_000_000, 'UTXO','Proof Of Work','10 min.', this.get_time_difference(1231006505), 60, 32),

        'LTC': this.get_coin_info('LTC', 'Litecoin', litecoin_logo, 'litoshi', 8, 100_000_000, 'UTXO','Proof Of Work', '2.5 min.', this.get_time_difference(1317972665), 56, 1),

        'DOGE': this.get_coin_info('DOGE', 'Dogecoin', dogecoin_logo, 'koinu', 8, 100_000_000, 'UTXO','Proof Of Work', '1 min.', this.get_time_difference(1386338512), 30, 1),

        'DASH': this.get_coin_info('DASH', 'Dash', dash_logo, 'duff', 8, 100_000_000, 'UTXO','Proof Of Work', '2.5 min.', this.get_time_difference(1390083000), 56, 2),

        'TRX': this.get_coin_info('TRX', 'Tron', tron_logo, 'sun', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Delegated Proof Of Stake', '3 sec.', this.get_time_difference(1529885280), 2000, 1),
        
        'XRP': this.get_coin_info('XRP', 'Xrp', xrp_logo, 'drops', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Ripple Protocol Consensus Algorithm', '5 sec.', this.get_time_difference(1338672000), 1500, '~~~'),

        'XLM': this.get_coin_info('XLM', 'Stellar', stellar_logo, 'stroop', 7, 10_000_000, this.getLocale()['2916']/* Accounting' */, 'Stellar Consensus Protocol ', '5 sec.', this.get_time_difference(1406780800), 1000, '~~~'),

        // 'DOT': this.get_coin_info('DOT', 'Polkadot', polkadot_logo, 'planck', 10, 10_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Nominated Proof of Stake', '6 sec.', this.get_time_difference(1590480213), 1000, '~~~'),

        // 'KSM': this.get_coin_info('KSM', 'Kusama', kusama_logo, 'planck', 12, 1_000_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Nominated Proof of Stake', '6 sec.', this.get_time_difference(1566096000), 1000, '~~~'),

        'ALGO': this.get_coin_info('ALGO', 'Algorand', algorand_logo, '𝜇algo', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Pure Proof of Stake', '4.5 sec.', this.get_time_difference(1560902400), 1000, 5),

        'XTZ': this.get_coin_info('XTZ', 'Tezos', tezos_logo, 'mutez', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Liquid Proof of Stake', '30 sec.', this.get_time_difference(1537161600), 40, 1),

        'ATOM': this.get_coin_info('ATOM', 'Cosmos', cosmos_logo, 'uATOM', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Delegated Proof of Stake', '10 sec.', this.get_time_difference(1552521600), 1000, '~~~'),

        'FIL': this.get_coin_info('FIL', 'Filecoin', filecoin_logo, 'attoFIL', 18, 1_000_000_000_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof of Spacetime & Proof of Replication', '50 sec.', this.get_time_difference(1602729600), 7, '~~~'),

        'SOL': this.get_coin_info('SOL', 'Solana',solana_logo, 'lamport', 9, 1_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof of Stake & Proof of History', '0.4 sec.', this.get_time_difference(1584372000),65_000, 2 ),

        'APT': this.get_coin_info('APT', 'Aptos', aptos_logo, 'octa', 8, 100_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof Of Stake', '0.21 sec.', this.get_time_difference(1665532800), 160_000, '~~~'),

        // 'ADA': this.get_coin_info('ADA', 'Cardano', cardano_logo, 'lovelace', 6, 1_000_000, 'UTXO', 'Proof Of Stake', '20 sec.', this.get_time_difference(1506203091), 10, 0.088),

        'STX': this.get_coin_info('STX', 'Stacks', stacks_logo, 'microSTX', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof Of Transfer', '10 sec.', this.get_time_difference(1610641813), 10, '~~~'),

        'AR': this.get_coin_info('AR', 'Arweave', arweave_logo, 'winston', 12, 1_000_000_000_000, this.getLocale()['2916']/* Accounting' */, 'Succinct Proof of Random Access', '2 min.', this.get_time_difference(1528473343), 5, '~~~'),

        'SUI': this.get_coin_info('SUI', 'Sui', sui_logo, 'mist', 9, 1_000_000_000, this.getLocale()['2927k']/* Object-Based' */, 'Delegated Proof Of Stake', '0.4 sec.', this.get_time_difference(1683115200), 100_000, '~~~'),

        'TIA': this.get_coin_info('TIA', 'Celestia', celestia_logo, 'uTIA', 6, 1_000_000, this.getLocale()['2916']/* Accounting' */, 'Proof of Stake', '6 sec.', this.get_time_difference(1698760800), 1300, 2),
    }
    return list
  }

  get_coin_info(symbol, name, image_url, base_unit, decimals, conversion, account_type, consensus_mechanism, block_time, ledger_age, throughput, block_size){
    return{
      'name':name,
      'id':symbol,
      'symbol':symbol,
      'base_unit':base_unit,
      'decimals':decimals,
      'conversion':conversion,
      'label':{'title':symbol, 'details':name, 'size':'l', 'image': image_url},
      'banner-icon':{'header':symbol, 'subtitle':name, 'image':image_url},
      'tags':{'active_tags':[name, 'Coin', symbol], 'index_option':'indexed'},
      'account_type':account_type,
      'consensus_mechanism':consensus_mechanism,
      'block_time':block_time,
      'ledger_age':ledger_age,
      'throughput':throughput,
      'block_size':block_size
    }
  }

  get_default_addresses(){
    var default_addresses = [
        '5VH6APQQOWDXWHQGYH3UJHX4MFTL6IGJHMHXS5LIZPO4DG5UVTRKE63PNQ',
        '1GNvmBVCFhQasLkfM6BsFtgxPuUpECvUBa',
        '1M1X8gy9n1z3n22Ddksgn1kM6JAuz65L5x',
        'cosmos18tux8kpx82v6z0p9mgc6s6kym352486lyd7av9',
        'XsRwNDdfTMiYM6A7HbSLMujZbSPh3xkhy2',
        'DA88P2NRpG4rLsJ1knGVaunFGsDC92oPAe',
        'f1jv3rl3ogw3tvb67wzvqvrott6icfhavh6uopeca',
        'FMXGHcdqYH9NnJcPWgZAh8rHWLEu3xozJqjFypvWQDquLAE',
        'LXeHJfiDG39XPaK8eT3WGvQetehnmg4Hfn',
        '13nCkJXq4xXh4fVgaSvWQtbzzY3enghmcRjU2cYKah2sLn2k',
        'GDWU7YB6CB2YO6Y6A3A7ORE67RQWNPZAZE5Q66LVNDF53QM3WSWOFXLF',
        'tz1UF8y8MmpLbsTKwMZUaoHqvjrjaT4p4d92',
        'TEGgcyRe4GfyRRS73adfVVtTDBpUuSPXGY',
        'rpTTrdJSFrqhKuwv87MJj8egULabstELn9',
        '7KjURTEzcC96eWQDcLsZxRqo1gM3SA7dkHxFsrAYsspe',
        '0x8d8de185540f8d946b7999535d18e06c80e53ca4e47d43a852df57f2ef4f0c5d',
        'SPDDSC21KS91Y9FANB2X4T6NDRX0HRPD401EDRV2',
        'LPaDEyLV_65-koonfKiay_DU8Ti2nEZU6GU56bb1C_U',
        '0x9abd642fd75a4dfd26bbc3c3d39d38776336df5adb204355864caebd17e169d3',
        'celestia18tux8kpx82v6z0p9mgc6s6kym352486l480dkg',
    ]
    return default_addresses
  }

  /* gets a formatted time diffrence from now to a given time */
  get_time_difference(time){
      var number_date = Math.round(parseInt(time));
      var now = Math.round(new Date().getTime()/1000);

      var diff = now - number_date;
      return this.get_time_diff(diff)
  }

  get_time_diff(diff){
    if(diff < 60){//less than 1 min
        var num = diff
        var s = num > 1 ? 's': '';
        return num+ this.getLocale()['29']
    }
    else if(diff < 60*60){//less than 1 hour
        var num = Math.floor(diff/(60));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['30'] 
    }
    else if(diff < 60*60*24){//less than 24 hours
        var num = Math.floor(diff/(60*60));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['31'] + s;
    }
    else if(diff < 60*60*24*7){//less than 7 days
        var num = Math.floor(diff/(60*60*24));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['32'] + s;
    }
    else if(diff < 60*60*24*7*53){//less than 1 year
        var num = Math.floor(diff/(60*60*24*7));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['33'] + s;
    }
    else {//more than a year
        var num = Math.floor(diff/(60*60*24*7*53));
        var s = num > 1 ? 's': '';
        return num + this.getLocale()['34'] + s;
    }
  }

  get_supported_languages(){
    return [
      {
          "code": "ab",
          "name": "Abkhaz",
          "nativeName": "аҧсуа"
      },
      {
          "code": "aa",
          "name": "Afar",
          "nativeName": "Afaraf"
      },
      {
          "code": "af",
          "name": "Afrikaans",
          "nativeName": "Afrikaans"
      },
      {
          "code": "ak",
          "name": "Akan",
          "nativeName": "Akan"
      },
      {
          "code": "sq",
          "name": "Albanian",
          "nativeName": "Shqip"
      },
      {
          "code": "am",
          "name": "Amharic",
          "nativeName": "አማርኛ"
      },
      {
          "code": "ar",
          "name": "Arabic",
          "nativeName": "العربية"
      },
      {
          "code": "an",
          "name": "Aragonese",
          "nativeName": "Aragonés"
      },
      {
          "code": "hy",
          "name": "Armenian",
          "nativeName": "Հայերեն"
      },
      {
          "code": "as",
          "name": "Assamese",
          "nativeName": "অসমীয়া"
      },
      {
          "code": "av",
          "name": "Avaric",
          "nativeName": "авар мацӀ, магӀарул мацӀ"
      },
      {
          "code": "ae",
          "name": "Avestan",
          "nativeName": "avesta"
      },
      {
          "code": "ay",
          "name": "Aymara",
          "nativeName": "aymar aru"
      },
      {
          "code": "az",
          "name": "Azerbaijani",
          "nativeName": "azərbaycan dili"
      },
      {
          "code": "bm",
          "name": "Bambara",
          "nativeName": "bamanankan"
      },
      {
          "code": "ba",
          "name": "Bashkir",
          "nativeName": "башҡорт теле"
      },
      {
          "code": "eu",
          "name": "Basque",
          "nativeName": "euskara, euskera"
      },
      {
          "code": "be",
          "name": "Belarusian",
          "nativeName": "Беларуская"
      },
      {
          "code": "bn",
          "name": "Bengali",
          "nativeName": "বাংলা"
      },
      {
          "code": "bh",
          "name": "Bihari",
          "nativeName": "भोजपुरी"
      },
      {
          "code": "bi",
          "name": "Bislama",
          "nativeName": "Bislama"
      },
      {
          "code": "bs",
          "name": "Bosnian",
          "nativeName": "bosanski jezik"
      },
      {
          "code": "br",
          "name": "Breton",
          "nativeName": "brezhoneg"
      },
      {
          "code": "bg",
          "name": "Bulgarian",
          "nativeName": "български език"
      },
      {
          "code": "my",
          "name": "Burmese",
          "nativeName": "ဗမာစာ"
      },
      {
          "code": "ca",
          "name": "Catalan; Valencian",
          "nativeName": "Català"
      },
      {
          "code": "ch",
          "name": "Chamorro",
          "nativeName": "Chamoru"
      },
      {
          "code": "ce",
          "name": "Chechen",
          "nativeName": "нохчийн мотт"
      },
      {
          "code": "ny",
          "name": "Chichewa; Chewa; Nyanja",
          "nativeName": "chiCheŵa, chinyanja"
      },
      {
          "code": "zh",
          "name": "Chinese",
          "nativeName": "中文 (Zhōngwén), 汉语, 漢語"
      },
      {
          "code": "cv",
          "name": "Chuvash",
          "nativeName": "чӑваш чӗлхи"
      },
      {
          "code": "kw",
          "name": "Cornish",
          "nativeName": "Kernewek"
      },
      {
          "code": "co",
          "name": "Corsican",
          "nativeName": "corsu, lingua corsa"
      },
      {
          "code": "cr",
          "name": "Cree",
          "nativeName": "ᓀᐦᐃᔭᐍᐏᐣ"
      },
      {
          "code": "hr",
          "name": "Croatian",
          "nativeName": "hrvatski"
      },
      {
          "code": "cs",
          "name": "Czech",
          "nativeName": "česky, čeština"
      },
      {
          "code": "da",
          "name": "Danish",
          "nativeName": "dansk"
      },
      {
          "code": "dv",
          "name": "Divehi; Dhivehi; Maldivian;",
          "nativeName": "ދިވެހި"
      },
      {
          "code": "nl",
          "name": "Dutch",
          "nativeName": "Nederlands, Vlaams"
      },
      {
          "code": "en",
          "name": "English",
          "nativeName": "English"
      },
      {
          "code": "eo",
          "name": "Esperanto",
          "nativeName": "Esperanto"
      },
      {
          "code": "et",
          "name": "Estonian",
          "nativeName": "eesti, eesti keel"
      },
      {
          "code": "ee",
          "name": "Ewe",
          "nativeName": "Eʋegbe"
      },
      {
          "code": "fo",
          "name": "Faroese",
          "nativeName": "føroyskt"
      },
      {
          "code": "fj",
          "name": "Fijian",
          "nativeName": "vosa Vakaviti"
      },
      {
          "code": "fi",
          "name": "Finnish",
          "nativeName": "suomi, suomen kieli"
      },
      {
          "code": "fr",
          "name": "French",
          "nativeName": "français, langue française"
      },
      {
          "code": "ff",
          "name": "Fula; Fulah; Pulaar; Pular",
          "nativeName": "Fulfulde, Pulaar, Pular"
      },
      {
          "code": "gl",
          "name": "Galician",
          "nativeName": "Galego"
      },
      {
          "code": "ka",
          "name": "Georgian",
          "nativeName": "ქართული"
      },
      {
          "code": "de",
          "name": "German",
          "nativeName": "Deutsch"
      },
      {
          "code": "el",
          "name": "Greek, Modern",
          "nativeName": "Ελληνικά"
      },
      {
          "code": "gn",
          "name": "Guaraní",
          "nativeName": "Avañeẽ"
      },
      {
          "code": "gu",
          "name": "Gujarati",
          "nativeName": "ગુજરાતી"
      },
      {
          "code": "ht",
          "name": "Haitian; Haitian Creole",
          "nativeName": "Kreyòl ayisyen"
      },
      {
          "code": "ha",
          "name": "Hausa",
          "nativeName": "Hausa, هَوُسَ"
      },
      {
          "code": "he",
          "name": "Hebrew (modern)",
          "nativeName": "עברית"
      },
      {
          "code": "hz",
          "name": "Herero",
          "nativeName": "Otjiherero"
      },
      {
          "code": "hi",
          "name": "Hindi",
          "nativeName": "हिन्दी, हिंदी"
      },
      {
          "code": "ho",
          "name": "Hiri Motu",
          "nativeName": "Hiri Motu"
      },
      {
          "code": "hu",
          "name": "Hungarian",
          "nativeName": "Magyar"
      },
      {
          "code": "ia",
          "name": "Interlingua",
          "nativeName": "Interlingua"
      },
      {
          "code": "id",
          "name": "Indonesian",
          "nativeName": "Bahasa Indonesia"
      },
      {
          "code": "ie",
          "name": "Interlingue",
          "nativeName": "Originally called Occidental; then Interlingue after WWII"
      },
      {
          "code": "ga",
          "name": "Irish",
          "nativeName": "Gaeilge"
      },
      {
          "code": "ig",
          "name": "Igbo",
          "nativeName": "Asụsụ Igbo"
      },
      {
          "code": "ik",
          "name": "Inupiaq",
          "nativeName": "Iñupiaq, Iñupiatun"
      },
      {
          "code": "io",
          "name": "Ido",
          "nativeName": "Ido"
      },
      {
          "code": "is",
          "name": "Icelandic",
          "nativeName": "Íslenska"
      },
      {
          "code": "it",
          "name": "Italian",
          "nativeName": "Italiano"
      },
      {
          "code": "iu",
          "name": "Inuktitut",
          "nativeName": "ᐃᓄᒃᑎᑐᑦ"
      },
      {
          "code": "ja",
          "name": "Japanese",
          "nativeName": "日本語 (にほんご／にっぽんご)"
      },
      {
          "code": "jv",
          "name": "Javanese",
          "nativeName": "basa Jawa"
      },
      {
          "code": "kl",
          "name": "Kalaallisut, Greenlandic",
          "nativeName": "kalaallisut, kalaallit oqaasii"
      },
      {
          "code": "kn",
          "name": "Kannada",
          "nativeName": "ಕನ್ನಡ"
      },
      {
          "code": "kr",
          "name": "Kanuri",
          "nativeName": "Kanuri"
      },
      {
          "code": "ks",
          "name": "Kashmiri",
          "nativeName": "कश्मीरी, كشميري‎"
      },
      {
          "code": "kk",
          "name": "Kazakh",
          "nativeName": "Қазақ тілі"
      },
      {
          "code": "km",
          "name": "Khmer",
          "nativeName": "ភាសាខ្មែរ"
      },
      {
          "code": "ki",
          "name": "Kikuyu, Gikuyu",
          "nativeName": "Gĩkũyũ"
      },
      {
          "code": "rw",
          "name": "Kinyarwanda",
          "nativeName": "Ikinyarwanda"
      },
      {
          "code": "ky",
          "name": "Kirghiz, Kyrgyz",
          "nativeName": "кыргыз тили"
      },
      {
          "code": "kv",
          "name": "Komi",
          "nativeName": "коми кыв"
      },
      {
          "code": "kg",
          "name": "Kongo",
          "nativeName": "KiKongo"
      },
      {
          "code": "ko",
          "name": "Korean",
          "nativeName": "한국어 (韓國語), 조선말 (朝鮮語)"
      },
      {
          "code": "ku",
          "name": "Kurdish",
          "nativeName": "Kurdî, كوردی‎"
      },
      {
          "code": "kj",
          "name": "Kwanyama, Kuanyama",
          "nativeName": "Kuanyama"
      },
      {
          "code": "la",
          "name": "Latin",
          "nativeName": "latine, lingua latina"
      },
      {
          "code": "lb",
          "name": "Luxembourgish, Letzeburgesch",
          "nativeName": "Lëtzebuergesch"
      },
      {
          "code": "lg",
          "name": "Luganda",
          "nativeName": "Luganda"
      },
      {
          "code": "li",
          "name": "Limburgish, Limburgan, Limburger",
          "nativeName": "Limburgs"
      },
      {
          "code": "ln",
          "name": "Lingala",
          "nativeName": "Lingála"
      },
      {
          "code": "lo",
          "name": "Lao",
          "nativeName": "ພາສາລາວ"
      },
      {
          "code": "lt",
          "name": "Lithuanian",
          "nativeName": "lietuvių kalba"
      },
      {
          "code": "lu",
          "name": "Luba-Katanga",
          "nativeName": ""
      },
      {
          "code": "lv",
          "name": "Latvian",
          "nativeName": "latviešu valoda"
      },
      {
          "code": "gv",
          "name": "Manx",
          "nativeName": "Gaelg, Gailck"
      },
      {
          "code": "mk",
          "name": "Macedonian",
          "nativeName": "македонски јазик"
      },
      {
          "code": "mg",
          "name": "Malagasy",
          "nativeName": "Malagasy fiteny"
      },
      {
          "code": "ms",
          "name": "Malay",
          "nativeName": "bahasa Melayu, بهاس ملايو‎"
      },
      {
          "code": "ml",
          "name": "Malayalam",
          "nativeName": "മലയാളം"
      },
      {
          "code": "mt",
          "name": "Maltese",
          "nativeName": "Malti"
      },
      {
          "code": "mi",
          "name": "Māori",
          "nativeName": "te reo Māori"
      },
      {
          "code": "mr",
          "name": "Marathi (Marāṭhī)",
          "nativeName": "मराठी"
      },
      {
          "code": "mh",
          "name": "Marshallese",
          "nativeName": "Kajin M̧ajeļ"
      },
      {
          "code": "mn",
          "name": "Mongolian",
          "nativeName": "монгол"
      },
      {
          "code": "na",
          "name": "Nauru",
          "nativeName": "Ekakairũ Naoero"
      },
      {
          "code": "nv",
          "name": "Navajo, Navaho",
          "nativeName": "Diné bizaad, Dinékʼehǰí"
      },
      {
          "code": "nb",
          "name": "Norwegian Bokmål",
          "nativeName": "Norsk bokmål"
      },
      {
          "code": "nd",
          "name": "North Ndebele",
          "nativeName": "isiNdebele"
      },
      {
          "code": "ne",
          "name": "Nepali",
          "nativeName": "नेपाली"
      },
      {
          "code": "ng",
          "name": "Ndonga",
          "nativeName": "Owambo"
      },
      {
          "code": "nn",
          "name": "Norwegian Nynorsk",
          "nativeName": "Norsk nynorsk"
      },
      {
          "code": "no",
          "name": "Norwegian",
          "nativeName": "Norsk"
      },
      {
          "code": "ii",
          "name": "Nuosu",
          "nativeName": "ꆈꌠ꒿ Nuosuhxop"
      },
      {
          "code": "nr",
          "name": "South Ndebele",
          "nativeName": "isiNdebele"
      },
      {
          "code": "oc",
          "name": "Occitan",
          "nativeName": "Occitan"
      },
      {
          "code": "oj",
          "name": "Ojibwe, Ojibwa",
          "nativeName": "ᐊᓂᔑᓈᐯᒧᐎᓐ"
      },
      {
          "code": "cu",
          "name": "Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic",
          "nativeName": "ѩзыкъ словѣньскъ"
      },
      {
          "code": "om",
          "name": "Oromo",
          "nativeName": "Afaan Oromoo"
      },
      {
          "code": "or",
          "name": "Oriya",
          "nativeName": "ଓଡ଼ିଆ"
      },
      {
          "code": "os",
          "name": "Ossetian, Ossetic",
          "nativeName": "ирон æвзаг"
      },
      {
          "code": "pa",
          "name": "Panjabi, Punjabi",
          "nativeName": "ਪੰਜਾਬੀ, پنجابی‎"
      },
      {
          "code": "pi",
          "name": "Pāli",
          "nativeName": "पाऴि"
      },
      {
          "code": "fa",
          "name": "Persian",
          "nativeName": "فارسی"
      },
      {
          "code": "pl",
          "name": "Polish",
          "nativeName": "polski"
      },
      {
          "code": "ps",
          "name": "Pashto, Pushto",
          "nativeName": "پښتو"
      },
      {
          "code": "pt",
          "name": "Portuguese",
          "nativeName": "Português"
      },
      {
          "code": "qu",
          "name": "Quechua",
          "nativeName": "Runa Simi, Kichwa"
      },
      {
          "code": "rm",
          "name": "Romansh",
          "nativeName": "rumantsch grischun"
      },
      {
          "code": "rn",
          "name": "Kirundi",
          "nativeName": "kiRundi"
      },
      {
          "code": "ro",
          "name": "Romanian, Moldavian, Moldovan",
          "nativeName": "română"
      },
      {
          "code": "ru",
          "name": "Russian",
          "nativeName": "русский язык"
      },
      {
          "code": "sa",
          "name": "Sanskrit (Saṁskṛta)",
          "nativeName": "संस्कृतम्"
      },
      {
          "code": "sc",
          "name": "Sardinian",
          "nativeName": "sardu"
      },
      {
          "code": "sd",
          "name": "Sindhi",
          "nativeName": "सिन्धी, سنڌي، سندھی‎"
      },
      {
          "code": "se",
          "name": "Northern Sami",
          "nativeName": "Davvisámegiella"
      },
      {
          "code": "sm",
          "name": "Samoan",
          "nativeName": "gagana faa Samoa"
      },
      {
          "code": "sg",
          "name": "Sango",
          "nativeName": "yângâ tî sängö"
      },
      {
          "code": "sr",
          "name": "Serbian",
          "nativeName": "српски језик"
      },
      {
          "code": "gd",
          "name": "Scottish Gaelic; Gaelic",
          "nativeName": "Gàidhlig"
      },
      {
          "code": "sn",
          "name": "Shona",
          "nativeName": "chiShona"
      },
      {
          "code": "si",
          "name": "Sinhala, Sinhalese",
          "nativeName": "සිංහල"
      },
      {
          "code": "sk",
          "name": "Slovak",
          "nativeName": "slovenčina"
      },
      {
          "code": "sl",
          "name": "Slovene",
          "nativeName": "slovenščina"
      },
      {
          "code": "so",
          "name": "Somali",
          "nativeName": "Soomaaliga, af Soomaali"
      },
      {
          "code": "st",
          "name": "Southern Sotho",
          "nativeName": "Sesotho"
      },
      {
          "code": "es",
          "name": "Spanish; Castilian",
          "nativeName": "español, castellano"
      },
      {
          "code": "su",
          "name": "Sundanese",
          "nativeName": "Basa Sunda"
      },
      {
          "code": "sw",
          "name": "Swahili",
          "nativeName": "Kiswahili"
      },
      {
          "code": "ss",
          "name": "Swati",
          "nativeName": "SiSwati"
      },
      {
          "code": "sv",
          "name": "Swedish",
          "nativeName": "svenska"
      },
      {
          "code": "ta",
          "name": "Tamil",
          "nativeName": "தமிழ்"
      },
      {
          "code": "te",
          "name": "Telugu",
          "nativeName": "తెలుగు"
      },
      {
          "code": "tg",
          "name": "Tajik",
          "nativeName": "тоҷикӣ, toğikī, تاجیکی‎"
      },
      {
          "code": "th",
          "name": "Thai",
          "nativeName": "ไทย"
      },
      {
          "code": "ti",
          "name": "Tigrinya",
          "nativeName": "ትግርኛ"
      },
      {
          "code": "bo",
          "name": "Tibetan Standard, Tibetan, Central",
          "nativeName": "བོད་ཡིག"
      },
      {
          "code": "tk",
          "name": "Turkmen",
          "nativeName": "Türkmen, Түркмен"
      },
      {
          "code": "tl",
          "name": "Tagalog",
          "nativeName": "Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔"
      },
      {
          "code": "tn",
          "name": "Tswana",
          "nativeName": "Setswana"
      },
      {
          "code": "to",
          "name": "Tonga (Tonga Islands)",
          "nativeName": "faka Tonga"
      },
      {
          "code": "tr",
          "name": "Turkish",
          "nativeName": "Türkçe"
      },
      {
          "code": "ts",
          "name": "Tsonga",
          "nativeName": "Xitsonga"
      },
      {
          "code": "tt",
          "name": "Tatar",
          "nativeName": "татарча, tatarça, تاتارچا‎"
      },
      {
          "code": "tw",
          "name": "Twi",
          "nativeName": "Twi"
      },
      {
          "code": "ty",
          "name": "Tahitian",
          "nativeName": "Reo Tahiti"
      },
      {
          "code": "ug",
          "name": "Uighur, Uyghur",
          "nativeName": "Uyƣurqə, ئۇيغۇرچە‎"
      },
      {
          "code": "uk",
          "name": "Ukrainian",
          "nativeName": "українська"
      },
      {
          "code": "ur",
          "name": "Urdu",
          "nativeName": "اردو"
      },
      {
          "code": "uz",
          "name": "Uzbek",
          "nativeName": "zbek, Ўзбек, أۇزبېك‎"
      },
      {
          "code": "ve",
          "name": "Venda",
          "nativeName": "Tshivenḓa"
      },
      {
          "code": "vi",
          "name": "Vietnamese",
          "nativeName": "Tiếng Việt"
      },
      {
          "code": "vo",
          "name": "Volapük",
          "nativeName": "Volapük"
      },
      {
          "code": "wa",
          "name": "Walloon",
          "nativeName": "Walon"
      },
      {
          "code": "cy",
          "name": "Welsh",
          "nativeName": "Cymraeg"
      },
      {
          "code": "wo",
          "name": "Wolof",
          "nativeName": "Wollof"
      },
      {
          "code": "fy",
          "name": "Western Frisian",
          "nativeName": "Frysk"
      },
      {
          "code": "xh",
          "name": "Xhosa",
          "nativeName": "isiXhosa"
      },
      {
          "code": "yi",
          "name": "Yiddish",
          "nativeName": "ייִדיש"
      },
      {
          "code": "yo",
          "name": "Yoruba",
          "nativeName": "Yorùbá"
      },
      {
          "code": "za",
          "name": "Zhuang, Chuang",
          "nativeName": "Saɯ cueŋƅ, Saw cuengh"
      }
    ]
  }

  get_default_logo_title(){
    var item = localStorage.getItem("logo_title");
    if(item == null){
      return 'start-white'
    }else{
      return item
    }
  }

  get_default_dark_emblem_country(){
    var item = localStorage.getItem("selected_dark_emblem_country")
    if(item == null){
      return ''
    }else{
      return item
    }
  }










  constructor(props) {
    super(props);
    this.homepage = React.createRef();
    this.send_receive_ether_page = React.createRef();
    this.wiki_page = React.createRef();
    this.new_contract_page = React.createRef();
    this.new_token_page = React.createRef();
    this.new_subscription_page = React.createRef();
    this.new_post_page = React.createRef();
    this.new_channel_page = React.createRef();
    this.new_job_page = React.createRef();
    this.new_storefront_page = React.createRef();
    this.new_storefront_item_page = React.createRef();

    this.new_mint_dump_token_page = React.createRef();
    this.new_transfer_token_page = React.createRef();
    this.enter_contract_page = React.createRef();
    this.extend_contract_page = React.createRef();
    this.exit_contract_page = React.createRef();
    this.new_proposal_page = React.createRef();
    this.vote_proposal_page = React.createRef();
    this.submit_proposal_page = React.createRef();
    this.pay_subscription_page = React.createRef();
    this.cancel_subscription_page = React.createRef();
    this.collect_subscription_page = React.createRef();
    this.modify_subscription_page = React.createRef();
    this.modify_contract_page = React.createRef();
    this.modify_token_page = React.createRef();
    this.exchange_transfer_page = React.createRef();
    this.force_exit_page = React.createRef();
    this.archive_proposal_page = React.createRef();
    this.freeze_unfreeze_page = React.createRef();
    this.authmint_page = React.createRef();
    this.moderator_page = React.createRef();
    this.new_mail_page = React.createRef();
    this.respond_to_job_page = React.createRef();
    this.view_application_contract_page = React.createRef();
    this.view_transaction_page = React.createRef();
    this.view_transaction_log_page = React.createRef();
    this.add_to_bag_page = React.createRef();
    this.fulfil_bag_page = React.createRef();
    this.view_bag_application_contract_page = React.createRef();
    this.direct_purchase_page = React.createRef();
    this.clear_purchase_page = React.createRef();
    this.scan_code_page = React.createRef();
    this.new_contractor_page = React.createRef()
    this.send_job_request_page = React.createRef();
    this.view_job_request_page = React.createRef();
    this.view_job_request_contract_page = React.createRef();
    this.withdraw_ether_page = React.createRef();

    this.edit_job_page = React.createRef();
    this.edit_token_page = React.createRef();
    this.edit_post_page = React.createRef();
    this.edit_channel_page = React.createRef();
    this.edit_storefront_page = React.createRef()
    this.edit_contractor_page = React.createRef();
    this.edit_poll_page = React.createRef();

    this.give_award_page = React.createRef();
    this.add_comment_page = React.createRef();
    this.stack_page = React.createRef();
    this.depthmint_page = React.createRef();
    this.searched_account_page = React.createRef();
    this.rpc_settings_page = React.createRef();
    this.confirm_run_page = React.createRef();
    this.edit_proposal_page = React.createRef();
    this.successful_send_page = React.createRef();
    this.view_number_page = React.createRef();
    this.stage_royalties_page = React.createRef();
    this.view_staged_royalties_page = React.createRef();
    this.dialog_page = React.createRef();
    this.pay_upcoming_subscriptions_page = React.createRef();
    this.send_receive_coin_page = React.createRef();
    this.pick_file_page = React.createRef();
    this.new_audio_page = React.createRef();
    this.buy_album_page = React.createRef();
    this.edit_audiopost_page = React.createRef();
    this.pdf_viewer_wrapper = React.createRef();

    this.audio_pip_page = React.createRef();
    this.full_audio_page = React.createRef();
    this.add_to_playlist_page = React.createRef();
    this.new_video_page = React.createRef();
    this.buy_video_page = React.createRef();
    this.edit_videopost_page = React.createRef();
    this.full_video_page = React.createRef();
    this.buy_nitro_storage_page = React.createRef();

    this.new_nitro_page = React.createRef();
    this.edit_nitropost_page = React.createRef();
    this.configure_nitro_node_page = React.createRef();
    this.remoteStream = React.createRef();
    this.dialer_page = React.createRef();
    this.view_notification_log_page = React.createRef();
    this.view_contextual_transfer_page = React.createRef();
    this.new_poll_page = React.createRef();
    this.view_vote_poll_page = React.createRef();
    this.view_calculate_poll_result_page = React.createRef();
    this.view_stage_creator_payout_result_page = React.createRef();
    this.view_bid_in_auction_page = React.createRef();

    this.focused_page = this.getLocale()['1196']/* 'jobs' */
    this.has_gotten_contracts = false;
    this.prioritized_accounts = []
    this.has_my_followed_accounts_loaded = {}
    this.has_posts_blocked_by_me_loaded = {}
    this.has_censored_keywords_by_me_loaded = {}
    this.has_promoted_posts_by_me_loaded = {}
    this.alias_data = {}

    this.gateway_traffic_cache_pointers = {}
    this.gateway_traffic_cache_pointers_index = 0
  }

  componentDidMount() {
    console.log("mounted", 'os version: ', iOS());
    
    /* listens for when the window is resized */
    window.addEventListener("resize", this.resize.bind(this));
    this.resize();

    /* var me = this;
    setTimeout(function() {
  
    }, (1 * 500)); */

    var me = this;
    setTimeout(function() {
      me.start_everything();
    }, (1 * 500));

    var me = this;
    setTimeout(function() {
      if(me.state.syncronizing_progress < 5 && me.is_allowed_in_e5()){
        // me.prompt_top_notification(me.getLocale()['2738c']/* 'Bad Connection.' */, 15000)
      }
    }, (40 * 1000));

    // this.test_nft_storage()
  }

  start_everything = async () => {
    // this.test_beacon_node()
    // this.test_infura()
    // this.test_key_hasher()
    await this.load_cookies();
    this.load_cookies2()
    var me = this;
    setTimeout(function() {
      me.load_e5_data();
      me.reset_background_sync()

      me.get_key()
      me.init_db()
    }, (1 * 1000));
  }

  test_key_hasher = async () => {
    console.log('base64', 'attempting...')
    const web3 = new Web3(this.get_selected_web3_url());
    var hash = web3.utils.keccak256('eeeeeeeeeee').slice(34)
    var private_key_to_use = Buffer.from(hash)
    const publicKeyA = await ecies.getPublic(private_key_to_use);
    var base64 = this.uint8ToBase64(new Uint8Array(publicKeyA))
    console.log('base64', base64)
  }

  test_beacon_node = async () => {
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    var arg_obj = {title: 'faucet', target_type: 17}
    const params = new URLSearchParams({
      arg_string: JSON.stringify(arg_obj)
    });
    var request = `${beacon_node}/title?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('apppage', response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('apppage', 'title search result', obj)
    }
    catch(e){
      console.log('apppage', e)
    }

    var arg_obj2 = {tags: ['repair'], target_type: 17}
    const params2 = new URLSearchParams({
      arg_string: JSON.stringify(arg_obj2)
    });
    var request2 = `${beacon_node}/tags?${params2.toString()}`
    try{
      const response = await fetch(request2);
      if (!response.ok) {
        console.log('apppage', response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('apppage', 'tags search result', obj)
    }
    catch(e){
      console.log('apppage', e)
    }
  }

  test_infura = async () => {
    const projectId = `${process.env.REACT_APP_INFURA_API_KEY}`;
    const projectSecret = `${process.env.REACT_APP_INFURA_API_SECRET}`;
    const auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');
    const client = create({
      host: 'ipfs.infura.io',
      port: 5001,
      protocol: 'https',
      apiPath: '/api/v0',
      headers: {
        authorization: auth,
      }
    })

    try {
      const added = await client.add('hello world')
      console.log('infura','hello world', added.path.toString())
    } catch (error) {
      console.log('Error uploading file: ', error)
    }
  }

  test_nft_storage = async () => {
    var cid = await this.store_data_in_nft_storage('hello world', true)
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('----------------------------------------------------------')
    console.log('nft_storage_cid', cid)
  }

  componentWillUnmount() {
    console.log("unmounted");
    window.removeEventListener("resize", this.resize.bind(this));

    if(this.interval != null)clearInterval(this.interval);
    if(this.interval2 != null) clearInterval(this.interval2)
    if(this.interval3 != null) clearInterval(this.interval3)
    if(this.interval4 != null) clearInterval(this.interval4)

    this.set_cookies()
  }

  reset_background_sync(){
    if(this.interval != null)clearInterval(this.interval);
    if(this.interval2 != null) clearInterval(this.interval2)
    if(this.interval3 != null) clearInterval(this.interval3)
    if(this.interval4 != null) clearInterval(this.interval4)
    if(this.interval5 != null) clearInterval(this.interval5)
    
    var obj = {'sluggish':1000_000, 'slow':500_000, 'average':290_000, 'fast':90_000}
    obj[this.getLocale()['1421']/* sluggish */] = 1000_000
    obj[this.getLocale()['1422']/* slow */] = 500_000
    obj[this.getLocale()['1423']/* average */] = 290_000
    obj[this.getLocale()['1424']/* fast */] = 90_000

    var obj2 = {}
    obj2[this.getLocale()['1593ft']/* '2min' */] = 2*60*1000
    obj2[this.getLocale()['1593fu']/* '5min' */] = 5*60*1000
    obj2[this.getLocale()['1593fv']/* '10min' */] = 10*60*1000

    var me = this;
    setTimeout(function() {
      me.interval = setInterval(() => me.background_sync(), obj[me.state.refresh_speed]);
      me.interval2 = setInterval(() => me.start_get_accounts_data(false, true), 35_000)
      me.interval3 = setInterval(() => me.background_coin_sync(), 3*60_000)
      me.interval4 = setInterval(() => me.load_and_notify_flash(), 40_000)

      if(me.state.auto_run != 'e'){
        me.interval = setInterval(() => me.background_run(), obj2[me.state.auto_run]);
      }
    }, (1 * 100));
    
  }


  lengthInUtf8Bytes(str) {
    // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
    var m = encodeURIComponent(str).match(/%[89ABab]/g);
    return str.length + (m ? m.length : 0);
  }

  set_cookies(){
    var x = JSON.stringify(this.get_persistent_data(), (key, value) =>
            typeof value === 'bigint'
                ? value.toString()
                : value // return everything else unchanged));
    )

    var size = 0;
    if(this.state.storage_permissions == this.getLocale()['1428']/* 'enabled' */){
      this.update_data_in_db(x, '123')
      size = this.lengthInUtf8Bytes(x);
    }else{
      this.update_data_in_db('', '123')
      size = this.lengthInUtf8Bytes('')
      
      if(this.homepage.current){
        this.homepage.current?.set_cookies()
      }
    }
    localStorage.setItem('language', this.get_language())
    this.set_cookies2(size);
  }

  set_cookies2 = async (size) => {
    var x = JSON.stringify(await this.get_persistent_data2(), (key, value) =>
            typeof value === 'bigint'
                ? value.toString()
                : value // return everything else unchanged));
    )

    if(this.state.storage_permissions == this.getLocale()['1428']/* 'enabled' */){
      this.update_data_in_db(x, '5000')
      this.setState({index_db_size: size + this.lengthInUtf8Bytes(x)})
    }else{
      this.update_data_in_db('', '5000')
      this.setState({index_db_size: size + this.lengthInUtf8Bytes('')})
    }
  }



  get_persistent_data(){
    return {
      theme: this.state.theme, 
      storage_option: this.state.storage_option, 
      stack_items:this.state.stack_items, 
      selected_e5_item:this.state.selected_e5, 
      contacts:this.state.contacts, 
      should_update_contacts_onchain: this.state.should_update_contacts_onchain, 
      refresh_speed:this.state.refresh_speed, 
      masked_content: this.state.masked_content,
      blocked_accounts: this.state.blocked_accounts,
      should_update_blocked_accounts_onchain: this.state.should_update_blocked_accounts_onchain,
      content_channeling:this.state.content_channeling,
      device_language: this.state.device_language,
      job_section_tags: this.state.job_section_tags,
      explore_section_tags: this.state.explore_section_tags,
      should_update_section_tags_onchain: this.state.should_update_section_tags_onchain,
      section_tags_setting: this.state.section_tags_setting,
      visible_tabs: this.state.visible_tabs,
      storage_permissions: this.state.storage_permissions,

      added_providers: this.state.added_providers,
      selected_providers: this.get_selected_urls(),
      stack_optimizer: this.state.stack_optimizer,
      homepage_tags_position: this.state.homepage_tags_position,
      font: this.state.font,
      auto_skip_nsfw_warning: this.state.auto_skip_nsfw_warning,
      graph_type: this.state.graph_type,
      remember_account: this.state.remember_account,
      account_data: this.get_account_data_to_store(),
      coin_data:this.get_coin_data_to_store(),

      web3_account_email: this.state.web3_account_email,
      update_data_in_E5: this.state.update_data_in_E5,
      uploaded_data_cids:this.state.uploaded_data_cids,
      audio_timestamp_data: this.state.audio_timestamp_data,

      my_playlists: this.state.my_playlists,
      should_update_playlists_in_E5: this.state.should_update_playlists_in_E5,
      song_plays: this.state.song_plays,
      should_update_song_plays: this.state.should_update_song_plays,
      albums_to_stash: this.get_albums_to_stash(),
      custom_gateway: this.state.custom_gateway,
      pdf_bookmarks: this.state.pdf_bookmarks,

      video_timestamp_data:this.state.video_timestamp_data,
      my_preferred_nitro:this.state.my_preferred_nitro,
      followed_accounts: this.state.followed_accounts, 
      should_update_followed_accounts: this.state.should_update_followed_accounts,
      posts_blocked_by_me: this.state.posts_blocked_by_me, 
      should_update_posts_blocked_by_me: this.state.should_update_posts_blocked_by_me,

      censored_keyword_phrases: this.state.censored_keyword_phrases, 
      should_update_censored_keyword_phrases: this.state.should_update_censored_keyword_phrases,
      hide_pip:this.state.hide_pip,
      preferred_currency: this.state.preferred_currency,
      all_locales: this.state.all_locales,
      theme_image: this.state.theme_image,
      subscribed_nitros: this.state.subscribed_nitros,

      uncommitted_upload_cids: this.state.uncommitted_upload_cids,
      deleted_files:this.state.deleted_files,
      minified_content:this.state.minified_content,
      posts_reposted_by_me:this.state.posts_reposted_by_me,
      should_update_posts_reposted_by_me:this.state.should_update_posts_reposted_by_me,

      auto_run:this.state.auto_run,
      explore_display_type:this.state.explore_display_type,
      audiplayer_position:this.state.audiplayer_position,
      address: this.get_account_address(),
      stacked_ids: this.get_stacked_transaction_ids(),
      rating_denomination: this.state.rating_denomination,
      my_active_e5s: this.get_e5s_im_using(),
    }
  }

  get_e5s_im_using(){
    var active_e5s = []
    var wallet_e5s = []
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      if(this.state.user_account_id[e5] != null && this.state.user_account_id[e5] > 1000){
        active_e5s.push(e5)
      }
      else if(this.does_account_have_balance(e5)){
        wallet_e5s.push(e5)
      }
    }
    return active_e5s.concat(wallet_e5s)
  }

  does_account_have_balance(e5){
    if(this.state.account_balance[e5] != null && this.state.account_balance[e5]!=0){
      return true
    }
    return false
  }
  
  get_account_address(){
    if(this.state.accounts[this.state.selected_e5] != null){
      return this.state.accounts[this.state.selected_e5]
    }
  }

  get_stacked_transaction_ids(){
    var ids = []
    this.state.stack_items.forEach(transaction => {
      ids.push(transaction.id)
    });
    return ids
  }

  get_persistent_data2 = async () => {
    return {
      cached_tracks: this.get_cached_tracks_to_store(),
      cached_files: await this.get_uploaded_data_to_stash()
    }
  }

  get_selected_urls(){
    var array = this.state.e5s['data']
    var selected_array = []
    array.forEach(e5 => {
      selected_array.push([e5, this.state.e5s[e5].url])
    });
    return selected_array
  }

  load_cookies2 = async () => {
    return;
    var state = await this.load_data_from_indexdb('5000')
    
    if(state != null){
      this.setState({index_db_size: this.state.index_db_size + this.lengthInUtf8Bytes(state)})
      state = this.fetch_data(state)
    }

    if(state != null){
      var cached_tracks = state.cached_tracks
      var cached_files = state.cached_files

      if(cached_tracks != null){
        this.set_cached_tracks_data(cached_tracks)
      }

      if(cached_files != null){
        this.load_cached_files_into_memory(cached_files)
      }
    }
  }

  load_cookies = async () => {
    var state_language = localStorage.getItem("language");
    var state = await this.load_data_from_indexdb('123')
    const state_theme = this.state.theme['name']
    const my_language = this.get_language()

    if(state != null){
      this.setState({index_db_size: this.state.index_db_size + this.lengthInUtf8Bytes(state)})
      state = this.fetch_data(state)
    }
    if(state != null && state_language == my_language){
      var theme = state.theme;
      if(theme['name'] == this.getLocale()['1593a']/* 'auto' */){
        theme = this.get_theme_data(this.getLocale()['1593a']/* 'auto' */)
      }
      var stack_items = state.stack_items
      var storage_option = state.storage_option
      
      var selected_e5 = state.selected_e5_item
      var contacts = state.contacts
      var should_update_contacts_onchain = state.should_update_contacts_onchain
      var refresh_speed = state.refresh_speed
      var masked_content = state.masked_content
      var blocked_accounts = state.blocked_accounts
      var should_update_blocked_accounts_onchain = state.should_update_blocked_accounts_onchain
      var content_channeling = state.content_channeling
      var device_language = state.device_language
      var job_section_tags = state.job_section_tags
      var explore_section_tags = state.explore_section_tags
      var should_update_section_tags_onchain = state.should_update_section_tags_onchain
      var section_tags_setting = state.section_tags_setting
      var visible_tabs = state.visible_tabs
      var storage_permissions = state.storage_permissions
      var added_providers = state.added_providers
      var selected_providers = state.selected_providers

      var stack_optimizer = state.stack_optimizer
      var homepage_tags_position = state.homepage_tags_position
      var font = state.font
      var auto_skip_nsfw_warning = state.auto_skip_nsfw_warning
      var graph_type = state.graph_type
      var remember_account = state.remember_account
      var account_data = state.account_data

      var coin_data = state.coin_data
      var web3_account_email = state.web3_account_email
      var update_data_in_E5 = state.update_data_in_E5
      var uploaded_data_cids = state.uploaded_data_cids
      var audio_timestamp_data = state.audio_timestamp_data
      var my_playlists = state.my_playlists
      var should_update_playlists_in_E5 = state.should_update_playlists_in_E5

      var song_plays = state.song_plays
      var should_update_song_plays = state.should_update_song_plays
      var albums_to_stash = state.albums_to_stash
      var custom_gateway = state.custom_gateway
      var pdf_bookmarks = state.pdf_bookmarks;
      var video_timestamp_data = state.video_timestamp_data
      var my_preferred_nitro = state.my_preferred_nitro

      var followed_accounts = state.followed_accounts 
      var should_update_followed_accounts = state.should_update_followed_accounts
      var posts_blocked_by_me = state.posts_blocked_by_me
      var should_update_posts_blocked_by_me = state.should_update_posts_blocked_by_me
      var censored_keyword_phrases =  state.censored_keyword_phrases 
      var should_update_censored_keyword_phrases = state.should_update_censored_keyword_phrases

      var hide_pip = state.hide_pip
      var preferred_currency = state.preferred_currency
      var all_locales = state.all_locales
      var theme_image = state.theme_image
      var subscribed_nitros = state.subscribed_nitros
      var uncommitted_upload_cids = state.uncommitted_upload_cids
      var minified_content = state.minified_content

      var posts_reposted_by_me = state.posts_reposted_by_me
      var should_update_posts_reposted_by_me = state.should_update_posts_reposted_by_me

      var deleted_files = state.deleted_files
      var loc = (all_locales[my_language] == null ? this.state.loc : all_locales[my_language])
      if(my_language == 'en'){
        loc = this.state.loc
      }
      var auto_run = state.auto_run == null ? 'e' : state.auto_run
      var explore_display_type = state.explore_display_type == null ? this.state.explore_display_type: state.explore_display_type
      var audiplayer_position = state.audiplayer_position == null ? this.state.audiplayer_position: state.audiplayer_position

      var stack_address = stack_items.length > 0 ? state.address : null
      var stacked_ids = stack_items.length > 0 ? state.stacked_ids : null
      var rating_denomination = state.rating_denomination == null ? this.state.rating_denomination : state.rating_denomination
      this.my_active_e5s = state.my_active_e5s == null ? [] : state.my_active_e5s

      this.setState({
        theme: theme,
        stack_items: stack_items,
        storage_option: storage_option,
        selected_e5: selected_e5,
        contacts: contacts,
        should_update_contacts_onchain: should_update_contacts_onchain,
        masked_content: masked_content,
        refresh_speed: refresh_speed,
        blocked_accounts: blocked_accounts,
        should_update_blocked_accounts_onchain: should_update_blocked_accounts_onchain,
        content_channeling: content_channeling,
        device_language: device_language,
        job_section_tags: job_section_tags,
        explore_section_tags: explore_section_tags,
        should_update_section_tags_onchain: should_update_section_tags_onchain,
        section_tags_setting: section_tags_setting,
        visible_tabs: visible_tabs,
        storage_permissions: storage_permissions,
        added_providers: added_providers,
        stack_optimizer: stack_optimizer,
        homepage_tags_position: homepage_tags_position,
        font: font,
        auto_skip_nsfw_warning: auto_skip_nsfw_warning,
        graph_type: graph_type,
        remember_account: remember_account,
        coin_data: coin_data,
        web3_account_email: web3_account_email,
        update_data_in_E5: update_data_in_E5,
        uploaded_data_cids: uploaded_data_cids,
        audio_timestamp_data: audio_timestamp_data,
        my_playlists: my_playlists,
        should_update_playlists_in_E5: should_update_playlists_in_E5,
        song_plays: song_plays,
        should_update_song_plays: should_update_song_plays,
        custom_gateway: custom_gateway,
        pdf_bookmarks: pdf_bookmarks,
        video_timestamp_data: video_timestamp_data,
        my_preferred_nitro: my_preferred_nitro,
        followed_accounts: followed_accounts,
        should_update_followed_accounts: should_update_followed_accounts,
        posts_blocked_by_me: posts_blocked_by_me,
        should_update_posts_blocked_by_me: should_update_posts_blocked_by_me,
        censored_keyword_phrases: censored_keyword_phrases,
        should_update_censored_keyword_phrases: should_update_censored_keyword_phrases,
        hide_pip: hide_pip,
        preferred_currency: preferred_currency,
        all_locales: all_locales, 
        loc: loc,
        theme_image: theme_image,
        subscribed_nitros: subscribed_nitros,
        uncommitted_upload_cids: uncommitted_upload_cids,
        deleted_files:deleted_files,
        minified_content:minified_content,
        posts_reposted_by_me:posts_reposted_by_me,
        should_update_posts_reposted_by_me:should_update_posts_reposted_by_me,
        auto_run: auto_run,
        explore_display_type: explore_display_type,
        audiplayer_position: audiplayer_position,
        stack_address: stack_address,
        stacked_ids: stacked_ids,
        rating_denomination: rating_denomination,
      })
      var me = this;
      setTimeout(function() {
        me.reset_theme()
        if(selected_providers != null && added_providers != null){
          me.set_providers(selected_providers, added_providers);
          me.custom_set_providers = {selected_providers, added_providers}
        } 
        if(remember_account != null && remember_account != 'e' && account_data != null){
          me.load_accounts_data_from_store(account_data)
        }
        if(albums_to_stash != null){
          me.load_albums_to_stash_to_state(albums_to_stash)
        }
        if(state_theme != theme['name']){
          me.reset_coin_and_token_images(theme['name'], state_theme)
        }
      }, (1 * 500));
    }
    this.setState({beacon_chain_url: `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`})
    this.set_stack_page_data()
  }

  set_stack_page_data(){
    var me = this;
    setTimeout(function() {
      me.stack_page.current?.set_light_dark_setting_tag()
      me.stack_page.current?.set_storage_option_tag()
      me.stack_page.current?.set_e5_option_tag()
      me.stack_page.current?.set_refresh_speed_tag()
      me.stack_page.current?.set_masked_content_tag()
      me.stack_page.current?.set_content_channeling_tags()
      me.stack_page.current?.set_content_language_tags()
      me.stack_page.current?.set_content_filter_settings_tags()
      me.stack_page.current?.set_tabs_tag()
      me.stack_page.current?.set_storage_permissions_tag()
      me.stack_page.current?.set_stack_optimizer_tag()
      me.stack_page.current?.set_homepage_tags_position_tag()
      me.stack_page.current?.set_preferred_font_tag()
      me.stack_page.current?.set_skip_nsfw_warning_tag()
      me.stack_page.current?.set_selected_graph_type_tag()
      me.stack_page.current?.set_selected_remember_account_type_tag()
      me.stack_page.current?.set_web3_email_account()
      me.stack_page.current?.set_my_preferred_nitro()
      me.stack_page.current?.set_selected_hide_pip_type_tag()
      me.stack_page.current?.set_selected_preferred_currency_type_tag()
      me.stack_page.current?.set_selected_minified_content_setting_tag()
      me.stack_page.current?.set_selected_auto_run_setting_tag()
      me.stack_page.current?.set_selected_audiplayer_position_setting_tag()
      me.stack_page.current?.set_selected_rating_denomination_setting_tag()
    }, (1 * 1000));
  }

  get_account_data_to_store(){
    var _accounts = {}
    if(this.state.remember_account == 'e') return _accounts
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i];
      if(this.state.accounts[focused_e5] != null){
        _accounts[focused_e5] = {address: this.state.accounts[focused_e5].address}
      }
    }
    return _accounts
  }

  load_accounts_data_from_store(data){
    var _accounts = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i];
      if(data[focused_e5] != null){
        _accounts[focused_e5] = {address: data[focused_e5].address, privateKey:'e'}
      }
    }
    this.setState({accounts: _accounts, has_account_been_loaded_from_storage: true})
  }

  get_coin_data_to_store(){
    var _accounts = {}
    if(this.state.remember_account == 'e') return _accounts
    return this.state.coin_data
  }

  get_cached_tracks_to_store(){
    var cached_tracks = this.state.cached_tracks
    var obj = {}
    obj['e'] = cached_tracks
    cached_tracks.forEach(track_id => {
      var data = this.fetch_from_storage(track_id)
      if(data != null){
        obj[track_id] = data
      }
    });

    return obj
  }

  set_cached_tracks_data(obj){
    var cached_tracks = obj['e']
    cached_tracks.forEach(track_id => {
      var data = obj[track_id]
      this.store_in_local_storage(track_id, data)
    });
    this.setState({cached_tracks: cached_tracks})
  }

  get_albums_to_stash(){
    var my_added_album_ids = this.state.my_albums
    var all_audios = this.get_all_sorted_objects(this.state.created_audios)
    var my_acquired_albums = []
    for(var i=0; i<my_added_album_ids.length; i++){
      var obj = this.get_item_in_array(all_audios, my_added_album_ids[i])
      if(obj != null) my_acquired_albums.push(obj)
    }
    return my_acquired_albums
  }

  get_all_sorted_objects(object){
    var all_objects = []
    for(var i=0; i<this.state.e5s['data'].length; i++){
        var e5 = this.state.e5s['data'][i]
        var e5_objects = object[e5]
        if(e5_objects != null){
            all_objects = all_objects.concat(e5_objects)
        }
    }

    return this.sortByAttributeDescending(all_objects, 'timestamp')
  }

  load_albums_to_stash_to_state(my_acquired_albums){
    var created_audios = {}
    var created_audio_mappings = {}

    my_acquired_albums.forEach(album => {
      var e5 = album['e5']
      var id = album['id']
      if(created_audios[e5] == null){
        created_audios[e5] = []
      }
      if(created_audio_mappings[e5] == null){
        created_audio_mappings[e5] = {}
      }
      created_audios[e5].push(album)
      created_audio_mappings[e5][id] = album
    });
    this.setState({created_audios: created_audios, created_audio_mappings: created_audio_mappings})
  }

  get_uploaded_data_to_stash = async () => {
    var cid_clone = this.state.uploaded_data_cids
    var obj = {}
    obj['e'] = cid_clone
    for(var i=0; i<cid_clone.length; i++){
      var cid = cid_clone[i]
      var data = await this.fetch_from_storage(cid)
      if(data != null){
        obj[cid] = data
      }
    }
    return obj
  }

  load_cached_files_into_memory(obj){
    var cid_clone = obj['e']
    if(cid_clone != null && cid_clone.length > 0){
      var data_clone = {}
      cid_clone.forEach(ecid => {
        var data = obj[ecid]
        if(data != null){
          var ecid_obj = this.get_cid_split(ecid)
          var filetype = ecid_obj['filetype']
          
          if(data_clone[filetype] == null) data_clone[filetype] = {}
          data_clone[filetype][ecid] = data
          this.store_in_local_storage(ecid, data)
        }
      });
      this.setState({uploaded_data_cids: cid_clone, uploaded_data: data_clone})
    }
  }








  set_providers(selected_providers, cached_providers){
    var clone = structuredClone(this.state.e5s)
    selected_providers.forEach(provider => {
      clone[provider[0]].url = provider[1]
    })
    cached_providers.forEach(provider => {
      clone[provider[0]]['web3'].push(provider[1])
    });
    this.setState({e5s:clone})
  }

  fetch_data(state){
    try{
      var ce = JSON.parse(state)
      return ce
    }catch(e){
      console.log(e)
      return null
    }
  }

  get_location_info(){
    const timeZoneCityToCountry = {};
    Object.keys(zones).forEach(z => {
      const cityArr = z.split("/");
      const city = cityArr[cityArr.length-1];
      timeZoneCityToCountry[city] = countries[zones[z].countries[0]].name;
    });

    var userRegion;
    var userCity;
    var userCountry;
    var userTimeZone;

    console.log(timeZoneCityToCountry)

    if (Intl) {
      userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      var tzArr = userTimeZone.split("/");
      userRegion = tzArr[0];
      userCity = tzArr[tzArr.length - 1];
      userCountry = timeZoneCityToCountry[userCity];
    }
    
    console.log("Time Zone:", userTimeZone);
    console.log("Region:", userRegion);
    console.log("City:", userCity);
    console.log("Country:", userCountry);

    return { userCountry: userCountry, userRegion: userRegion, userCity: userCity }

  }
  
  get_country_data(){
    var obj = [
      {name: 'Afghanistan', code: 'AF', color:['y']}, 
      {name: 'Åland Islands', code: 'AX', color:['g']}, 
      {name: 'Albania', code: 'AL', color:['b']},
      {name: 'Algeria', code: 'DZ', color:['y']}, 
      {name: 'American Samoa', code: 'AS', color:['g']}, 
      {name: 'Andorra', code: 'AD', color:['o']}, 
      {name: 'Angola', code: 'AO', color:['y']},
      {name: 'Anguilla', code: 'AI', color:['g']}, 
      {name: 'Antarctica', code: 'AQ', color:['g']}, 
      {name: 'Antigua and Barbuda', code: 'AG', color:['g']}, 
      {name: 'Argentina', code: 'AR', color:['o']}, 
      {name: 'Armenia', code: 'AM', color:['b']}, 
      {name: 'Aruba', code: 'AW', color:['g']}, 
      {name: 'Australia', code: 'AU', color:['g']}, 
      {name: 'Austria', code: 'AT', color:['g']}, 
      {name: 'Azerbaijan', code: 'AZ', color:['y']}, 
      {name: 'Bahamas', code: 'BS', color:['g']}, 
      {name: 'Bahrain', code: 'BH', color:['y']}, 
      {name: 'Bangladesh', code: 'BD', color:['p']}, 
      {name: 'Barbados', code: 'BB', color:['g']}, 
      {name: 'Belarus', code: 'BY', color:['b']}, 
      {name: 'Belgium', code: 'BE', color:['g']}, 
      {name: 'Belize', code: 'BZ', color:['g']}, 
      {name: 'Benin', code: 'BJ', color:['o']}, 
      {name: 'Bermuda', code: 'BM', color:['g']}, 
      {name: 'Bhutan', code: 'BT', color:['r']}, 
      {name: 'Bolivia', code: 'BO', color:['o']}, 
      {name: 'Bosnia and Herzegovina', code: 'BA', color:['b']}, 
      {name: 'Botswana', code: 'BW', color:['g']}, 
      {name: 'Bouvet Island', code: 'BV', color:['g']}, 
      {name: 'Brazil', code: 'BR', color:['o']}, 
      {name: 'British Indian Ocean Territory', code: 'IO', color:['g']}, 
      {name: 'Brunei Darussalam', code: 'BN', color:['y']}, 
      {name: 'Bulgaria', code: 'BG', color:['b']}, 
      {name: 'Burkina Faso', code: 'BF', color:['o']}, 
      {name: 'Burundi', code: 'BI', color:['g']}, 
      {name: 'Cambodia', code: 'KH', color:['r']}, 
      {name: 'Cameroon', code: 'CM', color:['o']}, 
      {name: 'Canada', code: 'CA', color:['g']}, 
      {name: 'Cape Verde', code: 'CV', color:['o']}, 
      {name: 'Cayman Islands', code: 'KY', color:['g']}, 
      {name: 'Central African Republic', code: 'CF', color:['o']}, 
      {name: 'Chad', code: 'TD', color:['o']}, 
      {name: 'Chile', code: 'CL', color:['o']}, 
      {name: 'China', code: 'CN', color:['r']}, 
      {name: 'Christmas Island', code: 'CX', color:['g']}, 
      {name: 'Cocos (Keeling) Islands', code: 'CC', color:['g']}, 
      {name: 'Colombia', code: 'CO', color:['o']}, 
      {name: 'Comoros', code: 'KM', color:['o']}, 
      {name: 'Congo', code: 'CG', color:['o']}, 
      {name: 'Congo, The Democratic Republic of the', code: 'CD', color:['o']}, 
      {name: 'Cook Islands', code: 'CK', color:['g']}, 
      {name: 'Costa Rica', code: 'CR', color:['o']}, 
      {name: 'Cote D\'Ivoire', code: 'CI', color:['o']}, 
      {name: 'Croatia', code: 'HR', color:['b']}, 
      {name: 'Cuba', code: 'CU', color:['o']}, 
      {name: 'Cyprus', code: 'CY', color:['b']}, 
      {name: 'Czech Republic', code: 'CZ', color:['b']}, 
      {name: 'Denmark', code: 'DK', color:['g']}, 
      {name: 'Djibouti', code: 'DJ', color:['o']}, 
      {name: 'Dominica', code: 'DM', color:['g']}, 
      {name: 'Dominican Republic', code: 'DO', color:['o']}, 
      {name: 'Ecuador', code: 'EC', color:['o']}, 
      {name: 'Egypt', code: 'EG', color:['y']}, 
      {name: 'El Salvador', code: 'SV', color:['o']}, 
      {name: 'Equatorial Guinea', code: 'GQ', color:['o']}, 
      {name: 'Eritrea', code: 'ER', color:['y']}, 
      {name: 'Estonia', code: 'EE', color:['b']}, 
      {name: 'Ethiopia', code: 'ET', color:['o']}, 
      {name: 'Falkland Islands (Malvinas)', code: 'FK', color:['g']}, 
      {name: 'Faroe Islands', code: 'FO', color:['g']}, 
      {name: 'Fiji', code: 'FJ', color:['g']}, 
      {name: 'Finland', code: 'FI', color:['g']}, 
      {name: 'France', code: 'FR', color:['o']}, 
      {name: 'French Guiana', code: 'GF', color:['o']}, 
      {name: 'French Polynesia', code: 'PF', color:['o']}, 
      {name: 'French Southern Territories', code: 'TF', color:['o']}, 
      {name: 'Gabon', code: 'GA', color:['o']}, 
      {name: 'Gambia', code: 'GM', color:['g']}, 
      {name: 'Georgia', code: 'GE', color:['b']}, 
      {name: 'Germany', code: 'DE', color:['g']}, 
      {name: 'Ghana', code: 'GH', color:['g']}, 
      {name: 'Gibraltar', code: 'GI', color:['g']}, 
      {name: 'Greece', code: 'GR', color:['b']}, 
      {name: 'Greenland', code: 'GL', color:['g']}, 
      {name: 'Grenada', code: 'GD', color:['g']}, 
      {name: 'Guadeloupe', code: 'GP', color:['o']}, 
      {name: 'Guam', code: 'GU', color:['g']}, 
      {name: 'Guatemala', code: 'GT', color:['o']}, 
      {name: 'Guernsey', code: 'GG', color:['g']}, 
      {name: 'Guinea', code: 'GN', color:['o']}, 
      {name: 'Guinea-Bissau', code: 'GW', color:['o']}, 
      {name: 'Guyana', code: 'GY', color:['g']}, 
      {name: 'Haiti', code: 'HT', color:['o']}, 
      {name: 'Heard Island and Mcdonald Islands', code: 'HM', color:['g']}, 
      {name: 'Holy See (Vatican City State)', code: 'VA', color:['o']}, 
      {name: 'Honduras', code: 'HN', color:['o']}, 
      {name: 'Hong Kong', code: 'HK', color:['r']}, 
      {name: 'Hungary', code: 'HU', color:['b']}, 
      {name: 'Iceland', code: 'IS', color:['g']}, 
      {name: 'India', code: 'IN', color:['p']}, 
      {name: 'Indonesia', code: 'ID', color:['y']}, 
      {name: 'Iran, Islamic Republic Of', code: 'IR', color:['y']}, 
      {name: 'Iraq', code: 'IQ', color:['y']},
      {name: 'Ireland', code: 'IE', color:['g']}, 
      {name: 'Isle of Man', code: 'IM', color:['g']}, 
      {name: 'Israel', code: 'IL', color:['y']}, 
      {name: 'Italy', code: 'IT', color:['o']}, 
      {name: 'Jamaica', code: 'JM', color:['g']}, 
      {name: 'Japan', code: 'JP', color:['r']}, 
      {name: 'Jersey', code: 'JE', color:['g']}, 
      {name: 'Jordan', code: 'JO', color:['y']}, 
      {name: 'Kazakhstan', code: 'KZ', color:['y']}, 
      {name: 'Kenya', code: 'KE', color:['g'], allc: false}, 
      {name: 'Kiribati', code: 'KI', color:['g']},
      {name: 'Korea, Democratic People\'s Republic of', code: 'KP', color:['r']}, 
      {name: 'Korea, Republic of', code: 'KR', color:['r']}, 
      {name: 'Kuwait', code: 'KW', color:['y']}, 
      {name: 'Kyrgyzstan', code: 'KG', color:['y']}, 
      {name: 'Lao People\'s Democratic Republic', code: 'LA', color:['r']}, 
      {name: 'Latvia', code: 'LV', color:['b']}, 
      {name: 'Lebanon', code: 'LB', color:['y']}, 
      {name: 'Lesotho', code: 'LS', color:['g']}, 
      {name: 'Liberia', code: 'LR', color:['g']}, 
      {name: 'Libyan Arab Jamahiriya', code: 'LY', color:['y']}, 
      {name: 'Liechtenstein', code: 'LI', color:['g']}, 
      {name: 'Lithuania', code: 'LT', color:['b']}, 
      {name: 'Luxembourg', code: 'LU', color:['g']}, 
      {name: 'Macau', code: 'MO', color:['r']}, 
      {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK', color:['b']}, 
      {name: 'Madagascar', code: 'MG', color:['o']}, 
      {name: 'Malawi', code: 'MW', color:['g']}, 
      {name: 'Malaysia', code: 'MY', color:['g']}, 
      {name: 'Maldives', code: 'MV', color:['y']}, 
      {name: 'Mali', code: 'ML', color:['o']}, 
      {name: 'Malta', code: 'MT', color:['g']}, 
      {name: 'Marshall Islands', code: 'MH', color:['g']}, 
      {name: 'Martinique', code: 'MQ', color:['o']}, 
      {name: 'Mauritania', code: 'MR', color:['y']}, 
      {name: 'Mauritius', code: 'MU', color:['o']}, 
      {name: 'Mayotte', code: 'YT', color:['o']}, 
      {name: 'Mexico', code: 'MX', color:['o']}, 
      {name: 'Micronesia, Federated States of', code: 'FM', color:['g']}, 
      {name: 'Moldova, Republic of', code: 'MD', color:['b']}, 
      {name: 'Monaco', code: 'MC', color:['o']}, 
      {name: 'Mongolia', code: 'MN', color:['r']}, 
      {name: 'Montserrat', code: 'MS', color:['g']}, 
      {name: 'Morocco', code: 'MA', color:['y']}, 
      {name: 'Mozambique', code: 'MZ', color:['o']}, 
      {name: 'Myanmar', code: 'MM', color:['r']}, 
      {name: 'Namibia', code: 'NA', color:['g']}, 
      {name: 'Nauru', code: 'NR', color:['g']}, 
      {name: 'Nepal', code: 'NP', color:['r']}, 
      {name: 'Netherlands', code: 'NL', color:['g']}, 
      {name: 'Netherlands Antilles', code: 'AN', color:['g']}, 
      {name: 'New Caledonia', code: 'NC', color:['o']}, 
      {name: 'New Zealand', code: 'NZ', color:['g']}, 
      {name: 'Nicaragua', code: 'NI', color:['o']}, 
      {name: 'Niger', code: 'NE', color:['o']}, 
      {name: 'Nigeria', code: 'NG', color:['g']}, 
      {name: 'Niue', code: 'NU', color:['g']}, 
      {name: 'Norfolk Island', code: 'NF', color:['g']}, 
      {name: 'Northern Mariana Islands', code: 'MP', color:['g']}, 
      {name: 'Norway', code: 'NO', color:['g']}, 
      {name: 'Oman', code: 'OM', color:['y']}, 
      {name: 'Pakistan', code: 'PK', color:['p']}, 
      {name: 'Palau', code: 'PW', color:['g']}, 
      {name: 'Palestinian Territory, Occupied', code: 'PS', color:['y']}, 
      {name: 'Panama', code: 'PA', color:['o']},
      {name: 'Papua New Guinea', code: 'PG', color:['g']}, 
      {name: 'Paraguay', code: 'PY', color:['o']}, 
      {name: 'Peru', code: 'PE', color:['o']}, 
      {name: 'Philippines', code: 'PH', color:['g']}, 
      {name: 'Pitcairn', code: 'PN', color:['g']}, 
      {name: 'Poland', code: 'PL', color:['g']}, 
      {name: 'Portugal', code: 'PT', color:['o']}, 
      {name: 'Puerto Rico', code: 'PR', color:['g']}, 
      {name: 'Qatar', code: 'QA', color:['y']}, 
      {name: 'Reunion', code: 'RE', color:['o']}, 
      {name: 'Romania', code: 'RO', color:['b']}, 
      {name: 'Russian Federation', code: 'RU', color:['b']}, 
      {name: 'Rwanda', code: 'RW', color:['g']}, 
      {name: 'Saint Helena', code: 'SH', color:['g']}, 
      {name: 'Saint Kitts and Nevis', code: 'KN', color:['g']}, 
      {name: 'Saint Lucia', code: 'LC', color:['g']}, 
      {name: 'Saint Pierre and Miquelon', code: 'PM', color:['o']}, 
      {name: 'Saint Vincent and the Grenadines', code: 'VC', color:['g']}, 
      {name: 'Samoa', code: 'WS', color:['g']}, 
      {name: 'San Marino', code: 'SM', color:['o']}, 
      {name: 'Sao Tome and Principe', code: 'ST', color:['o']}, 
      {name: 'Saudi Arabia', code: 'SA', color:['y']}, 
      {name: 'Senegal', code: 'SN', color:['o']}, 
      {name: 'Serbia and Montenegro', code: 'CS', color:['b']}, 
      {name: 'Seychelles', code: 'SC', color:['g']}, 
      {name: 'Sierra Leone', code: 'SL', color:['g']}, 
      {name: 'Singapore', code: 'SG', color:['g']}, 
      {name: 'Slovakia', code: 'SK', color:['b']}, 
      {name: 'Slovenia', code: 'SI', color:['b']}, 
      {name: 'Solomon Islands', code: 'SB', color:['g']}, 
      {name: 'Somalia', code: 'SO', color:['y']}, 
      {name: 'South Africa', code: 'ZA', color:['g']}, 
      {name: 'South Georgia and the South Sandwich Islands', code: 'GS', color:['g']}, 
      {name: 'Spain', code: 'ES', color:['o']}, 
      {name: 'Sri Lanka', code: 'LK', color:['p']}, 
      {name: 'Sudan', code: 'SD', color:['y']}, 
      {name: 'Suriname', code: 'SR', color:['g']}, 
      {name: 'Svalbard and Jan Mayen', code: 'SJ', color:['g']}, 
      {name: 'Swaziland', code: 'SZ', color:['g']}, 
      {name: 'Sweden', code: 'SE', color:['g']}, 
      {name: 'Switzerland', code: 'CH', color:['g']}, 
      {name: 'Syrian Arab Republic', code: 'SY', color:['y']}, 
      {name: 'Taiwan, Province of China', code: 'TW', color:['r']}, 
      {name: 'Tajikistan', code: 'TJ', color:['y']}, 
      {name: 'Tanzania, United Republic of', code: 'TZ', color:['g']}, 
      {name: 'Thailand', code: 'TH', color:['r']}, 
      {name: 'Timor-Leste', code: 'TL', color:['o']}, 
      {name: 'Togo', code: 'TG', color:['o']}, 
      {name: 'Tokelau', code: 'TK', color:['g']}, 
      {name: 'Tonga', code: 'TO', color:['g']}, 
      {name: 'Trinidad and Tobago', code: 'TT', color:['g']}, 
      {name: 'Tunisia', code: 'TN', color:['y']}, 
      {name: 'Turkey', code: 'TR', color:['y']}, 
      {name: 'Turkmenistan', code: 'TM', color:['y']}, 
      {name: 'Turks and Caicos Islands', code: 'TC', color:['g']}, 
      {name: 'Tuvalu', code: 'TV', color:['g']}, 
      {name: 'Uganda', code: 'UG', color:['g']}, 
      {name: 'Ukraine', code: 'UA', color:['b']}, 
      {name: 'United Arab Emirates', code: 'AE', color:['y']}, 
      {name: 'United Kingdom', code: 'GB', color:['g']}, 
      {name: 'United States', code: 'US', color:['g']}, 
      {name: 'United States Minor Outlying Islands', code: 'UM', color:['g']}, 
      {name: 'Uruguay', code: 'UY', color:['o']}, 
      {name: 'Uzbekistan', code: 'UZ', color:['y']}, 
      {name: 'Vanuatu', code: 'VU', color:['o']}, 
      {name: 'Venezuela', code: 'VE', color:['o']}, 
      {name: 'Viet Nam', code: 'VN', color:['r']},
      {name: 'Virgin Islands, British', code: 'VG', color:['g']}, 
      {name: 'Virgin Islands, U.S.', code: 'VI', color:['g']}, 
      {name: 'Wallis and Futuna', code: 'WF', color:['o']}, 
      {name: 'Western Sahara', code: 'EH', color:['y']}, 
      {name: 'Yemen', code: 'YE', color:['y']}, 
      {name: 'Zambia', code: 'ZM', color:['g']}, 
      {name: 'Zimbabwe', code: 'ZW', color:['g']} 
    ]
    const myCountryCodesObject = countryCodes.customList("countryCode", "{countryCallingCode}");
    for(var i=0; i<obj.length; i++){
      var country_code = obj[i].code
      var data = countryFlagEmoji.get(country_code)
      var emoji = data == null ? '🏳️' : data['emoji']
      obj[i].emoji = emoji
      var country_calling_code = myCountryCodesObject[country_code]
      obj[i].call_code = country_calling_code
    }

    return obj
  }

  get_allowed_countries(){
    return [
      'United States', 
      'Kenya',
    ]
  }

  get_country_code(country){
    const obj = this.get_country_data()
    var data = {}
    obj.forEach(element => {
      data[element.name] = element.code
    });

    return data[country]
  }

  get_language(){
    var lang = navigator.language || navigator.userLanguage || 'en';
    var language = lang.toString().toLowerCase()
    if(language.includes('-')){
      var ln = language.split('-')
      language = ln[0]
    }
    // console.log(language)
    return language
  }

  get_language_data_object(){
    return {
      "ab": {"name": "Abkhaz", "nativeName": "аҧсуа"},
      "aa": {"name": "Afar", "nativeName": "Afaraf"},
      "af": {"name": "Afrikaans", "nativeName": "Afrikaans"},
      "ak": {"name": "Akan", "nativeName": "Akan"},
      "sq": {"name": "Albanian", "nativeName": "Shqip"},
      "am": {"name": "Amharic", "nativeName": "አማርኛ"},
      "ar": {"name": "Arabic", "nativeName": "العربية"},
      "an": {"name": "Aragonese", "nativeName": "Aragonés"},
      "hy": {"name": "Armenian", "nativeName": "Հայերեն"},
      "as": {"name": "Assamese", "nativeName": "অসমীয়া"},
      "av": {"name": "Avaric", "nativeName": "авар мацӀ, магӀарул мацӀ"},
      "ae": {"name": "Avestan", "nativeName": "avesta"},
      "ay": {"name": "Aymara", "nativeName": "aymar aru"},
      "az": {"name": "Azerbaijani", "nativeName": "azərbaycan dili"},
      "bm": {"name": "Bambara", "nativeName": "bamanankan"},
      "ba": {"name": "Bashkir", "nativeName": "башҡорт теле"},
      "eu": {"name": "Basque", "nativeName": "euskara, euskera"},
      "be": {"name": "Belarusian", "nativeName": "Беларуская"},
      "bn": {"name": "Bengali", "nativeName": "বাংলা"},
      "bh": {"name": "Bihari", "nativeName": "भोजपुरी"},
      "bi": {"name": "Bislama", "nativeName": "Bislama"},
      "bs": {"name": "Bosnian", "nativeName": "bosanski jezik"},
      "br": {"name": "Breton", "nativeName": "brezhoneg"},
      "bg": {"name": "Bulgarian", "nativeName": "български език"},
      "my": {"name": "Burmese", "nativeName": "ဗမာစာ"},
      "ca": {"name": "Catalan; Valencian", "nativeName": "Català"},
      "ch": {"name": "Chamorro", "nativeName": "Chamoru"},
      "ce": {"name": "Chechen", "nativeName": "нохчийн мотт"},
      "ny": {"name": "Chichewa; Chewa; Nyanja", "nativeName": "chiCheŵa, chinyanja"},
      "zh": {"name": "Chinese", "nativeName": "中文 (Zhōngwén), 汉语, 漢語"},
      "cv": {"name": "Chuvash", "nativeName": "чӑваш чӗлхи"},
      "kw": {"name": "Cornish", "nativeName": "Kernewek"},
      "co": {"name": "Corsican", "nativeName": "corsu, lingua corsa"},
      "cr": {"name": "Cree", "nativeName": "ᓀᐦᐃᔭᐍᐏᐣ"},
      "hr": {"name": "Croatian", "nativeName": "hrvatski"},
      "cs": {"name": "Czech", "nativeName": "česky, čeština"},
      "da": {"name": "Danish", "nativeName": "dansk"},
      "dv": {"name": "Divehi; Dhivehi; Maldivian;", "nativeName": "ދިވެހި"},
      "nl": {"name": "Dutch", "nativeName": "Nederlands, Vlaams"},
      "en": {"name": "English", "nativeName": "English"},
      "eo": {"name": "Esperanto", "nativeName": "Esperanto"},
      "et": {"name": "Estonian", "nativeName": "eesti, eesti keel"},
      "ee": {"name": "Ewe", "nativeName": "Eʋegbe"},
      "fo": {"name": "Faroese", "nativeName": "føroyskt"},
      "fj": {"name": "Fijian", "nativeName": "vosa Vakaviti"},
      "fi": {"name": "Finnish", "nativeName": "suomi, suomen kieli"},
      "fr": {"name": "French", "nativeName": "français, langue française"},
      "ff": {"name": "Fula; Fulah; Pulaar; Pular", "nativeName": "Fulfulde, Pulaar, Pular"},
      "gl": {"name": "Galician", "nativeName": "Galego"},
      "ka": {"name": "Georgian", "nativeName": "ქართული"},
      "de": {"name": "German", "nativeName": "Deutsch"},
      "el": {"name": "Greek, Modern", "nativeName": "Ελληνικά"},
      "gn": {"name": "Guaraní", "nativeName": "Avañeẽ"},
      "gu": {"name": "Gujarati", "nativeName": "ગુજરાતી"},
      "ht": {"name": "Haitian; Haitian Creole", "nativeName": "Kreyòl ayisyen"},
      "ha": {"name": "Hausa", "nativeName": "Hausa, هَوُسَ"},
      "he": {"name": "Hebrew (modern)", "nativeName": "עברית"},
      "hz": {"name": "Herero", "nativeName": "Otjiherero"},
      "hi": {"name": "Hindi", "nativeName": "हिन्दी, हिंदी"},
      "ho": {"name": "Hiri Motu", "nativeName": "Hiri Motu"},
      "hu": {"name": "Hungarian", "nativeName": "Magyar"},
      "ia": {"name": "Interlingua", "nativeName": "Interlingua"},
      "id": {"name": "Indonesian", "nativeName": "Bahasa Indonesia"},
      "ie": {"name": "Interlingue", "nativeName": "Interlingue"},
      "ga": {"name": "Irish", "nativeName": "Gaeilge"},
      "ig": {"name": "Igbo", "nativeName": "Asụsụ Igbo"},
      "ik": {"name": "Inupiaq", "nativeName": "Iñupiaq, Iñupiatun"},
      "io": {"name": "Ido", "nativeName": "Ido"},
      "is": {"name": "Icelandic", "nativeName": "Íslenska"},
      "it": {"name": "Italian", "nativeName": "Italiano"},
      "iu": {"name": "Inuktitut", "nativeName": "ᐃᓄᒃᑎᑐᑦ"},
      "ja": {"name": "Japanese", "nativeName": "日本語 (にほんご／にっぽんご)"},
      "jv": {"name": "Javanese", "nativeName": "basa Jawa"},
      "kl": {"name": "Kalaallisut, Greenlandic", "nativeName": "kalaallisut, kalaallit oqaasii"},
      "kn": {"name": "Kannada", "nativeName": "ಕನ್ನಡ"},
      "kr": {"name": "Kanuri", "nativeName": "Kanuri"},
      "ks": {"name": "Kashmiri", "nativeName": "कश्मीरी, كشميري‎"},
      "kk": {"name": "Kazakh", "nativeName": "Қазақ тілі"},
      "km": {"name": "Khmer", "nativeName": "ភាសាខ្មែរ"},
      "ki": {"name": "Kikuyu, Gikuyu", "nativeName": "Gĩkũyũ"},
      "rw": {"name": "Kinyarwanda", "nativeName": "Ikinyarwanda"},
      "ky": {"name": "Kirghiz, Kyrgyz", "nativeName": "кыргыз тили"},
      "kv": {"name": "Komi", "nativeName": "коми кыв"},
      "kg": {"name": "Kongo", "nativeName": "KiKongo"},
      "ko": {"name": "Korean", "nativeName": "한국어 (韓國語), 조선말 (朝鮮語)"},
      "ku": {"name": "Kurdish", "nativeName": "Kurdî, كوردی‎"},
      "kj": {"name": "Kwanyama, Kuanyama", "nativeName": "Kuanyama"},
      "la": {"name": "Latin", "nativeName": "latine, lingua latina"},
      "lb": {"name": "Luxembourgish, Letzeburgesch", "nativeName": "Lëtzebuergesch"},
      "lg": {"name": "Luganda", "nativeName": "Luganda"},
      "li": {"name": "Limburgish, Limburgan, Limburger", "nativeName": "Limburgs"},
      "ln": {"name": "Lingala", "nativeName": "Lingála"},
      "lo": {"name": "Lao", "nativeName": "ພາສາລາວ"},
      "lt": {"name": "Lithuanian", "nativeName": "lietuvių kalba"},
      "lu": {"name": "Luba-Katanga", "nativeName": ""},
      "lv": {"name": "Latvian", "nativeName": "latviešu valoda"},
      "gv": {"name": "Manx", "nativeName": "Gaelg, Gailck"},
      "mk": {"name": "Macedonian", "nativeName": "македонски јазик"},
      "mg": {"name": "Malagasy", "nativeName": "Malagasy fiteny"},
      "ms": {"name": "Malay", "nativeName": "bahasa Melayu, بهاس ملايو‎"},
      "ml": {"name": "Malayalam", "nativeName": "മലയാളം"},
      "mt": {"name": "Maltese", "nativeName": "Malti"},
      "mi": {"name": "Māori", "nativeName": "te reo Māori"},
      "mr": {"name": "Marathi (Marāṭhī)", "nativeName": "मराठी"},
      "mh": {"name": "Marshallese", "nativeName": "Kajin M̧ajeļ"},
      "mn": {"name": "Mongolian", "nativeName": "монгол"},
      "na": {"name": "Nauru", "nativeName": "Ekakairũ Naoero"},
      "nv": {"name": "Navajo, Navaho", "nativeName": "Diné bizaad, Dinékʼehǰí"},
      "nb": {"name": "Norwegian Bokmål", "nativeName": "Norsk bokmål"},
      "nd": {"name": "North Ndebele", "nativeName": "isiNdebele"},
      "ne": {"name": "Nepali", "nativeName": "नेपाली"},
      "ng": {"name": "Ndonga", "nativeName": "Owambo"},
      "nn": {"name": "Norwegian Nynorsk", "nativeName": "Norsk nynorsk"},
      "no": {"name": "Norwegian", "nativeName": "Norsk"},
      "ii": {"name": "Nuosu", "nativeName": "ꆈꌠ꒿ Nuosuhxop"},
      "nr": {"name": "South Ndebele", "nativeName": "isiNdebele"},
      "oc": {"name": "Occitan", "nativeName": "Occitan"},
      "oj": {"name": "Ojibwe, Ojibwa", "nativeName": "ᐊᓂᔑᓈᐯᒧᐎᓐ"},
      "cu": {"name": "Old Slavonic", "nativeName": "ѩзыкъ словѣньскъ"},
      "om": {"name": "Oromo", "nativeName": "Afaan Oromoo"},
      "or": {"name": "Oriya", "nativeName": "ଓଡ଼ିଆ"},
      "os": {"name": "Ossetian, Ossetic", "nativeName": "ирон æвзаг"},
      "pa": {"name": "Panjabi, Punjabi", "nativeName": "ਪੰਜਾਬੀ, پنجابی‎"},
      "pi": {"name": "Pāli", "nativeName": "पाऴि"},
      "fa": {"name": "Persian", "nativeName": "فارسی"},
      "pl": {"name": "Polish", "nativeName": "polski"},
      "ps": {"name": "Pashto, Pushto", "nativeName": "پښتو"},
      "pt": {"name": "Portuguese", "nativeName": "Português"},
      "qu": {"name": "Quechua", "nativeName": "Runa Simi, Kichwa"},
      "rm": {"name": "Romansh", "nativeName": "rumantsch grischun"},
      "rn": {"name": "Kirundi", "nativeName": "kiRundi"},
      "ro": {"name": "Romanian, Moldavian, Moldovan", "nativeName": "română"},
      "ru": {"name": "Russian", "nativeName": "русский язык"},
      "sa": {"name": "Sanskrit (Saṁskṛta)", "nativeName": "संस्कृतम्"},
      "sc": {"name": "Sardinian", "nativeName": "sardu"},
      "sd": {"name": "Sindhi", "nativeName": "सिन्धी, سنڌي، سندھی‎"},
      "se": {"name": "Northern Sami", "nativeName": "Davvisámegiella"},
      "sm": {"name": "Samoan", "nativeName": "gagana faa Samoa"},
      "sg": {"name": "Sango", "nativeName": "yângâ tî sängö"},
      "sr": {"name": "Serbian", "nativeName": "српски језик"},
      "gd": {"name": "Scottish Gaelic; Gaelic", "nativeName": "Gàidhlig"},
      "sn": {"name": "Shona", "nativeName": "chiShona"},
      "si": {"name": "Sinhala, Sinhalese", "nativeName": "සිංහල"},
      "sk": {"name": "Slovak", "nativeName": "slovenčina"},
      "sl": {"name": "Slovene", "nativeName": "slovenščina"},
      "so": {"name": "Somali", "nativeName": "Soomaaliga, af Soomaali"},
      "st": {"name": "Southern Sotho", "nativeName": "Sesotho"},
      "es": {"name": "Spanish; Castilian", "nativeName": "español, castellano"},
      "su": {"name": "Sundanese", "nativeName": "Basa Sunda"},
      "sw": {"name": "Swahili", "nativeName": "Kiswahili"},
      "ss": {"name": "Swati", "nativeName": "SiSwati"},
      "sv": {"name": "Swedish", "nativeName": "svenska"},
      "ta": {"name": "Tamil", "nativeName": "தமிழ்"},
      "te": {"name": "Telugu", "nativeName": "తెలుగు"},
      "tg": {"name": "Tajik", "nativeName": "тоҷикӣ, toğikī, تاجیکی‎"},
      "th": {"name": "Thai", "nativeName": "ไทย"},
      "ti": {"name": "Tigrinya", "nativeName": "ትግርኛ"},
      "bo": {"name": "Tibetan Standard, Tibetan, Central", "nativeName": "བོད་ཡིག"},
      "tk": {"name": "Turkmen", "nativeName": "Türkmen, Түркмен"},
      "tl": {"name": "Tagalog", "nativeName": "Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔"},
      "tn": {"name": "Tswana", "nativeName": "Setswana"},
      "to": {"name": "Tonga (Tonga Islands)", "nativeName": "faka Tonga"},
      "tr": {"name": "Turkish", "nativeName": "Türkçe"},
      "ts": {"name": "Tsonga", "nativeName": "Xitsonga"},
      "tt": {"name": "Tatar", "nativeName": "татарча, tatarça, تاتارچا‎"},
      "tw": {"name": "Twi", "nativeName": "Twi"},
      "ty": {"name": "Tahitian", "nativeName": "Reo Tahiti"},
      "ug": {"name": "Uighur, Uyghur", "nativeName": "Uyƣurqə, ئۇيغۇرچە‎"},
      "uk": {"name": "Ukrainian", "nativeName": "українська"},
      "ur": {"name": "Urdu", "nativeName": "اردو"},
      "uz": {"name": "Uzbek", "nativeName": "zbek, Ўзбек, أۇزبېك‎"},
      "ve": {"name": "Venda", "nativeName": "Tshivenḓa"},
      "vi": {"name": "Vietnamese", "nativeName": "Tiếng Việt"},
      "vo": {"name": "Volapük", "nativeName": "Volapük"},
      "wa": {"name": "Walloon", "nativeName": "Walon"},
      "cy": {"name": "Welsh", "nativeName": "Cymraeg"},
      "wo": {"name": "Wolof", "nativeName": "Wollof"},
      "fy": {"name": "Western Frisian", "nativeName": "Frysk"},
      "xh": {"name": "Xhosa", "nativeName": "isiXhosa"},
      "yi": {"name": "Yiddish", "nativeName": "ייִדיש"},
      "yo": {"name": "Yoruba", "nativeName": "Yorùbá"},
      "za": {"name": "Zhuang, Chuang", "nativeName": "Saɯ cueŋƅ, Saw cuengh"}
    }
  }


  get_key = async () => {
    var seed = ''+process.env.REACT_APP_SEED_API_KEY
    var web3_url = this.get_web3_url_from_e5('E55')
    var account = this.get_account_from_seed(seed, web3_url)
    console.log(account)
    // console.log(toBech32(account.address))

    const web3 = new Web3(web3_url);
    var balance = await web3.eth.getBalance(account.address)
    // var gas_price = await web3.eth.getGasPrice();
    // console.log('get_key','deploy account balance: ',(balance/10**18))
    // console.log('get_key','chain gas price: ', gas_price)



    var recipientAddress = ''
    const me = this;
    web3.eth.accounts.wallet.add(account.privateKey);

    // web3.eth.sendTransaction({
    //   from: account.address,
    //   to: recipientAddress,
    //   value: ((21.502739699999998 * 10**18)),
    //   gas: 50000,
    //   gasPrice: 100_000_000_000 // Adjust gas price as needed
    // }).on('transactionHash', function (hash) {
    //   me.prompt_top_notification('send complete!', 600)
    // })
    // .on('error', function (error) {
    //   console.error('Failed to send transaction:', error);
    //   if(error == 'Error: Invalid JSON RPC response: {}'){
    //     me.prompt_top_notification('send complete!', 91600)
    //   }else{
    //     me.prompt_top_notification('send failed, '+error, 96000)
    //   }
    // });


    // const address = '14ZivGjRUMyUXWaakBYDzEfLTiiN5ZZ4Qo';
    // var link = `https://blockchain.info/unspent?active=${address}`//get utxos
    // link = `https://blockchain.info/rawaddr/${address}`//get transaction history

    // link = `https://api.fullstack.cash/v5/electrumx/unconfirmed/${address}`

    // try {
    //     const response = await fetch(link);
    //     if (!response.ok) {
    //       throw new Error(`Status: ${response}`);
    //     }
    //     const data = await response.text();
    //     var e5_address_obj = JSON.parse(data);
    //     console.log(e5_address_obj)
    // } catch (error) {
    //   console.log('Error fetching data: ', error)
    // }
  }

  init_db = async () => {
    
    // try {
    //   const db = new Dexie('E5LocalStorage');
    //   db.version(2).stores({
    //     data: 'id, data', // Primary key and indexed props
    //   });

    //   var name = 'bry'
    //   var id = 'id'
    //   // // Add the new friend!
    //   // var data = await db.data.toArray()
    //   // if(data.length != 0){
    //   //   await db.data.delete(1)
    //   // } 
    //   // await db.data.add({ name });

    //   // var data = await db.data.toArray()
    //   // var stored_name = data[0]

    //   try{
    //     await db.data.delete(id)
    //   }catch(e){
    //     console.log(`Failed : ${e}`);
    //   }

    //   await db.data.add({ id, name });
    //   var data = await db.data.get({id: 'id'})

    //   console.log('loaded data: ', data['name'])
    // } catch (error) {
    //   console.log(`Failed : ${error}`);
    // }

    // await this.update_data_in_db('footloose')
    // await this.wait(10000)
    // var data = await this.load_data_from_indexdb()
    // console.log('loaded data: ', data)
    
  }

  update_data_in_db = async (data, id) => {
    const encrypted_data = this.encrypt_storage_object_using_provided_key(data, {}, `${process.env.REACT_APP_LOCALSTORAGE_KEY}`)
    try {
      const db = new Dexie('twentythreeinreverse');
      db.version(2).stores({
        data: 'id, data', // Primary key and indexed props
      });
      try{
        await db.data.delete(id)
      }catch(e){
        console.log(`Failed to delete data in db: `, e);
      }
      await db.data.add({ id, encrypted_data });
    } catch (error) {
      console.log(`Failed to do something in db: `,error);
    }
  }

  load_data_from_indexdb = async (id) => {
    try{
      const db = new Dexie('twentythreeinreverse');
      db.version(2).stores({
        data: 'id, data', // Primary key and indexed props
      });
      var data = await db.data.get({id: id})
      if(data == null) return
      return this.decrypt_storage_object_using_provided_key(data['data'], `${process.env.REACT_APP_LOCALSTORAGE_KEY}`)
    }catch(e){
      console.log('transform_image_by_theme', `Failed : ${e}`);
      return null
    }
  }

  is_allowed_in_e5(){
    if(this.state.get_available_for_all_tags_object == 'enabled') return true
    var obj = this.state.allowed_countries
    var user_country = this.get_location_info().userCountry

    if(!obj.includes(user_country)){
      return false
    }
    return true
  }

  get_dialer_addresses(){
    return[
      '0xa88FcDa55dFE3929E3f089FbEce6Ce2728f8bf3a',
    ]
  }









  background_sync(){
    if(this.state.accounts[this.state.selected_e5] != null){
      if(this.is_allowed_in_e5()){
        this.start_get_accounts_data(false, false)
        this.load_data_from_page_in_focus(this.focused_page)
      }
    }

    this.reset_theme()
  }

  background_coin_sync(){
    if(this.state.accounts[this.state.selected_e5] != null){
      if(this.is_allowed_in_e5()){
        var seed = this.state.account_seed
        if(seed != '')  this.update_coin_balances('',true)
      }
    }
  }

  background_run(){
    this.stack_page.current?.auto_run_in_background()
  }


  get_selected_web3_url(){
    var random = this.random(0,this.state.e5s[this.state.selected_e5].web3.length-1)
    return this.state.e5s[this.state.selected_e5].web3[random]
  }

  get_selected_E5_contract(){
    return this.state.e5s[this.state.selected_e5].e5_address
  }

  get_contract_from_e5(e5){
    return this.state.e5s[e5].e5_address
  }

  get_web3_url_from_e5(e5){
    // console.log('get_web3_url_from_e5', e5)
    var random = this.state.e5s[e5].url
    // console.log('get_web3_url_from_e5', random)
    return this.state.e5s[e5].web3[random]
  }

  get_web3_instance_from_e5(e5){
    return new Web3(this.get_web3_url_from_e5(e5));
  }

  get_first_block(e5){
    return this.state.e5s[e5].first_block
  }

  get_iteration(e5){
    return this.state.e5s[e5].iteration
  }

  random(min, max) { // min and max included 
    return Math.floor(Math.random() * (max - min + 1) + min)
  }







  /* called when screensize is changed */
  resize() {
    /* set the width and height in the state */
    var post_object_w = 300;
    var detail_object_w = 400;
    
    this.setState({height: window.innerHeight, width: window.innerWidth});
    console.log('width: ',window.innerWidth, ' height: ', window.innerHeight)

    
    var me = this;
    setTimeout(function() {
        me.setState({size:me.getScreenSize()})
    }, (1 * 500));
  }

  /* gets the screensize in three categories, small medium and large */
  getScreenSize() {
    var width = this.state.width;
    var height = this.state.height;

     
    if(width<250){
      return 'e';
    }
    // else if(width > 1920){
    //   return 'e';
    // }
    // else if(width > 1400){
    //   return 'e';//xl
    // }
    else if(width > 930){
      return 'l';//l
    }
    else if(width > 690){
      return 'm'; //m
    }
    else{
      return 's';
        
    }

  }

  get_theme_data(theme){
    //this.props.theme['']
    //🔴🟠🟡🟢🔵🟣
    if(theme == this.getLocale()['1417']/* 'light' */){
      return{
        'name':this.getLocale()['1417']/* 'light' */,
        'bar_shadow':'#CECDCD','bar_color':'#444444', 'bar_background_color':'#919191','nav_bar_color':'#dddddd', 'button_color':'#444444', 'button_text_color':'white', 'line_color':'#C1C1C1','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#393e46','secondary_text_color':'grey',
        
        'navbar_button_selected_color':'#f2f2f2','primary_navbar_text_color':'#393e46','secondary_navbar_text_color':'grey','navbar_text_shadow_color':'#BABABA','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#DCDCDC',
        
        'view_group_card_item_background':'rgb(217, 217, 217,.6)','tag_background_color':'#787878','indexed_tag_background':'#5e5e5e','tag_shadow':'#868686','tag_text_color':'white',
        
        'chart_color':'#FCFCFC','chart_background_color':'#D5D5D5',
  
        'number_picker_label_color':'#D5D5D5','number_picker_label_shadow':'#c9c9c9',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#afafaf', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'white', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon, 'add_icon':add_icon, 'text_input_background':'rgb(217, 217, 217,.6)', 'text_input_color':'#393e46', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light', 'json_view_theme':'summerfruit:inverted',

        'background':background/* 'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4' */, 'JobIcon':JobIcon, 'ExploreIcon': ExploreIcon, 'WalletIcon':WalletIcon, 'StackIcon': StackIcon, 

        'close':close,
        'clear':'https://nftstorage.link/ipfs/bafkreiboxvoi3u6dm3lwd4lne5xqknjzdtakck22ufkjzqdvmgrtwq4mbu',
        'add_text':add_text,
        
        'play':play,
        'pause':pause,
        'previous':previous,
        'next':next,
        'shuffle':shuffle_icon,
        'repeat':repeat,

        'letter':letter,
        'e5_logo':e5_logo_light,
        'backgrounds':[]
      }
    }
    else if(theme == this.getLocale()['1418']/* 'dark' */){
      return{
        'name':this.getLocale()['1418']/* 'dark' */,
        'bar_shadow':'#919191','bar_color':'white', 'bar_background_color':'#919191','nav_bar_color':'#444444','button_color':'#444444', 'button_text_color':'white', 'line_color':'#C1C1C1', 'linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#292929','syncronizing_page_background_color':'#292929','send_receive_ether_background_color':'#292929','send_receive_ether_overlay_background':'#424242','send_receive_ether_overlay_shadow':'#424242',

        'primary_text_color':'white', 'secondary_text_color':'#e6e6e6',
        
        'navbar_button_selected_color':'#545454','card_background_color':'rgb(51, 51, 51,.9)', 'primary_navbar_text_color':'white','secondary_navbar_text_color':'#e6e6e6','navbar_text_shadow_color':'#BABABA','card_shadow_color':'#424242',

        'view_group_card_item_background':'#2e2e2e','tag_background_color':'#444444', 'indexed_tag_background':'#404040', 'tag_shadow':'#424242', 'tag_text_color':'white',

        'chart_color':'#333333','chart_background_color':'#232323',

        'number_picker_label_color':'#3C3C3C','number_picker_label_shadow':'#262626',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#878787', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#878787', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'white','toast_background_color':'#333333', 'calendar_color':'dark', 'alert_icon':alert_icon_dark, 'add_icon':add_icon_dark, 'text_input_background':'#2e2e2e', 'text_input_color':'white', 'messsage_reply_background':'black','markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',

        'background':background/* 'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4' */, 'JobIcon':JobIconDark, 'ExploreIcon': ExploreIconDark, 'WalletIcon':WalletIconDark, 'StackIcon': StackIconDark,
        
        'close':close_dark,
        'clear':'https://nftstorage.link/ipfs/bafkreie2xrfhubydc4oih637nmadvqesx4yqmqo55jpgf3alhlhxyzd37u',
        'add_text':add_text_dark,

        'play':play_dark,
        'pause':pause_dark,
        'previous':previous_dark,
        'next':next_dark,
        'shuffle':shuffle_dark,
        'repeat':repeat_dark,

        'letter':letter,
        'e5_logo':e5_logo_dark,
        'backgrounds':[]
      }
    }
    else if(theme == this.getLocale()['2740']/* midnight */){
      return{
        'name':this.getLocale()['2740']/* midnight */,
        'bar_shadow':'#919191','bar_color':'white', 'bar_background_color':'#919191','nav_bar_color':'#1a1a1a','button_color':'#171717', 'button_text_color':'white', 'line_color':'#C1C1C1','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#303030','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'white', 'secondary_text_color':'#e6e6e6',
        
        'navbar_button_selected_color':'#333333','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'white','secondary_navbar_text_color':'#e6e6e6','navbar_text_shadow_color':'#BABABA','card_shadow_color':'#212121',

        'view_group_card_item_background':'#1a1a1a','tag_background_color':'#303030', 'indexed_tag_background':'#242424', 'tag_shadow':'#303030', 'tag_text_color':'white',

        'chart_color':'#1a1a1a','chart_background_color':'#0a0a0a',

        'number_picker_label_color':'#171717','number_picker_label_shadow':'#262626',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#CECDCD','number_picker_label_text_color':'#878787', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'white','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_dark, 'add_icon':add_icon_dark, 'text_input_background':'#1a1a1a', 'text_input_color':'white', 'messsage_reply_background':'#0f0f0f', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background/* 'https://nftstorage.link/ipfs/bafkreia37sg7rg6j5xqt2qwaocxmw4ljzkk4m37s4jibi6bgg6lyslxkt4' */, 'JobIcon':JobIconDark, 'ExploreIcon': ExploreIconDark, 'WalletIcon':WalletIconDark, 'StackIcon': StackIconDark,

        'close':close_dark,
        'clear':'https://nftstorage.link/ipfs/bafkreie2xrfhubydc4oih637nmadvqesx4yqmqo55jpgf3alhlhxyzd37u',
        'add_text':add_text_dark,

        'play':play_dark,
        'pause':pause_dark,
        'previous':previous_dark,
        'next':next_dark,
        'shuffle':shuffle_dark,
        'repeat':repeat_dark,

        'letter':letter,
        'e5_logo':e5_logo_dark,
        'backgrounds':[]
      }
    }

    else if(theme == this.getLocale()['2741']/* green */){
      return{
        'name':this.getLocale()['2741']/* green */,
        'bar_shadow':'#bcffdd','bar_color':'#03a003', 'bar_background_color':'rgb(185, 247, 198,.9)','nav_bar_color':'#1a1a1a','button_color':'#171717', 'button_text_color':'#04e504', 'line_color':'#01c601','linebar_background_color':'rgb(185, 247, 198,.9)',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#212821','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#04e504', 'secondary_text_color':'#02f902',
        
        'navbar_button_selected_color':'#203f00','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#02f902','secondary_navbar_text_color':'#04e504','card_shadow_color':'#013f01',
        'navbar_text_shadow_color':'#5bc15b',

        'view_group_card_item_background':'#13190c','tag_background_color':'#203f00', 'indexed_tag_background':'#0f230f', 'tag_shadow':'transparent', 'tag_text_color':'#8af7a2',

        'chart_color':'#01c601','chart_background_color':'#141e0a',

        'number_picker_label_color':'#171717','number_picker_label_shadow':'#013f01',
        'number_picker_power_color':'rgb(185, 247, 198,.9)','number_picker_power_shadow_color':'#013f01','number_picker_label_text_color':'#02f902', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf','number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#03a003','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_green, 'add_icon':add_icon_green, 'text_input_background':'#13190c', 'text_input_color':'#04e504', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background_green, 'JobIcon':job_icon_green, 'ExploreIcon': explore_icon_green, 'WalletIcon':wallet_icon_green, 'StackIcon': stack_icon_green,

        'close':close_icon_green,
        'clear':'',
        'add_text':add_text_icon_green,

        'play':play_icon_green,
        'pause':pause_icon_green,
        'previous':previous_icon_green,
        'next':next_icon_green,
        'shuffle':shuffle_icon_green,
        'repeat':repeat_icon_green,

        'letter':letter_green,
        'e5_logo':e5_logo_green,
        'backgrounds':[darkgreen1, darkgreen2, darkgreen3, darkgreen4, darkgreen5],
      }
    }
    if(theme == this.getLocale()['3056']/* 'light-green' */){
      return{
        'name':this.getLocale()['3056']/* 'light-green' */,
        'bar_shadow':'#c5e8d6','bar_color':'#03a003', 'bar_background_color':'#d4e2cc','nav_bar_color':'#dddddd', 'button_color':'#01c601', 'button_text_color':'white', 'line_color':'#01c601','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#029302','secondary_text_color':'#03a003',
        
        'navbar_button_selected_color':'#dcefde','primary_navbar_text_color':'#029302','secondary_navbar_text_color':'#03a003','navbar_text_shadow_color':'#5bc15b','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#c5e8d6',
        
        'view_group_card_item_background':'#d4e2cc','tag_background_color':'#8bc68b','indexed_tag_background':'#01c601','tag_shadow':'transparent','tag_text_color':'white',
        
        'chart_color':'#01c601','chart_background_color':'#d4e2cc',
  
        'number_picker_label_color':'#d4e2cc','number_picker_label_shadow':'#c5e8d6',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#c5e8d6','number_picker_label_text_color':'#01c601', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#03a003', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon_darkgreen, 'add_icon':add_icon_darkgreen, 'text_input_background':'#d4e2cc', 'text_input_color':'#029302', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light','json_view_theme':'summerfruit:inverted',

        'background':background_darkgreen, 'JobIcon':job_icon_darkgreen, 'ExploreIcon': explore_icon_darkgreen, 'WalletIcon':wallet_icon_darkgreen, 'StackIcon': stack_icon_darkgreen,

        'close':close_icon_darkgreen,
        'clear':'',
        'add_text':add_text_icon_darkgreen,

        'play':play_icon_darkgreen,
        'pause':pause_icon_darkgreen,
        'previous':previous_icon_darkgreen,
        'next':next_icon_darkgreen,
        'shuffle':shuffle_icon_darkgreen,
        'repeat':repeat_icon_darkgreen,

        'letter':letter_darkgreen,
        'e5_logo':e5_logo_darkgreen,
        'backgrounds':[lightgreen1, lightgreen2, lightgreen3, lightgreen4, lightgreen5]
      }
    }

    else if(theme == this.getLocale()['3057']/* 'red' */){
      return{
        'name':this.getLocale()['3057']/* 'red' */,
        'bar_shadow':'#f9aeae','bar_color':'#d10404', 'bar_background_color':'#f9b1b1','nav_bar_color':'#1a1a1a','button_color':'#0c0c0c', 'button_text_color':'#f92020', 'line_color':'#f94545','linebar_background_color':'rgb(249, 182, 182,.9)',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#1c1717','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#f70404', 'secondary_text_color':'#f43535',
        
        'navbar_button_selected_color':'#332020','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#f43535','secondary_navbar_text_color':'#f70404','card_shadow_color':'#3f0101',
        'navbar_text_shadow_color':'#511616',

        'view_group_card_item_background':'#190c0c','tag_background_color':'#3f0600', 'indexed_tag_background':'#210000', 'tag_shadow':'transparent', 'tag_text_color':'#f78a8a',

        'chart_color':'#f70404','chart_background_color':'#190c0c',

        'number_picker_label_color':'#0c0c0c','number_picker_label_shadow':'#3f0101',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#3f0101','number_picker_label_text_color':'#f90202', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf','number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#ad0101','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_red, 'add_icon':add_icon_red, 'text_input_background':'#190c0c', 'text_input_color':'#f70404', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background_red, 'JobIcon':job_icon_red, 'ExploreIcon': explore_icon_red, 'WalletIcon':wallet_icon_red, 'StackIcon': stack_icon_red,

        'close':close_icon_red,
        'clear':'',
        'add_text':add_text_icon_red,

        'play':play_icon_red,
        'pause':pause_icon_red,
        'previous':previous_icon_red,
        'next':next_icon_red,
        'shuffle':shuffle_icon_red,
        'repeat':repeat_icon_red,

        'letter':letter_red,
        'e5_logo':e5_logo_red,
        'backgrounds':[darkred1, darkred2, darkred3, darkred4, darkred5]
      }
    }
    if(theme == this.getLocale()['3058']/* 'light-red' */){
      return{
        'name':this.getLocale()['3058']/* 'light-red' */,
        'bar_shadow':'#f9d1d1','bar_color':'#a00803', 'bar_background_color':'#e2cdcc','nav_bar_color':'#dddddd', 'button_color':'#c60b01', 'button_text_color':'white', 'line_color':'#c60b01','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#930101','secondary_text_color':'#a00803',
        
        'navbar_button_selected_color':'#efdedc','primary_navbar_text_color':'#930101','secondary_navbar_text_color':'#a00803','navbar_text_shadow_color':'#c15b5b','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#f9d1d1',
        
        'view_group_card_item_background':'#e2cdcc','tag_background_color':'#c68b8b','indexed_tag_background':'#c60b01','tag_shadow':'transparent','tag_text_color':'white',
        
        'chart_color':'#c60b01','chart_background_color':'#e2cdcc',
  
        'number_picker_label_color':'#e2cdcc','number_picker_label_shadow':'#f9d1d1',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#f9d1d1','number_picker_label_text_color':'#c60b01', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#a00803', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon_darkred, 'add_icon':add_icon_darkred, 'text_input_background':'#e2cdcc', 'text_input_color':'#930101', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light','json_view_theme':'summerfruit:inverted',

        'background':background_darkred, 'JobIcon':job_icon_darkred, 'ExploreIcon': explore_icon_darkred, 'WalletIcon':wallet_icon_darkred, 'StackIcon': stack_icon_darkred,

        'close':close_icon_darkred,
        'clear':'',
        'add_text':add_text_icon_darkred,

        'play':play_icon_darkred,
        'pause':pause_icon_darkred,
        'previous':previous_icon_darkred,
        'next':next_icon_darkred,
        'shuffle':shuffle_icon_darkred,
        'repeat':repeat_icon_darkred,

        'letter':letter_darkred,
        'e5_logo':e5_logo_darkred,
        'backgrounds':[lightred1, lightred2, lightred3, lightred4, lightred5]
      }
    }

    else if(theme == this.getLocale()['3059']/* 'blue' */){
      return{
        'name':this.getLocale()['3059']/* 'blue' */,
        'bar_shadow':'#aeb8f9','bar_color':'#014a9e', 'bar_background_color':'#b1b5f9','nav_bar_color':'#1a1a1a','button_color':'#0c0c0c', 'button_text_color':'#2587f7', 'line_color':'#5da3f4','linebar_background_color':'rgb(188, 182, 249,.9)',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#17171c','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#0079ff', 'secondary_text_color':'#2587f7',
        
        'navbar_button_selected_color':'#202c33','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#2587f7','secondary_navbar_text_color':'#0079ff','card_shadow_color':'#183651',
        'navbar_text_shadow_color':'#171651',

        'view_group_card_item_background':'#0d0c19','tag_background_color':'#13293d', 'indexed_tag_background':'#010021', 'tag_shadow':'transparent', 'tag_text_color':'#2587f7',

        'chart_color':'#0079ff','chart_background_color':'#0d0c19',

        'number_picker_label_color':'#0c0c0c','number_picker_label_shadow':'#183651',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#183651','number_picker_label_text_color':'#0079ff', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf','number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#014a9e','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_blue, 'add_icon':add_icon_blue, 'text_input_background':'#0d0c19', 'text_input_color':'#0079ff', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background_blue, 'JobIcon':job_icon_blue, 'ExploreIcon': explore_icon_blue, 'WalletIcon':wallet_icon_blue, 'StackIcon': stack_icon_blue,

        'close':close_icon_blue,
        'clear':'',
        'add_text':add_text_icon_blue,

        'play':play_icon_blue,
        'pause':pause_icon_blue,
        'previous':previous_icon_blue,
        'next':next_icon_blue,
        'shuffle':shuffle_icon_blue,
        'repeat':repeat_icon_blue,

        'letter':letter_blue,
        'e5_logo':e5_logo_blue,
        'backgrounds':[darkblue1, darkblue2, darkblue3, darkblue4, darkblue5]
      }
    }
    if(theme == this.getLocale()['3060']/* 'light-blue' */){
      return{
        'name':this.getLocale()['3060']/* 'light-blue' */,
        'bar_shadow':'#bce4ff','bar_color':'#0374a0', 'bar_background_color':'#ccdce2','nav_bar_color':'#dddddd', 'button_color':'#0181c6', 'button_text_color':'white', 'line_color':'#0181c6','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#017493','secondary_text_color':'#0374a0',
        
        'navbar_button_selected_color':'#dce8ef','primary_navbar_text_color':'#017493','secondary_navbar_text_color':'#0374a0','navbar_text_shadow_color':'#5babc1','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#d1ebf9',
        
        'view_group_card_item_background':'#ccdce2','tag_background_color':'#8badc6','indexed_tag_background':'#0181c6','tag_shadow':'transparent','tag_text_color':'white',
        
        'chart_color':'#0181c6','chart_background_color':'#ccdce2',
  
        'number_picker_label_color':'#ccdce2','number_picker_label_shadow':'#d1ebf9',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#d1ebf9','number_picker_label_text_color':'#0181c6', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#0374a0', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon_darkblue, 'add_icon':add_icon_darkblue, 'text_input_background':'#ccdce2', 'text_input_color':'#017493', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light','json_view_theme':'summerfruit:inverted',

        'background':background_darkblue, 'JobIcon':job_icon_darkblue, 'ExploreIcon': explore_icon_darkblue, 'WalletIcon':wallet_icon_darkblue, 'StackIcon': stack_icon_darkblue,

        'close':close_icon_darkblue,
        'clear':'',
        'add_text':add_text_icon_darkblue,

        'play':play_icon_darkblue,
        'pause':pause_icon_darkblue,
        'previous':previous_icon_darkblue,
        'next':next_icon_darkblue,
        'shuffle':shuffle_icon_darkblue,
        'repeat':repeat_icon_darkblue,

        'letter':letter_darkblue,
        'e5_logo':e5_logo_darkblue,
        'backgrounds':[lightblue1, lightblue2, lightblue3, lightblue4, lightblue5]
      }
    }

    else if(theme == this.getLocale()['3061']/* 'yellow' */){
      return{
        'name':this.getLocale()['3061']/* 'yellow' */,
        'bar_shadow':'#f9f8ae','bar_color':'#a3a003', 'bar_background_color':'#f7f9b1','nav_bar_color':'#1a1a1a','button_color':'#0c0c0c', 'button_text_color':'#efec4c', 'line_color':'#f9f645','linebar_background_color':'#f9f7b6',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#1b1c17','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#efec4c', 'secondary_text_color':'#efea58',
        
        'navbar_button_selected_color':'#333220','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#efea58','secondary_navbar_text_color':'#efec4c','card_shadow_color':'#505118',
        'navbar_text_shadow_color':'#505116',

        'view_group_card_item_background':'#19190c','tag_background_color':'#7c7a26', 'indexed_tag_background':'#202100', 'tag_shadow':'transparent', 'tag_text_color':'#f7f38a',

        'chart_color':'#f3f704','chart_background_color':'#19190c',

        'number_picker_label_color':'#0c0c0c','number_picker_label_shadow':'#505118',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#505118','number_picker_label_text_color':'#efec4c', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf','number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#aaad01','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_yellow, 'add_icon':add_icon_yellow, 'text_input_background':'#19190c', 'text_input_color':'#efec4c', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background_yellow, 'JobIcon':job_icon_yellow, 'ExploreIcon': explore_icon_yellow, 'WalletIcon':wallet_icon_yellow, 'StackIcon': stack_icon_yellow,

        'close':close_icon_yellow,
        'clear':'',
        'add_text':add_text_icon_yellow,

        'play':play_icon_yellow,
        'pause':pause_icon_yellow,
        'previous':previous_icon_yellow,
        'next':next_icon_yellow,
        'shuffle':shuffle_icon_yellow,
        'repeat':repeat_icon_yellow,

        'letter':letter_yellow,
        'e5_logo':e5_logo_yellow,
        'backgrounds':[darkyellow1, darkyellow2, darkyellow3, darkyellow4, darkyellow5]
      }
    }
    if(theme == this.getLocale()['3062']/* 'light-yellow' */){
      return{
        'name':this.getLocale()['3062']/* 'light-yellow' */,
        'bar_shadow':'#fdffbc','bar_color':'#9ba003', 'bar_background_color':'#e2e2cc','nav_bar_color':'#dddddd', 'button_color':'#9ba003', 'button_text_color':'white', 'line_color':'#9ba003','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#757701','secondary_text_color':'#9ba003',
        
        'navbar_button_selected_color':'#efefdc','primary_navbar_text_color':'#757701','secondary_navbar_text_color':'#9ba003','navbar_text_shadow_color':'#c1c05b','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#DCDCDC',
        
        'view_group_card_item_background':'#e2e2cc','tag_background_color':'#c5c68b','indexed_tag_background':'#9ba003','tag_shadow':'transparent','tag_text_color':'white',
        
        'chart_color':'#9ba003','chart_background_color':'#e2e2cc',
  
        'number_picker_label_color':'#e2e2cc','number_picker_label_shadow':'#DCDCDC',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#DCDCDC','number_picker_label_text_color':'#9ba003', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#9ba003', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon_darkyellow, 'add_icon':add_icon_darkyellow, 'text_input_background':'#e2e2cc', 'text_input_color':'#757701', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light','json_view_theme':'summerfruit:inverted',

        'background':background_darkyellow, 'JobIcon':job_icon_darkyellow, 'ExploreIcon': explore_icon_darkyellow, 'WalletIcon':wallet_icon_darkyellow, 'StackIcon': stack_icon_darkyellow,

        'close':close_icon_darkyellow,
        'clear':'',
        'add_text':add_text_icon_darkyellow,

        'play':play_icon_darkyellow,
        'pause':pause_icon_darkyellow,
        'previous':previous_icon_darkyellow,
        'next':next_icon_darkyellow,
        'shuffle':shuffle_icon_darkyellow,
        'repeat':repeat_icon_darkyellow,

        'letter':letter_darkyellow,
        'e5_logo':e5_logo_darkyellow,
        'backgrounds':[lightyellow1, lightyellow2, lightyellow3, lightyellow4, lightyellow5]
      }
    }

    else if(theme == this.getLocale()['3063']/* 'pink' */){
      return{
        'name':this.getLocale()['3063']/* 'pink' */,
        'bar_shadow':'#ecaef9','bar_color':'#bc04d1', 'bar_background_color':'#f1b1f9','nav_bar_color':'#1a1a1a','button_color':'#0c0c0c', 'button_text_color':'#c94cef', 'line_color':'#e445f9','linebar_background_color':'#eeb6f9',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#1b171c','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#c94cef', 'secondary_text_color':'#e058ef',
        
        'navbar_button_selected_color':'#312033','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#e058ef','secondary_navbar_text_color':'#c94cef','card_shadow_color':'#491851',
        'navbar_text_shadow_color':'#481651',

        'view_group_card_item_background':'#160c19','tag_background_color':'#6a267c', 'indexed_tag_background':'#190021', 'tag_shadow':'transparent', 'tag_text_color':'#e58af7',

        'chart_color':'#e704f7','chart_background_color':'#160c19',

        'number_picker_label_color':'#0c0c0c','number_picker_label_shadow':'#491851',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#491851','number_picker_label_text_color':'#dc4cef', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf','number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#9001ad','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_pink, 'add_icon':add_icon_pink, 'text_input_background':'#160c19', 'text_input_color':'#c94cef', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background_pink, 'JobIcon':job_icon_pink, 'ExploreIcon': explore_icon_pink, 'WalletIcon':wallet_icon_pink, 'StackIcon': stack_icon_pink,

        'close':close_icon_pink,
        'clear':'',
        'add_text':add_text_icon_pink,

        'play':play_icon_pink,
        'pause':pause_icon_pink,
        'previous':previous_icon_pink,
        'next':next_icon_pink,
        'shuffle':shuffle_icon_pink,
        'repeat':repeat_icon_pink,

        'letter':letter_pink,
        'e5_logo':e5_logo_pink,
        'backgrounds':[darkpink1, darkpink2, darkpink3, darkpink4, darkpink5]
      }
    }
    if(theme == this.getLocale()['3064']/* 'light-pink' */){
      return{
        'name':this.getLocale()['3064']/* 'light-pink' */,
        'bar_shadow':'#ecbcff','bar_color':'#8e03a0', 'bar_background_color':'#decce2','nav_bar_color':'#dddddd', 'button_color':'#af01c6', 'button_text_color':'white', 'line_color':'#af01c6','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#930191','secondary_text_color':'#8e03a0',
        
        'navbar_button_selected_color':'#eddcef','primary_navbar_text_color':'#930191','secondary_navbar_text_color':'#8e03a0','navbar_text_shadow_color':'#b55bc1','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#f2d1f9',
        
        'view_group_card_item_background':'#decce2','tag_background_color':'#bf8bc6','indexed_tag_background':'#af01c6','tag_shadow':'transparent','tag_text_color':'white',
        
        'chart_color':'#af01c6','chart_background_color':'#decce2',
  
        'number_picker_label_color':'#decce2','number_picker_label_shadow':'#f2d1f9',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#f2d1f9','number_picker_label_text_color':'#af01c6', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#8e03a0', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon_darkpink, 'add_icon':add_icon_darkpink, 'text_input_background':'#decce2', 'text_input_color':'#930191', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light','json_view_theme':'summerfruit:inverted',

        'background':background_darkpink, 'JobIcon':job_icon_darkpink, 'ExploreIcon': explore_icon_darkpink, 'WalletIcon':wallet_icon_darkpink, 'StackIcon': stack_icon_darkpink,

        'close':close_icon_darkpink,
        'clear':'',
        'add_text':add_text_icon_darkpink,

        'play':play_icon_darkpink,
        'pause':pause_icon_darkpink,
        'previous':previous_icon_darkpink,
        'next':next_icon_darkpink,
        'shuffle':shuffle_icon_darkpink,
        'repeat':repeat_icon_darkpink,

        'letter':letter_darkpink,
        'e5_logo':e5_logo_darkpink,
        'backgrounds':[lightpink1, lightpink2, lightpink3, lightpink4, lightpink5]
      }
    }

    else if(theme == this.getLocale()['3065']/* 'orange' */){
      return{
        'name':this.getLocale()['3065']/* 'orange' */,
        'bar_shadow':'#f9d1ae','bar_color':'#d16a04', 'bar_background_color':'#f9d2b1','nav_bar_color':'#1a1a1a','button_color':'#0c0c0c', 'button_text_color':'#efa04c', 'line_color':'#f9a245','linebar_background_color':'#f9e0b6',
        
        'homepage_background_color':'#050505','syncronizing_page_background_color':'#050505','send_receive_ether_background_color':'#050505','send_receive_ether_overlay_background':'#1c1a17','send_receive_ether_overlay_shadow':'#303030',

        'primary_text_color':'#efa04c', 'secondary_text_color':'#efb358',
        
        'navbar_button_selected_color':'#332c20','card_background_color':'rgb(20, 20, 20,.9)', 'primary_navbar_text_color':'#efb358','secondary_navbar_text_color':'#efa04c','card_shadow_color':'#513a18',
        'navbar_text_shadow_color':'#513d16',

        'view_group_card_item_background':'#19130c','tag_background_color':'#7c5326', 'indexed_tag_background':'#211100', 'tag_shadow':'transparent', 'tag_text_color':'#f7c28a',

        'chart_color':'#f78204','chart_background_color':'#19130c',

        'number_picker_label_color':'#0c0c0c','number_picker_label_shadow':'#513a18',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#513a18','number_picker_label_text_color':'#ef964c', 'number_picker_picked_label_text_color':'white',
        'number_picker_power_label_text_color':'#afafaf','number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#ad6001','toast_background_color':'#171717', 'calendar_color':'dark', 'alert_icon':alert_icon_orange, 'add_icon':add_icon_orange, 'text_input_background':'#19130c', 'text_input_color':'#efa04c', 'messsage_reply_background':'black', 'markdown_theme':'dart','pdf_theme':'dark','json_view_theme':'summerfruit',


        'background':background_orange, 'JobIcon':job_icon_orange, 'ExploreIcon': explore_icon_orange, 'WalletIcon':wallet_icon_orange, 'StackIcon': stack_icon_orange,

        'close':close_icon_orange,
        'clear':'',
        'add_text':add_text_icon_orange,

        'play':play_icon_orange,
        'pause':pause_icon_orange,
        'previous':previous_icon_orange,
        'next':next_icon_orange,
        'shuffle':shuffle_icon_orange,
        'repeat':repeat_icon_orange,

        'letter':letter_orange,
        'e5_logo':e5_logo_orange,
        'backgrounds':[darkorange1, darkorange2, darkorange3, darkorange4, darkorange5]
      }
    }
    if(theme == this.getLocale()['3066']/* 'light-orange' */){
      return{
        'name':this.getLocale()['3066']/* 'light-orange' */,
        'bar_shadow':'#ffe2bc','bar_color':'#a05403', 'bar_background_color':'#e2d7cc','nav_bar_color':'#dddddd', 'button_color':'#c67b01', 'button_text_color':'white', 'line_color':'#c67b01','linebar_background_color':'#BFBFBF',
        
        'homepage_background_color':'#F1F1F1','syncronizing_page_background_color':'#F1F1F1','send_receive_ether_background_color':'#F1F1F1','send_receive_ether_overlay_background':'#474747','send_receive_ether_overlay_shadow':'#CECDCD',
        
        'primary_text_color':'#935b01','secondary_text_color':'#a05403',
        
        'navbar_button_selected_color':'#efe7dc','primary_navbar_text_color':'#935b01','secondary_navbar_text_color':'#a05403','navbar_text_shadow_color':'#c19f5b','card_background_color':'rgb(225, 225, 225,.9)','card_shadow_color':'#f9ebd1',
        
        'view_group_card_item_background':'#e2d7cc','tag_background_color':'#c6b18b','indexed_tag_background':'#c67b01','tag_shadow':'transparent','tag_text_color':'white',
        
        'chart_color':'#c67b01','chart_background_color':'#e2d7cc',
  
        'number_picker_label_color':'#e2d7cc','number_picker_label_shadow':'#f9ebd1',
        'number_picker_power_color':'white','number_picker_power_shadow_color':'#f9ebd1','number_picker_label_text_color':'#c67b01', 'number_picker_picked_label_text_color':'#444444',
        'number_picker_power_label_text_color':'#afafaf', 'number_picker_picked_power_label_text_color':'#444444',
        
        'slider_color':'#a05403', 'toast_background_color':'white', 'calendar_color':'light', 'alert_icon':alert_icon_darkorange, 'add_icon':add_icon_darkorange, 'text_input_background':'#e2d7cc', 'text_input_color':'#935b01', 'messsage_reply_background':'white', 'markdown_theme':'light', 'pdf_theme':'light','json_view_theme':'summerfruit:inverted',

        'background':background_darkorange, 'JobIcon':job_icon_darkorange, 'ExploreIcon': explore_icon_darkorange, 'WalletIcon':wallet_icon_darkorange, 'StackIcon': stack_icon_darkorange,

        'close':close_icon_darkorange,
        'clear':'',
        'add_text':add_text_icon_darkorange,

        'play':play_icon_darkorange,
        'pause':pause_icon_darkorange,
        'previous':previous_icon_darkorange,
        'next':next_icon_darkorange,
        'shuffle':shuffle_icon_darkorange,
        'repeat':repeat_icon_darkorange,

        'letter':letter_darkorange,
        'e5_logo':e5_logo_darkorange,
        'backgrounds':[lightorange1, lightorange2, lightorange3, lightorange4, lightorange5]
      }
    }

    else if(theme == this.getLocale()['1593a']/* 'auto' */){
      var obj = this.get_theme_data(this.get_time_of_day_theme())
      obj['name'] = this.getLocale()['1593a']/* 'auto' */

      return obj
    }
  }

  get_time_of_day_theme(){
    var hour = new Date().getHours() 
    if(hour >= 18 || hour < 7){
      if(hour >= 23 || hour < 4){
        return this.getLocale()['2740']/* midnight */
      }
      return this.getLocale()['1418']/* 'dark' */
    }else{
      return this.getLocale()['1417']/* 'light' */
    }
  }

  reset_theme(){
    this.setState({theme: this.get_theme_data(this.state.theme['name'])})
  }









  render(){
    if(this.getScreenSize() == 'e'){
      return(
        <div>
          {this.render_page()}
        </div>
      )
    }else{
      return (
        <div>
          {this.render_audio_pip()}
          {this.render_page()}
          {this.render_synchronizing_bottomsheet()}
          {this.render_send_receive_ether_bottomsheet()}
          {this.render_stack_bottomsheet()}
          {this.render_view_transaction_bottomsheet()}
          {this.render_wiki_bottomsheet()}
          {this.render_new_object_bottomsheet()}
          
          {this.render_mint_token_bottomsheet()}
          {this.render_transfer_token_bottomsheet()}
          {this.render_extend_contract_bottomsheet()}
          {this.render_exit_contract_bottomsheet()}
          {this.render_new_proposal_bottomsheet()}
          {this.render_vote_proposal_bottomsheet()}
          {this.render_submit_proposal_bottomsheet()}
          {this.render_pay_subscription_bottomsheet()}
          {this.render_cancel_subscription_bottomsheet()}
          {this.render_collect_subscription_bottomsheet()}
          {this.render_modify_subscription_bottomsheet()}
          {this.render_modify_contract_bottomsheet()}
          {this.render_modify_token_bottomsheet()}
          {this.render_exchange_transfer_bottomsheet()}
          {this.render_force_exit_bottomsheet()}
          {this.render_archive_proposal_bottomsheet()}
          {this.render_freeze_unfreeze_bottomsheet()}
          {this.render_authmint_bottomsheet()}
          {this.render_moderator_bottomsheet()}
          {this.render_respond_to_job_bottomsheet()}
          {this.render_view_application_contract_bottomsheet()}
          {this.render_view_transaction_log_bottomsheet()}
          {this.render_add_to_bag_bottomsheet()}
          {this.render_fulfil_bag_bottomsheet()}
          {this.render_view_bag_application_contract_bottomsheet()}
          {this.render_direct_purchase_bottomsheet()}
          {this.render_clear_purchase_bottomsheet()}
          {this.render_scan_code_bottomsheet()}
          {this.render_send_job_request_bottomsheet()}
          {this.render_view_job_request_bottomsheet()}
          {this.render_enter_contract_bottomsheet()}
          {this.render_view_job_request_contract_bottomsheet()}
          {this.render_withdraw_ether_bottomsheet()}

          {this.render_edit_token_object_bottomsheet()}
          {this.render_edit_channel_object_bottomsheet()}
          {this.render_edit_contractor_object_bottomsheet()}
          {this.render_edit_job_object_bottomsheet()}
          {this.render_edit_post_object_bottomsheet()}
          {this.render_edit_storefront_object_bottomsheet()}
          {this.render_give_award_bottomsheet()}
          {this.render_depthmint_bottomsheet()}
          {this.render_searched_account_bottomsheet()}
          {this.render_rpc_settings_bottomsheet()}
          {this.render_confirm_run_bottomsheet()}
          {this.render_edit_proposal_object_bottomsheet()}
          {this.render_successful_send_bottomsheet()}
          {this.render_stage_royalties_bottomsheet()}
          {this.render_view_staged_royalties_bottomsheet()}
          {this.render_pay_upcoming_subscriptions_bottomsheet()}
          {this.render_send_receive_coin_bottomsheet()}
          {this.render_edit_audiopost_object_bottomsheet()}
          {this.render_full_audio_bottomsheet()}
          {this.render_buy_album_bottomsheet()}
          {this.render_add_to_playlist_bottomsheet()}
          {this.render_buy_video_bottomsheet()}
          {this.render_edit_nitropost_object_bottomsheet()}
          {this.render_buy_nitro_storage_bottomsheet()}
          {this.render_configure_nitro_node_bottomsheet()}
          {this.render_dialer_bottomsheet()}
          {this.render_view_notification_log_bottomsheet()}
          {this.render_edit_videopost_object_bottomsheet()}
          {this.render_view_contextual_transfer_bottomsheet()}
          {this.render_edit_poll_object_bottomsheet()}
          {this.render_view_vote_poll_bottomsheet()}
          {this.render_view_calculate_poll_result_bottomsheet()}
          {this.render_view_stage_creator_payout_result_bottomsheet()}

          {this.render_view_image_bottomsheet()}
          {this.render_view_pdf_bottomsheet()}
          {this.render_pick_file_bottomsheet()}
          {this.render_full_video_bottomsheet()}
          {this.render_dialog_bottomsheet()}
          {this.render_add_comment_bottomsheet()}
          {this.render_view_number_bottomsheet()}
          {this.render_view_bid_in_auction_bottomsheet()}
          
          {this.render_toast_container()}
          <audio ref={this.remoteStream} autoPlay />
        </div>
      );
    }
  }

  render_toast_container(){
    var os = getOS()
    if(os != 'iOS' || this.state.syncronizing_page_bottomsheet == true){
      return(
        <div>
          <ToastContainer limit={3} containerId="id"/>
        </div>
      )
    }
  }

  render_page(){
    return(
      <div>
        <Home_page ref={this.homepage}
          screensize={this.getScreenSize()} 
          width={this.state.width} height={this.state.height} app_state={this.state} view_number={this.view_number.bind(this)} notify={this.prompt_top_notification.bind(this)} open_send_receive_ether_bottomsheet={this.start_send_receive_ether_bottomsheet.bind(this)} open_stack_bottomsheet={this.open_stack_bottomsheet.bind(this)} theme={this.state.theme} details_orientation={this.state.details_orientation} 
          open_wiki_bottomsheet={this.open_wiki_bottomsheet.bind(this)} 
          open_new_object={this.open_new_object.bind(this)} 
          when_view_image_clicked={this.when_view_image_clicked.bind(this)} when_edit_job_tapped={this.when_edit_created_job_tapped.bind(this)} fetch_objects_data={this.fetch_objects_data.bind(this)}
          
          show_mint_token_bottomsheet={this.show_mint_token_bottomsheet.bind(this)}
          show_transfer_bottomsheet={this.show_transfer_bottomsheet.bind(this)}
          show_enter_contract_bottomsheet={this.show_enter_contract_bottomsheet.bind(this)}
          show_extend_contract_bottomsheet={this.show_extend_contract_bottomsheet.bind(this)}
          show_exit_contract_bottomsheet={this.show_exit_contract_bottomsheet.bind(this)}
          show_new_proposal_bottomsheet={this.show_new_proposal_bottomsheet.bind(this)}
          show_vote_proposal_bottomsheet={this.show_vote_proposal_bottomsheet.bind(this)}
          show_submit_proposal_bottomsheet={this.show_submit_proposal_bottomsheet.bind(this)}
          show_pay_subscription_bottomsheet={this.show_pay_subscription_bottomsheet.bind(this)}
          show_cancel_subscription_bottomsheet={this.show_cancel_subscription_bottomsheet.bind(this)}
          show_collect_subscription_bottomsheet={this.show_collect_subscription_bottomsheet.bind(this)}
          show_modify_subscription_bottomsheet={this.show_modify_subscription_bottomsheet.bind(this)}
          show_modify_contract_bottomsheet={this.show_modify_contract_bottomsheet.bind(this)}
          show_modify_token_bottomsheet={this.show_modify_token_bottomsheet.bind(this)}
          show_exchange_transfer_bottomsheet={this.show_exchange_transfer_bottomsheet.bind(this)}
          show_force_exit_bottomsheet={this.show_force_exit_bottomsheet.bind(this)}
          show_archive_proposal_bottomsheet={this.show_archive_proposal_bottomsheet.bind(this)}
          show_freeze_unfreeze_bottomsheet={this.show_freeze_unfreeze_bottomsheet.bind(this)}
          show_authmint_bottomsheet={this.show_authmint_bottomsheet.bind(this)}
          show_moderator_bottomsheet={this.show_moderator_bottomsheet.bind(this)}
          show_images={this.show_images.bind(this)} show_respond_to_job_bottomsheet={this.show_respond_to_job_bottomsheet.bind(this)}

          add_mail_to_stack_object={this.add_mail_to_stack_object.bind(this)} add_channel_message_to_stack_object={this.add_channel_message_to_stack_object.bind(this)} get_objects_messages={this.get_objects_messages.bind(this)} add_post_reply_to_stack={this.add_post_reply_to_stack.bind(this)} get_job_objects_responses={this.get_job_objects_responses.bind(this)} show_view_application_contract_bottomsheet={this.show_view_application_contract_bottomsheet.bind(this)} add_job_message_to_stack_object={this.add_job_message_to_stack_object.bind(this)} add_proposal_message_to_stack_object={this.add_proposal_message_to_stack_object.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} add_audio_reply_to_stack={this.add_audio_reply_to_stack.bind(this)} add_video_reply_to_stack={this.add_video_reply_to_stack.bind(this)} add_nitro_reply_to_stack={this.add_nitro_reply_to_stack.bind(this)}
          
          open_add_to_bag={this.show_add_to_bag_bottomsheet.bind(this)} open_fulfil_bag_request={this.show_fulfil_bag_bottomsheet.bind(this)} show_view_bag_application_contract_bottomsheet={this.show_view_bag_application_contract_bottomsheet.bind(this)} show_direct_purchase_bottomsheet={this.show_direct_purchase_bottomsheet.bind(this)} open_send_job_request_ui={this.open_send_job_request_ui.bind(this)}

          get_direct_purchase_events={this.get_direct_purchase_events.bind(this)} open_clear_purchase={this.show_clear_purchase_bottomsheet.bind(this)} add_bag_message_to_stack_object={this.add_bag_message_to_stack_object.bind(this)} add_storefront_message_to_stack_object={this.add_storefront_message_to_stack_object.bind(this)} get_contractor_applications={this.get_contractor_applications.bind(this)} open_view_job_request_ui={this.open_view_job_request_ui.bind(this)} open_view_contract_ui={this.show_view_job_request_contract_bottomsheet.bind(this)} show_withdraw_ether_bottomsheet={this.show_withdraw_ether_bottomsheet.bind(this)}

          add_account_to_contacts={this.add_account_to_contacts.bind(this)} open_edit_object={this.open_edit_object.bind(this)}
          show_give_award_bottomsheet={this.show_give_award_bottomsheet.bind(this)} get_post_award_data={this.get_post_award_data.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)}

          get_contract_event_data={this.get_contract_event_data.bind(this)} get_proposal_event_data={this.get_proposal_event_data.bind(this)} get_subscription_event_data={this.get_subscription_event_data.bind(this)} get_exchange_event_data={this.get_exchange_event_data.bind(this)} get_moderator_event_data={this.get_moderator_event_data.bind(this)} get_accounts_payment_information={this.get_accounts_payment_information.bind(this)} show_depthmint_bottomsheet={this.show_depthmint_bottomsheet.bind(this)} open_wallet_guide_bottomsheet={this.open_wallet_guide_bottomsheet.bind(this)} get_channel_event_data={this.get_channel_event_data.bind(this)}

          when_select_deselect_work_tag={this.when_select_deselect_work_tag.bind(this)} when_select_deselect_explore_tag={this.when_select_deselect_explore_tag.bind(this)} get_searched_account_data={this.get_searched_account_data.bind(this)} when_searched_account_clicked={this.when_searched_account_clicked.bind(this)} enable_tabs={this.enable_tabs.bind(this)} show_rpc_settings_bottomsheet={this.show_rpc_settings_bottomsheet.bind(this)} get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} load_data_from_page_in_focus={this.load_data_from_page_in_focus.bind(this)}
          fetch_objects_to_load_from_searched_tags={this.fetch_objects_to_load_from_searched_tags.bind(this)}
          
          show_stage_royalties_bottomsheet={this.show_stage_royalties_bottomsheet.bind(this)}
          load_exchanges_royalty_event_data={this.load_exchanges_royalty_event_data.bind(this)}
          show_view_staged_royalties_bottomsheet={this.show_view_staged_royalties_bottomsheet.bind(this)}
          load_exchanges_royalty_payout_event_data={this.load_exchanges_royalty_payout_event_data.bind(this)}

          show_pay_upcoming_subscriptions_bottomsheet={this.show_pay_upcoming_subscriptions_bottomsheet.bind(this)} start_send_receive_coin_bottomsheet={this.start_send_receive_coin_bottomsheet.bind(this)}
          update_coin_balances={this.update_coin_balances.bind(this)} load_contracts_exchange_interactions_data={this.load_contracts_exchange_interactions_data.bind(this)} load_burn_address_end_balance_events={this.load_burn_address_end_balance_events.bind(this)}
          fetch_uploaded_files_for_object={this.fetch_uploaded_files_for_object.bind(this)} show_buy_album_bottomsheet={this.show_buy_album_bottomsheet.bind(this)} play_song={this.play_song.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)}
        
          play_song_in_playlist={this.play_song_in_playlist.bind(this)} update_order_of_songs_in_playlist={this.update_order_of_songs_in_playlist.bind(this)} download_playlist={this.download_playlist.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} open_purchase_video_ui={this.show_buy_video_bottomsheet.bind(this)} play_video={this.play_video.bind(this)}
        
          load_nitro_node_details={this.load_nitro_node_details.bind(this)} load_my_account_storage_info={this.load_my_account_storage_info.bind(this)} show_buy_nitro_storage_bottomsheet={this.show_buy_nitro_storage_bottomsheet.bind(this)} show_configure_nitro_node_bottomsheet={this.show_configure_nitro_node_bottomsheet.bind(this)} block_post={this.block_post.bind(this)} when_zip_file_opened={this.when_zip_file_opened.bind(this)} follow_unfollow_post_author={this.follow_unfollow_post_author.bind(this)} get_theme_data={this.get_theme_data.bind(this)} connect_to_node={this.connect_to_node.bind(this)} get_mail_messages={this.get_mail_messages.bind(this)} get_my_entire_public_key={this.get_my_entire_public_key.bind(this)}

          set_extra_subsctiption_data={this.set_extra_subsctiption_data.bind(this)} set_extra_contract_data={this.set_extra_contract_data.bind(this)}
          load_extra_token_data={this.load_extra_token_data.bind(this)}
          load_extra_proposal_data={this.load_extra_proposal_data.bind(this)}

          load_bag_storefront_items={this.load_bag_storefront_items.bind(this)} show_view_notification_log_bottomsheet={this.show_view_notification_log_bottomsheet.bind(this)} when_e5_link_tapped={this.when_e5_link_tapped.bind(this)} get_searched_account_data_trimmed={this.get_searched_account_data_trimmed.bind(this)}

          when_link_object_clicked={this.when_link_object_clicked.bind(this)} show_post_item_preview_with_subscription={this.show_post_item_preview_with_subscription.bind(this)} get_object_censored_keywords_and_accounts={this.get_object_censored_keywords_and_accounts.bind(this)} repost_audiopost={this.repost_audiopost.bind(this)} repost_videopost={this.repost_videopost.bind(this)} repost_post={this.repost_post.bind(this)} perform_bill_object_payment_search={this.perform_bill_object_payment_search.bind(this)} show_view_contextual_transfer_bottomsheet={this.show_view_contextual_transfer_bottomsheet.bind(this)} show_view_vote_poll_bottomsheet={this.show_view_vote_poll_bottomsheet.bind(this)} get_objects_votes={this.get_objects_votes.bind(this)} get_poll_results={this.get_poll_results.bind(this)} show_view_calculate_poll_result_bottomsheet={this.show_view_calculate_poll_result_bottomsheet.bind(this)} when_selected_e5_changed={this.when_selected_e5_changed.bind(this)} fetch_uploaded_data_from_ipfs={this.fetch_uploaded_data_from_ipfs.bind(this)}

          close_audio_pip={this.close_audio_pip.bind(this)} play_pause_from_stack={this.play_pause_from_stack.bind(this)} open_full_screen_viewer={this.open_full_screen_viewer.bind(this)} open_stage_creator_ui={this.show_view_stage_creator_payout_result_bottomsheet.bind(this)}
          get_channel_creator_file_records={this.get_channel_creator_file_records.bind(this)} get_channel_creator_payout_stagings={this.get_channel_creator_payout_stagings.bind(this)} get_channel_payout_records={this.get_channel_payout_records.bind(this)}

          hash_data_with_specific_e5={this.hash_data_with_specific_e5.bind(this)} show_view_bid_in_auction_bottomsheet={this.show_view_bid_in_auction_bottomsheet.bind(this)}

        />
        {this.render_homepage_toast()}
      </div>
    )
  }

  render_homepage_toast(){
    var os = getOS()
    if(os == 'iOS' && this.state.stack_bottomsheet == false){
      return(
        <div>
          <ToastContainer limit={3} containerId="id2"/>
        </div>
      )
    }
  }

  set_cookies_after_stack_action(stack_items, should_keep_stack_open){
    var me = this;
    var is_stack_open = this.state.stack_bottomsheet2
    this.setState({stack_bottomsheet2: true});
    setTimeout(function() { 
      if(me.stack_page.current!= null){
        me.stack_page.current?.run_transactions(true, false)
      } 
      me.set_cookies()

      setTimeout(function() {
        if(!is_stack_open) me.setState({stack_bottomsheet2: false});
      }, (1 * 1500));
    }, (1 * 1000));
  }

  add_mail_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1509']/* 'mail-messages' */ && stack[i].e5 == this.state.selected_e5/* message['e5'] */){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1509']/* 'mail-messages' */, entered_indexing_tags:[this.getLocale()['1369']/* 'send' */, this.getLocale()['1201']/* 'mail' */], messages_to_deliver:[], e5: this.state.selected_e5/* message['e5'] */}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_channel_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1510']/* 'channel-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1510']/* 'channel-messages' */, entered_indexing_tags:[this.getLocale()['1369']/* 'send' */, this.getLocale()['109']/* 'channel' */,this.getLocale()['2094']/* 'messages' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_post_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1511']/* 'post-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1511']/* 'post-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['297']/* 'post' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_job_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1514']/* 'job-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1514']/* 'job-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1309']/* 'job' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_proposal_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1515']/* 'proposal-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1515']/* 'proposal-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1309']/* 'job' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_bag_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1501']/* 'bag-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1501']/* 'bag-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1045']/* 'bag' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_storefront_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1502']/* 'storefront-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1502']/* 'storefront-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['1215']/* 'storefront' */,this.getLocale()['1158']/* 'message' */,this.getLocale()['2697']/* 'review' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_audio_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1593cc']/* 'audio-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1593cc']/* 'audio-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['a311a']/* 'audio' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_video_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1593ct']/* 'video-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1593ct']/* 'video-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['b311a']/* 'video' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_nitro_reply_to_stack(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1593cu']/* 'nitro-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1593cu']/* 'nitro-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['a273a']/* 'nitro' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  add_video_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['3030b']/* 'video-comment-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['3030b']/* 'video-comment-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */, this.getLocale()['3030c']/* 'video' */,this.getLocale()['2696']/* 'comment' */], messages_to_deliver:[], e5:this.state.selected_e5}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }

  block_post(object){
    var clone = this.state.posts_blocked_by_me.slice()
    if(clone.includes(object['e5_id'])){
      var index = clone.indexOf(object['e5_id'])
      clone.splice(index, 1)
      this.prompt_top_notification(this.getLocale()['3054cx']/* 'Post unblocked.' */, 1800)
    }else{
      this.prompt_top_notification(this.getLocale()['3054cw']/* 'Post added to your blocked list.' */, 1900)
      clone.push(object['e5_id'])
    }
    this.setState({posts_blocked_by_me: clone, should_update_posts_blocked_by_me:true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  follow_unfollow_post_author(account, e5){
    if(!this.state.has_wallet_been_set && !this.state.has_account_been_loaded_from_storage){
      this.prompt_top_notification(this.getLocale()['a2527br']/* 'First set your wallet.' */, 6300)
      return;
    }
    var follow_id = e5 + ':' + account
    var clone = this.state.followed_accounts.slice()
    if(clone.includes(follow_id)){
      //were removing the account
      if(primary_following.includes(follow_id) && (this.state.user_account_id[e5] == 1 || this.state.user_account_id[e5] == null)){
        this.prompt_top_notification(this.getLocale()['2738j']/* 'First make a transaction to unfollow that account.' */, 6300)
        return;
      }
      var pos = clone.indexOf(follow_id)
      if(pos != -1){
        clone.splice(pos, 1)
        this.setState({followed_accounts: clone, should_update_followed_accounts: true})
        this.prompt_top_notification(this.getLocale()['1593do']/* 'Account removed from your following list.' */, 2300)
      }
    }else{
      clone.push(follow_id)
      this.setState({followed_accounts: clone, should_update_followed_accounts: true})
      this.prompt_top_notification(this.getLocale()['a2527bs']/* 'You are now following that account.' */, 2300)
    }
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  connect_to_node(object){
    var clone = this.state.subscribed_nitros.slice()
    clone.push(object['e5_id'])

    this.setState({my_preferred_nitro: object['e5_id'], subscribed_nitros: clone})
    this.prompt_top_notification(this.getLocale()['c2527bu']/* 'Connected to Nitro node.' */, 2500)
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  repost_audiopost(object){
    if(!this.state.has_wallet_been_set && !this.state.has_account_been_loaded_from_storage){
      this.prompt_top_notification(this.getLocale()['a2527p']/* 'You need to set your account first.' */, 5000)
      return;
    }
    var clone = structuredClone(this.state.posts_reposted_by_me)
    if(clone['audio'].includes(object['e5_id'])){
      var index = clone['audio'].indexOf(object['e5_id'])
      clone['audio'].splice(index, 1)
      this.prompt_top_notification(this.getLocale()['a2527bw']/* 'Audiopost Removed.' */, 1800)
    }else{
      this.prompt_top_notification(this.getLocale()['a2527bv']/* 'Audiopost Added.' */, 1900)
      clone['audio'].push(object['e5_id'])
    }
    this.setState({posts_reposted_by_me: clone, should_update_posts_reposted_by_me:true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  repost_videopost(object){
    if(!this.state.has_wallet_been_set && !this.state.has_account_been_loaded_from_storage){
      this.prompt_top_notification(this.getLocale()['a2527p']/* 'You need to set your account first.' */, 5000)
      return;
    }
    var clone = structuredClone(this.state.posts_reposted_by_me)
    if(clone['video'].includes(object['e5_id'])){
      var index = clone['video'].indexOf(object['e5_id'])
      clone['video'].splice(index, 1)
      this.prompt_top_notification(this.getLocale()['b2527r']/* 'Videopost Removed.' */, 1800)
    }else{
      this.prompt_top_notification(this.getLocale()['b2527s']/* 'Videopost Added.' */, 1900)
      clone['video'].push(object['e5_id'])
    }
    this.setState({posts_reposted_by_me: clone, should_update_posts_reposted_by_me:true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  repost_post(object){
    if(!this.state.has_wallet_been_set && !this.state.has_account_been_loaded_from_storage){
      this.prompt_top_notification(this.getLocale()['a2527p']/* 'You need to set your account first.' */, 5000)
      return;
    }
    var clone = structuredClone(this.state.posts_reposted_by_me)
    if(clone['post'].includes(object['e5_id'])){
      var index = clone['post'].indexOf(object['e5_id'])
      clone['post'].splice(index, 1)
      this.prompt_top_notification(this.getLocale()['b2527r']/* 'Videopost Removed.' */, 1800)
    }else{
      this.prompt_top_notification(this.getLocale()['b2527s']/* 'Videopost Added.' */, 1900)
      clone['post'].push(object['e5_id'])
    }
    this.setState({posts_reposted_by_me: clone, should_update_posts_reposted_by_me:true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }





  delete_message_from_stack(message, type){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == type && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos != -1){
      var messages = stack[pos].messages_to_deliver;
      var message_pos = -1
      for(var i=0; i<messages.length; i++){
        if(messages[i]['message_id'] == message['message_id']){
          message_pos = i
          break;
        }
      }
      if(message_pos != -1){
        stack[pos].messages_to_deliver.splice(message_pos, 1);
        if(stack[pos].messages_to_deliver.length == 0){
          stack.splice(pos, 1)
        }
        this.setState({stack_items: stack})
        this.set_cookies_after_stack_action(stack)
        this.prompt_top_notification(this.getLocale()['2909']/* 'Message Deleted.' */, 1000)
      }else{
        this.prompt_top_notification(this.getLocale()['2907']/* 'You cant delete that message.' */, 3000)
      }
    }else{
      this.prompt_top_notification(this.getLocale()['2907']/* 'You cant delete that message.' */, 3000)
    }
  }

  when_select_deselect_work_tag(tag, pos){
    var clone = this.state.job_section_tags.slice()
    const index = clone.indexOf(tag);
    if (index > -1) { // only splice array when item is found
      clone.splice(index, 1); // 2nd parameter means remove one item only
    } else {
      clone.push(tag)
    }
    this.setState({job_section_tags: clone, should_update_section_tags_onchain: true})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_select_deselect_explore_tag(tag, pos){
    var clone = this.state.explore_section_tags.slice()
    const index = clone.indexOf(tag);
    if (index > -1) { // only splice array when item is found
      clone.splice(index, 1); // 2nd parameter means remove one item only
    } else {
      clone.push(tag)
    }
    this.setState({explore_section_tags: clone, should_update_section_tags_onchain: true})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  enable_tabs(){
    this.setState({visible_tabs: this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
        me.stack_page.current?.set_tabs_tag()
    }, (1 * 1000));
  }







  render_synchronizing_bottomsheet(){
    var background_color = this.state.theme['syncronizing_page_background_color'];
    var size = this.getScreenSize();
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={50} onChange={this.open_syncronizing_page_bottomsheet.bind(this)} open={this.state.syncronizing_page_bottomsheet} onTransitionEnd={this.keep_syncronizing_page_open()}  style={{'z-index':'3'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': 'grey'}}>
          <div style={{ height: this.state.height-50, 'background-color': background_color, 'margin': '0px 0px 0px 0px', 'padding':'10px 10px 0px 10px', 'overflow-y':'auto'}}>
            <Syncronizing_page sync_progress={this.state.syncronizing_progress} app_state={this.state} view_number={this.view_number.bind(this)} theme={this.state.theme} close_syncronizing_page={this.close_syncronizing_page.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    );
  }

  open_syncronizing_page_bottomsheet(){
      if(this.state != null){
        this.setState({syncronizing_page_bottomsheet: !this.state.syncronizing_page_bottomsheet});
      }
  };

  keep_syncronizing_page_open(){
    if(!this.state.syncronizing_page_bottomsheet && this.state.should_keep_synchronizing_bottomsheet_open){
        this.open_syncronizing_page_bottomsheet();
    }
  };

  close_syncronizing_page(){
    if(this.state.syncronizing_progress >= 100 && this.state.should_keep_synchronizing_bottomsheet_open == false){
      this.open_syncronizing_page_bottomsheet()
    }else{
      // this.prompt_top_notification('Not yet!', 700)
    }
  }







  render_send_receive_ether_bottomsheet(){
    if(this.state.send_receive_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var overlay_background = this.state.theme['send_receive_ether_overlay_background'];
    var overlay_shadow_color = this.state.theme['send_receive_ether_overlay_shadow'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.send_receive_bottomsheet} onClose={this.open_send_receive_ether_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': overlay_shadow_color, 'border-radius': '5px 5px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color,'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SendReceiveEtherPage ref={this.send_receive_ether_page}  app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} notify={this.prompt_top_notification.bind(this)} send_ether_to_target={this.send_ether_to_target.bind(this)} transaction_history={this.state.account_transaction_history} theme={this.state.theme} ether_balance={this.state.account_balance} 
                          start_scan={this.start_scan.bind(this)} get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)}/>
                      </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_send_receive_ether_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_send_receive_ether_bottomsheet.bind(this)} open={this.state.send_receive_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': overlay_background,'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': overlay_shadow_color, 'border-radius': '5px 5px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color,'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
              <SendReceiveEtherPage ref={this.send_receive_ether_page}  app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} notify={this.prompt_top_notification.bind(this)} send_ether_to_target={this.send_ether_to_target.bind(this)} transaction_history={this.state.account_transaction_history} theme={this.state.theme} ether_balance={this.state.account_balance} 
              start_scan={this.start_scan.bind(this)} get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_send_receive_ether_bottomsheet(){
    if(this.state.send_receive_bottomsheet == true){
      //closing
      this.send_receive_bottomsheet = this.send_receive_ether_page.current?.state;
     
      this.setState({send_receive_bottomsheet: !this.state.send_receive_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({send_receive_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_bottomsheet: !me.state.send_receive_bottomsheet});
        
        if(me.send_receive_bottomsheet != null){
          me.send_receive_ether_page.current?.setState(me.send_receive_bottomsheet)
        }
      }, (1 * 100));
    }
    
  }

  start_send_receive_ether_bottomsheet(item){
    this.open_send_receive_ether_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.send_receive_ether_page.current != null){
        me.send_receive_ether_page.current.set_object(item)
      } 
    }, (1 * 500));
    
  }

  send_ether_to_target(recipientAddress, amount, gasPrice, state, e5, set_max_priority_per_gas, set_max_fee_per_gas, ether){
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const me = this;

    web3.eth.accounts.wallet.add(state.accounts[e5].privateKey);
    var gas_price = (gasPrice == null || gasPrice == 0 || gasPrice > 100**18) ? 10**9 : gasPrice

    var tx = {
      from: state.accounts[e5].address,
      to: recipientAddress,
      value: amount.toString(),
      gas: 23000,
      gasPrice: gas_price.toString()
    }

    // if(this.state.e5s[e5].type == '1559'){
    //   tx = {
    //     from: state.accounts[e5].address,
    //     to: recipientAddress,
    //     value: amount.toString(),
    //     gas: 23000,
    //     maxPriorityFeePerGas: set_max_priority_per_gas.toString(),
    //     maxFeePerGas: set_max_fee_per_gas.toString()
    //   }
    // }

    web3.eth.sendTransaction(tx)
    .on('transactionHash', function (hash) {
      me.start_get_accounts_data(false)
      console.log('send_result: ',hash)
      me.show_successful_send_bottomsheet({'tx':tx, 'hash':hash, 'e5':e5, 'ether':ether, 'type':'ether'}, )
      // me.get_transaction_receipt({'tx':tx, 'hash':hash, 'e5':e5, 'ether':ether}, hash, web3)
    })
    .on('error', function (error) {
      console.error('Failed to send transaction:', error);
      if(error == 'Error: Invalid JSON RPC response: {}'){
        me.start_get_accounts_data(false)
        // me.prompt_top_notification(me.getLocale()['2728']/* 'send complete!' */, 15600)
        me.show_successful_send_bottomsheet({'tx':tx, 'hash':'', 'e5':e5, 'ether':ether, 'type':'ether'})
      }else{
        me.prompt_top_notification(me.getLocale()['2729']/* 'send failed, ' */+error, 16000)
      }
    });

  }








  render_send_receive_coin_bottomsheet(){
    if(this.state.send_receive_coin_bottomsheet2 != true) return;
    var overlay_background = this.state.theme['send_receive_ether_overlay_background'];
    var overlay_shadow_color = this.state.theme['send_receive_ether_overlay_shadow'];
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.send_receive_coin_bottomsheet} onClose={this.open_send_receive_coin_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_send_receive_coin_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_send_receive_coin_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_send_receive_coin_bottomsheet.bind(this)} open={this.state.send_receive_coin_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': overlay_background,'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color}}>
        {this.render_send_receive_coin_element()}
      </SwipeableBottomSheet>
    )
  }

  render_send_receive_coin_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var overlay_shadow_color = this.state.theme['send_receive_ether_overlay_shadow'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': overlay_shadow_color, 'border-radius': '5px 5px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 0px 0px '+overlay_shadow_color,'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <SendReceiveCoinPage ref={this.send_receive_coin_page}  app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} notify={this.prompt_top_notification.bind(this)} theme={this.state.theme} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} check_if_recipient_address_is_valid={this.check_if_recipient_address_is_valid.bind(this)} broadcast_transaction={this.broadcast_transaction.bind(this)} estimate_arweave_network_fees={this.estimate_arweave_network_fees.bind(this)} validate_arweave_address={this.validate_arweave_address.bind(this)}
        
        />
      </div>
    )
  }

  open_send_receive_coin_bottomsheet(){
    if(this.state.send_receive_coin_bottomsheet == true){
      //closing
      this.send_receive_coin_bottomsheet = this.send_receive_coin_page.current?.state;
     
      this.setState({send_receive_coin_bottomsheet: !this.state.send_receive_coin_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_coin_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({send_receive_coin_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        me.setState({send_receive_coin_bottomsheet: !me.state.send_receive_coin_bottomsheet});
        
        if(me.send_receive_coin_bottomsheet != null){
          me.send_receive_coin_page.current?.setState(me.send_receive_coin_bottomsheet)
        }
      }, (1 * 100));
    }
    
  }

  start_send_receive_coin_bottomsheet(item){
    this.open_send_receive_coin_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.send_receive_coin_page.current != null){
        me.send_receive_coin_page.current.set_object(item)
      } 
    }, (1 * 500));
    
  }

  check_if_recipient_address_is_valid(address, item){
    if(item['symbol'] == 'BTC'){
      return this.validate_bitcoin_address(address)
    }
    else if(item['symbol'] == 'BCH'){
      return this.validate_bitcion_cash_address(address)
    }
    else if(item['symbol'] == 'LTC'){
      return this.validate_litecoin_address(address)
    }
    else if(item['symbol'] == 'DOGE'){
      return this.validate_dogecoin_address(address)
    }
    else if(item['symbol'] == 'DASH'){
      return this.validate_dash_address(address)
    }
    else if(item['symbol'] == 'TRX'){
      return this.validate_tron_address(address)
    }
    else if(item['symbol'] == 'XRP'){
      return this.validate_xrp_address(address)
    }
    else if(item['symbol'] == 'XLM'){
      return this.validate_xlm_address(address)
    }
    else if(item['symbol'] == 'DOT'){
      return this.validate_dot_address(address)
    }
    else if(item['symbol'] == 'KSM'){
      return this.validate_dot_address(address)
    }
    else if(item['symbol'] == 'ALGO'){
      return this.validate_algo_address(address)
    }
    else if(item['symbol'] == 'XTZ'){
      return this.validate_tezos_address(address)
    }
    else if(item['symbol'] == 'ATOM'){
      return this.validate_cosmos_address(address)
    }
    else if(item['symbol'] == 'FIL'){
      return this.validate_filecoin_address(address)
    }
    else if(item['symbol'] == 'SOL'){
      return this.validate_solana_address(address)
    }
    else if(item['symbol'] == 'APT'){
      return this.validate_aptos_address(address)
    }
    else if(item['symbol'] == 'ADA'){
      return this.validate_cardano_address(address)
    }
    else if(item['symbol'] == 'STX'){
      return this.validate_stacks_address(address)
    }
    else if(item['symbol'] == 'AR'){
      return this.validate_arweave_address(address)
    }
    else if(item['symbol'] == 'SUI'){
      return this.validate_sui_address(address)
    }
    else if(item['symbol'] == 'TIA'){
      return this.validate_celestia_address(address)
    }


    return true;
  }

  validate_bitcoin_address(address) {
    const network = bitcoin.networks.bitcoin;
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_bitcion_cash_address(address){
    try {
      var isValidAddress = bchaddr.isValidAddress;
      return isValidAddress(address)// Tries to convert address to script
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_litecoin_address(address){
    const network = bitcoin.networks.litecoin;
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_dogecoin_address(address){
    const network = {
      messagePrefix: '\x19Dogecoin Signed Message:\n',
      // bech32: null,
      bip32: {
        public: 0x02facafd,  // Public key (xpub) prefix
        private: 0x02fac398  // Private key (xprv) prefix
      },
      pubKeyHash: 0x1e,      // Starts with 'D' for mainnet
      scriptHash: 0x16,      // Starts with '9' or 'A' for mainnet
      wif: 0x9e,             // WIF (Wallet Import Format) prefix
    };
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_dash_address(address){
    const network = {
      messagePrefix: '\x19Dash Signed Message:\n',
      bip32: {
        public: 0x02fe52f8, // xpub prefix for Dash
        private: 0x02fe52cc // xprv prefix for Dash
      },
      pubKeyHash: 0x4c,      // P2PKH addresses start with 'X'
      scriptHash: 0x10,      // P2SH addresses start with '7'
      wif: 0xcc              // WIF starts with 'X' for Dash
    };
    try {
      bitcoin.address.toOutputScript(address, network); // Tries to convert address to script
      return true; // If it doesn't throw an error, the address is valid
    } catch (error) {
      return false; // If an error is thrown, the address is invalid
    }
  }

  validate_tron_address(address){
    return TronWeb.isAddress(address)
  }

  validate_xrp_address(address){
    return isValidClassicAddress(address);
  }

  validate_xlm_address(address){
    return StellarSdk.StrKey.isValidEd25519PublicKey(address); 
  }

  validate_dot_address(address){
    try {
      // Attempt to decode and re-encode the address
      const decoded = decodeAddress(address);
      const reencoded = encodeAddress(decoded);
      
      // If the re-encoded address matches the input, it's valid
      return reencoded === address;
    } catch (error) {
      return false; // If an error occurs, the address is invalid
    }
  }

  validate_algo_address(address){
    return algosdk.isValidAddress(address);
  }

  validate_tezos_address(address){
    return validateAddress(address) === ValidationResult.VALID;
  }

  validate_cosmos_address(address){
    // return address.startsWith('cosmos')
    try {
      const decoded = bech32.decode(address);
      return (
        decoded.prefix === "cosmos" &&
        decoded.words.length > 0
      );
    } catch (err) {
      return false;
    }
  }

  validate_filecoin_address(address){
    return address.startsWith('f')
  }

  validate_solana_address(address){
    try {
      // Attempt to create a PublicKey object from the address
      let pubkey = new PublicKey(address);
      return PublicKey.isOnCurve(pubkey.toBytes());
    } catch (error) {
      return false;
    }
  }

  validate_aptos_address(address){
    //starts with '0x' and is 42 characters in length
    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
      return false;
    }
    return true;
  }

  validate_cardano_address(address){
    // try {
    //   const addr = addressFromHexOrBech32(address);
    //   return addr !== null;
    // } catch (error) {
    //   return false;
    // }
  }

  validate_stacks_address(address){
    return validateStacksAddress(address);
  }

  validate_arweave_address(address){
    if (!/^[a-zA-Z0-9_-]{43}$/.test(address)) return false;
    try {
      let decoded = Buffer.from(address, 'base64');
      return decoded.length === 32;
    } catch (e) {
      return false;
    }
  }

  validate_sui_address(address){
    const suiAddressRegex = /^0x[a-fA-F0-9]{64}$/;
    return suiAddressRegex.test(address);
  }

  validate_celestia_address(address){
    // return address.startsWith('celestia')
    try {
      const decoded = bech32.decode(address);
      return (
        decoded.prefix === "celestia" &&
        decoded.words.length > 0
      );
    } catch (err) {
      return false;
    }
  }




  broadcast_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, memo_text) => {
    var data = this.state.coin_data[item['symbol']]
    if(item['symbol'] == 'BTC'){
      await this.create_and_broadcast_bitcoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'BCH'){
      await this.create_and_broadcast_bitcoin_cash_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'LTC'){
      await this.create_and_broadcast_litecoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'DOGE'){
      await this.create_and_broadcast_dogecoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'DASH'){
      await this.create_and_broadcast_dash_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'TRX'){
      await this.create_and_broadcast_tron_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'XRP'){
      await this.create_and_broadcast_xrp_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'XLM'){
      await this.create_and_broadcast_xlm_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'DOT'){
      await this.create_and_broadcast_dot_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'KSM'){
      await this.create_and_broadcast_kusama_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'ALGO'){
      await this.create_and_broadcast_algorand_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'XTZ'){
      await this.create_and_broadcast_tezos_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'ATOM'){
      await this.create_and_broadcast_atom_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'FIL'){
      await this.create_and_broadcast_filecoin_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'SOL'){
      await this.create_and_broadcast_solana_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'ADA'){
      await this.create_and_broadcast_cardano_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'STX'){
      await this.create_and_broadcast_stacks_transaction(item, fee, transfer_amount, recipient_address, sender_address, data, memo_text)
    }
    else if(item['symbol'] == 'AR'){
      await this.create_and_broadcast_arweave_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }
    else if(item['symbol'] == 'SUI'){
      await this.create_and_broadcast_sui_transaction(item, fee, transfer_amount, recipient_address, sender_address, data)
    }

    var sync_time = item['symbol'] == 'AR' ? (4 * 60_000) : (1 * 30_000)

    var me = this;
    setTimeout(function() {
      me.update_coin_balances(item['symbol'], false)
    }, sync_time);
  }

  create_and_broadcast_bitcoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const path = "m/44'/0'/0'/0/0" // bitcoin mainnet
    const network = bitcoin.networks.bitcoin;
    var wallet = await this.get_bitcoin_wallet(seed, network, path)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0

    for (let utx of utxos['unspent_outputs']) {
      txb.addInput(utx['tx_hash_big_endian'], utx['tx_output_n']);
      input_count++;
      input += utx['value'];
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(sender_address, change);
    }

    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();
    const hash = await this.broadcast_block_cypher_transaction(raw, 'btc')

    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  broadcast_block_cypher_transaction = async (rawTxHex, network) => {
    var api_key = `${process.env.REACT_APP_BLOCKCYPHER_API_KEY}`;
    var request = `https://api.blockcypher.com/v1/${network}/main/txs/push?token=${api_key}`
    var body_obj = {"tx":`${rawTxHex}`}
    var header = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: JSON.stringify(body_obj)
    }
    try{
      const response = await fetch(request, header);
      if (!response.ok) {
        console.log(response)
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
      var data = await response.text();
      data = JSON.parse(data)
      
      if(data['tx'] != null){
        var hash = data['tx']['hash']
        if(hash!= null){
          return hash
        }else{
          this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
        }
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_bitcoin_cash_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = bitcoin.networks.bitcoin;
    const path = "m/44'/145'/0'/0/0" // bitcoin cash mainnet
    const wallet = await this.get_bitcoin_wallet(seed, network, path)
    const utxos = data['utxos']

    var wif = wallet.privateKey
    var input_utxo = []
    var input = 0;
    var input_count = 0
    for (let utx of utxos['utxos']) {
      input_utxo.push({
        'txid': utx['tx_hash'],
        'vout': utx['tx_pos'],
        'scriptPubKey': '',
        'satoshis': utx['value'],
      })
      input_count++;
      input += utx['value'];
      if (input >= transfer_amount) break;
    }

    var size = this.get_tx_size(input_count, 2)
    const change = input - (transfer_amount + fee);

    const ecPair = BITBOX.ECPair.fromWIF(wif);
    const transactionBuilder = new BITBOX.TransactionBuilder('mainnet');

    //inputs for transaction
    input_utxo.forEach((utxo) => {
      transactionBuilder.addInput(utxo['txid'], utxo['vout']);
    });

    transactionBuilder.addOutput(recipient_address, transfer_amount);
    const changeAddress = BITBOX.ECPair.toCashAddress(ecPair);
    transactionBuilder.addOutput(changeAddress, change);

    input_utxo.forEach((utxo, index) => {
      transactionBuilder.sign(index, ecPair, null, transactionBuilder.hashTypes.SIGHASH_ALL, utxo.satoshis);
    });

    const tx = transactionBuilder.build();
    const txHex = tx.toHex();
    const hash = await this.broadcast_bitcoin_cash_transaction(txHex)

    if(hash != null && hash != ""){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  broadcast_bitcoin_cash_transaction = async (rawTxHex) => {
    var request = `https://api.fullstack.cash/v5/rawtransactions/sendRawTransaction/${rawTxHex}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
      var data = await response.text();
      return data
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_litecoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = bitcoin.networks.litecoin;
    const path = "m/44'/2'/0'/0/0" // litecoin mainnet
    const wallet = await this.get_bitcoin_wallet(seed, network, path)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0
    for (let utx of utxos) {
      txb.addInput(utx['txid'], utx['vout']);
      input_count++;
      input += utx['value'];
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(wallet.address, change);
    }
    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();

    const hash = await this.broadcast_block_cypher_transaction(raw, 'ltc')
    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  create_and_broadcast_dogecoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = {
      messagePrefix: '\x19Dogecoin Signed Message:\n',
      // bech32: null,
      bip32: {
        public: 0x02facafd,  // Public key (xpub) prefix
        private: 0x02fac398  // Private key (xprv) prefix
      },
      pubKeyHash: 0x1e,      // Starts with 'D' for mainnet
      scriptHash: 0x16,      // Starts with '9' or 'A' for mainnet
      wif: 0x9e,             // WIF (Wallet Import Format) prefix
    };
    const wallet = await this.make_dogecoin_wallet(seed, network)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0

    for (let utx of utxos['data']) {
      txb.addInput(utx['txid'], utx['vout']);
      input_count++;
      input += parseInt(utx['satoshis']);
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(wallet.address, change);
    }

    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();
    const hash = await this.broadcast_block_cypher_transaction(raw, 'doge')
    
    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  create_and_broadcast_dash_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const network = {
      messagePrefix: '\x19Dash Signed Message:\n',
      bip32: {
        public: 0x02fe52f8, // xpub prefix for Dash
        private: 0x02fe52cc // xprv prefix for Dash
      },
      pubKeyHash: 0x4c,      // P2PKH addresses start with 'X'
      scriptHash: 0x10,      // P2SH addresses start with '7'
      wif: 0xcc              // WIF starts with 'X' for Dash
    };
    const wallet = await this.make_dash_wallet(seed, network)
    const utxos = data['utxos']

    const txb = new bitcoin.TransactionBuilder(network);
    var input = 0;
    var input_count = 0

    for (let utx of utxos) {
      txb.addInput(utx['txid'], utx['vout']);
      input_count++;
      input += parseInt(utx['satoshis']);
      if (input >= transfer_amount) break;
    }

    const change = input - (transfer_amount + fee);
    var size = this.get_tx_size(input_count, 2)

    var scriptPubKey = bitcoin.address.toOutputScript(recipient_address, network)
    txb.addOutput(scriptPubKey, transfer_amount)

    if(change > 0){
      txb.addOutput(wallet.address, change);
    }

    const key = bitcoin.ECPair.fromWIF(wallet.privateKey, network);
    txb.sign(0, key)
    const raw = txb.build().toHex();
    const hash = await this.broadcast_block_cypher_transaction(raw, 'dash')

    if(hash != null){
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'utxos_consumed':input_count, 'tx_size': size, 'hash':hash})
    }
  }

  create_and_broadcast_tron_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.make_tron_wallet(seed)
    const transaction = await wallet.tronWeb.transactionBuilder.sendTrx(
        recipient_address, // Recipient TRON address
        transfer_amount, // Amount to send in SUN (1 TRX = 1,000,000 SUN)
        wallet.address // Sender's address (derived from the private key)
    );

    try{
      const signedTransaction = await wallet.tronWeb.trx.sign(transaction);
      const broadcast = await wallet.tronWeb.trx.sendRawTransaction(signedTransaction);
      if(broadcast != null && broadcast['txid'] != null){
        const hash = broadcast['txid']
        this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_xrp_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const client = new xrpl.Client("wss://xrplcluster.com/")
    await client.connect()
    const wallet = await this.make_xrp_wallet(seed)
    const address = wallet['classicAddress']

    var tx_obj = {
      "TransactionType": "Payment",
      "Account": address,
      "Amount": transfer_amount.toString(),
      "Destination": recipient_address
    }

    try{
      const prepared = await client.autofill(tx_obj)
      const signed = wallet.sign(prepared)
      const hash = signed.hash
      const tx = await client.submitAndWait(signed.tx_blob)
      
      if(tx['result'] != null && tx['result']['validated'] == true){
        this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }

    await client.disconnect()
  }

  create_and_broadcast_xlm_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const server = new StellarSdk.Horizon.Server("https://horizon.stellar.org/")
    const wallet = await this.make_xlm_wallet(seed)
    const address = wallet.publicKey()
    const account = await this.load_xlm_account_info(address, server)
    const receiver_account = await this.load_xlm_account_info(recipient_address, server)

    var send_amount = transfer_amount
    var transaction = new StellarSdk.TransactionBuilder(account, {
        fee: StellarSdk.BASE_FEE,
        networkPassphrase: StellarSdk.Networks.PUBLIC,
    });

    if(receiver_account == null){
      transaction.addOperation(StellarSdk.Operation.createAccount({
        destination: recipient_address,
        startingBalance: "1",
      }))
      send_amount -= 10_000_000
    }

    if(send_amount <= 0){
      this.prompt_top_notification(this.getLocale()['2952']/* 'You need to send at least 1XLM since the receiver doesnt have a XLM account.' */, 7000)
      return;
    }

    transaction.addOperation(StellarSdk.Operation.payment({
      destination: recipient_address,
      asset: StellarSdk.Asset.native(),
      amount: this.get_send_amount_in_lumens(send_amount)
    }));

    transaction.addMemo(StellarSdk.Memo.text(memo_text))
    transaction.setTimeout(60)
    var t = transaction.build();
    t.sign(wallet)

    try{
      var response = await server.submitTransaction(t);
      const paging_token = response['paging_token']
      const hash = response['hash']
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash, 'paging_token':paging_token})
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  get_send_amount_in_lumens(amount){
    var x = (parseFloat(amount) / 10_000_000)
    return x.toString()
  }

  create_and_broadcast_dot_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    // var seed = this.state.final_seed
    // const wallet = await this.generate_dot_wallet(seed)
    // const wsProvider = new WsProvider('wss://polkadot-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;

    // try{
    //   const hash = await api.tx.balances.transferKeepAlive(recipient_address, transfer_amount).signAndSend(wallet.keys);
    //   this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    // }catch(e){
    //   console.log(e)
    //   this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    // }

    // await api.disconnect()
  }

  create_and_broadcast_kusama_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    // var seed = this.state.final_seed
    // const wallet = await this.generate_ksm_wallet(seed)
    // const wsProvider = new WsProvider('wss://kusama-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;

    // try{
    //   const hash = await api.tx.balances.transferKeepAlive(recipient_address, transfer_amount).signAndSend(wallet.keys);
    //   this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    // }catch(e){
    //   console.log(e)
    //   this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    // }

    // await api.disconnect()
  }

  create_and_broadcast_algorand_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_algo_wallet(seed)
    const algodServer = 'https://mainnet-api.4160.nodely.dev';
    const algodPort = 443;
    const algodClient = new algosdk.Algodv2('', algodServer, algodPort);

    var params = await algodClient.getTransactionParams().do();
    var note = new Uint8Array(Buffer.from(memo_text))

    var ptxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
      sender: wallet.addr,
      suggestedParams: params,
      receiver: recipient_address,
      amount: transfer_amount,
      note: note
    })
    try{
      const signedTxn = ptxn.signTxn(wallet.sk);
      const transaction = await algodClient.sendRawTransaction(signedTxn).do();
      const txId = transaction['txid']
      const result = await algosdk.waitForConfirmation(algodClient, txId, 7);

      if(result != null){
        const hash = txId
        this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
      }else{
        this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
      }
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_tezos_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_tezos_wallet(seed)
    const Tezos = new TezosToolkit('https://mainnet.ecadinfra.com');
    Tezos.setProvider({ signer: wallet });
    const amount = this.get_amount_int_tez(transfer_amount)
    try{
      const tx = await Tezos.contract.transfer({ to: recipient_address, amount: amount })
      const hash = tx.hash
      await tx.confirmation(1)
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  get_amount_int_tez(amount){
    return parseFloat(amount) / 1_000_000
  }

  create_and_broadcast_atom_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_atom_wallet(seed)
    const rpc = "https://cosmos-rpc.publicnode.com:443"

    var send_amount = transfer_amount
    var gasfee = fee / 40_000
    const signingClient = await SigningStargateClient.connectWithSigner(rpc, wallet.wall)
    var amount_obj = [{ denom: "uatom", amount: send_amount.toString() }]
    var fee_obj = { amount: [{ denom: "uatom", amount: gasfee.toString() }], gas: "200000", }

    try{
      const result = await signingClient.sendTokens(wallet.cosmosAddress, recipient_address, amount_obj, fee_obj, memo_text)
      const hash = result['transactionHash']
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_filecoin_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const connector = new HttpJsonRpcConnector({ url: 'https://rpc.ankr.com/filecoin', token: '' });
    const hdDerivationPath = `m/44'/461'/0'/0/0`;
    const lotusClient = new LotusClient(connector);
    const walletProvider = new MnemonicWalletProvider(lotusClient, seed, hdDerivationPath);
    const myAddress = await walletProvider.getDefaultAddress();

    const nonce = await lotusClient.mpool.getNonce(myAddress);
    const gasprice = parseInt(fee / 5_744_209)
    const message = await walletProvider.createMessage({
      From: myAddress,
      To: recipient_address,
      Value: transfer_amount.toString().toLocaleString('fullwide', {useGrouping:false}),
      GasPrice: gasprice.toString().toLocaleString('fullwide', {useGrouping:false}),
      GasLimit: 6_000_000,
      gasPremium: gasprice,
      GasFeeCap:gasprice,
      Nonce: nonce,
    });

    try{
      const signed_message = await walletProvider.signMessage(message)
      const cid = await walletProvider.sendSignedMessage(signed_message);
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':cid['/']})
    }catch(e){
      console.log('filecoin:', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_solana_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_sol_wallet(seed)
    // var key = `${process.env.REACT_APP_SOLANA_API_KEY}`
    // const connection = new Connection(`https://mainnet.helius-rpc.com/?api-key=${key}`);
    const connection = new Connection('https://solana-rpc.publicnode.com')

    const recipient = new PublicKey(recipient_address);
    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: wallet.keypair.publicKey,
        toPubkey: recipient,
        transfer_amount,
      })
    );

    try{
      const signature = await sendAndConfirmTransaction(connection, transaction, [wallet.keypair]);
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':signature})
    }catch(e){
      console.log('solana',e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_aptos_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_aptos_wallet(seed)
    const NODE_URL = 'https://fullnode.mainnet.aptoslabs.com/v1'; 
    const client = new AptosClient(NODE_URL);

    const payload = {
      type: 'entry_function_payload',
      function: '0x1::coin::transfer',
      type_arguments: ['0x1::aptos_coin::AptosCoin'],
      arguments: [recipient_address, transfer_amount.toString()],
    };

    try{
      const transaction = await client.generateTransaction(wallet.account.address(), payload);
      const signedTxn = await client.signTransaction(wallet.account, transaction);
      const transactionHash = await client.submitTransaction(signedTxn);
      await client.waitForTransaction(transactionHash);

      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transactionHash})
    }catch(e){
      console.log('aptos', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_cardano_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    // var seed = this.state.final_seed
    // var wallet = await this.generate_cardano_wallet(seed)
    // var amount = bigInt(transfer_amount).value
    // try{
    //   const tx = await wallet.lucid.newTx()
    //   .pay.ToAddress(recipient_address, { lovelace: amount })
    //   .complete();

    //   const signedTx = await tx.sign.withWallet().complete();
    //   const txHash = await signedTx.submit();

    //   this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':txHash})
    // }catch(e){
    //   console.log('cardano', e)
    //   this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    // }
    
  }

  create_and_broadcast_stacks_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_stacks_wallet(seed)
    
    const amount = transfer_amount.toString()
    const fees = parseInt(fee)
    const txOptions = {
      recipient: recipient_address,
      amount: amount,
      senderKey: wallet.wallet.accounts[0].stxPrivateKey,
      STACKS_MAINNET,
      memo: memo_text,
      fee: fees,
      nonce: data['nonce'],
    };

    try{
      const transaction = await makeSTXTokenTransfer(txOptions);
      const response = await broadcastTransaction({ transaction: transaction, attachment: '', network: 'mainnet' });
      var transaction_hash = response.txid

      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transaction_hash})
    }catch(e){
      console.log('stacks', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
    
  }

  create_and_broadcast_arweave_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    const wallet = data['wallet']
    try{
      var transaction = await arweave.createTransaction({
        target: recipient_address,
        quantity: transfer_amount.toString().toLocaleString('fullwide', {useGrouping:false})
      }, wallet.key);
      await arweave.transactions.sign(transaction, wallet.key);
      const transaction_hash = transaction['id']
      const response = await arweave.transactions.post(transaction);

      if(response.status !== 200){
        throw new Error(`Transaction failed ${response}`);
      }

      var sync_time = (3 * 60_000)
      var me = this;
      setTimeout(function() {
        me.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':transaction.reward, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transaction_hash})
      }, sync_time);
    }catch(e){
      console.log('arweave', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_sui_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data) => {
    const wallet = data['wallet']
    try{
      const rpcUrl = getFullnodeUrl('mainnet');
      const client = new SuiClient({ url: rpcUrl });
      const tx = new SuiTransaction();
      const [coin] = tx.splitCoins(tx.gas, [parseInt(transfer_amount)]);
      tx.transferObjects([coin], recipient_address);

      var result = await client.signAndExecuteTransaction({ signer: wallet.keypair, transaction: tx });
      var hash = await client.waitForTransaction({ digest: result.digest });
      const transaction_hash = hash.digest
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':transaction_hash})
    }catch(e){
      console.log('sui', e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }

  create_and_broadcast_tia_transaction = async (item, fee, transfer_amount, recipient_address, sender_address, data, memo_text) => {
    var seed = this.state.final_seed
    const wallet = await this.generate_tia_wallet(seed)
    const rpc = "https://celestia-rpc.publicnode.com:443"

    var send_amount = transfer_amount
    var gasfee = fee / 40_000
    const signingClient = await SigningStargateClient.connectWithSigner(rpc, wallet.wall)
    var amount_obj = [{ denom: "utia", amount: send_amount.toString() }]
    var fee_obj = { amount: [{ denom: "utia", amount: gasfee.toString() }], gas: "200000", }

    try{
      const result = await signingClient.sendTokens(wallet.celestiaAddress, recipient_address, amount_obj, fee_obj, memo_text)
      const hash = result['transactionHash']
      this.show_successful_send_bottomsheet({'type':'coin', 'item':item, 'fee':fee, 'amount':transfer_amount, 'recipient':recipient_address, 'sender':sender_address, 'hash':hash})
    }catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['2946']/* 'Something went wrong with the transaction broadcast.' */, 7000)
    }
  }









  render_stack_bottomsheet(){
    // if(this.state.stack_bottomsheet2 != true) return;
    // if(!this.state.show_stack) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()

    if(os == 'iOS'){
      return(
        <Sheet isOpen={this.state.stack_bottomsheet} onClose={this.open_stack_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
            <Sheet.Container>
                <Sheet.Content>
                    <div style={{ height: this.state.height-34, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                        {this.render_stack_item(size)}
                    </div>
                </Sheet.Content>
                <ToastContainer limit={3} containerId="id2"/>
            </Sheet.Container>
            <Sheet.Backdrop onTap={()=> this.open_stack_bottomsheet()}/>
        </Sheet>
      )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_stack_bottomsheet.bind(this)} open={this.state.stack_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
              {this.render_stack_item(size)}
          </div>
      </SwipeableBottomSheet>
    )
  }

  render_stack_item(size){
    // if(!this.state.show_stack) return;
    if(this.state.is_reloading_stack_due_to_ios_run == true){
      return(
        <div style={{height: '100%', width:'100%','display': 'flex', 'align-items':'center','justify-content':'center'}}>
            <img alt="" src={this.state.theme['letter']} style={{height:'auto',width:'18%'}} />
        </div>
      );
    }
    return(
      <StackPage os={getOS()} ref={this.stack_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} theme={this.state.theme} when_device_theme_changed={this.when_device_theme_changed.bind(this)} when_details_orientation_changed={this.when_details_orientation_changed.bind(this)} notify={this.prompt_top_notification.bind(this)} when_wallet_data_updated2={this.when_wallet_data_updated2.bind(this)} height={this.state.height} run_transaction_with_e={this.run_transaction_with_e.bind(this)} store_data_in_infura={this.store_data_in_infura.bind(this)} get_accounts_public_key={this.get_accounts_public_key.bind(this)} encrypt_data_object={this.encrypt_data_object.bind(this)} 
      encrypt_key_with_accounts_public_key_hash={this.encrypt_key_with_accounts_public_key_hash.bind(this)} get_account_public_key={this.get_account_public_key.bind(this)} get_account_raw_public_key={this.get_account_raw_public_key.bind(this)} view_transaction={this.view_transaction.bind(this)} show_hide_stack_item={this.show_hide_stack_item.bind(this)} show_view_transaction_log_bottomsheet={this.show_view_transaction_log_bottomsheet.bind(this)} add_account_to_contacts={this.add_account_to_contacts.bind(this)} remove_account_from_contacts={this.remove_account_from_contacts.bind(this)} add_alias_transaction_to_stack={this.add_alias_transaction_to_stack.bind(this)} unreserve_alias_transaction_to_stack={this.unreserve_alias_transaction_to_stack.bind(this)} reset_alias_transaction_to_stack={this.reset_alias_transaction_to_stack.bind(this)} 
      when_selected_e5_changed={this.when_selected_e5_changed.bind(this)} when_storage_option_changed={this.when_storage_option_changed.bind(this)} store_objects_data_in_ipfs_using_option={this.store_objects_data_in_ipfs_using_option.bind(this)} lock_run={this.lock_run.bind(this)} open_wallet_guide_bottomsheet={this.open_wallet_guide_bottomsheet.bind(this)} clear_cache={this.clear_cache.bind(this)} when_refresh_speed_changed={this.when_refresh_speed_changed.bind(this)} remove_account_from_blocked_accounts={this.remove_account_from_blocked_accounts.bind(this)} add_account_to_blocked_list={this.add_account_to_blocked_list.bind(this)} when_masked_data_setting_changed={this.when_masked_data_setting_changed.bind(this)} when_content_channeling_changed={this.when_content_channeling_changed.bind(this)} when_content_language_changed={this.when_content_language_changed.bind(this)} when_content_filter_setting_changed={this.when_content_filter_setting_changed.bind(this)} when_tabs_setting_changed={this.when_tabs_setting_changed.bind(this)} when_storage_permission_setting_changed={this.when_storage_permission_setting_changed.bind(this)} calculate_gas_with_e={this.calculate_gas_with_e.bind(this)} 
      get_wallet_data_for_specific_e5={this.get_wallet_data_for_specific_e5.bind(this)} show_confirm_run_bottomsheet={this.show_confirm_run_bottomsheet.bind(this)} when_stack_optimizer_setting_changed={this.when_stack_optimizer_setting_changed.bind(this)} clear_transaction_stack={this.clear_transaction_stack.bind(this)} open_object_in_homepage={this.open_object_in_homepage.bind(this)} when_homepage_tags_position_tags_changed={this.when_homepage_tags_position_tags_changed.bind(this)} when_preferred_font_tags_changed={this.when_preferred_font_tags_changed.bind(this)} when_skip_nsfw_warning_tags_changed={this.when_skip_nsfw_warning_tags_changed.bind(this)} when_graph_type_tags_changed={this.when_graph_type_tags_changed.bind(this)} set_watched_account_id={this.set_watched_account_id.bind(this)} 
      when_remember_account_tags_changed={this.when_remember_account_tags_changed.bind(this)}
      show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} sign_custom_data_using_wallet={this.sign_custom_data_using_wallet.bind(this)} verify_custom_data_using_wallet={this.verify_custom_data_using_wallet.bind(this)} set_up_web3_account={this.set_up_web3_account.bind(this)} upload_multiple_files_to_web3_or_chainsafe={this.upload_multiple_files_to_web3_or_chainsafe.bind(this)}
      when_run_gas_price_set={this.when_run_gas_price_set.bind(this)} set_custom_gateway={this.set_custom_gateway.bind(this)} load_my_account_storage_info={this.load_my_account_storage_info.bind(this)} upload_multiple_files_to_nitro_node={this.upload_multiple_files_to_nitro_node.bind(this)} set_my_nitro_selection={this.set_my_nitro_selection.bind(this)} load_nitro_node_details={this.load_nitro_node_details.bind(this)} follow_account={this.follow_account.bind(this)} remove_followed_account={this.remove_followed_account.bind(this)} censor_keyword={this.censor_keyword.bind(this)} uncensor_keyword={this.uncensor_keyword.bind(this)} close_audio_pip={this.close_audio_pip.bind(this)} play_pause_from_stack={this.play_pause_from_stack.bind(this)} open_full_screen_viewer={this.open_full_screen_viewer.bind(this)} when_hide_pip_tags_changed={this.when_hide_pip_tags_changed.bind(this)} when_preferred_currency_tags_changed={this.when_preferred_currency_tags_changed.bind(this)}
      calculate_arweave_data_fees={this.calculate_arweave_data_fees.bind(this)} show_dialer_bottomsheet={this.show_dialer_bottomsheet.bind(this)} when_device_theme_image_changed={this.when_device_theme_image_changed.bind(this)} prompt_confirmation_for_arweave_upload={this.prompt_confirmation_for_arweave_upload.bind(this)} when_file_tapped={this.when_file_tapped.bind(this)} get_my_entire_public_key={this.get_my_entire_public_key.bind(this)} load_extra_proposal_data={this.load_extra_proposal_data.bind(this)} load_extra_token_data={this.load_extra_token_data.bind(this)} when_minified_content_setting_changed={this.when_minified_content_setting_changed.bind(this)} get_my_private_key={this.get_my_private_key.bind(this)} when_auto_run_setting_changed={this.when_auto_run_setting_changed.bind(this)} show_view_contextual_transfer_bottomsheet={this.show_view_contextual_transfer_bottomsheet.bind(this)} hash_data={this.hash_data.bind(this)} set_contextual_transfer_identifier={this.set_contextual_transfer_identifier.bind(this)} set_stack_depth_value={this.set_stack_depth_value.bind(this)} set_stack_size_in_bytes={this.set_stack_size_in_bytes.bind(this)} when_explore_display_type_changed={this.when_explore_display_type_changed.bind(this)} stringToBigNumber={this.stringToBigNumber.bind(this)} 
      set_can_switch_e5_value={this.set_can_switch_e5_value.bind(this)} when_audiplayer_position_changed={this.when_audiplayer_position_changed.bind(this)} channel_id_to_hashed_id={this.channel_id_to_hashed_id.bind(this)} when_rating_denomination_changed={this.when_rating_denomination_changed.bind(this)}
      
      />
    )
  }

  open_stack_bottomsheet(){
    if(this.state.stack_bottomsheet == true){
      //closing
      this.stack_bottomsheet = this.stack_page.current?.state;

      this.setState({stack_bottomsheet: !this.state.stack_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({stack_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({stack_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({stack_bottomsheet: !me.state.stack_bottomsheet});
          me.stack_page.current?.run_transactions(true, false)
        }
      }, (1 * 200));
    }
  }

  when_device_theme_changed(theme){
    if(this.state.theme['name'] != theme){
      this.reset_coin_and_token_images(theme, this.state.theme['name'])
    }
    this.setState({theme: this.get_theme_data(theme), theme_image:''})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  reset_coin_and_token_images = async (theme, previous_theme) => {
    if(theme == this.getLocale()['1417']/* 'light' */ || theme == this.getLocale()['1418']/* 'dark' */ || theme == this.getLocale()['2740']/* midnight */ || theme == this.getLocale()['1593a']/* 'auto' */){
      if(previous_theme == this.getLocale()['1417']/* 'light' */ || previous_theme == this.getLocale()['1418']/* 'dark' */ || previous_theme == this.getLocale()['2740']/* midnight */ || previous_theme == this.getLocale()['1593a']/* 'auto' */) return;

      const original_ether_settings = this.get_e5s()
      var ether_state_clone = structuredClone(this.state.e5s)
      ether_state_clone['data'].forEach(e5 => {
        ether_state_clone[e5].ether_image = original_ether_settings[e5].ether_image
        this.setState({e5s: ether_state_clone})
      });

      const original_coin_settings = this.get_coin_data()
      var coin_state_clone = structuredClone(this.state.coins)
      Object.keys(coin_state_clone).forEach(coin => {
        coin_state_clone[coin]['label']['image'] = original_coin_settings[coin]['label']['image']
        coin_state_clone[coin]['banner-icon']['image'] = original_coin_settings[coin]['banner-icon']['image']
        this.setState({coins: original_coin_settings})
      });
      // this.setState({e5s: ether_state_clone, coins: original_coin_settings})
    }
    else{
      console.log('transform_image_by_theme', 'beginning image transformation work')
      const existing_image_data = await this.fetch_image_theme_data_in_storage(theme)
      console.log('transform_image_by_theme', 'existing_image_data', existing_image_data)
      var should_update_storage = false
      if(existing_image_data[theme] == null){
        existing_image_data[theme] = {}
        should_update_storage = true
      }
      const original_ether_settings = this.get_e5s()
      var ether_state_clone = structuredClone(this.state.e5s)
      var e5s = ether_state_clone['data']
      for(var i=0; i<e5s.length; i++){
        var e5 = e5s[i]
        console.log('transform_image_by_theme', 'processing', original_ether_settings[e5].token)
        const updated_image = existing_image_data[theme][e5] == null ? await this.transform_image_by_theme(original_ether_settings[e5].ether_image, theme) : existing_image_data[theme][e5]

        if(existing_image_data[theme][e5] == null){
          existing_image_data[theme][e5] = updated_image
          should_update_storage = true
        }

        if(this.state.theme['name'] != theme && i > 7 && should_update_storage == true){
          return;
        }
        
        ether_state_clone[e5].ether_image = updated_image
        this.setState({e5s: ether_state_clone})
      }

      console.log('transform_image_by_theme', 'done processing ethers...')

      const original_coin_settings = this.get_coin_data()
      var coin_state_clone = structuredClone(this.state.coins)
      var coin_keys = Object.keys(coin_state_clone)
      for(var j=0; j<coin_keys.length; j++){
        var coin = coin_keys[j]
        console.log('transform_image_by_theme', 'processing', coin)
        var image_to_use = original_coin_settings[coin]['label']['image']
        if(coin == 'ALGO'){
          image_to_use = algorand2_logo
        }
        else if(coin == 'SOL'){
          image_to_use = solana2_logo
        }
  
        const updated_image = existing_image_data[theme][coin] == null ? await this.transform_image_by_theme(image_to_use, theme) : existing_image_data[theme][coin]

        if(existing_image_data[theme][coin] == null){
          existing_image_data[theme][coin] = updated_image
          should_update_storage = true
        }

        if(this.state.theme['name'] != theme && j > 7 && should_update_storage == true){
          return;
        }

        coin_state_clone[coin]['label']['image'] = updated_image
        coin_state_clone[coin]['banner-icon']['image'] = updated_image
        this.setState({coins: coin_state_clone})
      }
      // this.setState({e5s: ether_state_clone, coins: original_coin_settings})
      
      if(should_update_storage == true){
        if(this.state.storage_permissions == this.getLocale()['1428']/* 'enabled' */){
          this.update_image_theme_data_in_storage(existing_image_data[theme], theme)
        }else{
          this.setState({background_images_with_custom_themes: existing_image_data})
        }
        
      }
    }
  }

  update_theme_image_data_once_storage_permissions_enabled(){
    if(this.state.background_images_with_custom_themes == null || this.state.storage_permissions != this.getLocale()['1428']/* 'enabled' */) return;
    const clone = structuredClone(this.state.background_images_with_custom_themes)
    const keys = Object.keys(clone)
    keys.forEach(theme => {
      this.update_image_theme_data_in_storage(clone[theme], theme)
    });
    this.setState({background_images_with_custom_themes: null})
  }

  update_image_theme_data_in_storage(existing_image_data, theme){
    const data_string = JSON.stringify(existing_image_data)
    this.update_data_in_db(data_string, theme)
    localStorage.setItem(theme, 'set')
  }

  fetch_image_theme_data_in_storage = async (theme) => {
    if(localStorage.getItem(theme) == null){
      const obj = {}
      obj[theme] = {}
      return obj
    }
    else if(this.state.background_images_with_custom_themes != null){
      return this.state.background_images_with_custom_themes
    }
    const data_string = await this.load_data_from_indexdb(theme)
    if(data_string != null){
      try{
        const obj = {}
        obj[theme] = JSON.parse(data_string)
        return obj
      }catch(e){
        console.log('fetch_image_theme_data_in_storage', 'failed to parse')
      }
    }
    const obj = {}
    obj[theme] = {}
    return obj
  }

  transform_image_by_theme = (image_url, theme) => {
    const theme_data = this.get_theme_data(theme)
    const main_rgba = this.hexToRgba(theme_data['primary_text_color'])
    const darker_rgba = this.hexToRgba(theme_data['secondary_text_color'])
    console.log('transform_image_by_theme', 'beginning transformation for specific image...')
    return new Promise((resolve, reject) => {
      const img = new Image();
      const maxWidth = 400 
  
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = maxWidth;
        canvas.height = maxWidth;
  
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        const imageData = ctx.getImageData(0, 0, maxWidth, maxWidth);
        const data = imageData.data;

        for (let i = 0; i < data.length; i += 4) {
          const r = data[i];
          const g = data[i + 1];
          const b = data[i + 2];
          const a = data[i + 3];

          if (this.is_close_to(r, 179) && this.is_close_to(g, 179) && this.is_close_to(b, 179) && a > 0) {
            //if ring color
            data[i]     = main_rgba.r;   // R -> green
            data[i + 1] = main_rgba.g; // G
            data[i + 2] = main_rgba.b;   // B
          }
          else if (this.is_close_to(r, 128) && this.is_close_to(g, 128) && this.is_close_to(b, 128) && a > 0) {
            //if ring color
            data[i]     = main_rgba.r;   // R -> green
            data[i + 1] = main_rgba.g; // G
            data[i + 2] = main_rgba.b;   // B
          }
          else if (this.is_close_to(r, 255) && this.is_close_to(g, 255) && this.is_close_to(b, 255) && a > 0) {
            //if ring color
            data[i]     = main_rgba.r;   // R -> green
            data[i + 1] = main_rgba.g; // G
            data[i + 2] = main_rgba.b;   // B
          }
        }
        ctx.putImageData(imageData, 0, 0);
        var return_blob = canvas.toDataURL("image/jpeg", 1.0);
        resolve(return_blob);
      };
  
      img.src = image_url;
      img.onerror = reject;
    });
  }

  is_close_to(number, target){
    return Math.abs(number-target) <= 6
  }

  hexToRgba(hex) {
    // Remove "#" if present
    if(!hex.includes('#')){
      return this.cssColorToRgba(hex)
    }
    hex = hex.replace(/^#/, '');
  
    // Parse 3-digit hex (e.g. #abc) to 6-digit
    if (hex.length === 3) {
      hex = hex.split('').map(c => c + c).join('');
    }
  
    const r = parseInt(hex.slice(0, 2), 16);
    const g = parseInt(hex.slice(2, 4), 16);
    const b = parseInt(hex.slice(4, 6), 16);
  
    return {r, g, b};
  }

  cssColorToRgba(colorName) {
    const temp = document.createElement('div');
    temp.style.color = colorName;
    document.body.appendChild(temp);
  
    const computedColor = getComputedStyle(temp).color;
    document.body.removeChild(temp);
  
    // computedColor is in "rgb(r, g, b)" or "rgba(r, g, b, a)" format
    const rgbValues = computedColor.match(/\d+/g).map(Number);
    const [r, g, b] = rgbValues;
  
    return {r, g, b}
  }



  when_details_orientation_changed(orientation){
    this.setState({details_orientation: orientation})
  }

  when_selected_e5_changed(e5){
    this.setState({selected_e5: e5})
    var me = this;
    setTimeout(function() {
        // console.log('------------------when_selected_e5_changed---------------------')
        // console.log(me.state.selected_e5)
        me.set_cookies()
    }, (1 * 1000));
  }

  when_storage_option_changed(option){
    this.setState({storage_option: option})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  clear_cache(){
    if(this.homepage.current != null){
      this.homepage.current?.setState({viewed_posts:[],viewed_channels:[],viewed_jobs:[], viewed_contracts:[], viewed_subscriptions:[], viewed_proposals:[],viewed_stores:[], viewed_bags:[], viewed_contractors:[], pinned_bags:[], pinned_channels:[], pinned_item:[], pinned_post:[], pinned_subscriptions:[], pinned_proposal:[], pinned_contractor:[], pinned_contract:[], pinned_job:[],})
    }
  }

  when_refresh_speed_changed(item){
    this.setState({refresh_speed: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
        me.reset_background_sync()
    }, (1 * 1000));
  }

  when_masked_data_setting_changed(item){
    this.setState({masked_content: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_content_channeling_changed(item){
    this.setState({content_channeling: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_content_language_changed(item){
    this.setState({device_language: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_content_filter_setting_changed(item){
    this.setState({section_tags_setting:item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
        const page = me.homepage.current?.get_selected_page()
        me.load_data_from_page_in_focus(page)
    }, (1 * 1000));
  }

  when_tabs_setting_changed(item){
    this.setState({visible_tabs: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_storage_permission_setting_changed(item){
    this.setState({storage_permissions: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
        me.update_theme_image_data_once_storage_permissions_enabled()
    }, (1 * 1000));
  }

  when_stack_optimizer_setting_changed(item){
    this.setState({stack_optimizer: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  clear_transaction_stack(){
    this.setState({stack_items: []})
    this.prompt_top_notification(this.getLocale()['2698']/* 'stack cleared.' */, 1700)
  }

  open_object_in_homepage(target, e5, type){
    this.open_stack_bottomsheet()
    if(this.homepage.current != null){
      this.homepage.current?.open_notification_link(target, e5, type)
    }
  }

  when_homepage_tags_position_tags_changed(item){
    this.setState({homepage_tags_position: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_preferred_font_tags_changed(item){
    this.setState({font: item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_skip_nsfw_warning_tags_changed(item){
    this.setState({auto_skip_nsfw_warning:item})
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_graph_type_tags_changed(item){
    this.setState({graph_type: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  set_watched_account_id(account){
    this.setState({watched_account_id: account})
    var me = this;
    setTimeout(function() {
      this.update_watched_account_data()
    }, (1 * 1000));
    
  }

  when_remember_account_tags_changed(item){
    this.setState({remember_account: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  calculate_actual_balance(e5, token_id){
    var txs = this.state.stack_items
    if(this.state.created_token_object_mapping[e5] == null || this.state.created_token_object_mapping[e5][token_id] == null) return 0
    var exchange_balance = this.state.created_token_object_mapping[e5][token_id]['balance']
    var total_amount = bigInt(0)
    for(var i=0; i<txs.length; i++){
      var t = txs[i]
      if(txs[i].e5 == e5){
        // if(txs[i].type == this.getLocale()['946']/* 'buy-sell' */){
        //     var amount = bigInt(txs[i].amount)
        //     var exchange = t.token_item['id']
        //     var action = this.get_action(t)
        //     if(token_id == exchange && action == 1){
        //         total_amount = bigInt(total_amount).add(amount)
        //     }
        // }
        // else 
        if(txs[i].type == this.getLocale()['1018']/* 'transfer' */){
            if(txs[i].token_item['id'] == token_id){
                total_amount = bigInt(total_amount).add(txs[i].debit_balance)
            }
        }
        else if(txs[i].type == this.getLocale()['1499']/* 'direct-purchase' */){
          for(var i=0; i<t.selected_variant['price_data'].length; i++){
              var exchange = t.selected_variant['price_data'][i]['id']
              var amount = this.get_amounts_to_be_paid(t.selected_variant['price_data'][i]['amount'], t.purchase_unit_count)
              if(exchange == token_id){
                  total_amount = bigInt(total_amount).add(amount)
              }
          }
          for(var i=0; i<t.storefront_item['ipfs'].shipping_price_data.length; i++){
              var exchange = t.storefront_item['ipfs'].shipping_price_data[i]['id']
              var amount = this.get_amounts_to_be_paid(t.storefront_item['ipfs'].shipping_price_data[i]['amount'], t.purchase_unit_count)
              if(exchange == token_id){
                  total_amount = bigInt(total_amount).add(amount)
              }
          }
          var object = t.storefront_item
          if(object['ipfs'] != null && object['ipfs'].option_groups != null && object['ipfs'].option_groups.length > 0){
            var option_fees = this.get_final_purchase_option_fees(object['ipfs'].option_groups, t)
            for(var i=0; i<option_fees.length; i++){
              var exchange = option_fees[i]['id']
              var amount = bigInt(option_fees[i]['amount'])
              if(exchange == token_id){
                total_amount = bigInt(total_amount).add(amount)
              }
            }
          }
        }
        else if(txs[i].type == this.getLocale()['1155']/* 'award' */){
          if(token_id == 5){
              total_amount = bigInt(total_amount).add(t.award_amount)
          }
          for(var i=0; i<t.price_data.length; i++){
              var exchange = t.price_data[i]['id']
              var amount = t.price_data[i]['amount']
              if(exchange == token_id){
                total_amount = bigInt(total_amount).add(amount)
              }
          }
        }
        else if(txs[i].type == this.getLocale()['1509']/* 'mail-messages' */ || txs[i].type == this.getLocale()['1511']/* 'post-messages' */ || txs[i].type == this.getLocale()['1514']/* 'job-messages' */ || txs[i].type == this.getLocale()['1515']/* 'proposal-messages' */ || txs[i].type == this.getLocale()['1501']/* 'bag-messages' */ || txs[i].type == this.getLocale()['1505']/* 'job-request-messages' */){
          for(var i=0; i<t.messages_to_deliver.length; i++){
            if(t.messages_to_deliver[i]['award_amount'] != 0 && t.messages_to_deliver[i]['award_receiver'] != null){
              total_amount = bigInt(total_amount).add(t.messages_to_deliver[i]['award_amount'])
            }
          }
        }
        else if(txs[i].type == this.getLocale()['946']/* 'buy-sell' */){
          var buy_tokens = t.token_item['data'][3]
          var required_amounts = this.calculate_token_prices(t, t.token_item['data'][4])
          var action = this.get_action(t)
          for(var i=0; i<buy_tokens.length; i++){
            var buy_token_id = buy_tokens[i]
            if(buy_token_id == token_id && action == 0){
              var required_amount = required_amounts[i]
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['1']/* 'enter-contract' */){
          var entry_tokens = t.contract_item['data'][2]
          var entry_amounts = t.contract_item['data'][3]
          for(var i=0; i<entry_tokens.length; i++){
            var entry_token_id = entry_tokens[i]
            if(entry_token_id == token_id){
              var required_amount = entry_amounts[i]
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['312']/* 'proposal' */){
          for(var i = 0; i<t.bounty_values.length; i++){
            if(t.bounty_values[i]['exchange'] == token_id){
              var required_amount = t.bounty_values[i]['amount']
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['862']/* 'pay-subscription' */){
          var entry_tokens = t.subscription_item['data'][2]
          var entry_fees = t.subscription_item['data'][3]
          for(var i=0; i<entry_tokens.length; i++){
            if(token_id == entry_tokens[i]){
              var required_amount = this.calculate_final_amount(entry_fees[i], t)
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
        else if(txs[i].type == this.getLocale()['2896']/* 'upcoming-subscriptions' */){
          var exchanges_used = t.data.exchanges_used
          var exchange_amounts = t.data.exchange_amounts
          for(var i=0; i<exchanges_used.length; i++){
            if(token_id == exchanges_used[i]){
              var required_amount = exchange_amounts[token_id]
              total_amount = bigInt(total_amount).add(required_amount)
            }
          }
        }
      }
    }
    return bigInt(exchange_balance).minus(total_amount)
  }

  get_amounts_to_be_paid(amount){
    return bigInt(amount).multiply(bigInt(this.state.purchase_unit_count))
  }

  get_final_purchase_option_fees(options, transaction_item){
    var price_obj = {}
    for(var i=0; i<transaction_item.purchase_option_tags_array.length; i++){
        var tag_obj = transaction_item.purchase_option_tags_array[i]
        var selected_items = []
        for(var j=0; j<tag_obj['e'][2].length; j++){
            var selected_item_pos = tag_obj['e'][2][j]
            if(selected_item_pos != 0){
                selected_items.push(selected_item_pos-1)
            }
        }
        for(var k=0; k<selected_items.length; k++){
            var selected_pos = selected_items[k]
            var option_prices = options[i]['options'][selected_pos]['price']
            option_prices.forEach(price => {
                if(price_obj[price['id']] == null){
                    price_obj[price['id']] = bigInt(0)
                }
                price_obj[price['id']] = bigInt(price_obj[price['id']]).plus(price['amount'])
            });
        } 
    }

    var return_array = []
    for (const exchange in price_obj) {
        if (price_obj.hasOwnProperty(exchange)) {
            return_array.push({'id':exchange, 'amount':price_obj[exchange]})
        }
    }

    return return_array
  }

  get_action(t){
      var action = this.get_selected_item(t.new_mint_dump_action_page_tags_object, 'e')
      var stack_action = 1
      if(action == this.getLocale()['949']/* 'mint-buy' */) stack_action = 0
      return stack_action
  }

  get_selected_item(object, option){
      var selected_item = object[option][2][0]
      var picked_item = object[option][1][selected_item];
      return picked_item
  }

  calculate_token_prices(t, buy_amounts){
    var amount = t.amount
    var return_buy_amounts = buy_amounts.slice()
    for(var i = 0; i < buy_amounts.length; i++){
        return_buy_amounts[i] = bigInt(bigInt(buy_amounts[i]).multiply(bigInt(amount)) )
    }
    return return_buy_amounts
  }

  calculate_final_amount(price, t){
    return bigInt(price).multiply(t.time_units)
  }

  set_up_web3_account = async (email) => {
    if(this.update_web3_time == null) {
      this.update_web3_time = 0
    }
    if((Date.now() - this.update_web3_time) < (5*1000)){
      return;
    }
    this.update_web3_time = Date.now()

    this.web3_email_verification_sent = false;
    var is_client_verified = false;
    const client = await createW3UpClient()
    const space = await client.createSpace('E5')
    const myAccount = await client.login(email)

    setTimeout(function() {
      if(!this.web3_email_verification_sent && !is_client_verified){
        this.web3_email_verification_sent = true
        this.prompt_top_notification(this.getLocale()['1593bi']/* Verification email sent. */, 5000)
      }
    }, (1 * 1000));

    while (true) {
      const res = await myAccount.plan.get()
      if (res.ok){
        is_client_verified = true
        break;
      }
      await new Promise(resolve => setTimeout(resolve, 1000))
    }
    await myAccount.provision(space.did())
    await space.save()

    this.setState({web3_account_email: email, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.prompt_top_notification(me.getLocale()['1593bv']/* Email Verified */, 3000)
    }, (1 * 1000));
  }

  when_run_gas_price_set(number){
    this.setState({run_gas_price: number})
  }

  set_custom_gateway(url){
    this.setState({custom_gateway: url})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  set_my_nitro_selection(id, data){
    this.setState({my_preferred_nitro: id})
    if(data != null) this.load_my_account_storage_info(data);
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  follow_account(account){
    var clone = this.state.followed_accounts.slice()
    var final_account = this.state.selected_e5 + ':' + account

    clone.push(final_account)
    this.setState({followed_accounts: clone, should_update_followed_accounts: true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  remove_followed_account(item, index){
    var e5 = item.split(':')[0]
    if(primary_following.includes(item) && !this.do_i_have_an_account()){
      this.prompt_top_notification(this.getLocale()['1593dp']/* 'First make a transaction to remove that account.' */, 6300)
      return;
    }

    var clone = this.state.followed_accounts.slice()
    clone.splice(index, 1);
    this.setState({followed_accounts: clone, should_update_followed_accounts: true})
    this.prompt_top_notification(this.getLocale()['1593do']/* 'Account removed from your following list.' */, 2300)
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  do_i_have_an_account(){
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      if(this.state.e5s[e5].active == true){
          if(this.state.user_account_id[e5] != null || this.state.user_account_id[e5] > 1000){
            return true;
          }
      }
    }
    return false
  }

  censor_keyword(word_phrase){
    var clone = this.state.censored_keyword_phrases.slice()
    clone.push(word_phrase)
    this.setState({censored_keyword_phrases: clone, should_update_censored_keyword_phrases: true})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  uncensor_keyword(word_phrase, index){
    var clone = this.state.censored_keyword_phrases.slice()
    clone.splice(index, 1);
    this.setState({censored_keyword_phrases: clone, should_update_censored_keyword_phrases: true})
    this.prompt_top_notification(this.getLocale()['1593dx']/* 'Keyword or phrase removed from your censored list.' */, 2300)
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_hide_pip_tags_changed(item){
    this.setState({hide_pip: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_preferred_currency_tags_changed(item){
    this.setState({preferred_currency: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_device_theme_image_changed(item){
    this.setState({theme_image: (this.state.theme_image == item ? '' : item)})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_file_tapped(ecid_obj){
    var data = {'ecid_obj':ecid_obj}
    this.show_dialog_bottomsheet(data, 'view_uploaded_file')
  }

  when_minified_content_setting_changed(item){
    this.setState({minified_content: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_auto_run_setting_changed(item){
    this.setState({auto_run: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.reset_background_sync()
    }, (1 * 1000));
  }

  set_contextual_transfer_identifier(id){
    this.setState({tracked_contextual_transfer_identifier: id, tracked_contextual_transfer_e5: this.state.selected_e5})
    var me = this;
    setTimeout(function() {
      this.update_contextual_transfer_account_data()
    }, (1 * 1000));
    
  }

  set_stack_size_in_bytes(data){
    this.setState({stack_size_in_bytes: data})
  }

  when_explore_display_type_changed(item){
    this.setState({explore_display_type: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.reset_background_sync()
    }, (1 * 1000));
  }

  when_audiplayer_position_changed(item){
    this.setState({audiplayer_position: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_rating_denomination_changed(item){
    this.setState({rating_denomination: item})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }




  set_can_switch_e5_value(value){
    this.setState({can_switch_e5s: value})
  }

  lock_run(value){
    var clone = structuredClone(this.state.is_running)
    clone[this.state.selected_e5] = value
    this.setState({is_running: clone})

    var set_storage_option = this.state.storage_option
    var my_preferred_nitro = this.state.my_preferred_nitro
    var t = (5 * 60 * 1000)
    if(my_preferred_nitro == '' && set_storage_option == 'arweave') t = (35 * 60 * 1000);

    var me = this;
    setTimeout(function() {
      var clone = structuredClone(me.state.is_running)
      clone[me.state.selected_e5] = false
      me.setState({is_running: clone})
    }, t);
  }

  set_stack_depth_value(size){
    this.setState({stack_size_in_bytes: size})
  }

  calculate_arweave_data_fees = async (tx) => {
    var set_storage_option = this.state.storage_option
    var my_preferred_nitro = this.state.my_preferred_nitro
    if(my_preferred_nitro == '' && set_storage_option == 'arweave'){
      var object_as_string = JSON.stringify(tx, (key, value) =>
          typeof value === 'bigint'
              ? value.toString()
              : value
      )
      var final_data = this.encrypt_storage_object(object_as_string, tx['tags'])
      let test_wallet_key = await arweave.wallets.generate();
      var transaction = await arweave.createTransaction({
        data: final_data
      }, test_wallet_key);
      transaction.addTag('Content-Type', 'text');
      transaction.addTag('Client', 'E5')
      transaction.addTag('Version', this.state.version)
      
      var transaction_fee = transaction.reward
      var clone = structuredClone(this.state.calculated_arewave_storage_fees_figures)
      clone[this.state.selected_e5] = transaction_fee
      this.setState({calculated_arewave_storage_fees_figures: clone})
    }
  }

  calculate_gas_with_e = async (strs, ints, adds, run_gas_limit, wei, delete_pos_array, run_gas_price) => {
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress); 
    const me = this
    const e5 = this.state.selected_e5
    var v5/* t_limits */ = [1000000000000, 1000000000000];
    console.log('calculating gas price for current stack...')
    console.log(ints)
    if(this.state.stack_items.length == 0){
      var clone = structuredClone(me.state.calculated_gas_figures)
      clone[e5] = 0
      me.setState({calculated_gas_figures: clone})
      me.stack_page.current?.set_calculate_stack_complete(e5)
      return;
    }
    contractInstance.methods.e(v5/* t_limits */, adds, ints, strs).estimateGas({from: me.state.accounts[e5].address, gas: run_gas_limit, value: wei}, function(error, gasAmount){
        console.log('---------------------calculate_gas_with_e-------------------------')
        console.log(gasAmount)
        if(gasAmount == null){
          me.prompt_top_notification(me.getLocale()['2699']/* 'Your next run might fail with its current stack' */, 4000)
        }
        var clone = structuredClone(me.state.calculated_gas_figures)
        clone[e5] = gasAmount
        me.setState({calculated_gas_figures: clone})
        me.stack_page.current?.set_calculate_stack_complete(e5)
    });
  }

  run_transaction_with_e = async (strs, ints, adds, run_gas_limit, wei, delete_pos_array, _run_gas_price, run_expiry_duration, e5) => {
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress); 
    const me = this

    var now = await contractInstance.methods.f147(2).call((error, result) => {})
    var run_expiry_time = now + run_expiry_duration

    var v5/* t_limits */ = [100000000000000, run_expiry_time];
    var network_gp = await web3.eth.getGasPrice()
    var run_gas_price = (_run_gas_price == null || _run_gas_price == 0 || _run_gas_price > 100**18) ? network_gp : _run_gas_price
    console.log("gasPrice: "+run_gas_price);
    const gasLimit = run_gas_limit;

    var encoded = contractInstance.methods.e(v5/* t_limits */, adds, ints, strs).encodeABI()

    var tx = {
        gas: gasLimit,
        value: wei,
        to: contractAddress,
        data: encoded,
        gasPrice: run_gas_price.toString(),
    }

    // if(this.state.e5s[this.state.selected_e5].type == '1559'){
    //   tx = {
    //     gas: gasLimit,
    //     value: wei,
    //     to: contractAddress,
    //     data: encoded,
    //     maxPriorityFeePerGas: set_max_priority_per_gas.toString(),
    //     maxFeePerGas: set_max_fee_per_gas.toString(),
    //   }
    // }

    var os = getOS()
    if(os == 'iOS'){
      setTimeout(function() {
        me.setState({is_reloading_stack_due_to_ios_run: true})
        setTimeout(function() {
          me.setState({is_reloading_stack_due_to_ios_run: false})
        }, (1 * 500));
      }, (1 * 1000));
    }


    
    
    web3.eth.accounts.signTransaction(tx, me.state.accounts[e5].privateKey).then(signed => {
        web3.eth.sendSignedTransaction(signed.rawTransaction).on('receipt', (receipt) => {
          var clone = structuredClone(me.state.is_running)
          clone[e5] = false
          me.setState({
            should_update_contacts_onchain: false, 
            is_running: clone, 
            should_update_section_tags_onchain: false, 
            should_update_blocked_accounts_onchain: false, 
            update_data_in_E5:false, 
            should_update_playlists_in_E5:false, 
            should_update_followed_accounts:false, 
            should_update_posts_blocked_by_me: false, 
            should_update_censored_keyword_phrases:false, 
            uncommitted_upload_cids:[],
            should_update_posts_reposted_by_me:false,
          })
          me.delete_stack_items(delete_pos_array)
          me.reset_gas_calculation_figure(me)
          me.prompt_top_notification(me.getLocale()['2700']/* 'run complete!' */, 4600)

          me.has_my_followed_accounts_loaded[e5] = null
          me.has_posts_blocked_by_me_loaded[e5] = null
          me.has_censored_keywords_by_me_loaded[e5] = null
          me.has_promoted_posts_by_me_loaded[e5] = null
          setTimeout(function() {
            me.start_get_accounts_for_specific_e5(false, e5, false)
          }, (1 * 500));
          setTimeout(function() {
            me.set_cookies()
          }, (1 * 1000));
        }).on('error', (error) => {
          console.error('Transaction error:', error);
          var clone = structuredClone(this.state.is_running)
          clone[e5] = false
          me.setState({is_running: clone})
          me.prompt_top_notification(me.getLocale()['2701']/* Your transaction was reverted.' */, 9500)
        });
    })

    // this.prompt_top_notification('running your transactions...', 600)
    // web3.eth.accounts.wallet.add(me.state.account.privateKey);
    // contractInstance.methods.e(v5/* t_limits */, adds, ints, strs)
    //     .send({
    //       from: me.state.account.address, 
    //       value: wei,
    //       gasPrice, 
    //       gasLimit 
    //     })
    //     .on('transactionHash', (hash) => {
    //       console.log('e Transaction hash:', hash);
    //     })
    //     .on('receipt', (receipt) => {
    //       console.log('e Transaction receipt:', receipt);
    //       me.setState({stack_items: []})
    //       me.get_accounts_data(me.state.account)
    //       this.prompt_top_notification('run complete!', 600)
    //     }).on('error', (error) => {
    //       console.error('Transaction error:', error);
    //       this.prompt_top_notification('run failed. Check your stacks transactions and try again', 1500)
    //     });


    // this.prompt_top_notification('running your transactions...', 600)
    // const provider = new ethers.providers.JsonRpcProvider(this.state.web3);
    // const wallet = new ethers.Wallet(me.state.account.privateKey, provider);
    // const signer = provider.getSigner();
    // const contract = new ethers.Contract(contractAddress, contractArtifact.abi, signer);
    // const tx = await contract.connect(wallet).e(v5/* t_limits */, adds, ints, strs, { gasLimit: gasLimit, value: wei })
    // const receipt = await tx.wait();

    // if (receipt.status === 1) {
    //   console.log('Transaction successful. Transaction hash:', receipt.transactionHash);
    //   me.setState({stack_items: []})
    //   me.get_accounts_data(me.state.account)
    //   this.prompt_top_notification('run complete!', 600)
    // } else {
    //   console.log('Transaction failed. Transaction hash:', receipt.transactionHash);
    //   this.prompt_top_notification('run failed. Check your stacks transactions and try again', 1500)
    // }
  }

  reset_gas_calculation_figure(me){
    var clone = structuredClone(me.state.calculated_gas_figures)
    var clone2 = structuredClone(me.state.calculated_arewave_storage_fees_figures)
    clone[me.state.selected_e5] = 0
    clone2[me.state.selected_e5] = 0
    me.setState({calculated_gas_figures: clone, calculated_arewave_storage_fees_figures: clone2})
  }

  delete_stack_items(delete_pos_array){
    var stack = this.state.stack_items.slice()
    var new_stack = []
    for(var i=0; i<stack.length; i++){
      if(!delete_pos_array.includes(i)){
        new_stack.push(stack[i])
      }
    }

    this.setState({stack_items: new_stack})
    this.set_cookies_after_stack_action(new_stack)
  }

  view_transaction(tx, index){
    this.show_view_transaction_bottomsheet(tx, index)
  }

  show_hide_stack_item(item){
    var clone_array = this.state.hidden.slice()
    const index = clone_array.indexOf(item);
    if (index > -1) { // only splice array when item is found
        clone_array.splice(index, 1); // 2nd parameter means remove one item only
    }else{
        clone_array.push(item)
    }
    this.setState({hidden: clone_array})
    this.set_cookies_after_stack_action(this.state.stack_items.slice())
  }

  remove_account_from_contacts(item){
    var clone = structuredClone(this.state.contacts)
    const e5_to_use = item['e5'] == null ? this.state.selected_e5 : item['e5']
    const index = this.index_of(clone[e5_to_use], item);
    if (index > -1) { // only splice array when item is found
      clone[e5_to_use].splice(index, 1); // 2nd parameter means remove one item only
    }
    this.setState({contacts: clone, should_update_contacts_onchain: true})
    this.prompt_top_notification(this.getLocale()['2702']/* 'Contact Deleted' */, 1700)

    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  index_of(array, item){
    var index = -1
    for(var i=0; i<array.length; i++){
      if(array[i]['address'] == item['address']){
        index = i
        break;
      }
    }
    return index
  }

  add_alias_transaction_to_stack(id){
    var stack_clone = this.state.stack_items.slice()
    var existing_alias_transaction = false
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].type == 'alias'){
        this.prompt_top_notification(this.getLocale()['2703']/* 'You cant do that more than once.' */, 4000)
        existing_alias_transaction = true
        break;
      }
    }
    if(!existing_alias_transaction){
      stack_clone.push({id: makeid(8), e5:this.state.selected_e5, type:'alias', entered_indexing_tags:['alias', 'reserve', 'identification'], alias:id})
      this.prompt_top_notification(this.getLocale()['2704']/* 'Transaction added to stack.' */, 1600)
      this.setState({stack_items: stack_clone})
      this.set_cookies_after_stack_action(stack_clone)
    }
  }

  unreserve_alias_transaction_to_stack(id){
    var stack_clone = this.state.stack_items.slice()
    var existing_alias_transaction = false
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].type == 'unalias'){
        this.prompt_top_notification(this.getLocale()['2705']/* 'You cant do that more than once.' */, 1000)
        existing_alias_transaction = true
        break;
      }
    }
    if(!existing_alias_transaction){
      stack_clone.push({id: makeid(8), e5:this.state.selected_e5, type:this.getLocale()['2706']/* 'unalias' */, entered_indexing_tags:[this.getLocale()['2706']/* 'unalias' */, this.getLocale()['2707']/* 'unreserve' */, this.getLocale()['2708']/* identification' */], alias:id['alias']})
      this.prompt_top_notification(this.getLocale()['2709']/* 'Unreserve transaction added to stack.' */, 2000)
      this.setState({stack_items: stack_clone})
      this.set_cookies_after_stack_action(stack_clone)
    }
  }

  reset_alias_transaction_to_stack(id){
    var stack_clone = this.state.stack_items.slice()
    var existing_alias_transaction = false
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].type == this.getLocale()['2710']/* 're-alias' */){
        this.prompt_top_notification(this.getLocale()['2711']/* 'You cant do that more than once.' */, 4000)
        existing_alias_transaction = true
        break;
      }
    }
    if(!existing_alias_transaction){
      stack_clone.push({id: makeid(8), e5:this.state.selected_e5, type:this.getLocale()['2710']/* 're-alias' */, entered_indexing_tags:[this.getLocale()['2710']/* 're-alias' */, this.getLocale()['2712']/* 'reserve' */, this.getLocale()['2708']/* 'identification' */], alias:id['alias']})
      this.prompt_top_notification(this.getLocale()['2713']/* 'Reset transaction added to stack' */, 1000)
      this.setState({stack_items: stack_clone})
      this.set_cookies_after_stack_action(stack_clone)
    }
  }

  remove_account_from_blocked_accounts(item){
    var clone = structuredClone(this.state.blocked_accounts)
    const e5_to_use = item['e5'] == null ? this.state.selected_e5 : item['e5']
    const index = this.index_of(clone[e5_to_use], item);
    if (index > -1) { // only splice array when item is found
      clone[e5_to_use].splice(index, 1); // 2nd parameter means remove one item only
    }
    this.setState({blocked_accounts: clone, should_update_blocked_accounts_onchain: true})
    this.prompt_top_notification(this.getLocale()['2714']/* 'Blocked account removed' */, 1700)
    
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  sign_custom_data_using_wallet = async (e5, data) => {
    const url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(url);
    var address = this.state.accounts[e5].address
    web3.eth.accounts.wallet.add(this.state.accounts[e5].privateKey);

    var signature = await web3.eth.sign(data.toString(), address)
    this.setState({generated_signature: signature})
  }

  verify_custom_data_using_wallet = async (data, signature, e5) => {
    const url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(url);
    try{
      var original_address = await web3.eth.accounts.recover(data.toString(), signature)
      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = this.state.addresses[e5][0]
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
      var accounts = await contractInstance.methods.f167([],[original_address], 2).call((error, result) => {});
      var address_account = accounts[0]

      var obj = {'address': original_address, 'account': address_account}
      this.setState({verified_account_data_from_signature: obj})
    }
    catch(e){
      console.log(e)
      this.prompt_top_notification(this.getLocale()['1593at']/* 'That signature is invalid.' */, 5000)
      this.setState({verified_account_data_from_signature: null})
    }
  }

  stringToBigNumber = async(str) => {
    const encoder = new TextEncoder();
    const data = encoder.encode(str);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashBytes = new Uint8Array(hashBuffer);

    // Use the first 6 bytes (48 bits) safely
    let num = 0;
    for (let i = 0; i < 6; i++) {
      num = (num << 8) | hashBytes[i];
    }

    if(num < 0){
      num *= -1
    }
    return num;
  }

  channel_id_to_hashed_id = async (id) => {
    const encoder = new TextEncoder();
    const str = `${id},${process.env.REACT_APP_HASH_KEY}`
    const data = encoder.encode(str);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashBytes = new Uint8Array(hashBuffer);

    let result = bigInt(0);
    for (let i = 0; i < hashBytes.length; i++) {
      result = result.shiftLeft(8).add(hashBytes[i]);
    }
    return bigInt(result).mod(bigInt('1e36'));
  }











  render_wiki_bottomsheet(){
    if(this.state.wiki_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.wiki_bottomsheet} onClose={this.open_wiki_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}> 
                          <WikiPage ref={this.wiki_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_wiki_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_wiki_bottomsheet.bind(this)} open={this.state.wiki_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}> 
            <WikiPage ref={this.wiki_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} />
          </div>
      </SwipeableBottomSheet>
    )
  }


  open_wiki_bottomsheet(){
    if(this.state.wiki_bottomsheet == true){
      //closing
      this.wiki_bottomsheet = this.wiki_page.current?.state;

      this.setState({wiki_bottomsheet: !this.state.wiki_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({wiki_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({wiki_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({wiki_bottomsheet: !me.state.wiki_bottomsheet});

          if(me.wiki_bottomsheet != null){
            me.wiki_page.current?.setState(me.wiki_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }


  open_wallet_guide_bottomsheet(option){
    this.open_wiki_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.wiki_page.current != null){
      me.wiki_page.current?.set(option)
    }
    }, (1 * 500));
    
  }








  render_new_object_bottomsheet(){
    if(this.state.new_object_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.new_object_bottomsheet} onClose={this.open_new_object_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          {this.render_create_object_ui()}
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_new_object_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_new_object_bottomsheet.bind(this)} open={this.state.new_object_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            {this.render_create_object_ui()}
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_new_object_bottomsheet(){
    if(this.state.new_object_bottomsheet == true){
      //closing
      
      this.new_object_bottomsheet_new_job_page = this.new_job_page.current?.state;
      this.new_object_bottomsheet_new_token_page = this.new_token_page.current?.state;
      this.new_object_bottomsheet_new_subscription_page = this.new_subscription_page.current?.state;
      this.new_object_bottomsheet_new_contract_page = this.new_contract_page.current?.state;
      this.new_object_bottomsheet_new_post_page = this.new_post_page.current?.state;
      this.new_object_bottomsheet_new_channel_page = this.new_channel_page.current?.state;
      this.new_object_bottomsheet_new_storefront_item_page = this.new_storefront_item_page.current?.state;
      this.new_object_bottomsheet_new_mail_page = this.new_mail_page.current?.state;
      this.new_object_bottomsheet_new_contractor_page = this.new_contractor_page.current?.state;

      this.setState({new_object_bottomsheet: !this.state.new_object_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({new_object_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({new_object_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({new_object_bottomsheet: !me.state.new_object_bottomsheet});

          if(me.new_object_bottomsheet_new_job_page != null){
            me.new_job_page.current?.setState(me.new_object_bottomsheet_new_job_page)
          }
          if(me.new_object_bottomsheet_new_token_page != null){
            me.new_token_page.current?.setState(me.new_object_bottomsheet_new_token_page)
          }
          if(me.new_object_bottomsheet_new_subscription_page != null){
            me.new_subscription_page.current?.setState(me.new_object_bottomsheet_new_subscription_page)
          }
          if(me.new_object_bottomsheet_new_contract_page != null){
            me.new_contract_page.current?.setState(me.new_object_bottomsheet_new_contract_page)
          }
          if(me.new_object_bottomsheet_new_post_page != null){
            me.new_post_page.current?.setState(me.new_object_bottomsheet_new_post_page)
          }
          if(me.new_object_bottomsheet_new_channel_page != null){
            me.new_channel_page.current?.setState(me.new_object_bottomsheet_new_channel_page)
          }
          if(me.new_object_bottomsheet_new_storefront_item_page != null){
            me.new_storefront_item_page.current?.setState(me.new_object_bottomsheet_new_storefront_item_page)
          }
          if(me.new_object_bottomsheet_new_mail_page != null){
            me.new_mail_page.current?.setState(me.new_object_bottomsheet_new_mail_page)
          }
          if(me.new_object_bottomsheet_new_contractor_page != null){
            me.new_contractor_page.current?.setState(me.new_object_bottomsheet_new_contractor_page)
          }
        }
      }, (1 * 200));
    }
  }

  open_new_object(target){
    this.open_new_object_bottomsheet()
    this.setState({new_object_target: target});
    
    if(target == '6'/* posts */ || target == '7'/* channel */ || target == '10'/* audioport */ || target == '11'/* videoport */){
      this.load_my_subscriptions()
    }
  }

  render_create_object_ui(){
    var target = this.state.new_object_target;
    var size = this.getScreenSize();
    if(target == '0'/* jobs */){
      return(
        <div>
          <NewJobPage ref={this.new_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
        </div>
      )
    }
    else if(target == '8'/* ends ☝️/spends 🫰 */){
      return(
        <div>
          <NewTokenPage ref={this.new_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
        </div>
      )
    }
    else if(target == '3'/* subscriptions */){
      return(
        <NewSubscriptionPage ref={this.new_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '1'/* contracts */){
      return(
        <NewContractPage ref={this.new_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '6'/* posts */){
      return(
        <NewPostPage ref={this.new_post_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '7'/* channels */){
      return(
        <NewChannelPage ref={this.new_channel_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} get_accounts_public_key={this.get_accounts_public_key.bind(this)} search_for_object={this.search_for_object.bind(this)}
        />
      )
    }
    else if(target == '4'/* storefront */){
      return(
        <NewStorefrontItemPage ref={this.new_storefront_item_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} show_images={this.show_images.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      )
    }
    else if(target == '5'/* mail */){
      return(
        <NewMailPage ref={this.new_mail_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_mail_to_stack={this.when_add_new_mail_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      );
    }
    else if(target == '9'/* contractors */){
      return(
        <NewContractorPage ref={this.new_contractor_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
      );
    }
    else if(target == '10'/* audioport */){
      return(
        <NewAudioPage ref={this.new_audio_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}
        search_for_object={this.search_for_object.bind(this)} set_selected_channel_hash_id={this.set_selected_channel_hash_id.bind(this)}
        />
      )
    }
    else if(target == '11'/* videoport */){
      return(
        <NewVideoPage ref={this.new_video_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} getLocale={this.getLocale.bind(this)} search_for_object={this.search_for_object.bind(this)} set_selected_channel_hash_id={this.set_selected_channel_hash_id.bind(this)}
        
        />
      )
    }
    else if(target == '12'/* nitro */){
      return(
        <NewNitroPage ref={this.new_nitro_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} test_node_url_link={this.test_node_url_link.bind(this)}/>
      )
    }
    else if(target == '13'/* polls */){
      return(
          <NewPollPage ref={this.new_poll_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_object_to_stack={this.when_add_new_object_to_stack.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} generate_hash={this.generate_hash.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} process_csv_file_data={this.process_csv_file_data.bind(this)} process_json_file_object={this.process_json_file_object.bind(this)}
        />
      )
    }
    
  }

  when_edit_created_job_tapped(obj){
    this.open_new_object_bottomsheet()
    var me = this;
    setTimeout(function() {
      me.new_job_page.current.set_fileds_for_edit_action(obj)
      me.new_job_page.current.set_action('edit')
    }, (1 * 500));
    
  }

  when_add_new_mail_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
      for(var i=0; i<stack_clone.length; i++){
        if(stack_clone[i].id == state_obj.id){
          edit_id = i
        }
      }
      if(edit_id != -1){
        stack_clone[edit_id] = state_obj
      }else{
        stack_clone.push(state_obj)
      }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  when_add_new_object_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  test_node_url_link = async (link, key) => {
    this.prompt_top_notification(this.getLocale()['a273i']/* 'Testing that link...' */, 1000)
    var request = `${link}/marco`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve nitro data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log(obj)
      var success = obj['success']
      console.log(success)
      if(success == true){
        console.log('attempting to encrypt key...')
        var encrypted_key = await this.encrypt_nitro_node_key_with_my_public_key(key)
        console.log('successfully encrypted key', encrypted_key)
        if(this.new_nitro_page.current != null) this.new_nitro_page.current?.set_node_url(link, encrypted_key)
        if(this.edit_nitropost_page.current != null) this.edit_nitropost_page.current?.set_node_url(link, encrypted_key)
        this.prompt_top_notification(this.getLocale()['a273j']/* 'Provided link added.' */, 5000)
      }else{
        this.prompt_top_notification(this.getLocale()['a273h']/* 'That provided link is not available for use.' */, 6000)
      }
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['a273h']/* 'That provided link is not available for use.' */, 6000)
    }
  }

  process_csv_file_data = async (data, should_include_data) => {
    var entities = data.split(',')
    var final_obj = {}
    var account_entries = 0
    entities.forEach(account_data => {
        if(account_data != null && account_data != ''){
            var data_point_array = account_data.split(':')
            var e5 = ''
            var account = ''
            if(data_point_array.length == 2){
                e5 = data_point_array[0].trim().replace(/[^a-zA-Z0-9 ]/g, '')
                account = data_point_array[1].trim().replace(/[^a-zA-Z0-9 ]/g, '')
            }
            else if(data_point_array.length == 1){
                e5 = this.state.e5
                account = data_point_array[0].trim().replace(/[^a-zA-Z0-9 ]/g, '')
            }
            if(e5 != '' && account != ''){
                if(this.state.e5s['data'].includes(e5)){
                    if(final_obj[e5] == null){
                        final_obj[e5] = []
                    }
                    if(!isNaN(account) && parseInt(account) < 10**16 && parseInt(account)>1000){
                        final_obj[e5].push(parseInt(account))
                        account_entries++
                    }
                }
            }
        }
    });

    var hash = await this.generate_hash(JSON.stringify(final_obj))
    if(should_include_data == true){
      return { data: hash, account_entries, final_obj}
    }
    return { data: hash, account_entries}
  }

  process_json_file_object = async (root_obj, should_include_data) => {
    var object = root_obj['root']
    var keys = Object.keys(object)
    var final_obj = {}
    var account_entries = 0
    try{
        keys.forEach(key => {
            if(this.state.e5s['data'].includes(key)){
                if(final_obj[key] == null){
                    final_obj[key] = []
                }
                try{
                    object[key].forEach(account => {
                        var trimed_account = account.toString().trim().replace(/[^a-zA-Z0-9 ]/g, '')
                        if(!isNaN(trimed_account) && parseInt(trimed_account) < 10**16 && parseInt(account)>1000){
                            final_obj[key].push(parseInt(trimed_account))
                            account_entries++
                        }
                    });
                }catch(e){
                    console.log('new_poll', e)
                }
                
            }
        });
    }catch(o){
        console.log('new_poll', 0)
    }

    var hash = await this.generate_hash(JSON.stringify(final_obj))
    if(should_include_data == true){
      return { data: hash, account_entries, final_obj}
    }
    return { data: hash, account_entries}
  }

  search_for_object = (subscription_id) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);
        var contract_addresses = this.state.addresses[e5]
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.load_id_type_then_object(subscription_id, E52contractInstance, e5) 
      }
    }
  }

  set_selected_channel_hash_id = async (channel_id) => {
    const channel_id_hash = await this.channel_id_to_hashed_id(channel_id)
    const clone = structuredClone(this.state.channel_id_hash_directory)
    clone[channel_id] = channel_id_hash
    this.setState({channel_id_hash_directory: clone})
  }
  











  render_edit_token_object_bottomsheet(){
    if(this.state.edit_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_token_bottomsheet} onClose={this.open_edit_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditTokenPage ref={this.edit_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_token_bottomsheet.bind(this)} open={this.state.edit_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditTokenPage ref={this.edit_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_token_bottomsheet(){
    if(this.state.edit_token_bottomsheet == true){
      //closing
      this.edit_token_bottomsheet = this.edit_token_page.current?.state;

      this.setState({edit_token_bottomsheet: !this.state.edit_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_token_bottomsheet: !me.state.edit_token_bottomsheet});

          if(me.edit_token_bottomsheet != null){
            me.edit_token_page.current?.setState(me.edit_token_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_token_object(target, object){
    this.open_edit_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_token_page.current){
      me.edit_token_page.current?.setState(object['ipfs'])
      me.edit_token_page.current?.set_edit_data()
      me.edit_token_page.current?.setState({object_id: object['id']})
      me.edit_token_page.current?.set_token_symbol(object['ipfs'].entered_symbol_text, object['ipfs'].entered_title_text)
    }
    }, (1 * 500));
    
  }








  render_edit_channel_object_bottomsheet(){
    if(this.state.edit_channel_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_channel_bottomsheet} onClose={this.open_edit_channel_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditChannelPage ref={this.edit_channel_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}
                          search_for_object={this.search_for_object.bind(this)}
                          />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_channel_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_channel_bottomsheet.bind(this)} open={this.state.edit_channel_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditChannelPage ref={this.edit_channel_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} search_for_object={this.search_for_object.bind(this)}
            
            />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_channel_bottomsheet(){
    if(this.state.edit_channel_bottomsheet == true){
      //closing
      this.edit_channel_bottomsheet = this.edit_channel_page.current?.state;

      this.setState({edit_channel_bottomsheet: !this.state.edit_channel_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_channel_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_channel_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_channel_bottomsheet: !me.state.edit_channel_bottomsheet});
          
          if(me.edit_channel_bottomsheet != null){
            me.edit_channel_page.current?.setState(me.edit_channel_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_channel_object(target, object){
    this.open_edit_channel_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_channel_page.current){
      me.edit_channel_page.current?.setState(object['ipfs'])
      me.edit_channel_page.current?.set_edit_data()
      me.edit_channel_page.current?.setState({object_id: object['id']})
    }
    }, (1 * 500));
    this.load_my_subscriptions()
  }













  render_edit_contractor_object_bottomsheet(){
    if(this.state.edit_contractor_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_contractor_bottomsheet} onClose={this.open_edit_contractor_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditContractorPage ref={this.edit_contractor_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/> 
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_contractor_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_contractor_bottomsheet.bind(this)} open={this.state.edit_contractor_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditContractorPage ref={this.edit_contractor_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_contractor_bottomsheet(){
    if(this.state.edit_contractor_bottomsheet == true){
      //closing
      this.edit_contractor_bottomsheet = this.edit_contractor_page.current?.state;

      this.setState({edit_contractor_bottomsheet: !this.state.edit_contractor_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_contractor_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_contractor_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_contractor_bottomsheet: !me.state.edit_contractor_bottomsheet});

          if(me.edit_contractor_bottomsheet != null){
            me.edit_contractor_page.current?.setState(me.edit_contractor_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_contractor_object(target, object){
    this.open_edit_contractor_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_contractor_page.current){
      me.edit_contractor_page.current?.setState(object['ipfs'])
      me.edit_contractor_page.current?.setState({type:me.getLocale()['763']/* 'edit-contractor' */})
      me.edit_contractor_page.current?.setState({object_id: object['id']})
      me.edit_contractor_page.current?.set()
    }
    }, (1 * 500));
    
  }










  render_edit_job_object_bottomsheet(){
    if(this.state.edit_job_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_job_bottomsheet} onClose={this.open_edit_job_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditJobPage ref={this.edit_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_job_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_job_bottomsheet.bind(this)} open={this.state.edit_job_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditJobPage ref={this.edit_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_job_bottomsheet(){
    if(this.state.edit_job_bottomsheet == true){
      //closing
      this.edit_job_bottomsheet = this.edit_job_page.current?.state;

      this.setState({edit_job_bottomsheet: !this.state.edit_job_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_job_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_job_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_job_bottomsheet: !me.state.edit_job_bottomsheet});

          if(me.edit_job_bottomsheet != null){
            me.edit_job_page.current?.setState(me.edit_job_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_job_object(target, object){
    this.open_edit_job_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_job_page.current){
      me.edit_job_page.current?.setState(object['ipfs'])
      me.edit_job_page.current?.setState({type:me.getLocale()['764']/* 'edit-job' */})
      me.edit_job_page.current?.setState({object_id: object['id']})
      me.edit_job_page.current?.set()
    }
    }, (1 * 500));
    
  }










  render_edit_post_object_bottomsheet(){
    if(this.state.edit_post_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_post_bottomsheet} onClose={this.open_edit_post_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditPostPage ref={this.edit_post_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_post_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_post_bottomsheet.bind(this)} open={this.state.edit_post_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditPostPage ref={this.edit_post_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_post_bottomsheet(){
    if(this.state.edit_post_bottomsheet == true){
      //closing
      this.edit_post_bottomsheet = this.edit_post_page.current?.state;

      this.setState({edit_post_bottomsheet: !this.state.edit_post_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_post_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_post_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_post_bottomsheet: !me.state.edit_post_bottomsheet});
          if(me.edit_post_bottomsheet != null){
            me.edit_post_page.current?.setState(me.edit_post_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_post_object(target, object){
    this.open_edit_post_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_post_page.current){
      me.edit_post_page.current?.setState(object['ipfs'])
      me.edit_post_page.current?.setState({type:me.getLocale()['765']/* 'edit-post' */})
      me.edit_post_page.current?.setState({object_id: object['id']})
      me.edit_post_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }










  render_edit_storefront_object_bottomsheet(){
    if(this.state.edit_storefront_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_storefront_bottomsheet} onClose={this.open_edit_storefront_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditStorefrontItemPage ref={this.edit_storefront_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_storefront_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_storefront_bottomsheet.bind(this)} open={this.state.edit_storefront_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditStorefrontItemPage ref={this.edit_storefront_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_storefront_bottomsheet(){
    if(this.state.edit_storefront_bottomsheet == true){
      //closing
      this.edit_storefront_bottomsheet = this.edit_storefront_page.current?.state;

      this.setState({edit_storefront_bottomsheet: !this.state.edit_storefront_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_storefront_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_storefront_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_storefront_bottomsheet: !me.state.edit_storefront_bottomsheet});
          
          if(me.edit_storefront_bottomsheet != null){
            me.edit_storefront_page.current?.setState(me.edit_storefront_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_storefront_object(target, object){
    this.open_edit_storefront_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_storefront_page.current){
      me.edit_storefront_page.current?.setState(object['ipfs'])
      me.edit_storefront_page.current?.setState({type:me.getLocale()['766']/* 'edit-storefront' */})
      me.edit_storefront_page.current?.setState({object_id: object['id']})
      me.edit_storefront_page.current?.set()
    }
    }, (1 * 500));
    
  }











  render_edit_proposal_object_bottomsheet(){
    if(this.state.edit_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_proposal_bottomsheet} onClose={this.open_edit_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EditProposalPage ref={this.edit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_edit_proposal_bottomsheet.bind(this)} open={this.state.edit_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EditProposalPage ref={this.edit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_edit_proposal_bottomsheet(){
    if(this.state.edit_proposal_bottomsheet == true){
      //closing
      this.edit_proposal_bottomsheet = this.edit_proposal_page.current?.state;

      this.setState({edit_proposal_bottomsheet: !this.state.edit_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_proposal_bottomsheet: !me.state.edit_proposal_bottomsheet});
          if(me.edit_proposal_bottomsheet != null){
            me.edit_proposal_page.current?.setState(me.edit_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_proposal_object(target, object){
    this.open_edit_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_proposal_page.current){
        me.edit_proposal_page.current?.setState(object['ipfs'])
        me.edit_proposal_page.current?.setState({type:me.getLocale()['2739']/* 'edit-proposal' */})
        me.edit_proposal_page.current?.setState({object_id: object['id']})
        me.edit_proposal_page.current?.set_edit_data()
      }
    }, (1 * 500));
    
  }








  render_edit_audiopost_object_bottomsheet(){
    if(this.state.edit_audiopost_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_audiopost_bottomsheet} onClose={this.open_edit_audiopost_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_edit_audio_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_audiopost_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_audiopost_bottomsheet.bind(this)} open={this.state.edit_audiopost_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_audio_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_audio_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <EditAudioPage ref={this.edit_audiopost_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} search_for_object={this.search_for_object.bind(this)} 
        
        />
      </div>
    )
  }

  open_edit_audiopost_bottomsheet(){
    if(this.state.edit_audiopost_bottomsheet == true){
      //closing
      this.edit_audiopost_bottomsheet = this.edit_audiopost_page.current?.state;

      this.setState({edit_audiopost_bottomsheet: !this.state.edit_audiopost_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_audiopost_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_audiopost_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_audiopost_bottomsheet: !me.state.edit_audiopost_bottomsheet});
          if(me.edit_audiopost_bottomsheet != null){
            me.edit_audiopost_page.current?.setState(me.edit_audiopost_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_audiopost_object(target, object){
    this.open_edit_audiopost_bottomsheet()
    this.set_mediapost_creatorgroup_hash(object)
    var me = this;
    setTimeout(function() {
      if(me.edit_audiopost_page.current){
        me.edit_audiopost_page.current?.setState(object['ipfs'])
        me.edit_audiopost_page.current?.setState({type:me.getLocale()['2975']/* 'edit-audio' */})
        me.edit_audiopost_page.current?.setState({object_id: object['id']})
        me.edit_audiopost_page.current?.set()
      }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }

  set_mediapost_creatorgroup_hash(object){
    const selected_channel_e5_id = object['ipfs'].selected_object_identifier
    if(selected_channel_e5_id != null){
      const channel_id = selected_channel_e5_id['id']
      this.set_selected_channel_hash_id(channel_id)
    }
  }











  render_edit_videopost_object_bottomsheet(){
    if(this.state.edit_videopost_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_videopost_bottomsheet} onClose={this.open_edit_videopost_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_edit_video_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_videopost_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_videopost_bottomsheet.bind(this)} open={this.state.edit_videopost_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_video_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_video_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <EditVideoPage ref={this.edit_videopost_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)}show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} search_for_object={this.search_for_object.bind(this)} 
        />
      </div>
    )
  }

  open_edit_videopost_bottomsheet(){
    if(this.state.edit_videopost_bottomsheet == true){
      //closing
      this.edit_videopost_bottomsheet = this.edit_videopost_page.current?.state;

      this.setState({edit_videopost_bottomsheet: !this.state.edit_videopost_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_videopost_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_videopost_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_videopost_bottomsheet: !me.state.edit_videopost_bottomsheet});
          if(me.edit_videopost_bottomsheet != null){
            me.edit_videopost_page.current?.setState(me.edit_videopost_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_videopost_object(target, object){
    this.open_edit_videopost_bottomsheet()
    this.set_mediapost_creatorgroup_hash(object)
    var me = this;
    setTimeout(function() {
      if(me.edit_videopost_page.current){
      me.edit_videopost_page.current?.setState(object['ipfs'])
      me.edit_videopost_page.current?.setState({type:me.getLocale()['3023']/* 'edit-video' */})
      me.edit_videopost_page.current?.setState({object_id: object['id']})
      me.edit_videopost_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }












  render_edit_nitropost_object_bottomsheet(){
    if(this.state.edit_nitropost_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_nitropost_bottomsheet} onClose={this.open_edit_nitropost_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_edit_nitropost_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_nitropost_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_nitropost_bottomsheet.bind(this)} open={this.state.edit_nitropost_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_nitropost_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_nitropost_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
          <EditNitroPage ref={this.edit_nitropost_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} test_node_url_link={this.test_node_url_link.bind(this)} />
        </div>
    )
  }

  open_edit_nitropost_bottomsheet(){
    if(this.state.edit_nitropost_bottomsheet == true){
      //closing
      this.edit_nitropost_bottomsheet = this.edit_nitropost_page.current?.state;

      this.setState({edit_nitropost_bottomsheet: !this.state.edit_nitropost_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_nitropost_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_nitropost_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_nitropost_bottomsheet: !me.state.edit_nitropost_bottomsheet});
          if(me.edit_nitropost_bottomsheet != null){
            me.edit_nitropost_page.current?.setState(me.edit_nitropost_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_nitropost_object(target, object){
    this.open_edit_nitropost_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_nitropost_page.current){
      me.edit_nitropost_page.current?.setState(object['ipfs'])
      me.edit_nitropost_page.current?.setState({type:me.getLocale()['3030']/* 'edit-nitro' */})
      me.edit_nitropost_page.current?.setState({object_id: object['id']})
      me.edit_nitropost_page.current?.set()
    }
    }, (1 * 500));
    this.load_my_subscriptions() 
  }









  render_edit_poll_object_bottomsheet(){
    if(this.state.edit_poll_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.edit_poll_bottomsheet} onClose={this.open_edit_poll_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_edit_poll_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_edit_poll_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_edit_poll_bottomsheet.bind(this)} open={this.state.edit_poll_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_edit_poll_element()}
      </SwipeableBottomSheet>
    )
  }

  render_edit_poll_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
          <EditPollPage ref={this.edit_poll_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_edit_object_to_stack={this.when_add_edit_object_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)} />
        </div>
    )
  }

  open_edit_poll_bottomsheet(){
    if(this.state.edit_poll_bottomsheet == true){
      //closing
      this.edit_poll_bottomsheet = this.edit_poll_page.current?.state;

      this.setState({edit_poll_bottomsheet: !this.state.edit_poll_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({edit_poll_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({edit_poll_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({edit_poll_bottomsheet: !me.state.edit_poll_bottomsheet});
          if(me.edit_poll_bottomsheet != null){
            me.edit_poll_page.current?.setState(me.edit_poll_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_edit_poll_object(target, object){
    this.open_edit_poll_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.edit_poll_page.current){
      me.edit_poll_page.current?.setState(object['ipfs'])
      me.edit_poll_page.current?.setState({type:me.getLocale()['3072h']/* 'edit-poll' */})
      me.edit_poll_page.current?.setState({object_id: object['id']})
      me.edit_poll_page.current?.set()
    }
    }, (1 * 500));
  }


















  open_edit_object(target, object){
    if(target == '0'){
      this.open_edit_job_object(target, object)
    }
    else if(target == '8'){
      this.open_edit_token_object(target, object)
    }
    else if(target == '6'){
      this.open_edit_post_object(target, object)
    }
    else if(target == '7'){
      this.open_edit_channel_object(target, object)
    }
    else if(target == '4'){
      this.open_edit_storefront_object(target, object)
    }
    else if(target == '9'){
      this.open_edit_contractor_object(target, object)
    }
    else if(target == '2'){
      this.open_edit_proposal_object(target, object)
    }
    else if(target == '10'){
      this.open_edit_audiopost_object(target, object)
    }
    else if(target == '11'){
      this.open_edit_videopost_object(target, object)
    }
    else if(target == '12'){
      this.open_edit_nitropost_object(target, object)
    }
    else if(target == '13'){
      this.open_edit_poll_object(target, object)
    }
  }

  when_add_edit_object_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }












  render_mint_token_bottomsheet(){
    if(this.state.mint_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.mint_token_bottomsheet} onClose={this.open_mint_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <NewMintActionPage ref={this.new_mint_dump_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_buy_sell_transaction_to_stack={this.add_buy_sell_transaction.bind(this)}get_balance_in_exchange={this.get_balance_in_exchange.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_mint_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_mint_token_bottomsheet.bind(this)} open={this.state.mint_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <NewMintActionPage ref={this.new_mint_dump_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_buy_sell_transaction_to_stack={this.add_buy_sell_transaction.bind(this)}get_balance_in_exchange={this.get_balance_in_exchange.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }


  open_mint_token_bottomsheet(){
    if(this.state.mint_token_bottomsheet == true){
      //closing
      this.mint_token_bottomsheet = this.new_mint_dump_token_page.current?.state;

      this.setState({mint_token_bottomsheet: !this.state.mint_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({mint_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({mint_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({mint_token_bottomsheet: !me.state.mint_token_bottomsheet});
          
          if(me.mint_token_bottomsheet != null){
            me.new_mint_dump_token_page.current?.setState(me.mint_token_bottomsheet)
          }
        }
        
      }, (1 * 200));
    }
  }

  show_mint_token_bottomsheet(mint_burn_token_item){
    this.open_mint_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.new_mint_dump_token_page.current != null){
      me.new_mint_dump_token_page.current.set_token(mint_burn_token_item)
    }
    }, (1 * 500));
      
  }


  add_buy_sell_transaction(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_transfer_token_bottomsheet(){
    if(this.state.transfer_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.transfer_token_bottomsheet} onClose={this.open_transfer_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <NewTransferActionPage ref={this.new_transfer_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_transfer_transactions_to_stack={this.add_transfer_transactions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_transfer_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_transfer_token_bottomsheet.bind(this)} open={this.state.transfer_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <NewTransferActionPage ref={this.new_transfer_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_transfer_transactions_to_stack={this.add_transfer_transactions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }


  open_transfer_token_bottomsheet(){
    if(this.state.transfer_token_bottomsheet == true){
      //closing
      this.transfer_token_bottomsheet = this.new_transfer_token_page.current?.state;

      this.setState({transfer_token_bottomsheet: !this.state.transfer_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({transfer_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({transfer_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({transfer_token_bottomsheet: !me.state.transfer_token_bottomsheet});
          if(me.transfer_token_bottomsheet != null){
            me.new_transfer_token_page.current?.setState(me.transfer_token_bottomsheet)
          }

        }
      }, (1 * 200));
    }
  }

  show_transfer_bottomsheet(token_item){
    this.open_transfer_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.new_transfer_token_page.current != null){
      me.new_transfer_token_page.current.set_token(token_item)
    }
    }, (1 * 500));
    
  }

  add_transfer_transactions_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_enter_contract_bottomsheet(){
    if(this.state.enter_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.enter_contract_bottomsheet} onClose={this.open_enter_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <EnterContractPage ref={this.enter_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} enter_contract={this.enter_contract.bind(this)} accept_job_without_entering_contract={this.accept_job_without_entering_contract.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_enter_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_enter_contract_bottomsheet.bind(this)} open={this.state.enter_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <EnterContractPage ref={this.enter_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} enter_contract={this.enter_contract.bind(this)} accept_job_without_entering_contract={this.accept_job_without_entering_contract.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_enter_contract_bottomsheet(){
    if(this.state.enter_contract_bottomsheet == true){
      //closing
      this.enter_contract_bottomsheet = this.enter_contract_page.current?.state;

      this.setState({enter_contract_bottomsheet: !this.state.enter_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({enter_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({enter_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({enter_contract_bottomsheet: !me.state.enter_contract_bottomsheet});

          if(me.enter_contract_bottomsheet != null){
            me.enter_contract_page.current?.setState(me.enter_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_enter_contract_bottomsheet(contract_item, job_acceptance_action_state_object){
    this.open_enter_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.enter_contract_page.current != null){
      me.enter_contract_page.current.set_contract(contract_item, job_acceptance_action_state_object)
    }
    }, (1 * 500));
    
    this.load_contracts_proposals(contract_item['e5'], contract_item['id'])
  }

  enter_contract(state_obj, job_acceptance_action_state_object){
    var stack_clone = this.state.stack_items.slice()
    if(job_acceptance_action_state_object != null) {
      stack_clone.push(job_acceptance_action_state_object)
    }
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  accept_job_without_entering_contract(job_acceptance_action_state_object){
    var stack_clone = this.state.stack_items.slice()
    if(job_acceptance_action_state_object != null) {
      stack_clone.push(job_acceptance_action_state_object)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }








  render_extend_contract_bottomsheet(){
    if(this.state.extend_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.extend_contract_bottomsheet} onClose={this.open_extend_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ExtendContractPage ref={this.extend_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} extend_contract={this.extend_contract.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_extend_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_extend_contract_bottomsheet.bind(this)} open={this.state.extend_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ExtendContractPage ref={this.extend_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} extend_contract={this.extend_contract.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_extend_contract_bottomsheet(){
    if(this.state.extend_contract_bottomsheet == true){
      //closing
      this.extend_contract_bottomsheet = this.extend_contract_page.current?.state;

      this.setState({extend_contract_bottomsheet: !this.state.extend_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({extend_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({extend_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({extend_contract_bottomsheet: !me.state.extend_contract_bottomsheet});

          if(me.extend_contract_bottomsheet != null){
            me.extend_contract_page.current?.setState(me.extend_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_extend_contract_bottomsheet(contract_item){
    this.open_extend_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.extend_contract_page.current != null){
      me.extend_contract_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    
  }

  extend_contract(state_obj){
    var stack_clone = this.state.stack_items.slice()
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_exit_contract_bottomsheet(){
    if(this.state.exit_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.exit_contract_bottomsheet} onClose={this.open_exit_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ExitContractPage ref={this.exit_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} exit_contract={this.exit_contract.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_exit_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_exit_contract_bottomsheet.bind(this)} open={this.state.exit_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ExitContractPage ref={this.exit_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} exit_contract={this.exit_contract.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_exit_contract_bottomsheet(){
    if(this.state.exit_contract_bottomsheet == true){
      //closing
      this.exit_contract_bottomsheet = this.exit_contract_page.current?.state;

      this.setState({exit_contract_bottomsheet: !this.state.exit_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({exit_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({exit_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({exit_contract_bottomsheet: !me.state.exit_contract_bottomsheet});

          if(me.exit_contract_bottomsheet != null){
            me.exit_contract_page.current?.setState(me.exit_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_exit_contract_bottomsheet(contract_item){
    this.open_exit_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.exit_contract_page.current != null){
      me.exit_contract_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    
  }

  exit_contract(state){
    var stack_clone = this.state.stack_items.slice()
    stack_clone.push(state)
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  //new proposal
  render_new_proposal_bottomsheet(){
    if(this.state.new_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.new_proposal_bottomsheet} onClose={this.open_new_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <NewProposalPage ref={this.new_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_proposal_to_stack={this.when_add_new_proposal_to_stack.bind(this)} load_modify_item_data={this.load_modify_item_data.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_new_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_new_proposal_bottomsheet.bind(this)} open={this.state.new_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <NewProposalPage ref={this.new_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_add_new_proposal_to_stack={this.when_add_new_proposal_to_stack.bind(this)} load_modify_item_data={this.load_modify_item_data.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_new_proposal_bottomsheet(){
    if(this.state.new_proposal_bottomsheet == true){
      //closing
      this.new_proposal_bottomsheet = this.new_proposal_page.current?.state;

      this.setState({new_proposal_bottomsheet: !this.state.new_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({new_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({new_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({new_proposal_bottomsheet: !me.state.new_proposal_bottomsheet});
          if(me.new_proposal_bottomsheet != null){
            me.new_proposal_page.current?.setState(me.new_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_new_proposal_bottomsheet(contract_item){
    console.log('opening new proposal')
    this.open_new_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.new_proposal_page.current != null){
        me.new_proposal_page.current.reset_state()
        me.new_proposal_page.current.set_contract(contract_item)
      }
    }, (1 * 500));
    

    
  }

  when_add_new_proposal_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_vote_proposal_bottomsheet(){
    if(this.state.vote_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.vote_proposal_bottomsheet} onClose={this.open_vote_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <VoteProposalPage ref={this.vote_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_vote_proposal_action_to_stack={this.add_vote_proposal_action_to_stack.bind(this)} />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_vote_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_vote_proposal_bottomsheet.bind(this)} open={this.state.vote_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <VoteProposalPage ref={this.vote_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_vote_proposal_action_to_stack={this.add_vote_proposal_action_to_stack.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_vote_proposal_bottomsheet(){
    if(this.state.vote_proposal_bottomsheet == true){
      //closing
      this.vote_proposal_bottomsheet = this.vote_proposal_page.current?.state;

      this.setState({vote_proposal_bottomsheet: !this.state.vote_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({vote_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({vote_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({vote_proposal_bottomsheet: !me.state.vote_proposal_bottomsheet});
          
          if(me.vote_proposal_bottomsheet != null){
            me.vote_proposal_page.current?.setState(me.vote_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }


  show_vote_proposal_bottomsheet(proposal_item){
    this.open_vote_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.vote_proposal_page.current != null){
      me.vote_proposal_page.current.set_proposal(proposal_item)
    }
    }, (1 * 500));
    
  }


  add_vote_proposal_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_submit_proposal_bottomsheet(){
    if(this.state.submit_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.submit_proposal_bottomsheet} onClose={this.open_submit_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SubmitProposalPage ref={this.submit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_submit_proposal_action_to_stack={this.add_submit_proposal_action_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_submit_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_submit_proposal_bottomsheet.bind(this)} open={this.state.submit_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <SubmitProposalPage ref={this.submit_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_submit_proposal_action_to_stack={this.add_submit_proposal_action_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_submit_proposal_bottomsheet(){
    if(this.state.submit_proposal_bottomsheet == true){
      //closing
      this.submit_proposal_bottomsheet = this.submit_proposal_page.current?.state;

      this.setState({submit_proposal_bottomsheet: !this.state.submit_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({submit_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({submit_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({submit_proposal_bottomsheet: !me.state.submit_proposal_bottomsheet});

          if(me.submit_proposal_bottomsheet != null){
            me.submit_proposal_page.current?.setState(me.submit_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_submit_proposal_bottomsheet(proposal_item){
    this.open_submit_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.submit_proposal_page.current != null){
      me.submit_proposal_page.current.set_proposal(proposal_item)
    }
    }, (1 * 500));
    

  }


  add_submit_proposal_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    stack_clone.push(state_obj)
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }














  render_pay_subscription_bottomsheet(){
    if(this.state.pay_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.pay_subscription_bottomsheet} onClose={this.open_pay_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <PaySubscriptionPage ref={this.pay_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_subscription_to_stack={this.add_pay_subscription_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_pay_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_pay_subscription_bottomsheet.bind(this)} open={this.state.pay_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <PaySubscriptionPage ref={this.pay_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_subscription_to_stack={this.add_pay_subscription_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_pay_subscription_bottomsheet(){
    if(this.state.pay_subscription_bottomsheet == true){
      //closing
      this.pay_subscription_bottomsheet = this.pay_subscription_page.current?.state;

      this.setState({pay_subscription_bottomsheet: !this.state.pay_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({pay_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({pay_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({pay_subscription_bottomsheet: !me.state.pay_subscription_bottomsheet});

          if(me.pay_subscription_bottomsheet != null){
            me.pay_subscription_page.current?.setState(me.pay_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_pay_subscription_bottomsheet(subscription_item){
    this.open_pay_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.pay_subscription_page.current != null){
      me.pay_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_pay_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_cancel_subscription_bottomsheet(){
    if(this.state.cancel_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.cancel_subscription_bottomsheet} onClose={this.open_cancel_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <CancelSubscriptionPage ref={this.cancel_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_cancel_subscription_to_stack={this.add_cancel_subscription_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_cancel_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_cancel_subscription_bottomsheet.bind(this)} open={this.state.cancel_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <CancelSubscriptionPage ref={this.cancel_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_cancel_subscription_to_stack={this.add_cancel_subscription_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_cancel_subscription_bottomsheet(){
    if(this.state.cancel_subscription_bottomsheet == true){
      //closing
      this.cancel_subscription_bottomsheet = this.cancel_subscription_page.current?.state;

      this.setState({cancel_subscription_bottomsheet: !this.state.cancel_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({cancel_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({cancel_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({cancel_subscription_bottomsheet: !me.state.cancel_subscription_bottomsheet});

          if(me.cancel_subscription_bottomsheet != null){
            me.cancel_subscription_page.current?.setState(me.cancel_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_cancel_subscription_bottomsheet(subscription_item){
    this.open_cancel_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.cancel_subscription_page.current != null){
      me.cancel_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_cancel_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }












  render_collect_subscription_bottomsheet(){
    if(this.state.collect_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.collect_subscription_bottomsheet} onClose={this.open_collect_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <CollectSubscriptionPage ref={this.collect_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_collect_subscription_to_stack={this.add_collect_subscription_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_collect_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_collect_subscription_bottomsheet.bind(this)} open={this.state.collect_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <CollectSubscriptionPage ref={this.collect_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_collect_subscription_to_stack={this.add_collect_subscription_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_collect_subscription_bottomsheet(){
    if(this.state.collect_subscription_bottomsheet == true){
      //closing
      this.collect_subscription_bottomsheet = this.collect_subscription_page.current?.state;

      this.setState({collect_subscription_bottomsheet: !this.state.collect_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({collect_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({collect_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({collect_subscription_bottomsheet: !me.state.collect_subscription_bottomsheet});

          if(me.collect_subscription_bottomsheet != null){
            me.collect_subscription_page.current?.setState(me.collect_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_collect_subscription_bottomsheet(subscription_item){
    this.open_collect_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.collect_subscription_page.current != null){
      me.collect_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_collect_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }











  render_modify_subscription_bottomsheet(){
    if(this.state.modify_subscription_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.modify_subscription_bottomsheet} onClose={this.open_modify_subscription_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModifySubscriptionPage ref={this.modify_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_subscription_to_stack={this.add_modify_subscription_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_modify_subscription_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_modify_subscription_bottomsheet.bind(this)} open={this.state.modify_subscription_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModifySubscriptionPage ref={this.modify_subscription_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_subscription_to_stack={this.add_modify_subscription_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_modify_subscription_bottomsheet(){
    if(this.state.modify_subscription_bottomsheet == true){
      //closing
      this.modify_subscription_bottomsheet = this.modify_subscription_page.current?.state;

      this.setState({modify_subscription_bottomsheet: !this.state.modify_subscription_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({modify_subscription_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({modify_subscription_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({modify_subscription_bottomsheet: !me.state.modify_subscription_bottomsheet});

          if(me.modify_subscription_bottomsheet != null){
            me.modify_subscription_page.current?.setState(me.modify_subscription_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_modify_subscription_bottomsheet(subscription_item){
    this.open_modify_subscription_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.modify_subscription_page.current != null){
      me.modify_subscription_page.current.set_subscription(subscription_item)
    }
    }, (1 * 500));
    
  }

  add_modify_subscription_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_modify_contract_bottomsheet(){
    if(this.state.modify_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.modify_contract_bottomsheet} onClose={this.open_modify_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModifyContractPage ref={this.modify_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_contract_to_stack={this.add_modify_contract_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_modify_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_modify_contract_bottomsheet.bind(this)} open={this.state.modify_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModifyContractPage ref={this.modify_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_contract_to_stack={this.add_modify_contract_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_modify_contract_bottomsheet(){
    if(this.state.modify_contract_bottomsheet == true){
      //closing
      this.modify_contract_bottomsheet = this.modify_contract_page.current?.state;

      this.setState({modify_contract_bottomsheet: !this.state.modify_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({modify_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({modify_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({modify_contract_bottomsheet: !me.state.modify_contract_bottomsheet});

          if(me.modify_contract_bottomsheet != null){
            me.modify_contract_page.current?.setState(me.modify_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_modify_contract_bottomsheet(contract_item){
    this.open_modify_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.modify_contract_page.current != null){
      me.modify_contract_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    
  }

  add_modify_contract_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_modify_token_bottomsheet(){
    if(this.state.modify_token_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.modify_token_bottomsheet} onClose={this.open_modify_token_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModifyTokenPage ref={this.modify_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_token_to_stack={this.add_modify_token_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_modify_token_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_modify_token_bottomsheet.bind(this)} open={this.state.modify_token_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModifyTokenPage ref={this.modify_token_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_modify_token_to_stack={this.add_modify_token_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_modify_token_bottomsheet(){
    if(this.state.modify_token_bottomsheet == true){
      //closing
      this.modify_token_bottomsheet = this.modify_token_page.current?.state;

      this.setState({modify_token_bottomsheet: !this.state.modify_token_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({modify_token_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({modify_token_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({modify_token_bottomsheet: !me.state.modify_token_bottomsheet});

          if(me.modify_token_bottomsheet != null){
            me.modify_token_page.current?.setState(me.modify_token_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_modify_token_bottomsheet(token_item){
    this.open_modify_token_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.modify_token_page.current != null){
      me.modify_token_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_modify_token_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_exchange_transfer_bottomsheet(){
    if(this.state.exchange_transfer_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.exchange_transfer_bottomsheet} onClose={this.open_exchange_transfer_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ExchangeTransferPage ref={this.exchange_transfer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_exchange_transfer_to_stack={this.add_exchange_transfer_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_exchange_transfer_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_exchange_transfer_bottomsheet.bind(this)} open={this.state.exchange_transfer_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ExchangeTransferPage ref={this.exchange_transfer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_exchange_transfer_to_stack={this.add_exchange_transfer_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_exchange_transfer_bottomsheet(){
    if(this.state.exchange_transfer_bottomsheet == true){
      //closing
      this.exchange_transfer_bottomsheet = this.exchange_transfer_page.current?.state;

      this.setState({exchange_transfer_bottomsheet: !this.state.exchange_transfer_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({exchange_transfer_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({exchange_transfer_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({exchange_transfer_bottomsheet: !me.state.exchange_transfer_bottomsheet});

          if(me.exchange_transfer_bottomsheet != null){
            me.exchange_transfer_page.current?.setState(me.exchange_transfer_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_exchange_transfer_bottomsheet(token_item){
    this.open_exchange_transfer_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.exchange_transfer_page.current != null){
      me.exchange_transfer_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_exchange_transfer_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_force_exit_bottomsheet(){
    if(this.state.force_exit_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.force_exit_bottomsheet} onClose={this.open_force_exit_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ForceExitPage ref={this.force_exit_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_force_exit_to_stack={this.add_force_exit_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_force_exit_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_force_exit_bottomsheet.bind(this)} open={this.state.force_exit_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ForceExitPage ref={this.force_exit_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_force_exit_to_stack={this.add_force_exit_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_force_exit_bottomsheet(){
    if(this.state.force_exit_bottomsheet == true){
      //closing
      this.force_exit_bottomsheet = this.force_exit_page.current?.state;

      this.setState({force_exit_bottomsheet: !this.state.force_exit_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({force_exit_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({force_exit_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({force_exit_bottomsheet: !me.state.force_exit_bottomsheet});

          if(me.force_exit_bottomsheet != null){
            me.force_exit_page.current?.setState(me.force_exit_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_force_exit_bottomsheet(contract_item){
    this.open_force_exit_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.force_exit_page.current != null){
      me.force_exit_page.current.set_contract(contract_item)
    }
    }, (1 * 500));
    

  }

  add_force_exit_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_archive_proposal_bottomsheet(){
    if(this.state.archive_proposal_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.archive_proposal_bottomsheet} onClose={this.open_archive_proposal_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ArchiveProposalPage ref={this.archive_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_archive_proposal_action_to_stack={this.add_archive_proposal_action_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_archive_proposal_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_archive_proposal_bottomsheet.bind(this)} open={this.state.archive_proposal_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ArchiveProposalPage ref={this.archive_proposal_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_archive_proposal_action_to_stack={this.add_archive_proposal_action_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_archive_proposal_bottomsheet(){
    if(this.state.archive_proposal_bottomsheet == true){
      //closing
      this.archive_proposal_bottomsheet = this.archive_proposal_page.current?.state;

      this.setState({archive_proposal_bottomsheet: !this.state.archive_proposal_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({archive_proposal_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({archive_proposal_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({archive_proposal_bottomsheet: !me.state.archive_proposal_bottomsheet});

          if(me.archive_proposal_bottomsheet != null){
            me.archive_proposal_page.current?.setState(me.archive_proposal_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_archive_proposal_bottomsheet(proposal_item){
    this.open_archive_proposal_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.archive_proposal_page.current != null){
      me.archive_proposal_page.current.set_object(proposal_item)
    }
    }, (1 * 500));
    

  }


  add_archive_proposal_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_freeze_unfreeze_bottomsheet(){
    if(this.state.freeze_unfreeze_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.freeze_unfreeze_bottomsheet} onClose={this.open_freeze_unfreeze_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <FreezeUnfreezePage ref={this.freeze_unfreeze_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_freeze_unfreeze_to_stack={this.add_freeze_unfreeze_to_stack.bind(this)} get_account_frozen_unfroozen_balance={this.get_account_frozen_unfroozen_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_freeze_unfreeze_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_freeze_unfreeze_bottomsheet.bind(this)} open={this.state.freeze_unfreeze_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FreezeUnfreezePage ref={this.freeze_unfreeze_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_freeze_unfreeze_to_stack={this.add_freeze_unfreeze_to_stack.bind(this)} get_account_frozen_unfroozen_balance={this.get_account_frozen_unfroozen_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_freeze_unfreeze_bottomsheet(){
     if(this.state.freeze_unfreeze_bottomsheet == true){
      //closing
      this.freeze_unfreeze_bottomsheet = this.freeze_unfreeze_page.current?.state;

      this.setState({freeze_unfreeze_bottomsheet: !this.state.freeze_unfreeze_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({freeze_unfreeze_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({freeze_unfreeze_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({freeze_unfreeze_bottomsheet: !me.state.freeze_unfreeze_bottomsheet});

          if(me.freeze_unfreeze_bottomsheet != null){
            me.freeze_unfreeze_page.current?.setState(me.freeze_unfreeze_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_freeze_unfreeze_bottomsheet(token_item){
    this.open_freeze_unfreeze_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.freeze_unfreeze_page.current != null){
      me.freeze_unfreeze_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_freeze_unfreeze_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  get_account_frozen_unfroozen_balance = async (exchange_id, account, e5) => {
      const web3 = new Web3(this.get_web3_url_from_e5(e5));
      const H52contractArtifact = require('./contract_abis/H52.json');
      var contract_addresses = this.state.addresses[e5]
      const H52_address = contract_addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

      var exchange = this.state.created_token_object_mapping[e5] == null ? null : this.state.created_token_object_mapping[e5][exchange_id];
      var exchanges_depth = 0
      if(exchange != null && exchange['ipfs'] != null){
        exchanges_depth = exchange['ipfs'].default_depth == null ? 0 : exchange['ipfs'].default_depth
      }
      var exchange_ids = []
      var depths = []
      var accounts = []
      for(var i=exchanges_depth; i>=0; i--){
        exchange_ids.push(exchange_id)
        depths.push(i)
        accounts.push(account)
      }
      
      var token_balances = await H52contractInstance.methods.f140(exchange_ids, accounts, depths, 1).call((error, result) => {});

      var frozen_token_balances = await H52contractInstance.methods.f140(exchange_ids, accounts, depths, 2).call((error, result) => {});

      var bal = 0;
      var frozen_bal = 0;
      for(var i=0; i<token_balances.length; i++){
        var balance_at_depth = bigInt(this.get_actual_number(token_balances[i], depths[i]))
        bal = bigInt(bal).add(balance_at_depth)
      }
      for(var i=0; i<frozen_token_balances.length; i++){
        var balance_at_depth = bigInt(this.get_actual_number(frozen_token_balances[i], depths[i]))
        frozen_bal = bigInt(frozen_bal).add(balance_at_depth)
      }


      var frozen_unfrozen_account_balance_data_clone = structuredClone(this.state.frozen_unfrozen_account_balance_data)

      var pointer = e5+exchange_id+account
      frozen_unfrozen_account_balance_data_clone[pointer] = {'balance':bal, 'frozen_balance':frozen_bal}

      this.setState({frozen_unfrozen_account_balance_data: frozen_unfrozen_account_balance_data_clone})
  }










  render_authmint_bottomsheet(){
    if(this.state.authmint_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.authmint_bottomsheet} onClose={this.open_authmint_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <AuthMintPage ref={this.authmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_authmint_to_stack={this.add_authmint_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_authmint_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_authmint_bottomsheet.bind(this)} open={this.state.authmint_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AuthMintPage ref={this.authmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_authmint_to_stack={this.add_authmint_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_authmint_bottomsheet(){
    if(this.state.authmint_bottomsheet == true){
      //closing
      this.authmint_bottomsheet = this.authmint_page.current?.state;

      this.setState({authmint_bottomsheet: !this.state.authmint_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({authmint_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({authmint_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({authmint_bottomsheet: !me.state.authmint_bottomsheet});

          if(me.authmint_bottomsheet != null){
            me.authmint_page.current?.setState(me.authmint_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_authmint_bottomsheet(token_item){
    this.open_authmint_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.authmint_page.current != null){
      me.authmint_page.current.set_token(token_item)
    }
    }, (1 * 500));
    

  }

  add_authmint_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_moderator_bottomsheet(){
    if(this.state.moderator_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.moderator_bottomsheet} onClose={this.open_moderator_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ModeratorPage ref={this.moderator_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_moderator_to_stack={this.add_moderator_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_moderator_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_moderator_bottomsheet.bind(this)} open={this.state.moderator_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ModeratorPage ref={this.moderator_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_moderator_to_stack={this.add_moderator_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_moderator_bottomsheet(){
    if(this.state.moderator_bottomsheet == true){
      //closing
      this.moderator_bottomsheet = this.moderator_page.current?.state;

      this.setState({moderator_bottomsheet: !this.state.moderator_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({moderator_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({moderator_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({moderator_bottomsheet: !me.state.moderator_bottomsheet});

          if(me.moderator_bottomsheet != null){
            me.moderator_page.current?.setState(me.moderator_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_moderator_bottomsheet(item){
    this.open_moderator_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.moderator_page.current != null){
      me.moderator_page.current.set_object(item)
    }
    }, (1 * 500));
    

  }

  add_moderator_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }








  render_respond_to_job_bottomsheet(){
    if(this.state.respond_to_job_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.respond_to_job_bottomsheet} onClose={this.open_respond_to_job_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <RespondToJobPage ref={this.respond_to_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_job_to_stack={this.add_respond_to_job_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_respond_to_job_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_respond_to_job_bottomsheet.bind(this)} open={this.state.respond_to_job_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <RespondToJobPage ref={this.respond_to_job_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_job_to_stack={this.add_respond_to_job_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_respond_to_job_bottomsheet(){
    if(this.state.respond_to_job_bottomsheet == true){
      //closing
      this.respond_to_job_bottomsheet = this.respond_to_job_page.current?.state;

      this.setState({respond_to_job_bottomsheet: !this.state.respond_to_job_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({respond_to_job_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({respond_to_job_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({respond_to_job_bottomsheet: !me.state.respond_to_job_bottomsheet});

          if(me.respond_to_job_bottomsheet != null){
            me.respond_to_job_page.current?.setState(me.respond_to_job_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_respond_to_job_bottomsheet(item){
    this.open_respond_to_job_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.respond_to_job_page.current != null){
        me.respond_to_job_page.current.set_object(item)
        me.load_my_contracts()
      }
    }, (1 * 500));
    

  }

  add_respond_to_job_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)

    var clone = JSON.parse(JSON.stringify(this.state.my_contract_applications))
    clone[state_obj.picked_contract['id']] = state_obj.application_expiry_time
    this.setState({my_contract_applications: clone})
  }










  render_view_application_contract_bottomsheet(){
    if(this.state.view_application_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_application_contract_bottomsheet} onClose={this.open_view_application_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewApplicationContractPage ref={this.view_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_acceptance_action_to_stack={this.add_job_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_application_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_application_contract_bottomsheet.bind(this)} open={this.state.view_application_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewApplicationContractPage ref={this.view_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_acceptance_action_to_stack={this.add_job_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_application_contract_bottomsheet(){
    if(this.state.view_application_contract_bottomsheet == true){
      //closing
      this.view_application_contract_bottomsheet = this.view_application_contract_page.current?.state;

      this.setState({view_application_contract_bottomsheet: !this.state.view_application_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_application_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_application_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_application_contract_bottomsheet: !me.state.view_application_contract_bottomsheet});

          if(me.view_application_contract_bottomsheet != null){
            me.view_application_contract_page.current?.setState(me.view_application_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_application_contract_bottomsheet(item){
    this.open_view_application_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_application_contract_page.current != null){
        me.view_application_contract_page.current.set_object(item)
        me.load_contract_item(item['e5'], item['picked_contract_id'])
      }
    }, (1 * 500));
    

  }


  add_job_acceptance_action_to_stack(state_obj){
    var item = state_obj.application_item
    var contract_proposal_data = this.state.loaded_contract_and_proposal_data[item['picked_contract_id']]
    var contract = contract_proposal_data['contract']
    var me = this.state.user_account_id[contract['e5']]
    if(me == null) {
      me = 1
    }
    if(contract['access_rights_enabled'] == true && (contract['my_interactable_time_value'] < Date.now()/1000 && !contract['moderators'].includes(me))){
      this.prompt_top_notification(this.getLocale()['2715']/* 'The contract owner hasnt granted you access to their contract yet.' */, 7000)
    }
    else if(contract['my_blocked_time_value'] > Date.now()/1000){
      this.prompt_top_notification(this.getLocale()['2715']/* 'Your account was blocked from entering the contract.' */, 4000)
    }
    else{
      this.show_enter_contract_bottomsheet(contract, state_obj)
      this.open_view_application_contract_bottomsheet()
    }
  }











  render_view_transaction_bottomsheet(){
    if(this.state.view_transaction_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_transaction_bottomsheet} onClose={this.open_view_transaction_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_view_transaction_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_transaction_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_transaction_bottomsheet.bind(this)} open={this.state.view_transaction_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_transaction_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_transaction_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewTransactionPage ref={this.view_transaction_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} open_edit_object_uis={this.open_edit_object_uis.bind(this)} delete_transaction={this.delete_transaction.bind(this)} show_hide_stack_item={this.show_hide_stack_item.bind(this)} delete_message_item={this.delete_message_item.bind(this)} when_edit_bag_item_tapped={this.when_edit_bag_item_tapped.bind(this)} delete_bag_item={this.delete_bag_item.bind(this)} delete_collected_signature={this.delete_collected_signature.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} 
            calculate_actual_balance={this.calculate_actual_balance.bind(this)}
            />
        </div>
    )
  }

  open_view_transaction_bottomsheet(){
    if(this.state.view_transaction_bottomsheet == true){
      //closing
      this.view_transaction_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_transaction_bottomsheet: !this.state.view_transaction_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_transaction_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_transaction_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_transaction_bottomsheet: !me.state.view_transaction_bottomsheet});

          if(me.view_transaction_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_transaction_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_transaction_bottomsheet(item, index){
    this.open_view_transaction_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_transaction_page.current != null){
      me.view_transaction_page.current.set_transaction(item, index)
    }
    }, (1 * 500));
    

  }


  delete_transaction(item){
    var stack_clone = this.state.stack_items.slice()
    const index = stack_clone.indexOf(item);
    if (index > -1) { // only splice array when item is found
      stack_clone.splice(index, 1); // 2nd parameter means remove one item only
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
    this.open_view_transaction_bottomsheet()
  }

  //here
  open_edit_object_uis(tx){
    if(tx.type == this.getLocale()['1130']/* 'contract' */){
        this.open_new_object('1')
        var me = this;
        setTimeout(function() {
          if(me.new_contract_page.current){
            me.new_contract_page.current?.set_state(tx)
          }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['601']/* 'token' */){
        this.open_new_object('8')
        var me = this;
        setTimeout(function() {
          if(me.new_token_page.current){
          me.new_token_page.current?.set_state(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['823']/* 'subscription' */){
        this.open_new_object('3')
        var me = this;
        setTimeout(function() {
          if(me.new_subscription_page.current){
          me.new_subscription_page.current?.set_state(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['297']/* 'post' */){
        this.open_new_object('6')
        var me = this;
        setTimeout(function() {
          if(me.new_post_page.current){
          me.new_post_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['760']/* 'job' */){
        this.open_new_object('0')
        var me = this;
        setTimeout(function() {
          if(me.new_job_page.current){
          me.new_job_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['109']/* 'channel' */){
        this.open_new_object('7')
        var me = this;
        setTimeout(function() {
          if(me.new_channel_page.current){
          me.new_channel_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['439']/* 'storefront-item' */){
        this.open_new_object('4')
        var me = this;
        setTimeout(function() {
          if(me.new_storefront_item_page.current){
          me.new_storefront_item_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['946']/* 'buy-sell' */){
      this.open_mint_token_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.new_mint_dump_token_page.current){
        me.new_mint_dump_token_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['1018']/* 'transfer' */){
      this.open_transfer_token_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.new_transfer_token_page.current){
            me.new_transfer_token_page.current?.setState(tx)
          }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['2125']/* 'enter-contract' */){
      this.open_enter_contract_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.enter_contract_page.current){
            me.enter_contract_page.current?.setState(tx)
          }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['35']/* 'extend-contract' */){
      this.open_extend_contract_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.extend_contract_page.current){
        me.extend_contract_page.current?.setState(tx)
      }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['312']/* 'proposal' */){
      this.open_new_proposal_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.new_proposal_page.current){
        me.new_proposal_page.current?.setState(tx)
      }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['796']/* 'vote' */){
      this.open_vote_proposal_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.vote_proposal_page.current){
        me.vote_proposal_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['862']/* 'pay-subscription' */){
      this.open_pay_subscription_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.pay_subscription_page.current){
        me.pay_subscription_page.current?.setState(tx)
      } 
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['821']/* 'cancel-subscription' */){
      this.open_cancel_subscription_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.cancel_subscription_page.current){
        me.cancel_subscription_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['840']/* 'modify-subscription' */){
        this.open_modify_subscription_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.modify_subscription_page.current){
          me.modify_subscription_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }   
    else if(tx.type == this.getLocale()['2123']/* 'modify-contract' */){
        this.open_modify_contract_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.modify_contract_page.current){
          me.modify_contract_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['997']/* 'modify-token' */){
        this.open_modify_token_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.modify_token_page.current){
          me.modify_token_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['318']/* 'exchange-transfer' */){
        this.open_exchange_transfer_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.exchange_transfer_page.current){
          me.exchange_transfer_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['48']/* 'force-exit' */){
        this.open_force_exit_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.force_exit_page.current){
          me.force_exit_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['768']/* 'archive' */){
        this.open_archive_proposal_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.archive_proposal_page.current){
          me.archive_proposal_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['930']/* 'freeze/unfreeze' */){
        this.open_freeze_unfreeze_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.freeze_unfreeze_page.current){
          me.freeze_unfreeze_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['880']/* 'authmint' */){
        this.open_authmint_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.authmint_page.current){
          me.authmint_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['1265']/* 'access-rights-settings' */){
        this.open_moderator_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.moderator_page.current){
          me.moderator_page.current?.setState(tx)
        }
        }, (1 * 500));
          
    }
    else if(tx.type == this.getLocale()['285']/* 'mail' */){
        this.open_new_object('5')
        var me = this;
        setTimeout(function() {
          if(me.new_mail_page.current){
          me.new_mail_page.current?.setState(tx)
        }
        }, (1 * 500));
         
    }  
    else if(tx.type == this.getLocale()['1307']/* 'job-response' */){
        this.open_respond_to_job_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.respond_to_job_page.current){
          me.respond_to_job_page.current?.setState(tx)
        }
        }, (1 * 500));
           
    }
    else if(tx.type == this.getLocale()['1499']/* 'direct-purchase' */){
      this.open_direct_purchase_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.direct_purchase_page.current){
        me.direct_purchase_page.current?.setState(tx)
      }
        }, (1 * 500));
       
    }
    else if(tx.type == this.getLocale()['1503']/* 'contractor' */){
      this.open_new_object('9')
      var me = this;
        setTimeout(function() {
          if(me.new_contractor_page.current){
          me.new_contractor_page.current?.setState(tx)
        }
        }, (1 * 500));
        
      
    }
    else if(tx.type == this.getLocale()['1363']/* 'job-request' */){
        this.open_send_job_request_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.send_job_request_page.current){
          me.send_job_request_page.current?.setState(tx)
        }
        }, (1 * 500));
         
    }
    else if(tx.type == this.getLocale()['753']/* 'edit-channel' */){
      this.open_edit_channel_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.edit_channel_page.current){
        me.edit_channel_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['763']/* 'edit-contractor' */){
      this.open_edit_contractor_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.edit_contractor_page.current){
        me.edit_contractor_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['764']/* 'edit-job' */){
        this.open_edit_job_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_job_page.current){
          me.edit_job_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['765']/* 'edit-post' */){
        this.open_edit_post_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_post_page.current){
          me.edit_post_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['766']/* 'edit-storefront' */){
        this.open_edit_storefront_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_storefront_page.current){
          me.edit_storefront_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['761']/* 'edit-token' */){
        this.open_edit_token_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_token_page.current){
          me.edit_token_page.current?.setState(tx)
        }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['2739']/* 'edit-proposal' */){
      this.open_edit_proposal_bottomsheet()
      var me = this;
        setTimeout(function() {
          if(me.edit_proposal_page.current){
        me.edit_proposal_page.current?.setState(tx)
      }
        }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['898']/* 'depthmint' */){
        this.open_depthmint_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.depthmint_page.current){
          me.depthmint_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['2846']/* stage-royalty */){
        this.open_stage_royalties_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.stage_royalties_page.current){
            me.stage_royalties_page.current?.setState(tx)
          }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['2884']/* 'royalty-payouts' */){
        this.open_view_staged_royalties_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.view_staged_royalties_page.current){
            me.view_staged_royalties_page.current?.setState(tx)
          }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['2896']/* 'upcoming-subscriptions' */){
        this.open_pay_upcoming_subscriptions_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.pay_upcoming_subscriptions_page.current){
            me.pay_upcoming_subscriptions_page.current?.setState(tx)
          }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['a311a']/* 'audio' */){
        this.open_new_object('10')
        var me = this;
        setTimeout(function() {
          if(me.new_audio_page.current){
            me.new_audio_page.current?.setState(tx)
          }
        }, (1 * 500));
        
    }
    else if(tx.type == this.getLocale()['2962']/* 'buy-album' */){
      this.open_buy_album_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.buy_album_page.current){
            me.buy_album_page.current?.setState(tx)
          }
        }, (1 * 500));
    }
    else if(tx.type == this.getLocale()['2975']/* 'edit-audio' */){
        this.open_edit_audiopost_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_audiopost_page.current){
          me.edit_audiopost_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['b311a']/* video */){
        this.open_new_object('11')
        var me = this;
        setTimeout(function() {
          if(me.new_video_page.current){
          me.new_video_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['a2962a']/* 'buy-video' */){
      this.open_buy_video_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.buy_video_page.current){
            me.buy_video_page.current?.setState(tx)
          }
        }, (1 * 500));
    }
    else if(tx.type == this.getLocale()['3023']/* 'edit-video' */){
        this.open_edit_videopost_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_videopost_page.current){
          me.edit_videopost_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['a273a']/* nitro */){
        this.open_new_object('12')
        var me = this;
        setTimeout(function() {
          if(me.new_nitro_page.current){
          me.new_nitro_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3030']/* 'edit-nitro' */){
        this.open_edit_nitropost_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.edit_nitropost_page.current){
          me.edit_nitropost_page.current?.setState(tx)
        }
        }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3031']/* 'buy-storage' */){
      this.open_buy_nitro_storage_bottomsheet()
        var me = this;
        setTimeout(function() {
          if(me.buy_nitro_storage_page.current){
            me.buy_nitro_storage_page.current?.setState(tx)
          }
        }, (1 * 500));
    }
    else if(tx.type == this.getLocale()['c311a']/* 'poll' */){
      this.open_new_object('13')
      var me = this;
      setTimeout(function() {
        if(me.new_poll_page.current){
        me.new_poll_page.current?.setState(tx)
      }
      }, (1 * 500));
      
    }
    else if(tx.type == this.getLocale()['3072h']/* 'edit-poll' */){
      this.open_edit_poll_bottomsheet()
      var me = this;
      setTimeout(function() {
        if(me.edit_poll_page.current){
        me.edit_poll_page.current?.setState(tx)
      }
      }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3031']/* 'buy-storage' */){
      this.open_buy_nitro_storage_bottomsheet()
      var me = this;
      setTimeout(function() {
        if(me.buy_nitro_storage_page.current){
        me.buy_nitro_storage_page.current?.setState(tx)
      }
      }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3073']/* 'vote-poll' */){
      this.open_view_vote_poll_bottomsheet()
      var me = this;
      setTimeout(function() {
        if(me.view_vote_poll_page.current){
        me.view_vote_poll_page.current?.setState(tx)
      }
      }, (1 * 500));  
    }
    else if(tx.type == this.getLocale()['3076']/* 'auction-bid' */){
      this.open_view_bid_in_auction_bottomsheet()
      var me = this;
      setTimeout(function() {
        if(me.view_bid_in_auction_page.current){
          me.view_bid_in_auction_page.current?.setState(tx)
        }
      }, (1 * 500)); 
    }
  }

  delete_message_item(item, transaction_item){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].id == transaction_item.id){
        pos = i
        break;
      }
    }
    if(pos != -1){
      const index = stack[pos].messages_to_deliver.indexOf(item);
      if (index > -1) { // only splice array when item is found
        stack[pos].messages_to_deliver.splice(index, 1); // 2nd parameter means remove one item only
      }
      if(stack[pos].messages_to_deliver.length == 0){
        stack.splice(pos, 1)
        this.open_view_transaction_bottomsheet()
      }
      this.setState({stack_items: stack})
      this.set_cookies_after_stack_action(stack)
    }
  }

  when_edit_bag_item_tapped(item){
    this.open_add_to_bag_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_to_bag_page.current != null){
        me.add_to_bag_page.current.setState(item)
      }
    }, (1 * 500));
    
  }

  delete_bag_item(item){
    var stack = this.state.stack_items.slice() 
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1516']/* 'storefront-bag' */){
        pos = i
        break;
      }
    }

    if(pos != -1){
      const index = stack[pos].items_to_deliver.indexOf(item);
      if (index > -1) { // only splice array when item is found
        stack[pos].items_to_deliver.splice(index, 1); // 2nd parameter means remove one item only
      }
      if(stack[pos].items_to_deliver.length == 0){
        stack.splice(pos, 1)
        this.open_view_transaction_bottomsheet()
      }
      this.setState({stack_items: stack})
      this.set_cookies_after_stack_action(stack)
    }

  }

  delete_collected_signature(item, transaction_item){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].id == transaction_item.id){
        pos = i
        break;
      }
    }
    if(pos != -1){
      const index = stack[pos].items_to_clear.indexOf(item);
      if (index > -1) { // only splice array when item is found
        stack[pos].items_to_clear.splice(index, 1); // 2nd parameter means remove one item only
      }
      this.setState({stack_items: stack})
      this.set_cookies_after_stack_action(stack)
    }
  }








  render_view_transaction_log_bottomsheet(){
    if(this.state.view_transaction_log_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_transaction_log_bottomsheet} onClose={this.open_view_transaction_log_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewTransactionLogPage ref={this.view_transaction_log_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_transaction_log_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_transaction_log_bottomsheet.bind(this)} open={this.state.view_transaction_log_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewTransactionLogPage ref={this.view_transaction_log_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_transaction_log_bottomsheet(){
    if(this.state.view_transaction_log_bottomsheet == true){
      //closing
      this.view_transaction_log_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_transaction_log_bottomsheet: !this.state.view_transaction_log_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_transaction_log_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_transaction_log_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_transaction_log_bottomsheet: !me.state.view_transaction_log_bottomsheet});

          if(me.view_transaction_log_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_transaction_log_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_transaction_log_bottomsheet(item){
    this.open_view_transaction_log_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_transaction_log_page.current != null){
        me.view_transaction_log_page.current.set_transaction(item)
      }
    }, (1 * 500));
    
  }










  render_add_to_bag_bottomsheet(){
    if(this.state.add_to_bag_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.add_to_bag_bottomsheet} onClose={this.open_add_to_bag_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <AddToBagPage ref={this.add_to_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_item_to_bag_in_stack={this.add_bag_item_to_bag_in_stack.bind(this)} show_images={this.show_images.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_add_to_bag_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_add_to_bag_bottomsheet.bind(this)} open={this.state.add_to_bag_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AddToBagPage ref={this.add_to_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_item_to_bag_in_stack={this.add_bag_item_to_bag_in_stack.bind(this)} show_images={this.show_images.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_add_to_bag_bottomsheet(){
    if(this.state.add_to_bag_bottomsheet == true){
      //closing
      this.add_to_bag_bottomsheet = this.add_to_bag_page.current?.state;

      this.setState({add_to_bag_bottomsheet: !this.state.add_to_bag_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({add_to_bag_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({add_to_bag_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({add_to_bag_bottomsheet: !me.state.add_to_bag_bottomsheet});

          if(me.add_to_bag_bottomsheet != null){
            me.add_to_bag_page.current?.setState(me.add_to_bag_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_add_to_bag_bottomsheet(item){
    this.open_add_to_bag_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_to_bag_page.current != null){
        me.add_to_bag_page.current.set_transaction(item)
      }
    }, (1 * 500));
    
  }

  add_bag_item_to_bag_in_stack(state_obj){
    var stack = this.state.stack_items.slice() 
    var pos = -1
    var storefront_item_content_channeling = state_obj.storefront_item['ipfs'].content_channeling_setting
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1516']/* 'storefront-bag' */ && stack[i].e5 == state_obj.e5 && stack[i].content_channeling_setting == storefront_item_content_channeling){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var frequency = this.get_selected_item(state_obj.get_frequency_bag_object, 'e') == this.getLocale()['1058o']/* 'enabled' */

      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1516']/* 'storefront-bag' */, entered_indexing_tags:[this.getLocale()['1215']/* 'storefront' */, this.getLocale()['1045']/* 'bag' */, this.getLocale()['2716']/* 'cart' */], items_to_deliver:[], e5: state_obj.e5, content_channeling_setting: this.state.content_channeling, device_language_setting: this.state.device_language, device_country: this.state.device_country, selected_device_city: state_obj.selected_device_city, delivery_location: state_obj.delivery_location, frequency_enabled:frequency, delivery_frequency_time: state_obj.delivery_frequency_time}
      
      tx.items_to_deliver.push(state_obj)
      stack.push(tx)
    }else{
      var is_replica_found = false
      for(var j=0; j<stack[pos].items_to_deliver.length; j++){
        if(state_obj.id == stack[pos].items_to_deliver[j].id){
          stack[pos].items_to_deliver[j] = state_obj
          is_replica_found = true
          break;
        }
      }
      if(!is_replica_found){
        stack[pos].items_to_deliver.push(state_obj)
      }
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }










  render_fulfil_bag_bottomsheet(){
    if(this.state.fulfil_bag_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.fulfil_bag_bottomsheet} onClose={this.open_fulfil_bag_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px',  'overflow-y':'auto'}}>
                          <FulfilBagPage ref={this.fulfil_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_bag_to_stack={this.add_respond_to_bag_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_fulfil_bag_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_fulfil_bag_bottomsheet.bind(this)} open={this.state.fulfil_bag_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FulfilBagPage ref={this.fulfil_bag_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_respond_to_bag_to_stack={this.add_respond_to_bag_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_fulfil_bag_bottomsheet(){
    if(this.state.fulfil_bag_bottomsheet == true){
      //closing
      this.fulfil_bag_bottomsheet = this.fulfil_bag_page.current?.state;
  
      this.setState({fulfil_bag_bottomsheet: !this.state.fulfil_bag_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({fulfil_bag_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({fulfil_bag_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({fulfil_bag_bottomsheet: !me.state.fulfil_bag_bottomsheet});

          if(me.fulfil_bag_bottomsheet != null){
            me.fulfil_bag_page.current?.setState(me.fulfil_bag_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_fulfil_bag_bottomsheet(item){
    this.open_fulfil_bag_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.fulfil_bag_page.current != null){
        me.fulfil_bag_page.current.set_bag(item)
        me.load_my_contracts()
      }
    }, (1 * 500));
  }

  add_respond_to_bag_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










  render_view_bag_application_contract_bottomsheet(){
    if(this.state.view_bag_application_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_bag_application_contract_bottomsheet} onClose={this.open_view_bag_application_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewBagApplicationContractPage ref={this.view_bag_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_acceptance_action_to_stack={this.add_bag_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_bag_application_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_bag_application_contract_bottomsheet.bind(this)} open={this.state.view_bag_application_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewBagApplicationContractPage ref={this.view_bag_application_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_bag_acceptance_action_to_stack={this.add_bag_acceptance_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_bag_application_contract_bottomsheet(){
    if(this.state.view_bag_application_contract_bottomsheet == true){
      //closing
      this.view_bag_application_contract_bottomsheet = this.view_bag_application_contract_page.current?.state;

      this.setState({view_bag_application_contract_bottomsheet: !this.state.view_bag_application_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_bag_application_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_bag_application_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_bag_application_contract_bottomsheet: !me.state.view_bag_application_contract_bottomsheet});

          if(me.view_bag_application_contract_bottomsheet != null){
            me.view_bag_application_contract_page.current?.setState(me.view_bag_application_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_bag_application_contract_bottomsheet(item){
    this.open_view_bag_application_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_bag_application_contract_page.current != null){
        me.view_bag_application_contract_page.current.set_object(item)
        me.load_contract_item(item['e5'], item['picked_contract_id'])
      }
    }, (1 * 500));
    
  }

  add_bag_acceptance_action_to_stack(state_obj){
    var contract = state_obj.application_item['contract']
    if(contract['access_rights_enabled'] == true && (contract['my_interactable_time_value'] < Date.now()/1000 && !contract['moderators'].includes(this.state.user_account_id[contract['e5']]))){
      this.prompt_top_notification(this.getLocale()['2715']/* 'The contract owner hasnt granted you access to their contract yet.' */, 7000)
    }
    else if(contract['my_blocked_time_value'] > Date.now()/1000){
      this.prompt_top_notification(this.getLocale()['2715']/* 'Your account was blocked from entering the contract.' */, 4000)
    }
    else{
      this.show_enter_contract_bottomsheet(contract, state_obj)
      this.open_view_bag_application_contract_bottomsheet()
    }
    // var stack_clone = this.state.stack_items.slice()      
    // stack_clone.push(state_obj)
    // this.setState({stack_items: stack_clone})
    // this.set_cookies_after_stack_action(stack_clone)

    // this.show_enter_contract_bottomsheet(state_obj.application_item['contract'])
    // this.open_view_bag_application_contract_bottomsheet()
  }











  render_direct_purchase_bottomsheet(){
    if(this.state.direct_purchase_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.direct_purchase_bottomsheet} onClose={this.open_direct_purchase_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <DirectPurchasetPage ref={this.direct_purchase_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_direct_purchase_to_stack={this.add_direct_purchase_to_stack.bind(this)} show_images={this.show_images.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_direct_purchase_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_direct_purchase_bottomsheet.bind(this)} open={this.state.direct_purchase_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <DirectPurchasetPage ref={this.direct_purchase_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_direct_purchase_to_stack={this.add_direct_purchase_to_stack.bind(this)} show_images={this.show_images.bind(this)}calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_direct_purchase_bottomsheet(){
    if(this.state.direct_purchase_bottomsheet == true){
      //closing
      this.direct_purchase_bottomsheet = this.direct_purchase_page.current?.state;

      this.setState({direct_purchase_bottomsheet: !this.state.direct_purchase_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({direct_purchase_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({direct_purchase_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({direct_purchase_bottomsheet: !me.state.direct_purchase_bottomsheet});

          if(me.direct_purchase_bottomsheet != null){
            me.direct_purchase_page.current?.setState(me.direct_purchase_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_direct_purchase_bottomsheet(item){
    this.open_direct_purchase_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.direct_purchase_page.current != null){
        me.direct_purchase_page.current.set_object(item)
      }
    }, (1 * 500));

  }

  add_direct_purchase_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }







  render_clear_purchase_bottomsheet(){
    if(this.state.clear_purchase_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.clear_purchase_bottomsheet} onClose={this.open_clear_purchase_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-34, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                            <ClearPurchasePage ref={this.clear_purchase_page} app_state={this.state}  view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} generate_signature={this.generate_signature.bind(this)} confirm_signature={this.confirm_signature.bind(this)} add_clearing_purchase_action_to_stack={this.add_clearing_purchase_action_to_stack.bind(this)} start_scan={this.start_scan.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_clear_purchase_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_clear_purchase_bottomsheet.bind(this)} open={this.state.clear_purchase_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ClearPurchasePage ref={this.clear_purchase_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} generate_signature={this.generate_signature.bind(this)} confirm_signature={this.confirm_signature.bind(this)} add_clearing_purchase_action_to_stack={this.add_clearing_purchase_action_to_stack.bind(this)} start_scan={this.start_scan.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_clear_purchase_bottomsheet(){
    if(this.state.clear_purchase_bottomsheet == true){
      //closing
      this.clear_purchase_bottomsheet = this.clear_purchase_page.current?.state;

      this.setState({clear_purchase_bottomsheet: !this.state.clear_purchase_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({clear_purchase_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({clear_purchase_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({clear_purchase_bottomsheet: !me.state.clear_purchase_bottomsheet});

          if(me.clear_purchase_bottomsheet != null){
            me.clear_purchase_page.current?.setState(me.clear_purchase_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_clear_purchase_bottomsheet(item, client_type, storefront){
    this.open_clear_purchase_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.clear_purchase_page.current != null){
        me.clear_purchase_page.current.set_object(item, client_type, storefront)
      }
    }, (1 * 500));

  }


  generate_signature = async (data) => {
    if(!this.state.has_wallet_been_set){
      this.prompt_top_notification(this.getLocale()['2906']/* 'You need to set your wallet first.' */, 5000)
      return;
    }
    const web3 = new Web3(this.state.web3);
    var address = this.state.accounts[this.state.default_e5].address
    web3.eth.accounts.wallet.add(this.state.accounts[this.state.default_e5].privateKey);

    var signature = await web3.eth.sign(data.toString(), address)
    return signature
  }

  confirm_signature = async (signature, data, address) => {
    const web3 = new Web3(this.get_web3_url_from_e5(this.state.default_e5));
    try{
      var original_address = await web3.eth.accounts.recover(data.toString(), signature)
      if(original_address.toString() != address.toString()){
        return false
      }
      return true
    }catch(e){
      console.log(e)
      return false
    }
    
  }


  add_clearing_purchase_action_to_stack(state_obj){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1500']/* 'clear-purchase' */){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, e5:state_obj.order_storefront['e5'], id: makeid(8), type: this.getLocale()['1500']/* 'clear-purchase' */, entered_indexing_tags:[this.getLocale()['2717']/* 'clear' */, this.getLocale()['2718']/* 'finalize' */, this.getLocale()['2719']/* 'purchase' */], items_to_clear:[]}
      tx.items_to_clear.push(state_obj)
      stack.push(tx)
    }else{
      stack[pos].items_to_clear.push(state_obj)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }








  render_send_job_request_bottomsheet(){
    if(this.state.send_job_request_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.send_job_request_bottomsheet} onClose={this.open_send_job_request_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SendJobRequestPage ref={this.send_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_send_job_request_to_stack={this.add_send_job_request_to_stack.bind(this)} show_images={this.show_images.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_send_job_request_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_send_job_request_bottomsheet.bind(this)} open={this.state.send_job_request_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <SendJobRequestPage ref={this.send_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_send_job_request_to_stack={this.add_send_job_request_to_stack.bind(this)} show_images={this.show_images.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_send_job_request_bottomsheet(){
    if(this.state.send_job_request_bottomsheet == true){
      //closing
      this.send_job_request_bottomsheet = this.send_job_request_page.current?.state;

      this.setState({send_job_request_bottomsheet: !this.state.send_job_request_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({send_job_request_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({send_job_request_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({send_job_request_bottomsheet: !me.state.send_job_request_bottomsheet});

          if(me.send_job_request_bottomsheet != null){
            me.send_job_request_page.current?.setState(me.send_job_request_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_send_job_request_ui(item){
    this.open_send_job_request_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.send_job_request_page.current != null){
        me.send_job_request_page.current.set_object(item)
        me.load_my_contracts()
      }
    }, (1 * 500));
    

  }

  add_send_job_request_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }









  render_view_job_request_bottomsheet(){
    if(this.state.view_job_request_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_job_request_bottomsheet} onClose={this.open_view_job_request_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewJobRequestPage ref={this.view_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} add_response_action_to_stack={this.add_response_action_to_stack.bind(this)} add_job_request_message_to_stack_object={this.add_job_request_message_to_stack_object.bind(this)} load_job_request_messages={this.load_job_request_messages.bind(this)} open_view_contract_ui={this.show_view_job_request_contract_bottomsheet.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)}
                          when_e5_link_tapped={this.when_e5_link_tapped.bind(this)}
                          />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_job_request_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_job_request_bottomsheet.bind(this)} open={this.state.view_job_request_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewJobRequestPage ref={this.view_job_request_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} width={this.state.width} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} show_images={this.show_images.bind(this)} add_response_action_to_stack={this.add_response_action_to_stack.bind(this)} add_job_request_message_to_stack_object={this.add_job_request_message_to_stack_object.bind(this)} load_job_request_messages={this.load_job_request_messages.bind(this)} open_view_contract_ui={this.show_view_job_request_contract_bottomsheet.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} when_e5_link_tapped={this.when_e5_link_tapped.bind(this)}
            
            />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_job_request_bottomsheet(){
    if(this.state.view_job_request_bottomsheet == true){
      //closing
      this.view_job_request_bottomsheet = this.view_job_request_page.current?.state;

      this.setState({view_job_request_bottomsheet: !this.state.view_job_request_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_job_request_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_job_request_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_job_request_bottomsheet: !me.state.view_job_request_bottomsheet});

          if(me.view_job_request_bottomsheet != null){
            me.view_job_request_page.current?.setState(me.view_job_request_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  open_view_job_request_ui(item, object){
    this.open_view_job_request_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_job_request_page.current != null){
        me.view_job_request_page.current.set_object(item, object)
        if(item['contract'] != null){
          me.load_contract_item(object['e5'], item['contract'])
        }
        me.load_my_contracts()
      }
    }, (1 * 500));
    
  }

  add_response_action_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  add_job_request_message_to_stack_object(message){
    var stack = this.state.stack_items.slice()
    var pos = -1
    for(var i=0; i<stack.length; i++){
      if(stack[i].type == this.getLocale()['1505']/* 'job-request-messages' */ && stack[i].e5 == this.state.selected_e5){
        pos = i
        break;
      }
    }
    if(pos == -1){
      var tx = {selected: 0, id: makeid(8), type:this.getLocale()['1505']/* 'job-request-messages' */, entered_indexing_tags:[this.getLocale()['1019']/* 'send' */,this.getLocale()['1309']/* 'job' */,this.getLocale()['1366']/* 'request' */], messages_to_deliver:[], e5: message['e5']}
      tx.messages_to_deliver.push(message)
      stack.push(tx)
    }else{
      stack[pos].messages_to_deliver.push(message)
    }
    this.setState({stack_items: stack})
    this.set_cookies_after_stack_action(stack)
  }










  /* view job request */
  render_view_job_request_contract_bottomsheet(){
    if(this.state.view_job_request_contract_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_job_request_contract_bottomsheet} onClose={this.open_view_job_request_contract_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewJobRequestContractPage ref={this.view_job_request_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_request_action_to_stack={this.add_job_request_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_job_request_contract_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_job_request_contract_bottomsheet.bind(this)} open={this.state.view_job_request_contract_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewJobRequestContractPage ref={this.view_job_request_contract_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_job_request_action_to_stack={this.add_job_request_action_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_job_request_contract_bottomsheet(){
    if(this.state.view_job_request_contract_bottomsheet == true){
      //closing
      this.view_job_request_contract_bottomsheet = this.view_job_request_page.current?.state;

      this.setState({view_job_request_contract_bottomsheet: !this.state.view_job_request_contract_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_job_request_contract_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_job_request_contract_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_job_request_contract_bottomsheet: !me.state.view_job_request_contract_bottomsheet});

          if(me.view_job_request_contract_bottomsheet != null){
            me.view_job_request_page.current?.setState(me.view_job_request_contract_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_job_request_contract_bottomsheet(item, proposals){
    this.open_view_job_request_contract_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_job_request_contract_page.current != null){
        me.view_job_request_contract_page.current.set_object(item, proposals)
      }
    }, (1 * 500));
    
  }

  add_job_request_action_to_stack(state_obj){
    var contract = state_obj.contract_data
    var me = this.state.user_account_id[contract['e5']]
    if(me == null) {
      me = 1
    }
    if(contract['access_rights_enabled'] == true && (contract['my_interactable_time_value'] < Date.now()/1000 && !contract['moderators'].includes(me))){
      this.prompt_top_notification(this.getLocale()['2720']/* The contract owner hasnt granted you access to their contract yet.' */, 5000)
    }
    else if(contract['my_blocked_time_value'] > Date.now()/1000){
      this.prompt_top_notification(this.getLocale()['2721']/* 'Your account was blocked from entering the contract' */, 4000)
    }
    else if(contract['participant_times'][me] > (Date.now()/1000)){
      this.prompt_top_notification(this.getLocale()['2738aa']/* 'Youre already in the contract.' */, 4000)
    }
    else{
      this.show_enter_contract_bottomsheet(state_obj.contract_data)
      this.open_view_job_request_contract_bottomsheet()
    }
    
  }



















  render_withdraw_ether_bottomsheet(){
    if(this.state.withdraw_ether_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.withdraw_ether_bottomsheet} onClose={this.open_withdraw_ether_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <WithdrawEtherPage ref={this.withdraw_ether_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} withdraw_ether_to_address={this.withdraw_ether_to_address.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_withdraw_ether_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_withdraw_ether_bottomsheet.bind(this)} open={this.state.withdraw_ether_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <WithdrawEtherPage ref={this.withdraw_ether_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} withdraw_ether_to_address={this.withdraw_ether_to_address.bind(this)} show_dialog_bottomsheet={this.show_dialog_bottomsheet.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_withdraw_ether_bottomsheet(){
    if(this.state.withdraw_ether_bottomsheet == true){
      //closing
      this.withdraw_ether_bottomsheet = this.withdraw_ether_page.current?.state;

      this.setState({withdraw_ether_bottomsheet: !this.state.withdraw_ether_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({withdraw_ether_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({withdraw_ether_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({withdraw_ether_bottomsheet: !me.state.withdraw_ether_bottomsheet});

          if(me.withdraw_ether_bottomsheet != null){
            me.withdraw_ether_page.current?.setState(me.withdraw_ether_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_withdraw_ether_bottomsheet(item){
    this.open_withdraw_ether_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.withdraw_ether_page.current != null){
        me.withdraw_ether_page.current.set_object(item)
      }
    }, (1 * 500)); 
    
  }

  withdraw_ether_to_address = async (target_recipient_address, e5, run_expiry_duration, _run_gas_price, picked_max_priority_per_gas_amount, picked_max_fee_per_gas_amount) =>{
    this.prompt_top_notification(this.getLocale()['2722']/* 'withdrawing your ether...' */, 9000)

    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.state.addresses[e5][0]
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress); 
    const me = this
    const gasPrice = await web3.eth.getGasPrice();
    var run_gas_price = (_run_gas_price == 0 || _run_gas_price == null || _run_gas_price > 100**18) ? gasPrice : _run_gas_price
    
    var now = await contractInstance.methods.f147(2).call((error, result) => {})
    var run_expiry_time = now + run_expiry_duration

    var v5/* t_limits */ = [100000000000000, run_expiry_time];
    var encoded = contractInstance.methods.f145(target_recipient_address, v5/* t_limits */).encodeABI()


    var tx = {
        gas: 65000,
        value: 0,
        to: contractAddress,
        data: encoded,
        gasPrice: run_gas_price.toString().toLocaleString('fullwide', {useGrouping:false}),
    }

    if(this.state.e5s[e5].type == '1559'){
      tx = {
        gas: 65000,
        value: 0,
        to: contractAddress,
        data: encoded,
        maxPriorityFeePerGas: picked_max_priority_per_gas_amount.toString().toLocaleString('fullwide', {useGrouping:false}),
        maxFeePerGas: picked_max_fee_per_gas_amount.toString().toLocaleString('fullwide', {useGrouping:false})
      }
    }
    web3.eth.accounts.signTransaction(tx, me.state.accounts[e5].privateKey).then(signed => {
        web3.eth.sendSignedTransaction(signed.rawTransaction).on('receipt', (receipt) => {
          // me.get_accounts_data(me.state.account, false, this.state.web3, this.state.e5_address)
          // this.start_get_accounts_data(false)
          this.update_withdraw_balance(e5)
          this.start_get_accounts_for_specific_e5(false, e5, false)
          this.prompt_top_notification(this.getLocale()['2723']/* 'withdraw complete!' */, 4000)
        }) .on('error', (error) => {
          console.error('Transaction error:', error);
          this.prompt_top_notification(this.getLocale()['2724']/* 'Withdraw failed. Something went wrong' */, 4500)
        });
    })

  }

  update_withdraw_balance(e5){
    var clone = structuredClone(this.state.withdraw_balance)
    clone[e5] = 0
    this.setState({withdraw_balance: clone})
  }













  render_give_award_bottomsheet(){
    if(this.state.give_award_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.give_award_bottomsheet} onClose={this.open_give_award_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <GiveAwardPage ref={this.give_award_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_award_transaction_to_stack={this.add_award_transaction_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_give_award_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_give_award_bottomsheet.bind(this)} open={this.state.give_award_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <GiveAwardPage ref={this.give_award_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_award_transaction_to_stack={this.add_award_transaction_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_give_award_bottomsheet(){
    if(this.state.give_award_bottomsheet == true){
      //closing
      this.give_award_bottomsheet = this.give_award_page.current?.state;

      this.setState({give_award_bottomsheet: !this.state.give_award_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({give_award_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({give_award_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({give_award_bottomsheet: !me.state.give_award_bottomsheet});

          if(me.give_award_bottomsheet != null){
            me.give_award_page.current?.setState(me.give_award_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_give_award_bottomsheet = async (item) => {
    this.open_give_award_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.give_award_page.current != null){
        me.give_award_page.current?.set_post(item)
      }
    }, (1 * 500));
    
    const object_e5 = item['e5']
    const object_sender = item['event'].returnValues.p5

    if(this.state.selected_e5 != object_e5){
      const their_account_data = await this.get_senders_account_on_my_e5(object_sender, object_e5)
      if(their_account_data.their_account_on_my_e5 == 0){
          //they dont have an account, so well need to create one for them in the stack run
          this.give_award_page.current?.set_award_target(their_account_data.their_address)
        }else{
          this.give_award_page.current?.set_award_target(their_account_data.their_account_on_my_e5)
        }
    }else{
      await this.wait(300)
      this.give_award_page.current?.set_award_target(object_sender)
    }
  }

  add_award_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }


















  render_add_comment_bottomsheet(){
    if(this.state.add_comment_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    var h = this.state.comment_size
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.add_comment_bottomsheet} onClose={this.open_add_comment_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <AddCommentPage ref={this.add_comment_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_comment_to_respective_forum_page={this.add_comment_to_respective_forum_page.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_add_comment_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_add_comment_bottomsheet.bind(this)} open={this.state.add_comment_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AddCommentPage ref={this.add_comment_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_comment_to_respective_forum_page={this.add_comment_to_respective_forum_page.bind(this)} store_image_in_ipfs={this.store_image_in_ipfs.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_add_comment_bottomsheet(){
    if(this.state.add_comment_bottomsheet == true){
      //closing
      this.add_comment_bottomsheet = this.add_comment_page.current?.state;

      this.setState({add_comment_bottomsheet: !this.state.add_comment_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({add_comment_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({add_comment_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({add_comment_bottomsheet: !me.state.add_comment_bottomsheet});
          if(me.add_comment_bottomsheet != null){
            me.add_comment_page.current?.setState(me.add_comment_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_add_comment_bottomsheet = async (object, focused_message_id, page, contractor_object, starting_text) => {
    this.set_comment_bottomsheet_size(focused_message_id)
    this.open_add_comment_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_comment_page.current != null){
        me.add_comment_page.current.set_comment_data(object, focused_message_id, page, contractor_object, starting_text)
      }
    }, (1 * 500));
    
    if(focused_message_id != 0){
      const focused_message_sender = focused_message_id['sender'] == null ? focused_message_id['ipfs']['sender'] : focused_message_id['sender'];
      const focused_message_sender_e5 = focused_message_id['sender_e5'] == null ? (focused_message_id['ipfs'] == null ? 'E25' : focused_message_id['ipfs']['my_preferred_e5']) : focused_message_id['sender_e5']
      
      if(this.state.selected_e5 != focused_message_sender_e5){
        const their_account_data = await this.get_senders_account_on_my_e5(focused_message_sender, focused_message_sender_e5)
        if(their_account_data.their_account_on_my_e5 == 0){
          //they dont have an account, so well need to create one for them in the stack run
          this.add_comment_page.current.set_focused_message_target_account(their_account_data.their_address)
        }else{
          this.add_comment_page.current.set_focused_message_target_account(their_account_data.their_account_on_my_e5)
        }
      }else{
        await this.wait(300)
        this.add_comment_page.current.set_focused_message_target_account(focused_message_sender)
      }
    }
  }

  set_comment_bottomsheet_size(focused_message_id){
    var size = this.getScreenSize();
    if(focused_message_id != 0){
      if(size == 's'){
        this.setState({comment_size: this.state.height-50})
      }else{
         if(this.state.height < 890){
          this.setState({comment_size: this.state.height})
        }else{
          this.setState({comment_size: 890})
        }
      }
    }else{
      this.setState({comment_size: 670})
    }
  }

  add_comment_to_respective_forum_page(tx, page){
    if(page == 'channel'){
      this.add_channel_message_to_stack_object(tx)      
    }
    else if(page == 'job'){
      this.add_job_message_to_stack_object(tx)
    }
    else if(page == 'mail'){
      this.add_mail_to_stack_object(tx)
    }
    else if(page == 'post'){
      this.add_post_reply_to_stack(tx)
    }
    else if(page == 'proposal'){
      this.add_proposal_message_to_stack_object(tx)
    }
    else if(page == 'storefront'){
      this.add_storefront_message_to_stack_object(tx)
    }
    else if(page == 'bag'){
      this.add_bag_message_to_stack_object(tx)
    }
    else if(page == 'request'){
      this.add_job_request_message_to_stack_object(tx)
    }
    else if(page == 'audio'){
      this.add_audio_reply_to_stack(tx)
    }
    else if(page == 'video'){
      this.add_video_reply_to_stack(tx)
    }
    else if(page == 'nitro'){
      this.add_nitro_reply_to_stack(tx)
    }
    else if(page == 'video-comment'){
      this.add_video_message_to_stack_object(tx)
    }
    this.open_add_comment_bottomsheet()
  }

  get_senders_account_on_my_e5 = async (their_account, their_e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(their_e5));
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_contract_from_e5(their_e5)
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    const their_address = await contractInstance.methods.f289(their_account).call((error, result) => {});
    
    const my_e5 = this.state.selected_e5
    const my_web3 = new Web3(this.get_web3_url_from_e5(my_e5));
    const my_contractArtifact = require('./contract_abis/E5.json');
    const my_contractAddress = this.get_contract_from_e5(my_e5)
    const my_contractInstance = new my_web3.eth.Contract(my_contractArtifact.abi, my_contractAddress);
    const their_account_on_my_e5 = await my_contractInstance.methods.f167([],[their_address], 2).call((error, result) => {});

    return {their_account_on_my_e5: their_account_on_my_e5[0], their_address: their_address}
  }











  render_depthmint_bottomsheet(){
    if(this.state.depthmint_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.depthmint_bottomsheet} onClose={this.open_depthmint_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <DepthMintPage ref={this.depthmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_depthmint_to_stack={this.add_depthmint_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_depthmint_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_depthmint_bottomsheet.bind(this)} open={this.state.depthmint_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <DepthMintPage ref={this.depthmint_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_depthmint_to_stack={this.add_depthmint_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_depthmint_bottomsheet(){
    if(this.state.depthmint_bottomsheet == true){
      //closing
      this.depthmint_bottomsheet = this.depthmint_page.current?.state;

      this.setState({depthmint_bottomsheet: !this.state.depthmint_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({depthmint_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({depthmint_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({depthmint_bottomsheet: !me.state.depthmint_bottomsheet});

          if(me.depthmint_bottomsheet != null){
            me.depthmint_page.current?.setState(me.depthmint_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_depthmint_bottomsheet(token_item){
    this.open_depthmint_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.depthmint_page.current != null){
        me.depthmint_page.current.set_token(token_item)
      }
    }, (1 * 500));
    

  }

  add_depthmint_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }











  render_stage_royalties_bottomsheet(){
    if(this.state.stage_royalties_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.stage_royalties_bottomsheet} onClose={this.open_stage_royalties_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <StageRoyaltiesPage ref={this.stage_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_stage_royalties_to_stack={this.add_stage_royalties_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_stage_royalties_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_stage_royalties_bottomsheet.bind(this)} open={this.state.stage_royalties_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <StageRoyaltiesPage ref={this.stage_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_stage_royalties_to_stack={this.add_stage_royalties_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_stage_royalties_bottomsheet(){
    if(this.state.stage_royalties_bottomsheet == true){
      //closing
      this.stage_royalties_bottomsheet = this.stage_royalties_page.current?.state;

      this.setState({stage_royalties_bottomsheet: !this.state.stage_royalties_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({stage_royalties_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({stage_royalties_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({stage_royalties_bottomsheet: !me.state.stage_royalties_bottomsheet});

          if(me.stage_royalties_bottomsheet != null){
            me.stage_royalties_page.current?.setState(me.stage_royalties_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_stage_royalties_bottomsheet(token_item){
    this.load_exchanges_royalty_information(token_item)
    this.open_stage_royalties_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.stage_royalties_page.current != null){
        me.stage_royalties_page.current.set_token(token_item)
      }
    }, (1 * 500));
    

  }

  add_stage_royalties_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }











  render_view_staged_royalties_bottomsheet(){
    if(this.state.view_staged_royalties_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_staged_royalties_bottomsheet} onClose={this.open_view_staged_royalties_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewStagedRoyaltyPage ref={this.view_staged_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_royalty_batch_payment_to_stack={this.add_royalty_batch_payment_to_stack.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_staged_royalties_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_view_staged_royalties_bottomsheet.bind(this)} open={this.state.view_staged_royalties_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewStagedRoyaltyPage ref={this.view_staged_royalties_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_royalty_batch_payment_to_stack={this.add_royalty_batch_payment_to_stack.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_staged_royalties_bottomsheet(){
    if(this.state.view_staged_royalties_bottomsheet == true){
      //closing
      this.view_staged_royalties_bottomsheet = this.view_staged_royalties_page.current?.state;

      this.setState({view_staged_royalties_bottomsheet: !this.state.view_staged_royalties_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_staged_royalties_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_staged_royalties_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_staged_royalties_bottomsheet: !me.state.view_staged_royalties_bottomsheet});

          if(me.view_staged_royalties_bottomsheet != null){
            me.view_staged_royalties_page.current?.setState(me.view_staged_royalties_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_staged_royalties_bottomsheet(staging_data, token_item){
    this.open_view_staged_royalties_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_staged_royalties_page.current != null){
        me.view_staged_royalties_page.current.set_data(staging_data, token_item)
      }
    }, (1 * 500));
    

  }

  add_royalty_batch_payment_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  // update_stack_songs_and_albums(state_obj){
  //   var stack_songs_and_albums_clone = structuredClone(this.state.stack_songs_and_albums)
  //   if(stack_songs_and_albums_clone['albums'] == null) stack_songs_and_albums_clone['albums'] = []
  //   if(stack_songs_and_albums_clone['songs'] == null) stack_songs_and_albums_clone['songs'] = []
    
  //   if(!stack_songs_and_albums_clone['albums'].includes(state_obj.album['id'])){
  //     stack_songs_and_albums_clone['albums'].push(state_obj.album['id'])
  //   }

  //   var selected_tracks = state_obj.selected_tracks
  //   selected_tracks.forEach(track => {
  //     if(!stack_songs_and_albums_clone['songs'].includes(track['song_id'])){
  //       stack_songs_and_albums_clone['songs'].push(track['song_id'])
  //     }
  //   });

  //   this.setState({stack_songs_and_albums: stack_songs_and_albums_clone})
  // }















  render_searched_account_bottomsheet(){
    if(this.state.searched_account_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.searched_account_bottomsheet} onClose={this.open_searched_account_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <SearchedAccountPage ref={this.searched_account_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_searched_account_balance_search={this.perform_searched_account_balance_search.bind(this)} when_searched_account_reclicked={this.when_searched_account_reclicked.bind(this)} when_account_in_data_clicked={this.when_account_in_data_clicked.bind(this)}
                          />
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_searched_account_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_searched_account_bottomsheet.bind(this)} open={this.state.searched_account_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <SearchedAccountPage ref={this.searched_account_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_searched_account_balance_search={this.perform_searched_account_balance_search.bind(this)} when_searched_account_reclicked={this.when_searched_account_reclicked.bind(this)} when_account_in_data_clicked={this.when_account_in_data_clicked.bind(this)}
            
            />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_searched_account_bottomsheet(){
    if(this.state.searched_account_bottomsheet == true){
      //closing
      this.searched_account_bottomsheet = this.searched_account_page.current?.state;
      
      this.setState({searched_account_bottomsheet: !this.state.searched_account_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({searched_account_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({searched_account_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({searched_account_bottomsheet: !me.state.searched_account_bottomsheet});

          if(me.searched_account_bottomsheet != null){
            me.searched_account_page.current?.setState(me.searched_account_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  when_searched_account_clicked = async (item, searched_id) => {
    this.open_searched_account_bottomsheet()

    var data = this.state.searched_accounts_data[item['id']] == null ? [] : this.state.searched_accounts_data[item['id']]
    var existing = false
    var object = data.find(e => (e['address'] === item['address'] && e['ether_balance'] != null))
    if(object != null){
      var me = this;
      existing = true
      setTimeout(function() {
        if(me.searched_account_page.current != null){
          me.searched_account_page.current?.set_searched_item(object, searched_id)
        }
      }, (1 * 500));
      if(object['search_time'] > (Date.now() - (1000*60*15))){
        return;
      }
    }
    console.log('when_searched_account_clicked', item)
    await this.get_searched_account_data(item['id'], item['typed_search'], item['e5'])
    await this.wait(300)
    var data = this.state.searched_accounts_data[item['id']] == null ? [] : this.state.searched_accounts_data[item['id']]
    var object = data.find(e => e['address'] === item['address'])

    var me = this;
    setTimeout(function() {
      if(me.searched_account_page.current != null){
        if(existing == false){
          me.searched_account_page.current?.set_searched_item(object, searched_id)
        }else{
          if(me.searched_account_page.current.state.searched_account['id'] == item['id'] && me.searched_account_page.current.state.searched_account['e5'] == item['e5']){
            me.searched_account_page.current?.set_searched_item(object, searched_id)
          }
        }
      }
    }, (1 * 500));
  }

  when_searched_account_reclicked = async (item, searched_id) => {
    var data = this.state.searched_accounts_data[item['id']] == null ? [] : this.state.searched_accounts_data[item['id']]
    var object = data.find(e => (e['address'] === item['address'] && e['ether_balance'] != null))
    var existing = false
    if(object != null){
      existing = true
      var me = this;
      setTimeout(function() {
        if(me.searched_account_page.current != null){
          me.searched_account_page.current?.set_searched_item(object, searched_id)
        }
      }, (1 * 500));
      if(object['search_time'] > (Date.now() - (1000*60*15))){
        return;
      }
    }
    await this.get_searched_account_data(item['id'], item['typed_search'], item['e5'])
    await this.wait(300)
    var data = this.state.searched_accounts_data[item['id']] == null ? [] : this.state.searched_accounts_data[item['id']]
    var object = data.find(e => e['address'] === item['address'])

    var me = this;
    setTimeout(function() {
      if(existing == false){
        me.searched_account_page.current?.set_searched_item(object, searched_id)
      }else{
        if(me.searched_account_page.current.state.searched_account['id'] == item['id'] && me.searched_account_page.current.state.searched_account['e5'] == item['e5']){
          me.searched_account_page.current?.set_searched_item(object, searched_id)
        }
      }
    }, (1 * 500));
  }

  when_account_in_data_clicked = async (account, e5, name) => {
    this.prompt_top_notification(this.getLocale()['2738ah']/* 'Searching for $...' */.replace('$', name), 1500)
    var data = this.state.searched_accounts_data[account] == null ? [] : this.state.searched_accounts_data[account]
    var object = data.find(e => (e['id'] == account && e['e5'] == e5 && e['ether_balance'] != null))
    var existing = false
    if(object != null){
      existing = true
      var me = this;
      setTimeout(function() {
        if(me.searched_account_page.current != null){
          me.searched_account_page.current?.set_searched_item(object, account)
        }
      }, (1 * 500));
      if(object['search_time'] > (Date.now() - (1000*60*15))){
        return;
      }
    }

    await this.get_searched_account_data(account, account, e5)
    await this.wait(300)
    var data = this.state.searched_accounts_data[account] == null ? [] : this.state.searched_accounts_data[account]
    var object = data.find(e => (e['id'] == account && e['e5'] == e5))

    var me = this;
    setTimeout(function() {
      if(existing == false){
        me.searched_account_page.current?.set_searched_item(object, account)
      }else{
        if(me.searched_account_page.current.state.searched_account['id'] == account && me.searched_account_page.current.state.searched_account['e5'] == e5){
          me.searched_account_page.current?.set_searched_item(object, account)
        }
      }
    }, (1 * 500));
  }

  perform_searched_account_balance_search = async (exchange_id, id, e5) => {
    var balance = await this.get_balance_in_exchange(exchange_id, id, e5, this.state.addresses[e5])
    var clone = structuredClone(this.state.searched_account_exchange_balances);
    clone[exchange_id+id+e5] = balance
    this.setState({searched_account_exchange_balances: clone})
  }









  render_rpc_settings_bottomsheet(){
    if(this.state.rpc_settings_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.rpc_settings_bottomsheet} onClose={this.open_rpc_settings_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <RPCSettingsPage ref={this.rpc_settings_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_rpc_url={this.add_rpc_url.bind(this)} when_rpc_tapped={this.when_rpc_tapped.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_rpc_settings_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_rpc_settings_bottomsheet.bind(this)} open={this.state.rpc_settings_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-60, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <RPCSettingsPage ref={this.rpc_settings_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_rpc_url={this.add_rpc_url.bind(this)} when_rpc_tapped={this.when_rpc_tapped.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_rpc_settings_bottomsheet(){
    if(this.state.rpc_settings_bottomsheet == true){
      //closing
      this.rpc_settings_bottomsheet = this.rpc_settings_page.current?.state;

      this.setState({rpc_settings_bottomsheet: !this.state.rpc_settings_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({rpc_settings_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({rpc_settings_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({rpc_settings_bottomsheet: !me.state.rpc_settings_bottomsheet});

          if(me.rpc_settings_bottomsheet != null){
            me.rpc_settings_page.current?.setState(me.rpc_settings_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_rpc_settings_bottomsheet(ether){
    this.open_rpc_settings_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.rpc_settings_page.current != null){
        me.rpc_settings_page.current.set_ether(ether)
      }
    }, (1 * 500));
    

  }

  add_rpc_url(url, ether){
    var clone = structuredClone(this.state.e5s)
    clone[ether['e5']].web3.push(url)

    var added_providers_clone = this.state.added_providers.slice()
    added_providers_clone.push([ether['e5'], url])
    this.setState({e5s: clone, added_providers: added_providers_clone})
    
    var me = this;
    setTimeout(function() {
        me.set_cookies()
    }, (1 * 1000));
  }

  when_rpc_tapped(url, index, ether){
    var clone = structuredClone(this.state.e5s)
    clone[ether['e5']].url = index
    this.setState({e5s: clone})

    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.start_get_accounts_for_specific_e5(false, ether['e5'], false)
    }, (1 * 1000));
  }

  load_rpc_times = async (e5) => {
    var items = this.state.e5s[e5].web3
    for(var i=0; i<items.length; i++){
      var url = items[i]
      const web3 = new Web3(url);
      var is_conn = await web3.eth.net.isListening()
      if(is_conn){
        var now = Date.now()
        await web3.eth.getBlockNumber()
        var time = Date.now() - now;
        var clone = structuredClone(this.state.rpc_times)
        clone[url] = ''+time+' '+this.getLocale()['2725']/* milliseconds */
        this.setState({rpc_times: clone})
      }else{
        var clone = structuredClone(this.state.rpc_times)
        clone[url] = this.getLocale()['2726']/* 'offline' */
        this.setState({rpc_times: clone})
      }
    }

  }













  render_confirm_run_bottomsheet(){
    if(this.state.confirm_run_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.confirm_run_bottomsheet} onClose={this.open_confirm_run_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ConfirmRunPage ref={this.confirm_run_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} start_run={this.start_run.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_confirm_run_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_confirm_run_bottomsheet.bind(this)} open={this.state.confirm_run_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ConfirmRunPage ref={this.confirm_run_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} start_run={this.start_run.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_confirm_run_bottomsheet(){
    if(this.state.confirm_run_bottomsheet == true){
      //closing
      this.confirm_run_bottomsheet = this.confirm_run_page.current?.state;

      this.setState({confirm_run_bottomsheet: !this.state.confirm_run_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({confirm_run_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({confirm_run_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({confirm_run_bottomsheet: !me.state.confirm_run_bottomsheet});

          if(me.confirm_run_bottomsheet != null){
            me.confirm_run_page.current?.setState(me.confirm_run_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_confirm_run_bottomsheet(data){
    this.open_confirm_run_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.confirm_run_page.current != null){
        me.confirm_run_page.current.set_data(data)
      }
    }, (1 * 1000));
    

  }

  start_run(){
    this.open_confirm_run_bottomsheet()
    if(this.stack_page.current != null){
      this.stack_page.current?.run_transactions(false, false)
    }
  }










  render_successful_send_bottomsheet(){
    if(this.state.successful_send_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    var h = 600
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.successful_send_bottomsheet} onClose={this.open_successful_send_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
                        'overflow-y':'auto'}}>
                          <SuccessfulSend ref={this.successful_send_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_successful_send_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_successful_send_bottomsheet.bind(this)} open={this.state.successful_send_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <SuccessfulSend ref={this.successful_send_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_successful_send_bottomsheet(){
    if(this.state.successful_send_bottomsheet == true){
      //closing
      this.successful_send_bottomsheet = this.successful_send_page.current?.state;

      this.setState({successful_send_bottomsheet: !this.state.successful_send_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({successful_send_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({successful_send_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({successful_send_bottomsheet: !me.state.successful_send_bottomsheet});

          if(me.successful_send_bottomsheet != null){
            me.successful_send_page.current?.setState(me.successful_send_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_successful_send_bottomsheet(data){
    this.open_successful_send_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.successful_send_page.current != null){
        me.successful_send_page.current.set_data(data)
      }
    }, (1 * 500));
  }












  render_view_number_bottomsheet(){
    if(this.state.view_number_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    var h = 300
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_number_bottomsheet} onClose={this.open_view_number_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
                          <ViewNumber ref={this.view_number_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} write_to_local_clipboard={this.write_to_local_clipboard.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_number_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_view_number_bottomsheet.bind(this)} open={this.state.view_number_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: h, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <ViewNumber ref={this.view_number_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} write_to_local_clipboard={this.write_to_local_clipboard.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_number_bottomsheet(){
    if(this.state.view_number_bottomsheet == true){
      //closing
      this.view_number_bottomsheet = this.view_number_page.current?.state;

      this.setState({view_number_bottomsheet: !this.state.view_number_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_number_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_number_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_number_bottomsheet: !me.state.view_number_bottomsheet});

          if(me.view_number_bottomsheet != null){
            me.view_number_page.current?.setState(me.view_number_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  view_number(number){
    this.add_number_to_number_board(number)
    this.open_view_number_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_number_page.current != null){
        me.view_number_page.current.set_data(number)
      }
    }, (1 * 500));
  }

  add_number_to_number_board(number){
    var clone = this.state.number_board.slice()
    if(!this.number_in_board(number)){
      clone.push(number)
    }
    this.setState({number_board: clone})
  }

  number_in_board(number){
    var in_board = false;
    this.state.number_board.forEach(num => {
      console.log('comparing: ',num, ' to: ', number)
      if(num['relativepower'] == number['relativepower']){
        return true;
      }
    });
    return in_board
  }

  write_to_local_clipboard(number){
    this.setState({clip_number:number})
  }














  render_scan_code_bottomsheet(){
    if(this.state.scan_code_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_scan_code_bottomsheet.bind(this)} open={this.state.scan_code_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>  
            <ScanQrPage ref={this.scan_code_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} finish_scan={this.finish_scan.bind(this)}/>
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_scan_code_bottomsheet(){
    if(this.state.scan_code_bottomsheet == true){
      //closing
      this.scan_code_bottomsheet = this.scan_code_page.current?.state;

      this.setState({scan_code_bottomsheet: !this.state.scan_code_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({scan_code_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({scan_code_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({scan_code_bottomsheet: !me.state.scan_code_bottomsheet});

          if(me.scan_code_bottomsheet != null){
            me.scan_code_page.current?.setState(me.scan_code_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_scan_code_bottomsheet(option){
    this.open_scan_code_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.scan_code_page.current != null){
        me.scan_code_page.current.set_page(option)
      }
    }, (1 * 500));
    
  }

  start_scan(page){
    this.show_scan_code_bottomsheet(page)
  }

  finish_scan(data, page){
    this.open_scan_code_bottomsheet()
    if(page == 'clear_purchase_page'){
      if(this.clear_purchase_page.current != null){
        this.clear_purchase_page.current.set_scan_data(data)
      }
    }
    else if(page == 'send_receive_ether_page'){
      if(this.send_receive_ether_page.current != null){
        this.send_receive_ether_page.current.set_scan_data(data)
      }
    }
  }











  render_dialog_bottomsheet(){
    if(this.state.dialog_bottomsheet2 != true) return;
    
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.dialog_bottomsheet} onClose={this.open_dialog_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_dialog_element()}
                    </Sheet.Content>
                    {/* <ToastContainer limit={3} containerId="id2"/> */}
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_dialog_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_dialog_bottomsheet.bind(this)} open={this.state.dialog_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_dialog_element()}
      </SwipeableBottomSheet>
    )
  }

  render_dialog_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.dialog_size, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <DialogPage ref={this.dialog_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} clear_stack={this.clear_stack.bind(this)} open_delete_action={this.open_delete_action.bind(this)} when_withdraw_ether_confirmation_received={this.when_withdraw_ether_confirmation_received.bind(this)} send_ether_to_target_confirmation={this.send_ether_to_target_confirmation.bind(this)} send_coin_to_target={this.send_coin_to_target.bind(this)} play_next_clicked={this.play_next_clicked.bind(this)} play_last_clicked={this.play_last_clicked.bind(this)} add_to_playlist={this.add_to_playlist.bind(this)} when_remove_from_playlist={this.when_remove_from_playlist.bind(this)} delete_playlist={this.delete_playlist.bind(this)} add_song_to_cache={this.add_song_to_cache.bind(this)} upload_file_to_arweave_confirmed={this.upload_file_to_arweave_confirmed.bind(this)} delete_file={this.delete_file.bind(this)} open_clear_purchase={this.show_clear_purchase_bottomsheet.bind(this)} open_dialog_bottomsheet={this.open_dialog_bottomsheet.bind(this)} when_notification_object_clicked={this.when_notification_object_clicked.bind(this)} get_my_entire_public_key={this.get_my_entire_public_key.bind(this)} when_link_object_clicked={this.when_link_object_clicked.bind(this)} show_post_item_preview_with_subscription={this.show_post_item_preview_with_subscription.bind(this)} when_block_contact_selected={this.when_block_contact_selected.bind(this)} when_add_to_contact_selected={this.when_add_to_contact_selected.bind(this)} when_view_account_details_selected={this.when_view_account_details_selected.bind(this)} add_bill_payments_to_stack={this.add_bill_payments_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} when_file_type_to_select_is_selected={this.when_file_type_to_select_is_selected.bind(this)} verify_file={this.verify_file.bind(this)} when_scroll_to_top_section={this.when_scroll_to_top_section.bind(this)} when_reload_section={this.when_reload_section.bind(this)} add_creator_payouts_to_stack={this.add_creator_payouts_to_stack.bind(this)} upload_file_to_nitro_confirmed={this.upload_file_to_nitro_confirmed.bind(this)} add_nitro_renewal_transaction_to_stack={this.add_nitro_renewal_transaction_to_stack.bind(this)} add_buy_album_transaction_to_stack_from_dialog_page={this.add_buy_album_transaction_to_stack_from_dialog_page.bind(this)} 
        delete_nitro_file={this.delete_nitro_file.bind(this)}
        
        />
      </div>
    )
  }

  open_dialog_bottomsheet(sheet_size){
    if(sheet_size){
      this.setState({dialog_size: sheet_size})
    }
    if(this.state.dialog_bottomsheet == true){
      //closing
      this.dialog_bottomsheet = this.dialog_page.current?.state;

      this.setState({dialog_bottomsheet: !this.state.dialog_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({dialog_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({dialog_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({dialog_bottomsheet: !me.state.dialog_bottomsheet});
          if(me.dialog_bottomsheet != null){
            me.dialog_page.current?.setState(me.dialog_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_dialog_bottomsheet(data, id){
    var obj = {
      'invalid_ether_amount_dialog_box':400, 
      'confirm_clear_stack_dialog':200, 
      'confirm_send_ether_dialog': 450, 
      'confirm_delete_dialog_box':200, 
      'confirm_withdraw_ether':430, 
      'confirm_send_coin_dialog':600, 
      'song_options':700, 
      'confirm_upload_file_to_arweave':700, 
      'view_uploaded_file':400, 
      'view_item_purchase':550, 
      'view_incoming_receipts':250, 
      'view_incoming_transactions':300, 
      'view_e5_link':300, 
      'account_options':600,
      'confirm_pay_bill':350,
      'invalid_stack_size_dialog_box':350,
      'file_type_picker':550,
      'home_page_view_options': 300,
      'view_json_example':550,
      'poll_results':600,
      'channel_payout_results':600,
      'confirm_upload_nitro_files':600,
      'renew_nitro_uploads':600,
    };
    var size = obj[id]
    if(id == 'song_options'){
      if(data['from'] == 'audio_details_section') size = 550
      if(data['from'] == 'audio_details_section3') size = 350
    }
    if(this.state.dialog_bottomsheet == false){
      this.open_dialog_bottomsheet(size);
    }else{
      this.setState({dialog_size: size})
    }
    var me = this;
    setTimeout(function() {
      if(me.dialog_page.current != null){
        me.dialog_page.current.set_data(data, id)
      }
    }, (1 * 500));
  }

  clear_stack(){
    this.open_dialog_bottomsheet()
    this.clear_transaction_stack()
  }

  open_delete_action(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.view_transaction_page.current != null){
      me.view_transaction_page.current.open_delete_action()
    }
  }

  when_withdraw_ether_confirmation_received(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.withdraw_ether_page.current != null){
      me.withdraw_ether_page.current?.when_withdraw_ether_confirmation_received()
    }
  }

  send_ether_to_target_confirmation(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.send_receive_ether_page.current != null){
      me.send_receive_ether_page.current?.when_send_ether_confirmation_received()
    }
  }

  send_coin_to_target(){
    this.open_dialog_bottomsheet()
    var me = this;
    if(me.send_receive_coin_page.current != null){
      me.send_receive_coin_page.current.when_send_coin_confirmation_received()
    }
  }

  play_next_clicked(song){
    this.open_dialog_bottomsheet()
    if(this.audio_pip_page.current != null){
      this.audio_pip_page.current?.add_song_to_queue_as_next(song)
      this.full_audio_page.current?.add_song_to_queue_as_next(song)
      this.prompt_top_notification(this.getLocale()['3002']/* Song will be played next. */, 1000)
    }else{
      this.prompt_top_notification(this.getLocale()['3005']/* You need to be playing something first. */, 4000)
    }
  }

  play_last_clicked(song){
    this.open_dialog_bottomsheet()
    if(this.audio_pip_page.current != null){
      this.audio_pip_page.current?.add_song_to_queue_as_last(song)
      this.full_audio_page.current?.add_song_to_queue_as_last(song)
      this.prompt_top_notification(this.getLocale()['3003']/* Song will be played last. */, 1000)
    }else{
      this.prompt_top_notification(this.getLocale()['3005']/* You need to be playing something first. */, 4000)
    }
  }

  when_remove_from_queue(song){
    this.open_dialog_bottomsheet()
    if(this.audio_pip_page.current != null){
      if(this.audio_pip_page.current?.state.songs.length > 1){
        this.audio_pip_page.current?.remove_song_from_queue(song)
        this.full_audio_page.current?.remove_song_from_queue(song)
        this.prompt_top_notification(this.getLocale()['3004']/* Removed song from queue. */, 1000)
      }else{
        this.prompt_top_notification(this.getLocale()['3006']/* You cant remove that song. */, 4000)
      }
    }else{
      this.prompt_top_notification(this.getLocale()['3005']/* You need to be playing something first. */, 4000)
    }
  }

  add_to_playlist(song){
    this.open_dialog_bottomsheet()
    this.show_add_to_playlist_bottomsheet(song)
  }

  when_remove_from_playlist(song, playlist){
    var me = this;
    setTimeout(function() {
      me.open_dialog_bottomsheet()
    }, (1 * 500));
    var playlists_clone = this.state.my_playlists.slice()
    var pos = -1
    for(var i=0; i<playlists_clone.length; i++){
      if(playlists_clone[i]['id'] == playlist['id']){
        pos = i
        break;
      }
    }
    if(pos != -1){
      var pos2 = -1
      for(var i=0; i<playlists_clone[pos]['songs'].length; i++){
        if(playlists_clone[pos]['songs'][i]['song_id'] == song['song_id']){
          pos2 = i
          break
        }
      }
      if(pos2 != -1){
        playlists_clone[pos]['songs'].splice(pos2, 1)
        this.setState({my_playlists: playlists_clone, should_update_playlists_in_E5: true})
        var me = this;
        setTimeout(function() {
          me.set_cookies_after_stack_action(me.state.stack_items)
        }, (1 * 500));
        this.prompt_top_notification(this.getLocale()['3006g']/* Track removed from your playlist. */, 1200)
      }
    }
  }

  delete_playlist(playlist){
    var me = this;
    setTimeout(function() {
      me.open_dialog_bottomsheet()
    }, (1 * 500));
    var playlists_clone = this.state.my_playlists.slice()
    var pos = -1
    for(var i=0; i<playlists_clone.length; i++){
      if(playlists_clone[i]['id'] == playlist['id']){
        pos = i
        break;
      }
    }
    if(pos != -1){
      playlists_clone.splice(pos, 1)
      this.setState({my_playlists: playlists_clone, should_update_playlists_in_E5: true})
      var me = this;
      setTimeout(function() {
        me.set_cookies_after_stack_action(me.state.stack_items)
      }, (1 * 500));
      this.prompt_top_notification(this.getLocale()['3006j']/* Playlist Deleted. */, 1200)
    }
  }

  update_order_of_songs_in_playlist(playlist, reorderedItems){
    var playlists_clone = this.state.my_playlists.slice()
    var pos = -1
    for(var i=0; i<playlists_clone.length; i++){
      if(playlists_clone[i]['id'] == playlist['id']){
        pos = i
        break;
      }
    }
    if(pos != -1){
      playlists_clone[pos]['songs'] = reorderedItems
      this.setState({my_playlists: playlists_clone, should_update_playlists_in_E5: true})

      var me = this;
      setTimeout(function() {
        me.set_cookies_after_stack_action(me.state.stack_items)
      }, (1 * 500));
      
    }
  }

  add_song_to_cache = async (song) => {
    this.prompt_top_notification(this.getLocale()['3006m']/* The track will be cached in a few moments. */, 5000)
    var audio_file = song['track']
    await this.fetch_uploaded_data_from_ipfs([audio_file], false)
    var clone = this.state.cached_tracks.slice()
    clone.push(audio_file)

    this.setState({cached_tracks: clone, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  download_playlist = async (songs) => {
    this.prompt_top_notification(this.getLocale()['a2527z']/* Downloading... */, 5000)
    var ids = []
    var clone = this.state.cached_tracks.slice()
    songs.forEach(song => {
      var audio_file = song['track']
      ids.push(audio_file)
      if(!clone.contains(audio_file)){
        clone.push(audio_file)
      }
    });
    await this.fetch_uploaded_data_from_ipfs(ids, false)
    
    this.setState({cached_tracks: clone, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.prompt_top_notification(me.getLocale()['a2527ba']/* Done. */, 1300)
    }, (1 * 1000));
  }

  upload_file_to_arweave_confirmed(data){
    if(data['balance'] < data['reward']){
      this.prompt_top_notification(this.getLocale()['3055l']/* 'You do not have enough Arweave to pay for the upload.' */, 14000)
      return
    }
    this.open_dialog_bottomsheet()
    this.upload_file_to_arweave(data['data'], )
  }

  delete_file(ecid){
    this.open_dialog_bottomsheet()
    var cid_clone = this.state.uploaded_data_cids.slice()
    var deleted_files_clone = this.state.deleted_files.slice()
    var index = cid_clone.indexOf(ecid['full'])
    if(index != -1) cid_clone.splice(index, 1);
    deleted_files_clone.push(ecid['full'])
    this.setState({ uploaded_data_cids: cid_clone, deleted_files: deleted_files_clone, update_data_in_E5: true})
    this.prompt_top_notification(this.getLocale()['3055u']/* File forgotten. Run a transaction on E5 to make it permanent. */, 7000)
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  when_notification_object_clicked(index, object, data, post_nsfw){
    var type = data['type']
    if(type == 'storefront'){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1215']/* 'storefront' */})
      this.homepage.current?.when_storefront_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'bag'){
      var items_to_deliver = object['ipfs']['bag_orders']
      var storefronts_to_load = []
      items_to_deliver.forEach(item => {
        var storefront_id = item['storefront_item_id']
        if(!storefronts_to_load.includes(storefront_id)) storefronts_to_load.push(storefront_id);
      });
      this.load_storefront_data(storefronts_to_load)

      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1216']/* 'bags' */})
      this.homepage.current?.when_bag_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'contract'){
      if(object['hidden'] == true){
        this.props.notify(this.getLocale()['2509d']/* 'That object is not available for you to access.' */, 9000)
        return;
      }
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1197']/* 'contracts' */})
      this.homepage.current?.when_contract_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'contractor'){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1198']/* 'contractors' */})
      this.homepage.current?.when_contractor_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'job'){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1196']/* 'jobs' */})
      this.homepage.current?.when_job_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'message'){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1201']/* 'mail' */})
      this.homepage.current?.when_mail_item_clicked(index, object['id'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'proposal'){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1199']/* 'proposals' */})
      this.homepage.current?.when_proposal_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'bill'){
      this.homepage.current?.setState({detail_page: 'w', detail_selected_tag: this.getLocale()['1264aj']/* 'bills' */})
      this.homepage.current?.when_bill_item_clicked(object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(type == 'comment'){
      const id_types = data['id_types']
      const id_type = id_types[object['id']]

      if(id_type == 17/* 17(job object) */){
        this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1196']/* 'jobs' */})
        this.homepage.current?.when_job_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 18/* 18(post object) */){
        this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1213']/* 'posts' */})
        this.homepage.current?.when_post_item_clicked(index, object['id'], object['e5'], post_nsfw, object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 19/* 19(audio_object) */){
        this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1264k']/* 'audioport' */})
        this.homepage.current?.when_audio_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 20/* 20(video_object) */){
        this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1264p']/* 'videoport' */})
        this.homepage.current?.when_video_item_clicked(index, object['id'], object['e5'], post_nsfw, object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 21/* 21(nitro_object) */){
        this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1264s']/* 'nitro' */})
        this.homepage.current?.when_nitro_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 25/* 25(storefront_bag_object) */){
        var items_to_deliver = object['ipfs']['bag_orders']
        var storefronts_to_load = []
        items_to_deliver.forEach(item => {
          var storefront_id = item['storefront_item_id']
          if(!storefronts_to_load.includes(storefront_id)) storefronts_to_load.push(storefront_id);
        });
        this.load_storefront_data(storefronts_to_load)

        this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1216']/* 'bags' */})
        this.homepage.current?.when_bag_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 27/* 27(storefront-item) */){
        this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1215']/* 'storefront' */})
        this.homepage.current?.when_storefront_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 32/* 32(consensus_request) */){
        this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1199']/* 'proposals' */})
        this.homepage.current?.when_proposal_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
      else if(id_type == 36/* 36(type_channel_target) */){
        this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1214']/* 'channels' */})
        this.homepage.current?.when_channel_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
    }
    this.open_dialog_bottomsheet()
    if(this.state.view_notification_log_bottomsheet == true) this.open_view_notification_log_bottomsheet();
  }

  when_link_object_clicked(object, object_type, post_nsfw){
    var index = 0
    if(object_type == 17/* jobs */){
        this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1196']/* 'jobs' */})
        this.homepage.current?.when_job_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 30/* contracts */){
      if(object['hidden'] == true){
        this.props.notify(this.getLocale()['2509d']/* 'That object is not available for you to access.' */, 9000)
        return;
      }
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1197']/* 'contracts' */})
      this.homepage.current?.when_contract_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 32/* proposal */){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1199']/* 'proposals' */})
      this.homepage.current?.when_proposal_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 26/* contractor */){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1198']/* 'contractors' */})
      this.homepage.current?.when_contractor_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 33/* subscription */){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1200']/* 'subscriptions' */})
      this.homepage.current?.when_subscription_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 18/* post */){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1213']/* 'posts' */})
      this.homepage.current?.when_post_item_clicked(index, object['id'], object['e5'], post_nsfw, object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 36/* channel */){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1214']/* 'channels' */})
      this.homepage.current?.when_channel_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 27/* storefront */){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1215']/* 'storefront' */})
      this.homepage.current?.when_storefront_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 25/* bag */){
      var items_to_deliver = object['ipfs']['bag_orders']
      var storefronts_to_load = []
      items_to_deliver.forEach(item => {
        var storefront_id = item['storefront_item_id']
        if(!storefronts_to_load.includes(storefront_id)) storefronts_to_load.push(storefront_id);
      });
      this.load_storefront_data(storefronts_to_load)

      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1216']/* 'bags' */})
      this.homepage.current?.when_bag_post_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 31/* token */){
      const id = object['data'][0][3/* <3>token_type */]
      if(id == 3/* capped(or type end) */){
        this.homepage.current?.setState({detail_page: 'w', detail_selected_tag: this.getLocale()['1218']/* 'ends ☝️' */})
        this.homepage.current?.when_ends_object_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }else{
        //5 uncapped(or type spend)
        this.homepage.current?.setState({detail_page: 'w', detail_selected_tag: this.getLocale()['1219']/* 'spends 🫰' */})
        this.homepage.current?.when_spends_object_clicked(index, object['id'], object['e5'], object, 'ignore')
        this.homepage.current?.reset_post_detail_object()
      }
    }
    else if(object_type == 19/* audioport */){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1264k']/* 'audioport' */})
      this.homepage.current?.when_audio_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 20/* videoport */){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1264p']/* 'videoport' */})
      this.homepage.current?.when_video_item_clicked(index, object['id'], object['e5'], post_nsfw, object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 21/* nitro */){
      this.homepage.current?.setState({detail_page: '?', detail_selected_tag: this.getLocale()['1264s']/* 'nitro' */})
      this.homepage.current?.when_nitro_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }
    else if(object_type == 28/* 28(poll-object) */){
      this.homepage.current?.setState({detail_page: 'e', detail_selected_tag: this.getLocale()['1264ao']/* 'polls' */})
      this.homepage.current?.when_poll_item_clicked(index, object['id'], object['e5'], object, 'ignore')
      this.homepage.current?.reset_post_detail_object()
    }

    if(this.state.dialog_bottomsheet == true) this.open_dialog_bottomsheet()
    if(this.state.view_job_request_bottomsheet == true) this.open_view_job_request_bottomsheet();
  }

  show_post_item_preview_with_subscription(object, type){
    this.homepage.current?.show_post_item_preview_with_subscription(object, type)
    if(this.state.dialog_bottomsheet == true) this.open_dialog_bottomsheet()
    if(this.state.view_job_request_bottomsheet == true) this.open_view_job_request_bottomsheet();
  }

  when_block_contact_selected(account, e5){
    this.open_dialog_bottomsheet()
    this.add_account_to_blocked_list(account, e5)
  }

  when_add_to_contact_selected(account, e5){
    this.open_dialog_bottomsheet()
    this.add_account_to_contacts(account, e5)
  }

  when_view_account_details_selected = async (account, e5) => {
    this.open_dialog_bottomsheet()
    this.open_searched_account_bottomsheet()

    var data = this.state.searched_accounts_data[account] == null ? [] : this.state.searched_accounts_data[account]
    var object = data.find(e => (e['id'] == account && e['e5'] == e5 && e['ether_balance'] != null))
    var existing = false
    if(object != null){
      existing = true
      var me = this;
      setTimeout(function() {
        if(me.searched_account_page.current != null){
          me.searched_account_page.current?.set_searched_item(object, account)
        }
      }, (1 * 500));
      if(object['search_time'] > (Date.now() - (1000*60*15))){
        return;
      }
    }

    await this.get_searched_account_data(account, account, e5)
    await this.wait(300)
    var data = this.state.searched_accounts_data[account] == null ? [] : this.state.searched_accounts_data[account]
    var object = data.find(e => (e['id'] == account && e['e5'] == e5))

    var me = this;
    setTimeout(function() {
      
      if(existing == false){
        me.searched_account_page.current?.set_searched_item(object, account)
      }else{
        if(me.searched_account_page.current.state.searched_account['id'] == account && me.searched_account_page.current.state.searched_account['e5'] == e5){
          me.searched_account_page.current?.set_searched_item(object, account)
        }
      }
    }, (1 * 500));
  }

  add_bill_payments_to_stack(objects){
    this.open_dialog_bottomsheet()
    var stack_clone = this.state.stack_items.slice()      
    objects.forEach(object => {
      var recipient = object['ipfs'].transfer_recipient
      var price_data = object['ipfs'].price_data
      var identifier = object['ipfs'].identifier
      var e5 = object['e5']
      const state_obj = {
        id: identifier, type:this.getLocale()['3071j']/* 'bill-payment' */,
        entered_indexing_tags:[this.getLocale()['3068ae']/* 'transfer' */, this.getLocale()['3071k']/* 'bill' */, this.getLocale()['3068ad']/* 'send' */],
        e5:e5, recipient: recipient, price_data: price_data, identifier:identifier
      }
      var edit_id = -1
      for(var i=0; i<stack_clone.length; i++){
        if(stack_clone[i].id == state_obj.id){
          edit_id = i
        }
      }
      if(edit_id != -1){
        stack_clone[edit_id] = state_obj
      }else{
        stack_clone.push(state_obj)
      }
    });
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
    this.prompt_top_notification(this.getLocale()['3071l']/* Transactions added to stack. */, 1400)
  }

  when_file_type_to_select_is_selected(type){
    this.open_dialog_bottomsheet()
    if(this.stack_page.current != null){
      this.stack_page.current?.call_input_function(type)
    }
  }

  verify_file = async (ecid_obj) => {
    this.prompt_top_notification(this.getLocale()['3055ca']/* 'Verifying the file...' */, 5500)
    var file_link = this.get_file_data(ecid_obj)
    var valid_known_hash = this.get_file_known_hash(ecid_obj)
    try {
      if(file_link == null || valid_known_hash == null){
        console.log('file_link or valid_known_hash is null', file_link, valid_known_hash)
        throw new Error("file_link or valid_known_hash is null");
      }
      // Fetch the zip as a blob
      const response = await fetch(file_link);
      if (!response.ok) {
        throw new Error("Failed to fetch image");
      }
      const blob = await response.blob();
      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);
      
      var valid_hash = await this.get_valid_data_hash(objectUrl, true)
      if(valid_hash != valid_known_hash){
        console.log('apppage','Data has beeen tampered with, reverting', valid_hash, valid_known_hash)
        this.prompt_top_notification(this.getLocale()['3055cc']/* 'Your data might have been tampered with.' */, 7500)
      }else{
        this.prompt_top_notification(this.getLocale()['3055cd']/* 'File verified.' */, 4500)
        var clone = structuredClone(this.state.verified_file_statuses)
        clone[ecid_obj['full']] = true
        this.setState({verified_file_statuses: clone})
      }

      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      this.prompt_top_notification(this.getLocale()['3055cb']/* 'Something went wrong.' */, 4500)
    }
  }

  get_file_data(ecid_obj){
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    if(data == null) return null
    return data['data']
  }

  get_file_known_hash(ecid_obj){
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    if(data == null) return null
    return data['hash']
  }

  when_scroll_to_top_section(data){
    this.open_dialog_bottomsheet()
    this.homepage.current?.update_scroll_position2()
  }

  when_reload_section(data){
    this.open_dialog_bottomsheet()
    this.prompt_top_notification(this.getLocale()['3055cm']/* 'Reloading in progress...' */, 4000)
    this.homepage.current?.reload_section_data(data['id'], data['selected_page'])
  }

  add_creator_payouts_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  upload_file_to_nitro_confirmed(data){
    var selected_files_type = data['selected_files_type']
    var files = data['files']
    var size_total = data['size_total']
    var obj = data['obj']
    var node_details = data['node_details']

    this.open_dialog_bottomsheet()
    this.upload_multiple_files_to_nitro_node(files, selected_files_type, obj, node_details)
  }

  add_nitro_renewal_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  add_buy_album_transaction_to_stack_from_dialog_page(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
    this.open_dialog_bottomsheet()
  }

  delete_nitro_file = async (hash, data) => {
    const nitro_e5_id = data['nitro']
    const nitro_id = nitro_e5_id.split('E')[0]
    const nitro_e5 = 'E'+nitro_e5_id.split('E')[1]
    const nitro_object = this.state.created_nitro_mappings[nitro_e5][nitro_id]

    if(nitro_object == null){
      this.prompt_top_notification(this.getLocale()['1593da']/* 'Please wait a few moments for E5 to syncronize fully.' */, 4500)
      return;
    }

    const node_details = this.state.nitro_node_details[nitro_e5_id]
    if(node_details == null){
      this.prompt_top_notification(this.getLocale()['3055dr']/* 'Please wait a few moments for the files node to come online.' */, 4500)
      return;
    }
    
    const block_hash_and_signature = await this.get_block_hash_and_signature2(nitro_e5)
    if(block_hash_and_signature == null){
      this.prompt_top_notification(this.getLocale()['3055cb']/* 'Something went wrong.' */, 4500)
      return;
    }

    const node_url = nitro_object['ipfs'].node_url
    var arg_obj = {
      signature_data: block_hash_and_signature.data,
      signature:block_hash_and_signature.signature,
      file: hash,
      e5: nitro_e5,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/delete_file`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == false){
        console.log('apppage','Delete action was not successful', obj)
        this.prompt_top_notification(this.getLocale()['3055cb']/* 'Something went wrong.' */, 4500)
      }else{
        var clone = structuredClone(this.state.file_streaming_data)
        clone[hash].is_file_deleted = true
        this.setState({file_streaming_data: clone})
        this.prompt_top_notification(this.getLocale()['3055ds']/* 'File deleted successfully.' */, 4500)
      }
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3055cb']/* 'Something went wrong.' */, 4500)
    }
  }

  get_block_hash_and_signature2 = async (e5) => {
    try{
      const web3 = new Web3(this.get_web3_url_from_e5(e5))
      var current_block_number = parseInt(await web3.eth.getBlockNumber())
      var round_down_value = await this.get_round_down_value(web3, current_block_number)
      var round_down_block = this.round_down(current_block_number, round_down_value)
      var current_block = await web3.eth.getBlock(round_down_block);
      var block_hash = current_block.hash.toString()

      var address = this.state.accounts[e5].address
      web3.eth.accounts.wallet.add(this.state.accounts[e5].privateKey);
      var signature = await web3.eth.sign(block_hash, address)
      return {data: block_hash, signature: signature, e5: this.state.selected_e5}
    }catch(e){
      console.log(e)
      return null
    }
  }













  render_pay_upcoming_subscriptions_bottomsheet(){
    if(this.state.pay_upcoming_subscriptions_bottomsheet2 != true) return;
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.pay_upcoming_subscriptions_bottomsheet} onClose={this.open_pay_upcoming_subscriptions_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
                        'overflow-y':'auto'}}>
                          <PayUpcomingSubscriptions ref={this.pay_upcoming_subscriptions_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_upcoming_subscriptions_to_stack={this.add_pay_upcoming_subscriptions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}/>
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_pay_upcoming_subscriptions_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_pay_upcoming_subscriptions_bottomsheet.bind(this)} open={this.state.pay_upcoming_subscriptions_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <PayUpcomingSubscriptions ref={this.pay_upcoming_subscriptions_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_pay_upcoming_subscriptions_to_stack={this.add_pay_upcoming_subscriptions_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} />
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_pay_upcoming_subscriptions_bottomsheet(){
    if(this.state.pay_upcoming_subscriptions_bottomsheet == true){
      //closing
      this.pay_upcoming_subscriptions_bottomsheet = this.pay_upcoming_subscriptions_page.current?.state;

      this.setState({pay_upcoming_subscriptions_bottomsheet: !this.state.pay_upcoming_subscriptions_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({pay_upcoming_subscriptions_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({pay_upcoming_subscriptions_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({pay_upcoming_subscriptions_bottomsheet: !me.state.pay_upcoming_subscriptions_bottomsheet});

          if(me.pay_upcoming_subscriptions_bottomsheet != null){
            me.pay_upcoming_subscriptions_page.current?.setState(me.pay_upcoming_subscriptions_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_pay_upcoming_subscriptions_bottomsheet(data){
    this.open_pay_upcoming_subscriptions_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.pay_upcoming_subscriptions_page.current != null){
        me.pay_upcoming_subscriptions_page.current.set_data(data)
      }
    }, (1 * 500));
  }

  add_pay_upcoming_subscriptions_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }






  render_pick_file_bottomsheet(){
    if(this.state.pick_file_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.pick_file_bottomsheet} onClose={this.open_pick_file_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_pick_file_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_pick_file_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_pick_file_bottomsheet.bind(this)} open={this.state.pick_file_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_pick_file_element()}
      </SwipeableBottomSheet>
    )
  }

  render_pick_file_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <PickFilePage ref={this.pick_file_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} return_selected_files={this.return_selected_files.bind(this)}/>
      </div>
    )
  }

  open_pick_file_bottomsheet(){
    if(this.state.pick_file_bottomsheet == true){
      //closing
      this.pick_file_bottomsheet = this.pick_file_page.current?.state;

      this.setState({pick_file_bottomsheet: !this.state.pick_file_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({pick_file_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({pick_file_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({pick_file_bottomsheet: !me.state.pick_file_bottomsheet});

          if(me.pick_file_bottomsheet != null){
            me.pick_file_page.current?.setState(me.pick_file_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_pick_file_bottomsheet(type, function_name, max){
    this.open_pick_file_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.pick_file_page.current != null){
        me.pick_file_page.current.set_data(type, function_name, max)
      }
    }, (1 * 500));
  }

  return_selected_files(picked_files, function_name){
    this.open_pick_file_bottomsheet()

    if(function_name == 'create_image'){
      this.new_channel_page.current?.when_image_gif_files_picked(picked_files)
      this.new_post_page.current?.when_image_gif_files_picked(picked_files)
      this.new_job_page.current?.when_image_gif_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_image_gif_files_picked(picked_files)
      this.new_mail_page.current?.when_image_gif_files_picked(picked_files)
      this.new_contractor_page.current?.when_image_gif_files_picked(picked_files)
      this.new_proposal_page.current?.when_image_gif_files_picked(picked_files)
      this.new_audio_page.current?.when_image_gif_files_picked(picked_files)
      this.new_video_page.current?.when_image_gif_files_picked(picked_files)
      this.new_nitro_page.current?.when_image_gif_files_picked(picked_files)
      this.new_poll_page.current?.when_image_gif_files_picked(picked_files)

      this.edit_job_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_token_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_post_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_channel_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_storefront_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_contractor_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_videopost_page.current?.when_image_gif_files_picked(picked_files)
      this.edit_audiopost_page.current?.when_image_gif_files_picked(picked_files)

      this.add_comment_page.current?.when_image_gif_files_picked(picked_files)
      this.send_job_request_page.current?.when_image_gif_files_picked(picked_files)
    }
    else if(function_name == 'create_text_banner_image'){
      this.new_channel_page.current?.when_banner_selected(picked_files)
      this.new_post_page.current?.when_banner_selected(picked_files)
      this.new_job_page.current?.when_banner_selected(picked_files)
      this.new_storefront_item_page.current?.when_banner_selected(picked_files)
      this.new_mail_page.current?.when_banner_selected(picked_files)
      this.new_contractor_page.current?.when_banner_selected(picked_files)
      this.new_proposal_page.current?.when_banner_selected(picked_files)
      this.new_token_page.current?.when_banner_selected(picked_files)
      this.new_audio_page.current?.when_banner_selected(picked_files)
      this.new_video_page.current?.when_banner_selected(picked_files)
      this.new_nitro_page.current?.when_banner_selected(picked_files)
      this.new_poll_page.current?.when_banner_selected(picked_files)

      this.edit_job_page.current?.when_banner_selected(picked_files)
      this.edit_token_page.current?.when_banner_selected(picked_files)
      this.edit_post_page.current?.when_banner_selected(picked_files)
      this.edit_channel_page.current?.when_banner_selected(picked_files)
      this.edit_storefront_page.current?.when_banner_selected(picked_files)
      this.edit_contractor_page.current?.when_banner_selected(picked_files)
      this.edit_videopost_page.current?.when_banner_selected(picked_files)
      this.edit_audiopost_page.current?.when_banner_selected(picked_files)
    }
    else if(function_name == 'create_storefront_variant_image'){
      this.new_token_page.current?.when_variant_image_gif_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_variant_image_gif_files_picked(picked_files)
      this.edit_storefront_page.current?.when_variant_image_gif_files_picked(picked_files)
    }
    else if(function_name == 'create_audio_pick_audio_file'){
      this.new_audio_page.current?.when_audio_file_picked(picked_files)
      this.edit_audiopost_page.current?.when_audio_file_picked(picked_files)
    }
    else if(function_name == 'create_audio_album_art'){
      this.new_audio_page.current?.when_album_art_selected(picked_files)
      this.edit_audiopost_page.current?.when_album_art_selected(picked_files)

      this.new_video_page.current?.when_album_art_selected(picked_files)
      this.edit_videopost_page.current?.when_album_art_selected(picked_files)

      this.new_nitro_page.current?.when_album_art_selected(picked_files)
      this.edit_nitropost_page.current?.when_album_art_selected(picked_files)
    }
    else if(function_name == 'create_storefront_image_album_art'){
      this.new_storefront_item_page.current?.when_storefront_image_selected(picked_files)
      this.edit_storefront_page.current?.when_storefront_image_selected(picked_files)
    }
    else if(function_name == 'create_pdf'){
      this.new_channel_page.current?.when_pdf_files_picked(picked_files)
      this.new_post_page.current?.when_pdf_files_picked(picked_files)
      this.new_job_page.current?.when_pdf_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_pdf_files_picked(picked_files)
      this.new_mail_page.current?.when_pdf_files_picked(picked_files)
      this.new_contractor_page.current?.when_pdf_files_picked(picked_files)
      this.new_proposal_page.current?.when_pdf_files_picked(picked_files)
      this.new_audio_page.current?.when_pdf_files_picked(picked_files)
      this.new_video_page.current?.when_pdf_files_picked(picked_files)
      this.new_nitro_page.current?.when_pdf_files_picked(picked_files)
      this.new_poll_page.current?.when_pdf_files_picked(picked_files)

      this.edit_job_page.current?.when_pdf_files_picked(picked_files)
      this.edit_token_page.current?.when_pdf_files_picked(picked_files)
      this.edit_post_page.current?.when_pdf_files_picked(picked_files)
      this.edit_channel_page.current?.when_pdf_files_picked(picked_files)
      this.edit_storefront_page.current?.when_pdf_files_picked(picked_files)
      this.edit_contractor_page.current?.when_pdf_files_picked(picked_files)
      this.edit_videopost_page.current?.when_pdf_files_picked(picked_files)
      this.edit_audiopost_page.current?.when_pdf_files_picked(picked_files)

      this.add_comment_page.current?.when_pdf_files_picked(picked_files)
      this.send_job_request_page.current?.when_pdf_files_picked(picked_files)
      this.view_contextual_transfer_page.current?.when_pdf_files_picked(picked_files)
    }
    else if(function_name == 'create_zip'){
      this.new_channel_page.current?.when_zip_files_picked(picked_files)
      this.new_post_page.current?.when_zip_files_picked(picked_files)
      this.new_job_page.current?.when_zip_files_picked(picked_files)
      this.new_storefront_item_page.current?.when_zip_files_picked(picked_files)
      this.new_mail_page.current?.when_zip_files_picked(picked_files)
      this.new_contractor_page.current?.when_zip_files_picked(picked_files)
      this.new_proposal_page.current?.when_zip_files_picked(picked_files)
      this.new_audio_page.current?.when_zip_files_picked(picked_files)
      this.new_video_page.current?.when_zip_files_picked(picked_files)
      this.new_nitro_page.current?.when_zip_files_picked(picked_files)
      this.new_poll_page.current?.when_zip_files_picked(picked_files)

      this.edit_job_page.current?.when_zip_files_picked(picked_files)
      this.edit_token_page.current?.when_zip_files_picked(picked_files)
      this.edit_post_page.current?.when_zip_files_picked(picked_files)
      this.edit_channel_page.current?.when_zip_files_picked(picked_files)
      this.edit_storefront_page.current?.when_zip_files_picked(picked_files)
      this.edit_contractor_page.current?.when_zip_files_picked(picked_files)
      this.edit_videopost_page.current?.when_zip_files_picked(picked_files)
      this.edit_audiopost_page.current?.when_zip_files_picked(picked_files)
    }
    else if(function_name == 'create_video_pick_video_file'){
      this.new_video_page.current?.when_video_file_picked(picked_files)
      this.edit_videopost_page.current?.when_video_file_picked(picked_files)
    }
    else if(function_name == 'select_subtitle_file'){
      this.edit_videopost_page.current?.when_subtitle_file_selected_from_bottomsheet(picked_files)
      this.new_video_page.current?.when_subtitle_file_selected_from_bottomsheet(picked_files)
    }
    else if(function_name == 'select_lyric_file'){
      this.new_audio_page.current?.when_lyric_file_selected_from_bottomsheet(picked_files)
      this.edit_audiopost_page.current?.when_lyric_file_selected_from_bottomsheet(picked_files)
    }

    
  }











  render_buy_album_bottomsheet(){
    if(this.state.buy_album_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.buy_album_bottomsheet} onClose={this.open_buy_album_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_buy_album_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_buy_album_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_buy_album_bottomsheet.bind(this)} open={this.state.buy_album_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_buy_album_element()}
      </SwipeableBottomSheet>
    )
  }

  render_buy_album_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <BuyAlbumPage ref={this.buy_album_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_buy_album_transaction_to_stack={this.add_buy_album_transaction_to_stack.bind(this)}/>
      </div>
    )
  }

  open_buy_album_bottomsheet(){
    if(this.state.buy_album_bottomsheet == true){
      //closing
      this.buy_album_bottomsheet = this.buy_album_page.current?.state;

      this.setState({buy_album_bottomsheet: !this.state.buy_album_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({buy_album_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({buy_album_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({buy_album_bottomsheet: !me.state.buy_album_bottomsheet});

          if(me.buy_album_bottomsheet != null){
            me.buy_album_page.current?.setState(me.buy_album_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_buy_album_bottomsheet(object){
    this.open_buy_album_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.buy_album_page.current != null){
        me.buy_album_page.current.set_data(object)
      }
    }, (1 * 500));
  }

  add_buy_album_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }








  render_buy_video_bottomsheet(){
    if(this.state.buy_video_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.buy_video_bottomsheet} onClose={this.open_buy_video_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_buy_video_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_buy_video_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_buy_video_bottomsheet.bind(this)} open={this.state.buy_video_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_buy_video_element()}
      </SwipeableBottomSheet>
    )
  }

  render_buy_video_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <BuyVideoPage ref={this.buy_video_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_buy_video_transaction_to_stack={this.add_buy_video_transaction_to_stack.bind(this)}/>
      </div>
    )
  }

  open_buy_video_bottomsheet(){
    if(this.state.buy_video_bottomsheet == true){
      //closing
      this.buy_video_bottomsheet = this.buy_video_page.current?.state;

      this.setState({buy_video_bottomsheet: !this.state.buy_video_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({buy_video_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({buy_video_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({buy_video_bottomsheet: !me.state.buy_video_bottomsheet});

          if(me.buy_video_bottomsheet != null){
            me.buy_video_page.current?.setState(me.buy_video_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_buy_video_bottomsheet(object){
    this.open_buy_video_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.buy_video_page.current != null){
        me.buy_video_page.current.set_data(object)
      }
    }, (1 * 500));
  }

  add_buy_video_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }














  render_buy_nitro_storage_bottomsheet(){
    if(this.state.buy_nitro_storage_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.buy_nitro_storage_bottomsheet} onClose={this.open_buy_nitro_storage_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_buy_nitro_storage_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_buy_nitro_storage_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_buy_nitro_storage_bottomsheet.bind(this)} open={this.state.buy_nitro_storage_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_buy_nitro_storage_element()}
      </SwipeableBottomSheet>
    )
  }

  render_buy_nitro_storage_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div>
        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <BuyNitroPage ref={this.buy_nitro_storage_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_buy_nitro_storage_to_stack={this.add_buy_nitro_storage_to_stack.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} />
        </div>
      </div>
    )
  }

  open_buy_nitro_storage_bottomsheet(){
    if(this.state.buy_nitro_storage_bottomsheet == true){
      //closing
      this.buy_nitro_storage_bottomsheet = this.buy_nitro_storage_page.current?.state;

      this.setState({buy_nitro_storage_bottomsheet: !this.state.buy_nitro_storage_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({buy_nitro_storage_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({buy_nitro_storage_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({buy_nitro_storage_bottomsheet: !me.state.buy_nitro_storage_bottomsheet});

          if(me.buy_nitro_storage_bottomsheet != null){
            me.buy_nitro_storage_page.current?.setState(me.buy_nitro_storage_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_buy_nitro_storage_bottomsheet(object){
    this.open_buy_nitro_storage_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.buy_nitro_storage_page.current != null){
        me.buy_nitro_storage_page.current.set_data(object)
      }
    }, (1 * 500));
  }

  add_buy_nitro_storage_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }












  render_configure_nitro_node_bottomsheet(){
    if(this.state.configure_nitro_node_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.configure_nitro_node_bottomsheet} onClose={this.open_configure_nitro_node_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_configure_nitro_node_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_configure_nitro_node_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_configure_nitro_node_bottomsheet.bind(this)} open={this.state.configure_nitro_node_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
        {this.render_configure_nitro_node_element()}
      </SwipeableBottomSheet>
    )
  }

  render_configure_nitro_node_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div>
        <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 
          'overflow-y':'auto'}}>
            <ConfigureNitroNodePage ref={this.configure_nitro_node_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} boot_nitro_node={this.boot_nitro_node.bind(this)} restore_nitro_node={this.restore_nitro_node.bind(this)} isValidE5Address={this.isValidE5Address.bind(this)} boot_new_e5={this.boot_new_e5.bind(this)} delete_e5_from_node={this.delete_e5_from_node.bind(this)} change_iteration_in_node={this.change_iteration_in_node.bind(this)} change_gateway={this.change_gateway.bind(this)} update_web3_provider_in_node={this.update_web3_provider_in_node.bind(this)} boot_storage={this.boot_storage.bind(this)} update_storage_config={this.update_storage_config.bind(this)} back_up_node={this.back_up_node.bind(this)}
            decrypt_storage_data_using_key={this.decrypt_storage_data_using_key.bind(this)} update_dialer_provider_in_node={this.update_dialer_provider_in_node.bind(this)}
            />
        </div>
      </div>
    )
  }

  open_configure_nitro_node_bottomsheet(){
    if(this.state.configure_nitro_node_bottomsheet == true){
      //closing
      this.configure_nitro_node_bottomsheet = this.configure_nitro_node_page.current?.state;

      this.setState({configure_nitro_node_bottomsheet: !this.state.configure_nitro_node_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({configure_nitro_node_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({configure_nitro_node_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({configure_nitro_node_bottomsheet: !me.state.configure_nitro_node_bottomsheet});

          if(me.configure_nitro_node_bottomsheet != null){
            me.configure_nitro_node_page.current?.setState(me.configure_nitro_node_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_configure_nitro_node_bottomsheet(object){
    this.open_configure_nitro_node_bottomsheet()
    var me = this;
    setTimeout(async function() {
      if(me.configure_nitro_node_page.current != null){
        if(me.back_up_keys == null){
          me.back_up_keys = {}
        }
        var final_backup_key = me.back_up_keys[object['e5_id']] == null ? await me.decrypt_nitro_node_key_with_my_public_key(object['ipfs'].encrypted_key, object['e5']) : me.back_up_keys[object['e5_id']]

        me.back_up_keys[object['e5_id']] = final_backup_key
        me.configure_nitro_node_page.current.set_data(object, final_backup_key)
      }
    }, (1 * 500));
  }

  boot_nitro_node = async (entered_app_key_text, entered_backup_key_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054j']/* 'Attempting to boot the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var beacon_chain_link = this.state.beacon_chain_url
    const params = new URLSearchParams({
      backup_key: final_backup_key,
      beacon_chain_link: beacon_chain_link
    });
    var request = `${node_url}/boot?${params.toString()}`
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  restore_nitro_node = async (entered_backup_key_text, entered_filename_text, entered_backup_file_text, should_restore_key_title_tag_selected, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054u']/* 'Attempting to restore the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url
    // var final_files_backup_key = entered_backup_file_text == '' ? final_backup_key : entered_backup_file_text
    var final_files_backup_key = ''

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      file_name: entered_filename_text,
      data_key: final_files_backup_key,
      should_restore_key: should_restore_key_title_tag_selected
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: '' // Convert the data object to a JSON string
    }
    var request = `${node_url}/restore?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);

      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }

  }

  back_up_node = async (entered_backup_key_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054x']/* 'Attempting to back up the node remotely' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/backup?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  isValidE5Address = (adr) => {
    try {
      const web3 = new Web3()
      web3.utils.toChecksumAddress(adr)
      return true
    } 
    catch (e) {
      return false
    }
  }

  boot_new_e5 = async (entered_backup_key_text, selected_e5, entered_address_text, entered_web3_text, entered_start_block_text, entered_iteration_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bh']/* 'Attempting to boot the E5 in the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      e5: selected_e5, 
      backup_key: final_backup_key,
      e5_address: entered_address_text, 
      web3: entered_web3_text, 
      first_block:parseInt(entered_start_block_text), 
      iteration:parseInt(entered_iteration_text)
    }

    const params = new URLSearchParams({
      arg_string:JSON.stringify(arg_obj),
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/new_e5?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  delete_e5_from_node = async (entered_backup_key_text, selected_e5, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bl']/* 'Attempting to remove the E5 from the node...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      e5: selected_e5,
      backup_key: final_backup_key
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/delete_e5?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  change_iteration_in_node = async (entered_backup_key_text, selected_e5, entered_iteration_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bo']/* 'Attempting to change the synchronization iteration...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      e5: selected_e5,
      new_iteration:parseInt(entered_iteration_text),
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/update_iteration?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  change_gateway = async (entered_backup_key_text, entered_ipfs_provider_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bw']/* 'Attempting to change the gateway provider...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      new_provider: entered_ipfs_provider_text
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/update_content_gateway?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  update_web3_provider_in_node = async (entered_backup_key_text, selected_e5, entered_web3_text, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054bz']/* 'Attempting to change the web3 provider url...' */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    const params = new URLSearchParams({
      backup_key: final_backup_key,
      e5: selected_e5,
      new_provider: entered_web3_text
    });
    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: ''
    }
    var request = `${node_url}/update_provider?${params.toString()}`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  boot_storage = async (entered_backup_key_text, max_buyable_capacity, selected_e5, price_per_megabyte, target_storage_recipient_accounts, selected_basic_storage_setting, nitro_object, default_free_storage) => {
    this.prompt_top_notification(this.getLocale()['3054ci']/* Attempting to enable storage with your specified configuration... */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      backup_key: final_backup_key,
      max_buyable_capacity: parseInt(max_buyable_capacity),
      price_per_megabyte: price_per_megabyte,
      target_account_e5: selected_e5,
      target_storage_recipient_accounts: target_storage_recipient_accounts,
      unlimited_basic_storage: selected_basic_storage_setting,
      free_default_storage: default_free_storage
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/boot_storage`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  update_storage_config = async (entered_backup_key_text, key, value, e5, nitro_object) => {
    this.prompt_top_notification(this.getLocale()['3054co']/* Attempting to update your storage configuration... */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      backup_key: final_backup_key,
      key: key,
      value: value,
      e5: e5,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/reconfigure_storage`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }

  decrypt_storage_data_using_key(data, key){
    try{
      var bytes  = CryptoJS.AES.decrypt(data, key);
      var originalText = bytes.toString(CryptoJS.enc.Utf8);
      return originalText
    }catch(e){
      return data
    }
  }

  update_dialer_provider_in_node = async (entered_backup_key_text, e5, subscription, dialer_payment_optional, nitro_object, dialer_endpoint) => {
    this.prompt_top_notification(this.getLocale()['3054di']/* Attempting to update your dialer configuration... */, 1200)
    var encrypted_object_backup_key = nitro_object['ipfs'].encrypted_key
    var final_backup_key = entered_backup_key_text == '' ? await this.decrypt_nitro_node_key_with_my_public_key(encrypted_object_backup_key, nitro_object['e5']) : entered_backup_key_text
    var node_url = nitro_object['ipfs'].node_url

    var arg_obj = {
      backup_key: final_backup_key,
      target_subscription: subscription,
      target_subscriptions_e5: e5,
      subscription_payment_optional: dialer_payment_optional,
      dialer_endpoint:dialer_endpoint
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/configure_dialer`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var duration = obj.success == true ? 3700 : 4800
      this.prompt_top_notification(obj.message, duration)
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }










  render_view_image_bottomsheet(){
    if(this.state.view_image_bottomsheet2 != true) return;
    var background_color = 'transparent';
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_image_bottomsheet} onClose={this.open_view_image_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        <div style={{ height: this.state.height, width: this.state.width, 'background-color': background_color, 'border-style': 'solid', 'border-color': 'black', 'border-radius': '0px 0px 0px 0px', 'border-width': '0px','margin': '0px 0px 0px 0px'}}>
                          {this.render_view_image_element()}
                        </div>
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_image_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_image_bottomsheet.bind(this)} open={this.state.view_image_bottomsheet} style={{'z-index':'6'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': 'transparent','box-shadow': '0px 0px 0px 0px #CECDCD'}}>
          <div style={{ height: this.state.height, width: this.state.width, 'background-color': background_color, 'border-style': 'solid', 'border-color': 'black', 'border-radius': '0px 0px 0px 0px', 'border-width': '0px','margin': '0px 0px 0px 0px'}}>
            {this.render_view_image_element()}
          </div>
      </SwipeableBottomSheet>
    )
  }

  render_view_image_element(){
    var images = this.state.view_images == null ? [] : this.state.view_images;
    var pos = this.state.view_images_pos == null ? 0 : this.state.view_images_pos;
    var img = this.get_image_from_file(images[pos])
    var w = this.state.width
    return(
      <div style={{'position': 'relative'}}>
        <div style={{height: this.state.height, width: this.state.width, 'z-index':'1', 'position': 'absolute'}}>
          {this.render_view_image()}
        </div>

        <div style={{height: 80, width: w, 'z-index':'5', 'position': 'absolute','background-image': 'linear-gradient(rgb(0, 0, 0,.9), rgb(0, 0, 0,.0))'}}/>

        <div style={{height: 32, width: w, 'z-index':'10', 'position': 'absolute'}}>
          <div style={{'display': 'flex','flex-direction': 'row', 'padding':'10px 20px 0px 20px'}}>
            <img alt="" onClick={()=>this.download_image(img, this.get_name_of_file(images[pos]))} src={this.state.static_assets['download_icon']} style={{height:36, width:'auto'}}/>
            <div style={{width: w - 60}}/>
            <img alt="" onClick={()=>this.open_view_image_bottomsheet()} src={this.state.static_assets['close_pip']} style={{height:28, width:'auto'}} />
          </div>
        </div>
      </div>
    )
  }

  open_view_image_bottomsheet(){
    if(this.state.view_image_bottomsheet == true){
      //closing
      this.setState({view_image_bottomsheet: !this.state.view_image_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_image_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_image_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_image_bottomsheet: !me.state.view_image_bottomsheet});
        }
      }, (1 * 200));
    }
  }

  show_images(images, pos){
    this.setState({view_images:images, view_images_pos: pos })
    this.getBase64ImageDimensions(images[pos])
    .then(({ width, height }) => {
      console.log(`Image Width: ${width}px, Image Height: ${height}px`);
      if(width > height){
        /* 
          if images width is less than height:
          width: 100px, height: 200px

          if 100px = state.width
          then 200px = (200 * state.width) / 100
        */
        var h = (height * this.state.width) / width
        this.rendering_image_width = this.state.width - 70
        this.rendering_image_height = h - 70

        this.rendering_image_width = 'auto'
        this.rendering_image_height = this.state.height
      }else{
        /* 
          if images height is less than width:
          width: 200px, height: 100px

          if 100px = state.height
          then 200px = (200px * state.height) / 100px
        */
        var w = (width * this.state.height) / height
        this.rendering_image_width = w - 70
        this.rendering_image_height = this.state.height - 70

        this.rendering_image_width = this.state.width
        this.rendering_image_height = 'auto'
      }
      this.open_view_image_bottomsheet()
    })
    .catch((error) => {
      console.error('Failed to get image dimensions:', error);
      this.rendering_image_height = 'auto'
      this.rendering_image_width = this.state.width
      this.open_view_image_bottomsheet()
    });
    
  }

  /* fullscreen image rendered in bottomsheet when image item is tapped */
  render_view_image(){
    var images = this.state.view_images == null ? [] : this.state.view_images;
    var pos = this.state.view_images_pos == null ? 0 : this.state.view_images_pos;
    var img = this.get_image_from_file(images[pos])
    return(
      <div style={{'position': 'relative', height:'100%', width:'100%', 'background-color':'rgb(0, 0, 0,.9)','border-radius': '0px','display': 'flex', 'align-items':'center','justify-content':'center', 'margin':'0px 0px 0px 0px', 'text-align':'center'}}>
        {/* <SwipeableViews index={pos}>
          {images.map((item, index) => ( 
            <img src={item} style={{height:'auto',width:w}} />
          ))}
        </SwipeableViews> */}
        <TransformWrapper doubleClick={{ disabled: false }}>
            <TransformComponent>
              <div>
                <img src={img} style={{height: this.rendering_image_height, width: this.rendering_image_width}}/>
              </div>
            </TransformComponent>
          </TransformWrapper>
      </div>
    );
  }

  getBase64ImageDimensions(base64Image) {
    return new Promise((resolve, reject) => {
      const img = new Image();

      // Set the src of the image to the base64 data
      img.src = base64Image;

      // Wait for the image to load to get its dimensions
      img.onload = () => {
        const width = img.width;
        const height = img.height;
        resolve({ width, height });
      };

      // Handle any errors
      img.onerror = (error) => {
        reject(error);
      };
    });
  }

  when_view_image_clicked(index, images){
    this.setState({view_images: images, view_images_pos: index})
    this.open_view_image_bottomsheet()
  }

  get_image_from_file(ecid){
    if(!ecid.startsWith('image')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return 'https://bafkreihhphkul4fpsqougigu4oenl3nbbnjjav4fzkgpjlwfya5ie2tu2u.ipfs.w3s.link/'
    
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    console.log('datas', 'uploaded_data_obj', this.state.uploaded_data)
    if(data == null) return 'https://bafkreihhphkul4fpsqougigu4oenl3nbbnjjav4fzkgpjlwfya5ie2tu2u.ipfs.w3s.link/'
    if(data == null) return
return data['data']
  }

  get_cid_split2(ecid){
    var split_cid_array = ecid.split('_');
    var filetype = split_cid_array[0]
    var cid_with_storage = split_cid_array[1]
    var cid = cid_with_storage
    var storage = 'ch'
    if(cid_with_storage.includes('.')){
        var split_cid_array2 = cid_with_storage.split('.')
        cid = split_cid_array2[0]
        storage = split_cid_array2[1]
    }

    return{'filetype':filetype, 'cid':cid, 'storage':storage, 'full':ecid}
  }

  download_image = async (img,  name) => {
    this.prompt_top_notification(this.getLocale()['2738b']/* 'Downloading image.' */, 1500)
    if(!img.startsWith('http')){
      // Create and click the download link
      const a = document.createElement("a");
      a.href = img;
      a.download = name;
      document.body.appendChild(a);
      a.click();
      // Clean up
      document.body.removeChild(a);
      return
    }
    try {
      // Fetch the image as a blob
      const response = await fetch(img);
      if (!response.ok) {
          throw new Error("Failed to fetch image");
      }

      const blob = await response.blob();

      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);

      // Create and click the download link
      const a = document.createElement("a");
      a.href = objectUrl;
      a.download = name;
      document.body.appendChild(a);
      a.click();

      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      console.error("Error downloading the image:", error);
    }
  }















  when_zip_file_opened = async (item) => {
    this.prompt_top_notification(this.getLocale()['2738f']/* 'Downloading Zip file.' */, 5500)
    var zip_file_name = this.get_name_of_file(item)
    var img = this.get_zip_from_file(item)
    try {
      // Fetch the zip as a blob
      const response = await fetch(img);
      if (!response.ok) {
          throw new Error("Failed to fetch image");
      }

      const blob = await response.blob();

      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);

      // Create and click the download link
      const a = document.createElement("a");
      a.href = objectUrl;
      a.download = zip_file_name;
      document.body.appendChild(a);
      a.click();

      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      console.error("Error downloading the zip:", error);
    }
  }

  get_zip_from_file(ecid){
    if(!ecid.startsWith('zip')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return null
    
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    if(data == null) return null
    if(data == null) return
    return data['data']
  }

















  render_view_pdf_bottomsheet(){
    if(this.state.view_pdf_bottomsheet2 != true) return;
    var background_color = 'transparent';
    var os = getOS()
    if(os == 'iOS' || true){
        return(
            <Sheet isOpen={this.state.view_pdf_bottomsheet} onClose={this.open_view_pdf_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_view_pdf_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_pdf_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_view_pdf_bottomsheet.bind(this)} open={this.state.view_pdf_bottomsheet} style={{'z-index':'6'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': 'transparent','box-shadow': '0px 0px 0px 0px #CECDCD'}}>
          <div style={{ height: this.state.height, width: this.state.width, 'background-color': background_color, 'border-style': 'solid', 'border-color': 'black', 'border-radius': '0px 0px 0px 0px', 'border-width': '0px','margin': '0px 0px 0px 0px'}}>
              {this.render_view_pdf_element()}
          </div>
      </SwipeableBottomSheet>
    )
  }

  open_view_pdf_bottomsheet(){
    if(this.state.view_pdf_bottomsheet == true){
      //closing
      this.setState({view_pdf_bottomsheet: !this.state.view_pdf_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_pdf_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_pdf_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_pdf_bottomsheet: !me.state.view_pdf_bottomsheet});
        }
      }, (1 * 200));
    }
  }

  when_pdf_file_opened(pdf){
    // this.prompt_top_notification('opening...', 1000)
    this.setState({view_pdf: pdf})
    this.open_view_pdf_bottomsheet()

    var me = this;
    setTimeout(function() {
      me.pdf_viewer_wrapper.current?.set_default_zoom()
    }, (1 * 4500));
    
  }


  render_view_pdf_element(){
    var pdf = this.state.view_pdf
    var w = this.state.width
    return(
      <div style={{'position': 'relative', height: this.state.height, width: this.state.width}}>
        <div style={{height: this.state.height, width: this.state.width, 'z-index':'4', 'position': 'absolute'}}>
          {this.render_view_pdf()}
        </div>

        <div style={{height: 70, width: w, 'z-index':'8', 'position': 'absolute','background-image': 'linear-gradient(rgb(0, 0, 0,.7), rgb(0, 0, 0,.0))'}}/>

        <div style={{height: 32, width: w, 'z-index':'10', 'position': 'absolute'}}>
          <div style={{'display': 'flex','flex-direction': 'row', 'padding':'10px 20px 0px 20px'}}>
            <img alt="" onClick={()=>this.download_pdf(this.get_pdf_from_file(pdf), this.get_name_of_file(pdf))} src={this.state.static_assets['download_icon']} style={{height:36, width:'auto'}}/>

            <div style={{width: w-60, display: 'flex', gap: '20px', 'align-items':'center','justify-content':'center',}}>
              <img alt="" onClick={()=>this.zoom_in()} src={this.state.static_assets['zoom_in_icon']} style={{height:36, width:'auto'}}/>

              <img alt="" onClick={()=>this.zoom_out()} src={this.state.static_assets['zoom_out_icon']} style={{height:36, width:'auto'}}/>
            </div>

            <img alt="" onClick={()=>this.open_view_pdf_bottomsheet()} src={this.state.static_assets['close_pip']} style={{height:28, width:'auto'}} />
          </div>
        </div>
      </div>
    )
  }

  /* fullscreen pdf rendered in bottomsheet when image item is tapped */
  render_view_pdf(){
    var pdf = this.state.view_pdf
    // var current_page = this.state.pdf_bookmarks[pdf] == null ? 1 : this.state.pdf_bookmarks[pdf]
    var theme = this.state.theme['pdf_theme']
    return(
      <div style={{height:this.state.height, width:'100%', 'background-color':'white', overflow: 'auto'}}>
        {pdf && (
          <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js`}>
            <PDFViewerWrapper ref={this.pdf_viewer_wrapper} theme={theme} fileUrl={this.get_pdf_from_file(pdf)} />
          </Worker>
        )}
      </div>
    );
  }

  get_pdf_from_file(ecid){
    if(!ecid.startsWith('pdf')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return 'https://bitcoin.org/bitcoin.pdf'
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    if(data == null) return
return data['data']
  }

  get_name_of_file(ecid){
    if(!ecid.startsWith('pdf') && !ecid.startsWith('image') && !ecid.startsWith('zip')) return ecid
    var ecid_obj = this.get_cid_split2(ecid)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return 'unknown'
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    return data['name']
  }

  download_pdf(base64Data, name){
    this.prompt_top_notification(this.getLocale()['2738d']/* 'Downloading pdf.' */, 1500)
    if(!base64Data.startsWith('http')){
      const base64Prefix = "data:application/pdf;base64,";
      const pdfData = base64Data.startsWith(base64Prefix) ? base64Data.replace(base64Prefix, "") : base64Data;
      

      const byteCharacters = atob(pdfData);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: "application/pdf" });

      const blobUrl = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = blobUrl;
      link.download = `${name}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(blobUrl);
    }else{
      this.download_pdf_from_url(base64Data, name)
    }
  }

  download_pdf_from_url = async (url,  name) => {
    try {
      // Fetch the image as a blob
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error("Failed to fetch pdf");
      }

      const blob = await response.blob();
      // Create a temporary object URL
      const objectUrl = URL.createObjectURL(blob);
      // Create and click the download link
      const a = document.createElement("a");
      a.href = objectUrl;
      a.download = name;
      document.body.appendChild(a);
      a.click();

      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(objectUrl);
    } catch (error) {
      console.error("Error downloading the image:", error);
    }
  }

  zoom_in(){
    this.pdf_viewer_wrapper.current?.zoomIn()
  }

  zoom_out(){
    this.pdf_viewer_wrapper.current?.zoomOut()
  }

  // record_page(page){
  //   var pdf_bookmarks_clone = structuredClone(this.state.pdf_bookmarks)
  //   var pdf = this.state.view_pdf
  //   pdf_bookmarks_clone[pdf] = page
  //   this.setState({pdf_bookmarks: pdf_bookmarks_clone})

  //   var me = this;
  //   setTimeout(function() {
  //     me.set_cookies()
  //   }, (1 * 500));
  // }












  render_audio_pip(){
    if(!this.state.is_audio_pip_showing) return;
    var size = this.getScreenSize();
    var opacity = this.state.full_audio_bottomsheet == true ? 0.2 : 1.0
    var player_size = size == 's' ? 150 : 200

    var x_pos = this.state.width - (player_size + 12)
    var y_pos = this.state.height - (player_size + 12)

    if(this.state.audiplayer_position == this.getLocale()['1593ha']/* 'bottom-left' */ && size != 'l'){
      x_pos = 12
    }

    if(size == 's'){
      y_pos = y_pos - 75
    }
    else if(size == 'm'){
      y_pos = y_pos - 65
    }

    if(this.state.hide_pip != 'e'){
      player_size = 0
      opacity = 0.0
    }
    return(
      <div style={{'opacity':opacity}}>
        <Draggable handle="strong" bounds="body" defaultPosition={{x: x_pos, y: y_pos}}>
          <div className={classes2.pipWindow}>
            <div className="box no-cursor" style={{'position': 'relative'}}>
              <div style={{ width:player_size, height:player_size,'z-index':'210', 'position': 'absolute', 'padding':'6px 0px 10px 0px'}}>
                {this.get_audio_pip_ui(player_size)}
              </div>
            </div>
          </div>
        </Draggable>
      </div>
    )
  }

  get_audio_pip_ui(player_size){
    var size = this.getScreenSize();
    return(
      <div style={{width:player_size, height:player_size}}>
        <AudioPip ref={this.audio_pip_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} player_size={player_size} theme={this.state.theme} load_queue={this.load_queue.bind(this)} close_audio_pip={this.close_audio_pip.bind(this)} open_full_player={this.open_full_player.bind(this)} when_next_track_reached={this.when_next_track_reached.bind(this)} when_time_updated={this.when_time_updated.bind(this)} 
        update_song_plays={this.update_song_plays.bind(this)} notify_account_to_make_purchase={this.notify_account_to_make_purchase.bind(this)} when_audio_play_paused_from_pip={this.when_audio_play_paused_from_pip.bind(this)} when_buffer_updated={this.when_buffer_updated.bind(this)}
        />
      </div>
    )
  }

  play_song(item, object, audio_items, is_page_my_collection_page, should_shuffle){
    this.prompt_top_notification(this.getLocale()['2976']/* 'Loading...' */, 5800)
    this.setState({is_audio_pip_showing: true})
    var queue = this.get_queue(item, object, audio_items, is_page_my_collection_page, should_shuffle)
    var unshuffled_queue = this.get_queue(item, object, audio_items, is_page_my_collection_page, false)
    this.setState({current_playing_song: queue[0], current_playing_time: 0.0})
    
    var me = this;
    setTimeout(function() {
      me.audio_pip_page.current?.set_data(queue, 0, unshuffled_queue, should_shuffle)
      me.setState({queue: queue, pos: 0, original_song_list: unshuffled_queue, is_shuffling: should_shuffle})
      me.load_queue(queue, 0)
    }, (1 * 500));
  }

  play_song_in_playlist(item, playlist, should_shuffle){
    this.prompt_top_notification(this.getLocale()['2976']/* 'loading... ' */, 5800)
    this.setState({is_audio_pip_showing: true})
    var queue = this.get_playlist_queue(item, playlist, should_shuffle)
    var unshuffled_queue = this.get_playlist_queue(item, playlist, false)
    this.setState({current_playing_song: queue[0], current_playing_time: 0.0})
    var me = this;
    setTimeout(function() {
      me.audio_pip_page.current?.set_data(queue, 0, unshuffled_queue, should_shuffle)
      me.setState({queue: queue, pos: 0, original_song_list: unshuffled_queue, is_shuffling: should_shuffle})
      me.load_queue(queue, 0)
    }, (1 * 500));
  }

  close_audio_pip(){
    this.setState({is_audio_pip_showing: false})
    this.when_playing(null, null)
  }

  get_playlist_queue(item, object, should_shuffle){
    var songs = []
    var song_ids = []

    songs.push(item)
    song_ids.push(item['song_id'])

    var objects_songs = object['songs']
    var should_start_adding = false
    objects_songs.forEach(song => {
      if(should_start_adding && !song_ids.includes(song['song_id'])){
        songs.push(song)
        song_ids.push(song['song_id'])
      }
      if(!should_start_adding && song['song_id'] == item['song_id']){
        should_start_adding = true;
      }
    });

    if(should_shuffle) shuffle(songs)

    return songs
  }

  get_queue(item, object, audio_items, is_page_my_collection_page, should_shuffle){
    var songs = []
    var song_ids = []
    item['album_art'] = object['ipfs'].album_art
    item['object'] = object
    songs.push(item)
    song_ids.push(item['song_id'])

    var objects_songs = object['ipfs'].songs
    var should_start_adding = false
    objects_songs.forEach(song => {
      if(should_start_adding && !song_ids.includes(song['song_id'])){
        song['album_art'] = object['ipfs'].album_art
        song['object'] = object
        if(is_page_my_collection_page == true){
          if(this.is_song_available_for_adding_to_playlist(song)){
            //if im playing from my collection, only play the songs ive bought
            songs.push(song)
            song_ids.push(song['song_id'])
          }
        }else{
          if(this.is_song_available_for_playing(song)){
            songs.push(song)
            song_ids.push(song['song_id'])
          }
        }
      }
      if(!should_start_adding && song['song_id'] == item['song_id']){
        should_start_adding = true;
      }
    });

    if(should_shuffle){
      shuffle(songs)
    }

    var index_of_obj = audio_items.indexOf(object)

    for(var i=(index_of_obj+1); i<audio_items.length; i++){
      if(!this.is_post_taken_down_for_sender(audio_items[i]) && this.is_same_audiopost_type(object, audio_items[i])){
        var extra_objects_songs = audio_items[i]['ipfs'].songs
        extra_objects_songs.forEach(song => {
          if(!song_ids.includes(song['song_id']) ){
            song['album_art'] = audio_items[i]['ipfs'].album_art
            song['object'] = audio_items[i]

            if(is_page_my_collection_page == true){
              if(this.is_song_available_for_adding_to_playlist(song)){
                //if im playing from my collection, only play the songs ive bought
                songs.push(song)
                song_ids.push(song['song_id'])
              }
            }else{
              if(this.is_song_available_for_playing(song)){
                songs.push(song)
                song_ids.push(song['song_id'])
              }
            }
          }
        });
      }
    }


    return songs
  }

  is_same_audiopost_type(audiopost, focused_object){
    var audiopost_listing_type = audiopost['ipfs'] == null ? 1 :this.get_selected_item2(audiopost['ipfs'].get_listing_type_tags_option, 'e')

    var focused_object_listing_type = focused_object['ipfs'] == null ? 1 :this.get_selected_item2(focused_object['ipfs'].get_listing_type_tags_option, 'e')

    return audiopost_listing_type == focused_object_listing_type
  }

  is_song_available_for_playing(song){
    var plays = this.state.song_plays[song['song_id']] == null ? 0 : this.state.song_plays[song['song_id']].length
    if(!this.is_song_available_for_adding_to_playlist(song) && plays >= song['songs_free_plays_count']){
        return false
    }
    return true
  }

  is_post_taken_down_for_sender(object){
    if(object['ipfs'].get_take_down_option == null) return false
    var selected_take_down_option = this.get_selected_item2(object['ipfs'].get_take_down_option, 'e')
    if(selected_take_down_option == 1) return true
  }

  get_selected_item2(object, option){
    return object[option][2][0]
  }

  load_queue = async (queue, pos) => {
    var songs_to_load = []
    var lyrics_to_load = []

    var songs_to_load2 = []
    var lyrics_to_load2 = []
    for(var i=pos; i<queue.length; i++){
      var song = queue[i]
      if(i == 0){
        songs_to_load.push(song['track'])
        if(song['subtitle_type'] == 'upload'){
          lyrics_to_load.push(song['lyrics'])
        }else{
          lyrics_to_load.push('')
        }
      }else{
        songs_to_load2.push(song['track'])
        if(song['subtitle_type'] == 'upload'){
          lyrics_to_load2.push(song['lyrics'])
        }else{
          lyrics_to_load2.push('')
        }
      }
    }

    for(var i=0; i<songs_to_load.length; i++){
      var song = songs_to_load[i]
      var lyrics = lyrics_to_load[i]

      var has_played = false;
      if(i == 0 && this.has_file_loaded(song) == true){
        //if its the song thats to be played
        await this.wait(750)
        this.audio_pip_page.current?.start_playing()
        this.setState({play_pause_state: 1/* playing */})
        has_played = true
      }

      if(lyrics != ''){
        await this.fetch_uploaded_data_from_ipfs([song, lyrics], false)
      }else{
        await this.fetch_uploaded_data_from_ipfs([song], false)
      }
      if(i == 0 && !has_played){
        //if its the song thats to be played
        await this.wait(750)
        this.audio_pip_page.current?.start_playing()
        this.setState({play_pause_state: 1/* playing */})
      }
    }

    var load_data = []
    for(var i=0; i<songs_to_load2.length; i++){
      var song = songs_to_load2[i]
      var lyrics = lyrics_to_load2[i]
      
      load_data.push(song)
      if(lyrics != ''){
        load_data.push(lyrics)
      }
    }

    await this.fetch_uploaded_data_from_ipfs(load_data, false)
  }

  has_file_loaded(audio_file){
    var ecid_obj = this.get_cid_split(audio_file)
    if(this.state.uploaded_data[ecid_obj['filetype']] == null) return false
    var data = this.state.uploaded_data[ecid_obj['filetype']][ecid_obj['full']]
    if(data == null) return false
    if(data['data'] == null) return false
    return true
  }

  open_full_player(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list, buffer){
    this.show_full_audio_bottomsheet(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list, buffer)
  }

  when_time_updated(time, current_song){
    var me = this;
    if(me.full_audio_page.current != null){
      me.full_audio_page.current.when_time_updated(time)
    }
    this.update_time_for_future_reference(time, current_song)
    this.when_playing(current_song, time)
  }

  when_buffer_updated(buffer){
    var me = this;
    if(me.full_audio_page.current != null){
      me.full_audio_page.current.when_buffer_updated(buffer)
    }
  }

  when_next_track_reached(){
    if(this.full_audio_page.current != null){
      this.full_audio_page.current?.when_next_track_reached()
    }
    if(this.state.pos != this.state.queue.length - 1){
      this.setState({pos: this.state.pos +1})
    }
  }

  when_playing(song, time){
    this.setState({current_playing_song: song, current_playing_time: time})
  }

  update_time_for_future_reference(time, current_song){
    var clone = structuredClone(this.state.audio_timestamp_data)
    clone[current_song['song_id']] = time
    this.setState({audio_timestamp_data: clone})
  }

  update_song_plays(song){
    var song_plays_clone = structuredClone(this.state.song_plays)
    if(song_plays_clone[song['song_id']] == null) song_plays_clone[song['song_id']] = []
    song_plays_clone[song['song_id']].push(new Date().getTime())
    
    if(!this.is_song_available_for_adding_to_playlist(song)){
      this.setState({should_update_song_plays:true})
    }
    this.setState({song_plays: song_plays_clone, storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 500));
  }

  notify_account_to_make_purchase(){
    this.prompt_top_notification(this.getLocale()['3022']/* 'Please purchase the song to play it.' */, 11000)
  }

  is_song_available_for_adding_to_playlist(song){
    var my_songs = this.state.my_tracks
    if(my_songs.includes(song['song_id'])){
      return true
    }
    return false
  }

  when_audio_play_paused_from_pip(state){
    this.setState({play_pause_state: state})
  }











  render_full_audio_bottomsheet(){
    if(this.state.full_audio_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.full_audio_bottomsheet} onClose={this.open_full_audio_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_full_audio_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_full_audio_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_full_audio_bottomsheet.bind(this)} open={this.state.full_audio_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_full_audio_element()}
      </SwipeableBottomSheet>
    )
  }

  render_full_audio_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FullAudioPage ref={this.full_audio_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} play_pause={this.play_pause.bind(this)} play_previous={this.play_previous.bind(this)} play_next={this.play_next.bind(this)} skip_to={this.skip_to.bind(this)} update_time={this.update_time.bind(this)} repeat_current_song={this.repeat_current_song.bind(this)} shuffle_songs_in_pip={this.shuffle_songs_in_pip.bind(this)} open_purchase_album_ui={this.show_buy_album_bottomsheet.bind(this)}
            
            />
      </div>
    )
  }

  open_full_audio_bottomsheet(){
    if(this.state.full_audio_bottomsheet == true){
      //closing
      this.full_audio_bottomsheet = this.full_audio_page.current?.state;

      this.setState({full_audio_bottomsheet: !this.state.full_audio_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({full_audio_bottomsheet2: false});
        me.audio_pip_page.current?.when_expanded_player_closed()
      }, (1 * 1000));
    }else{
      //opening
      this.setState({full_audio_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({full_audio_bottomsheet: !me.state.full_audio_bottomsheet});

          if(me.full_audio_bottomsheet != null){
            me.full_audio_page.current?.setState(me.full_audio_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_full_audio_bottomsheet(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list, buffer){
    this.open_full_audio_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.full_audio_page.current != null){
        me.full_audio_page.current.set_data(queue, pos, play_pause_state, value, is_repeating, is_shuffling, original_song_list, buffer)
      }
    }, (1 * 500));
  }

  play_pause(){
    this.audio_pip_page.current?.play_pause()
    if(this.state.play_pause_state == 0/* paused */){
      this.setState({play_pause_state: 1/* playing */})
    }else{
      this.setState({play_pause_state: 0/* paused */})
    }
  }

  play_previous(){
    this.audio_pip_page.current?.play_previous()
    if(this.state.pos != 0){
      this.setState({pos: this.state.pos -1})
    }
  }

  play_next(){
    this.audio_pip_page.current?.play_next()
    if(this.state.pos != this.state.queue.length - 1){
      this.setState({pos: this.state.pos +1})
    }
  }

  skip_to(index){
    this.audio_pip_page.current?.skip_to(index)
    this.setState({pos: index})
  }

  update_time(number){
    this.audio_pip_page.current?.handleNumber(number)
  }

  repeat_current_song(){
    this.audio_pip_page.current?.repeat_current_song()
  }

  shuffle_songs_in_pip(shuffle_list, its_pos){
    this.audio_pip_page.current?.shuffle_songs_in_pip(shuffle_list, its_pos)
    if(this.state.is_shuffling == true){
      this.setState({is_shuffling: !this.state.is_shuffling, queue: shuffle_list, pos:its_pos})
    }else{
      this.setState({is_shuffling: !this.state.is_shuffling, queue: shuffle_list})
    }
  }




  play_pause_from_stack(){
    this.audio_pip_page.current?.play_pause()
    if(this.state.play_pause_state == 0/* paused */){
      this.setState({play_pause_state: 1/* playing */})
    }else{
      this.setState({play_pause_state: 0/* paused */})
    }
  }

  open_full_screen_viewer(){
    this.audio_pip_page.current?.expand_player()
  }














  render_add_to_playlist_bottomsheet(){
    if(this.state.add_to_playlist_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.add_to_playlist_bottomsheet} onClose={this.open_add_to_playlist_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_add_to_playlist_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_add_to_playlist_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_add_to_playlist_bottomsheet.bind(this)} open={this.state.add_to_playlist_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_add_to_playlist_element()}
      </SwipeableBottomSheet>
    )
  }

  render_add_to_playlist_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <AddToPlaylist ref={this.add_to_playlist_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)}
            create_new_playlist_with_song={this.create_new_playlist_with_song.bind(this)} add_song_to_existing_playlist={this.add_song_to_existing_playlist.bind(this)}
            />
      </div>
    )
  }

  open_add_to_playlist_bottomsheet(){
    if(this.state.add_to_playlist_bottomsheet == true){
      //closing
      this.add_to_playlist_bottomsheet = this.add_to_playlist_page.current?.state;

      this.setState({add_to_playlist_bottomsheet: !this.state.add_to_playlist_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({add_to_playlist_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({add_to_playlist_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({add_to_playlist_bottomsheet: !me.state.add_to_playlist_bottomsheet});

          if(me.add_to_playlist_bottomsheet != null){
            me.add_to_playlist_page.current?.setState(me.add_to_playlist_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_add_to_playlist_bottomsheet(song){
    this.open_add_to_playlist_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.add_to_playlist_page.current != null){
        me.add_to_playlist_page.current.set_data(song)
      }
    }, (1 * 500));
  }

  create_new_playlist_with_song(playlist_with_song){
    var me = this;
    setTimeout(function() {
      me.open_add_to_playlist_bottomsheet()
    }, (1 * 500));
    var clone = this.state.my_playlists.slice()
    clone.push(playlist_with_song)
    this.setState({my_playlists: clone, should_update_playlists_in_E5: true})

    setTimeout(function() {
      me.set_cookies_after_stack_action(me.state.stack_items)
    }, (1 * 500));
  }

  add_song_to_existing_playlist(playlist, song, index){
    var me = this;
    setTimeout(function() {
      me.open_add_to_playlist_bottomsheet()
    }, (1 * 500));
    var clone = this.state.my_playlists.slice()
    clone[index]['songs'].push(song)
    this.setState({my_playlists: clone, should_update_playlists_in_E5: true})
    
    setTimeout(function() {
      me.set_cookies_after_stack_action(me.state.stack_items)
    }, (1 * 500));
  }


















  render_full_video_bottomsheet(){
    if(this.state.full_video_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.full_video_bottomsheet} onClose={this.open_full_video_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_full_video_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_full_video_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_full_video_bottomsheet.bind(this)} open={this.state.full_video_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_full_video_element()}
      </SwipeableBottomSheet>
    )
  }

  render_full_video_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
            <FullVideoPage ref={this.full_video_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_pdf_file_opened={this.when_pdf_file_opened.bind(this)} load_video_queue={this.load_video_queue.bind(this)} when_picture_in_picture_exited={this.when_picture_in_picture_exited.bind(this)} show_images={this.show_images.bind(this)}
            update_video_time_for_future_reference={this.update_video_time_for_future_reference.bind(this)} add_video_message_to_stack_object={this.add_video_message_to_stack_object.bind(this)} when_e5_link_tapped={this.when_e5_link_tapped.bind(this)} delete_message_from_stack={this.delete_message_from_stack.bind(this)} load_video_messages={this.load_video_messages.bind(this)} show_add_comment_bottomsheet={this.show_add_comment_bottomsheet.bind(this)}
            />
      </div>
    )
  }

  open_full_video_bottomsheet(){
    if(this.state.full_video_bottomsheet == true){
      //closing
      if(this.is_picture_in_pictiure_showing()){
        //just hide the page
        this.setState({full_video_bottomsheet: !this.state.full_video_bottomsheet});
      }else{
        this.full_video_bottomsheet = this.full_video_page.current?.state;
        this.setState({full_video_bottomsheet: !this.state.full_video_bottomsheet});
        var me = this;
        setTimeout(function() {
          me.setState({full_video_bottomsheet2: false});
          me.video_pip_page.current?.when_expanded_player_closed()
        }, (1 * 1000));
      }
      
    }else{
      //opening
      this.setState({full_video_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({full_video_bottomsheet: !me.state.full_video_bottomsheet});

          if(me.full_video_bottomsheet != null){
            me.full_video_page.current?.setState(me.full_video_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_full_video_bottomsheet(queue, object){
    this.open_full_video_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.full_video_page.current != null){
        me.full_video_page.current.set_data(queue, object, 0)
      }
    }, (1 * 500));
  }

  play_video(video, object){
    var queue = this.get_video_queue(video, object)
    this.show_full_video_bottomsheet(queue, object)
    this.load_video_queue(queue, 0)
  }

  load_video_queue = async (queue, pos) => {
    var videos_to_load = []
    var video_subtitles_to_load = []
    for(var i=pos; i<queue.length; i++){
      var video = queue[i]
      if(videos_to_load.length < 1){
        videos_to_load.push(video['video'])
        var subtitles = video['subtitles'] == null ? [] : video['subtitles']
        subtitles.forEach(subtitle => {
          if(subtitle['subtitle_type'] == 'upload'){
            video_subtitles_to_load.push(subtitle['subtitle_file'])
          }
        });
      }
    }

    for(var i=0; i<videos_to_load.length; i++){
      var video = videos_to_load[i]
      if(video_subtitles_to_load.length != 0){
        var every_item_to_load = [video].concat(video_subtitles_to_load)
        await this.fetch_uploaded_data_from_ipfs(every_item_to_load, false)
      }else{
        await this.fetch_uploaded_data_from_ipfs([video], false)
      }
      
      if(i == 0){
        //if its the video thats to be played
        await this.wait(750)
        this.full_video_page.current?.start_playing()
      }
    }
  }

  get_video_queue(item, object){
    var videos = []
    var video_ids = []
    item['album_art'] = object['ipfs'].album_art
    item['object'] = object
    videos.push(item)
    video_ids.push(item['video_id'])

    var objects_videos = object['ipfs'].videos
    var should_start_adding = false
    objects_videos.forEach(video => {
      if(should_start_adding && !video_ids.includes(video['video_id'])){
        video['album_art'] = object['ipfs'].album_art
        video['object'] = object
        videos.push(video)
        video_ids.push(video['video_id'])
      }
      if(!should_start_adding && video['video_id'] == item['video_id']){
        should_start_adding = true;
      }
    });

    return videos
  }

  is_picture_in_pictiure_showing(){
    return document.pictureInPictureElement != null
  }

  when_picture_in_picture_exited(){
    this.setState({full_video_bottomsheet: true});
  }

  update_video_time_for_future_reference(time, current_video){
    var clone = structuredClone(this.state.video_timestamp_data)
    clone[current_video['video_id']] = time
    this.setState({video_timestamp_data: clone})
  }
















  render_dialer_bottomsheet(){
    if(this.state.dialer_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.dialer_bottomsheet} onClose={this.open_dialer_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                        {this.render_dialer_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_dialer_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet overflowHeight={0} marginTop={0} onChange={this.open_dialer_bottomsheet.bind(this)} open={this.state.dialer_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_dialer_element()}
      </SwipeableBottomSheet>
    )
  }

  render_dialer_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <DialerPage ref={this.dialer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} add_dialer_admin_config_update_object_to_stack={this.add_dialer_admin_config_update_object_to_stack.bind(this)} test_entered_link_data={this.test_entered_link_data.bind(this)} test_and_return_language_override_data={this.test_and_return_language_override_data.bind(this)} is_valid_ether_address={this.is_valid_ether_address.bind(this)}
        />
      </div>
    )
  }

  open_dialer_bottomsheet(){
    if(this.state.dialer_bottomsheet == true){
      //closing
      this.dialer_bottomsheet = this.dialer_page.current?.state;
      this.setState({dialer_bottomsheet: !this.state.dialer_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({dialer_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({dialer_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({dialer_bottomsheet: !me.state.dialer_bottomsheet});

          if(me.dialer_bottomsheet != null){
            me.dialer_page.current?.setState(me.dialer_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_dialer_bottomsheet(){
    const my_id = this.state.user_account_id[root_e5]
    if(my_id != root_account || this.state.selected_e5 != root_e5){
      return;
    }
    this.open_dialer_bottomsheet()
    var me = this;

    var data = {
      'country_data':this.state.country_data, 
      'allowed_countries':this.state.allowed_countries, 
      'beacon_chain_url':this.state.beacon_chain_url, 
      'e5s':this.state.e5s, 
      'ether_data':this.state.ether_data, 
      'all_locales':this.state.all_locales, 
      'dialer_addresses':this.state.dialer_addresses, 
      'theme_images':this.state.theme_images, 
      'recommended_videopost_threshold':this.state.recommended_videopost_threshold, 
      'recommended_video_threshold':this.state.recommended_video_threshold, 
      'recommended_audiopost_threshold':this.state.recommended_audiopost_threshold, 
      'recommended_audio_threshold':this.state.recommended_audio_threshold, 
      'country_moderators':this.state.country_moderators,
      'upload_object_size_limit':this.state.upload_object_size_limit
    }
    setTimeout(function() {
      if(me.dialer_page.current != null){
        me.dialer_page.current.set_data(data)
      }
    }, (1 * 500));
  }

  add_dialer_admin_config_update_object_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }
    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  test_entered_link_data = async (request, language_name) => {
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('something went wrong:',response)
        this.prompt_top_notification('That link is broken', 4000)
        return
      }
      var data = await response.text();
      var json_obj = JSON.parse(data);
      var language_code = this.find_language_id_from_name(language_name)
      if(json_obj['0'] == language_code){
        this.setState({loaded_language_object: json_obj})
        this.prompt_top_notification('language loaded is valid', 4000)
      }else{
        this.prompt_top_notification('The provided language code and the language listed in the link dont match', 9000)
      }
    }
    catch(e){
      console.log('something went wrong:', e)
      this.prompt_top_notification('language loaded is valid', 4000)
    }
  }

  find_language_id_from_name(name){
    var data = this.state.all_locales
    for (const language_code in data) {
        if (data.hasOwnProperty(language_code) && data[language_code]['name'] == name) {
          return language_code
        }
    }
  }

  test_and_return_language_override_data = async (request) => {
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('something went wrong:',response)
        this.prompt_top_notification('That link is broken', 4000)
        return
      }
      var data = await response.text();
      var json_obj = JSON.parse(data);
      return json_obj      
    }
    catch(e){
      console.log('something went wrong:', e)
       this.prompt_top_notification('the override file is valid', 4000)
    }
  }

  is_valid_ether_address = (adr) => {
    try {
      const web3 = new Web3()
      web3.utils.toChecksumAddress(adr)
      return true
    } 
    catch (e) {
      return false
    }
  }















  render_view_notification_log_bottomsheet(){
    if(this.state.view_notification_log_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_notification_log_bottomsheet} onClose={this.open_view_notification_log_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_view_notification_log_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_notification_log_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_notification_log_bottomsheet.bind(this)} open={this.state.view_notification_log_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_notification_log_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_notification_log_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <ViewNotificationLogPage ref={this.view_notification_log_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} when_event_clicked={this.when_event_clicked.bind(this)}
        
        />
      </div>
    )
  }

  open_view_notification_log_bottomsheet(){
    if(this.state.view_notification_log_bottomsheet == true){
      //closing
      this.view_notification_log_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_notification_log_bottomsheet: !this.state.view_notification_log_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_notification_log_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_notification_log_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_notification_log_bottomsheet: !me.state.view_notification_log_bottomsheet});

          if(me.view_notification_log_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_notification_log_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_notification_log_bottomsheet(item){
    this.open_view_notification_log_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_notification_log_page.current != null){
        me.view_notification_log_page.current.set_data(item)
      }
    }, (1 * 500));
  }

  when_event_clicked(event){
    var event_type = event['event_type']
    var events = [event]
    var obj = event['view']
    obj['events'] = events

    if(event_type == 'mail'){
      this.load_specific_incoming_message_mail_item(events)
    }
    else if(event_type == 'message'){
      this.load_specific_incoming_message_mail_item(events)
    }
    else if(event_type == 'proposal'){
      this.load_specific_notification_proposals(events)
    }
    else if(event_type == 'job_application'){
      this.load_specific_job_application_jobs(events)
    }
    else if(event_type == 'job_request'){
      this.load_specific_contractor_objects(events)
    }
    else if(event_type == 'job_application_response'){
      this.load_specific_job_application_jobs(events)
    }
    else if(event_type == 'job_request_response'){
      this.load_specific_contractor_objects(events)
    }
    else if(event_type == 'contract'){
      this.load_specific_contract_objects(events)
    }
    else if(event_type == 'bag'){
      this.load_specific_bag_items(events)
    }
    else if(event_type == 'bag_application_response'){
      this.load_specific_bag_items(events)
    }
    else if(event_type == 'storefront'){
      this.load_specific_storefront_items(events)
    }
    else if(event_type == 'comment'){
      const id_type = obj['id_type']
      const event_object_id = obj['p']
      const id_types_array_object = {}
      id_types_array_object[id_type] = [event_object_id]
      this.start_loading_objects_in_background(id_types_array_object)
    }

    var id = obj['notification_id']
    this.show_dialog_bottomsheet(obj, id)
  }













  render_view_contextual_transfer_bottomsheet(){
    if(this.state.view_contextual_transfer_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_contextual_transfer_bottomsheet} onClose={this.open_view_contextual_transfer_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_view_contextual_transfer_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_contextual_transfer_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_contextual_transfer_bottomsheet.bind(this)} open={this.state.view_contextual_transfer_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_contextual_transfer_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_contextual_transfer_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <ContextualTransferPage ref={this.view_contextual_transfer_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_itransfer_search={this.perform_itransfer_search.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_itransfer_transaction_to_stack={this.add_itransfer_transaction_to_stack.bind(this)} add_bill_transaction_to_stack={this.add_bill_transaction_to_stack.bind(this)} show_pick_file_bottomsheet={this.show_pick_file_bottomsheet.bind(this)}

        />
      </div>
    )
  }

  open_view_contextual_transfer_bottomsheet(){
    if(this.state.view_contextual_transfer_bottomsheet == true){
      //closing
      this.view_contextual_transfer_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_contextual_transfer_bottomsheet: !this.state.view_contextual_transfer_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_contextual_transfer_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_contextual_transfer_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_contextual_transfer_bottomsheet: !me.state.view_contextual_transfer_bottomsheet});

          if(me.view_contextual_transfer_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_contextual_transfer_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_contextual_transfer_bottomsheet(item){
    this.open_view_contextual_transfer_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_contextual_transfer_page.current != null){
        me.view_contextual_transfer_page.current.set_data(item)
      }
    }, (1 * 500));
  }

  perform_itransfer_search = async (identifier, account, recipient, e5, silently) => {
    const focused_e5 = e5
    const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[focused_e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
    const used_identifier = this.hash_data(identifier)
    var itransfer_event_params = []
    var transfer_event_params = []
    if(account != ''){
      itransfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e5', focused_e5, {p4/* metadata */: used_identifier,p2/* awward_receiver */: recipient, p1/* awward_sender */:account, p3/* awward_context */: 1/* iTransfer */})
      transfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e1', focused_e5, {p3/* receiver */: recipient, p2/* sender */:account})
    }else{
      itransfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e5', focused_e5, {p4/* metadata */: used_identifier,p2/* awward_receiver */: recipient, p3/* awward_context */: 1/* iTransfer */})
      transfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e1', focused_e5, {p3/* receiver */: recipient})
    }

    var grouped_transfers_by_block = {}
    transfer_event_params.forEach(event => {
      if(grouped_transfers_by_block[event.returnValues.p6/* block_number */] == null){
        grouped_transfers_by_block[event.returnValues.p6/* block_number */] = []
      }
      grouped_transfers_by_block[event.returnValues.p6/* block_number */].push(event)
    });

    var iTransfer_objects = {}
    var found = false
    itransfer_event_params.forEach(event => {
      var block = event.returnValues.p6/* block_number */
      var transfers_for_block = grouped_transfers_by_block[block]
      if(iTransfer_objects[block] == null){
        iTransfer_objects[block] = {}
      }
      transfers_for_block.forEach(transfer => {
        var transfer_receiver = transfer.returnValues.p3/* receiver */
        var transfer_sender = transfer.returnValues.p2/* sender */
        if(transfer_receiver == recipient){
          if(iTransfer_objects[block][transfer_sender] == null){
            iTransfer_objects[block][transfer_sender] = []
          }
          iTransfer_objects[block][transfer_sender].push(transfer)
          found = true;
        }
      });
    });

    const id = identifier + account + recipient + focused_e5
    var clone = structuredClone(this.state.searched_itransfer_results)
    clone[id] = iTransfer_objects
    this.setState({searched_itransfer_results: clone})

    if(found == false && silently == false){
      await this.wait(3000)
      this.prompt_top_notification(this.getLocale()['3068w']/* Nothing has been found matching that searched identifier. */, 7000)
    }
  }

  add_itransfer_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  add_bill_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }














  render_view_vote_poll_bottomsheet(){
    if(this.state.view_vote_poll_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_vote_poll_bottomsheet} onClose={this.open_view_vote_poll_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_view_vote_poll_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_vote_poll_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_vote_poll_bottomsheet.bind(this)} open={this.state.view_vote_poll_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_vote_poll_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_vote_poll_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <VotePollPage ref={this.view_vote_poll_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_itransfer_search={this.perform_itransfer_search.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_poll_vote_transaction_to_stack={this.add_poll_vote_transaction_to_stack.bind(this)} 
        />
      </div>
    )
  }

  open_view_vote_poll_bottomsheet(){
    if(this.state.view_vote_poll_bottomsheet == true){
      //closing
      this.view_vote_poll_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_vote_poll_bottomsheet: !this.state.view_vote_poll_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_vote_poll_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_vote_poll_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_vote_poll_bottomsheet: !me.state.view_vote_poll_bottomsheet});

          if(me.view_vote_poll_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_vote_poll_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_vote_poll_bottomsheet(item){
    this.open_view_vote_poll_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_vote_poll_page.current != null){
        me.view_vote_poll_page.current.set_data(item)
      }
    }, (1 * 500));
  }

  add_poll_vote_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }














  render_view_calculate_poll_result_bottomsheet(){
    if(this.state.view_calculate_poll_result_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_calculate_poll_result_bottomsheet} onClose={this.open_view_calculate_poll_result_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_view_calculate_poll_result_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_calculate_poll_result_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_calculate_poll_result_bottomsheet.bind(this)} open={this.state.view_calculate_poll_result_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_calculate_poll_result_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_calculate_poll_result_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <CalculatePollResultPage ref={this.view_calculate_poll_result_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_itransfer_search={this.perform_itransfer_search.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_poll_result_transaction_to_stack={this.add_poll_result_transaction_to_stack.bind(this)} process_csv_file_data={this.process_csv_file_data.bind(this)} process_json_file_object={this.process_json_file_object.bind(this)} load_nitro_node_details={this.load_nitro_node_details.bind(this)} count_poll_votes_and_post_results={this.count_poll_votes_and_post_results.bind(this)}
        />
      </div>
    )
  }

  open_view_calculate_poll_result_bottomsheet(){
    if(this.state.view_calculate_poll_result_bottomsheet == true){
      //closing
      this.view_calculate_poll_result_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_calculate_poll_result_bottomsheet: !this.state.view_calculate_poll_result_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_calculate_poll_result_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_calculate_poll_result_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_calculate_poll_result_bottomsheet: !me.state.view_calculate_poll_result_bottomsheet});

          if(me.view_calculate_poll_result_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_calculate_poll_result_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_calculate_poll_result_bottomsheet(item){
    this.open_view_calculate_poll_result_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_calculate_poll_result_page.current != null){
        me.view_calculate_poll_result_page.current.set_data(item)
      }
    }, (1 * 500));
  }

  add_poll_result_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  count_poll_votes_and_post_results = async (static_poll_data, poll_id, poll_e5, file_objects, nitro_objects, poll_obj) => {
    // const web3 = new Web3(this.get_web3_url_from_e5(poll_e5));
    // const E52contractArtifact = require('./contract_abis/E52.json');
    // const E52_address = this.state.addresses[e5][1];
    // const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
    // const test_event_thing = (await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: poll_id, p3/* context */:42}))
    // console.log('count_poll_votes', test_event_thing[0].returnValues.p4)
    // var data_hash = this.hash_data()


    await this.wait(this.state.ipfs_delay)
    var query_time = structuredClone(this.state.count_poll_times)
    query_time[poll_obj['e5_id']] = Date.now()
    this.setState({count_poll_times: query_time})

    const arg_obj = {
      static_poll_data: static_poll_data,
      poll_id: parseInt(poll_id),
      file_objects: file_objects,
      poll_e5: poll_e5,
    }

    // console.log('vote_counter', arg_obj)

    const body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    nitro_objects.forEach(nitro_object => {
      var node_url = nitro_object['ipfs'].node_url
      this.get_vote_count_from_nitro(node_url, body, nitro_object, poll_obj)
    });
  }

  get_vote_count_from_nitro = async (node_url, body, nitro_object, poll_obj) => {
    var request = `${node_url}/count_votes`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('vote_counter', obj)
      
      if(obj.success == true){
        var clone = structuredClone(this.state.poll_consensus_results)
        obj.results['nitro_id'] = nitro_object['e5_id']
        obj.results['success'] = true
        if(clone[poll_obj['e5_id']] == null){
          clone[poll_obj['e5_id']] = {}
        }
        clone[poll_obj['e5_id']][nitro_object['e5_id']] = obj.results
        this.setState({poll_consensus_results: clone})
      }
    }
    catch(e){
      console.log('vote_counter', e)
      // this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }













  render_view_stage_creator_payout_result_bottomsheet(){
    if(this.state.view_stage_creator_payout_result_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_stage_creator_payout_result_bottomsheet} onClose={this.open_view_stage_creator_payout_result_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_view_stage_creator_payout_result_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_stage_creator_payout_result_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_stage_creator_payout_result_bottomsheet.bind(this)} open={this.state.view_stage_creator_payout_result_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_stage_creator_payout_result_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_stage_creator_payout_result_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <StageCreatorPayoutPage ref={this.view_stage_creator_payout_result_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_itransfer_search={this.perform_itransfer_search.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_staging_result_transaction_to_stack={this.add_staging_result_transaction_to_stack.bind(this)} calcualte_creator_payouts={this.calcualte_creator_payouts.bind(this)}
        />
      </div>
    )
  }

  open_view_stage_creator_payout_result_bottomsheet(){
    if(this.state.view_stage_creator_payout_result_bottomsheet == true){
      //closing
      this.view_stage_creator_payout_result_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_stage_creator_payout_result_bottomsheet: !this.state.view_stage_creator_payout_result_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_stage_creator_payout_result_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_stage_creator_payout_result_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_stage_creator_payout_result_bottomsheet: !me.state.view_stage_creator_payout_result_bottomsheet});

          if(me.view_stage_creator_payout_result_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_stage_creator_payout_result_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_stage_creator_payout_result_bottomsheet(item){
    this.open_view_stage_creator_payout_result_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_stage_creator_payout_result_page.current != null){
        me.view_stage_creator_payout_result_page.current.set_data(item)
      }
    }, (1 * 500));
  }

  add_staging_result_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }

  calcualte_creator_payouts = async (channel_object, file_view_data, filter_value) => {
    var now = Date.now()
    var last_run_time = this.state.creator_payout_calculation_times[channel_object['e5_id']]
    if(last_run_time != null && (now - last_run_time) > this.state.calculate_creator_payout_time_limit){
      this.prompt_top_notification(this.getLocale()['3075i']/* 'Wait a bit.' */, 3200)
      return;
    }
    
    var query_time = structuredClone(this.state.creator_payout_calculation_times)
    query_time[channel_object['e5_id']] = now
    this.setState({creator_payout_calculation_times: query_time})

    const subscription_mapping = {}
    var items = this.state.channel_object['ipfs'].selected_creator_group_subscriptions
    items.forEach(item => {
        var e5 = 'E'+item.split('E')[1]
        var id = item.split('E')[0]
        var subscription_item = this.state.created_subscription_object_mapping[e5][id]
        if(subscription_item != null){
          subscription_mapping[item] = subscription_item
        }
    });

    const arg_obj = {
      subscription_objects: subscription_mapping,
      steps: 60*60,
      filter_value: filter_value,
      file_view_data:file_view_data,
    }

    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }

    const body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${beacon_node}/creator_group_payouts`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('calculate_payouts', obj)
      
      if(obj.success == true){
        var clone = structuredClone(this.state.stage_creator_payout_results)
        clone[channel_object['e5_id']] = obj.data
        this.setState({stage_creator_payout_results: clone})
      }else{
        this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
      }
    }
    catch(e){
      console.log('calculate_payouts', e)
      this.prompt_top_notification(this.getLocale()['3054k']/* 'Something went wrong with the request.' */, 6200)
    }
  }














  render_view_bid_in_auction_bottomsheet(){
    if(this.state.view_bid_in_auction_bottomsheet2 != true) return;
    var os = getOS()
    if(os == 'iOS'){
        return(
            <Sheet isOpen={this.state.view_bid_in_auction_bottomsheet} onClose={this.open_view_bid_in_auction_bottomsheet.bind(this)} detent="content-height" disableDrag={true} disableScrollLocking={true}>
                <Sheet.Container>
                    <Sheet.Content>
                      {this.render_view_bid_in_auction_element()}
                    </Sheet.Content>
                    <ToastContainer limit={3} containerId="id2"/>
                </Sheet.Container>
                <Sheet.Backdrop onTap={()=> this.open_view_bid_in_auction_bottomsheet()}/>
            </Sheet>
        )
    }
    return(
      <SwipeableBottomSheet  overflowHeight={0} marginTop={0} onChange={this.open_view_bid_in_auction_bottomsheet.bind(this)} open={this.state.view_bid_in_auction_bottomsheet} style={{'z-index':'5'}} bodyStyle={{'background-color': 'transparent'}} overlayStyle={{'background-color': this.state.theme['send_receive_ether_overlay_background'],'box-shadow': '0px 0px 0px 0px '+this.state.theme['send_receive_ether_overlay_shadow']}}>
          {this.render_view_bid_in_auction_element()}
      </SwipeableBottomSheet>
    )
  }

  render_view_bid_in_auction_element(){
    var background_color = this.state.theme['send_receive_ether_background_color'];
    var size = this.getScreenSize();
    return(
      <div style={{ height: this.state.height-90, 'background-color': background_color, 'border-style': 'solid', 'border-color': this.state.theme['send_receive_ether_overlay_background'], 'border-radius': '1px 1px 0px 0px', 'border-width': '0px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['send_receive_ether_overlay_shadow'],'margin': '0px 0px 0px 0px', 'overflow-y':'auto'}}>
        <BidInAuctionPage ref={this.view_bid_in_auction_page} app_state={this.state} view_number={this.view_number.bind(this)} size={size} height={this.state.height} theme={this.state.theme} notify={this.prompt_top_notification.bind(this)} perform_itransfer_search={this.perform_itransfer_search.bind(this)} calculate_actual_balance={this.calculate_actual_balance.bind(this)} add_bid_in_auction_transaction_to_stack={this.add_bid_in_auction_transaction_to_stack.bind(this)}
        />
      </div>
    )
  }

  open_view_bid_in_auction_bottomsheet(){
    if(this.state.view_bid_in_auction_bottomsheet == true){
      //closing
      this.view_bid_in_auction_bottomsheet = this.view_transaction_page.current?.state;

      this.setState({view_bid_in_auction_bottomsheet: !this.state.view_bid_in_auction_bottomsheet});
      var me = this;
      setTimeout(function() {
        me.setState({view_bid_in_auction_bottomsheet2: false});
      }, (1 * 1000));
    }else{
      //opening
      this.setState({view_bid_in_auction_bottomsheet2: true});
      var me = this;
      setTimeout(function() {
        if(me.state != null){
          me.setState({view_bid_in_auction_bottomsheet: !me.state.view_bid_in_auction_bottomsheet});

          if(me.view_bid_in_auction_bottomsheet != null){
            me.view_transaction_page.current?.setState(me.view_bid_in_auction_bottomsheet)
          }
        }
      }, (1 * 200));
    }
  }

  show_view_bid_in_auction_bottomsheet(item){
    this.open_view_bid_in_auction_bottomsheet()
    var me = this;
    setTimeout(function() {
      if(me.view_bid_in_auction_page.current != null){
        me.view_bid_in_auction_page.current.set_data(item)
      }
    }, (1 * 500));
  }

  add_bid_in_auction_transaction_to_stack(state_obj){
    var stack_clone = this.state.stack_items.slice()      
    var edit_id = -1
    for(var i=0; i<stack_clone.length; i++){
      if(stack_clone[i].id == state_obj.id){
        edit_id = i
      }
    }
    if(edit_id != -1){
      stack_clone[edit_id] = state_obj
    }else{
      stack_clone.push(state_obj)
    }

    this.setState({stack_items: stack_clone})
    this.set_cookies_after_stack_action(stack_clone)
  }










































  /* prompts an alert notification from the top */
  prompt_top_notification(data, duration, onClickData){
      var os = getOS()
      var id = "id"
      if(os == 'iOS' && !this.state.syncronizing_page_bottomsheet) id = "id2";
      // console.log('top_notification', 'showing', data, 'on id:', id)
      var time = duration == null ? 1000: duration;
      // data = 'toast item blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah '
      // time = 1500000
      if(toast.isActive(data)) return;
      toast(this.render_toast_item(data, onClickData), {
          position: "top-center",
          autoClose: time,
          closeButton: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          transition: Slide,
          containerId:id,
          toastId:data,
          hideProgressBar: true,
          style:{'background-color':'transparent','box-shadow': '0px 0px 0px 0px #CECDCD', width:'auto'}
      });
  }


  /* renders the toast item used */
  render_toast_item(message, onClickData){
    var width = this.state.width
    if(width > 330){
      width = 330
    }
    return (
      <div style={{'display': 'flex', 'align-items':'center','justify-content':'center',}} onClick={() => this.handle_onclick_data_if_any(onClickData)}>
          <div style={{'background-color':this.state.theme['toast_background_color'], 'border-radius': '20px', 'box-shadow': '0px 0px 2px 1px '+this.state.theme['card_shadow_color'],'padding': '3px 3px 3px 3px','display': 'flex','flex-direction': 'row', width: width-40}}>
              <div style={{'padding': '6px 0px 5px 5px','display': 'flex','align-items': 'center', height:35}}>
                  <img src={this.state.theme['alert_icon']} style={{height:25,width:'auto','scale': '0.9'}} />
              </div>
              <div style={{'padding': '0px 0px 0px 8px', 'margin':'1px 0px 0px 0px','display': 'flex','align-items': 'center'}}>
                  <p style={{'font-size': '13px', 'color':this.state.theme['primary_text_color'],'text-shadow': '-0px -0px 0px #A1A1A1', 'margin':'0px', 'font-family': this.state.font}}>{message}</p>
              </div>
          </div>
      </div>
    );
  }

  handle_onclick_data_if_any(onClickData){
    if(onClickData != null){
      var id = onClickData['notification_id']
      this.show_dialog_bottomsheet(onClickData, id)
    }
  }























  load_e5_data = async () => {
    this.setState({should_keep_synchronizing_bottomsheet_open: true});
    // var obj = {name:'hello world'}
    // var cid = await this.store_data_in_web3(JSON.stringify(obj))
    // console.log('---------------------load_e5_data-------------------------------')
    // console.log(cid)
    // var data = await this.fetch_objects_data_from_nft_storage(cid)
    // console.log(data)
    // const node = await IPFS.create()
    // var data = node.cat(cid)
    // console.log(data)

    await this.load_root_config()
    await this.wait(500)
    if(this.is_allowed_in_e5()){
      this.load_cities_data()
      this.load_coin_and_ether_coin_prices()
      if(this.state.manual_beacon_node_disabled == 'e'){
        await this.check_if_beacon_node_is_online()
      }
      if(this.state.accounts[this.state.selected_e5] != null){
        var me = this
        setTimeout(function() {
            me.start_get_accounts_data(true, false)
        }, (3 * 1000));
      }else{
        this.when_wallet_data_updated(['(32)'], 0, '', true,) 
      }
    }else{
      this.prompt_top_notification(me.getLocale()['2738']/* 'Not available in your region yet.' */, 100000)
    }
  }

  

  inc_synch_progress(){
    const steps = this.state.sync_steps;
    const incr_count = 100/steps;
    if(this.state.syncronizing_progress+incr_count >= 99 && this.state.should_keep_synchronizing_bottomsheet_open == true){
      this.prompt_top_notification(this.getLocale()['2727']/* 'syncronized.' */, 1000);
      this.setState({should_keep_synchronizing_bottomsheet_open: false})
    }
    this.setState({syncronizing_progress:this.state.syncronizing_progress+incr_count})

  }







  when_wallet_data_updated2(added_tags, set_salt, selected_item, is_synching){
    var seed = added_tags.join(' | ') + set_salt + selected_item;/* try not to change this, otherwise peopels seeds will generate different wallet addresses */
    this.generate_one_account_for_all_e5s(seed)
    this.generate_account_data_for_each_coin(seed)
    this.setState({
      account_balance: {}, 
      account_seed: seed, 
      mail_message_events:{}, 
      all_mail:{}, 
      account_balance:{}, 
      contacts:{}, 
      blocked_accounts:{}, 
      job_section_tags: [], 
      explore_section_tags: [], 
      uploaded_data_cids:[], 
      my_albums: [], 
      my_tracks: [], 
      my_playlists:[], 
      song_plays:{}, 
      my_videoposts: [], 
      my_videos: [], 
      followed_accounts: primary_following, 
      posts_blocked_by_me:[], 
      posts_blocked_by_my_following:[], 
      censored_keyword_phrases:[], 
      censored_keywords_by_my_following:[], 
      posts_reposted_by_me:{'audio':[], 'video':[], 'post':[]}, 
      posts_reposted_by_my_following:{'audio':[], 'video':[], 'post':[]},
      my_channels:[],
      my_polls:[],
      my_objects:[],
      notification_object:{},
      latest_file_renewal_time:{},
    });

    this.get_blocked_accounts_data_e5_timestamp = 0
    this.get_section_tags_data_e5_timestamp = 0
    this.my_contacts_timestamp = 0
    this.my_collection_timestamp = 0
    this.my_followed_accounts_collection_timestamp = 0
    this.my_loaded_plays_collection_timestamp = 0
    this.my_playlists_timestamp = 0
    this.my_channel_timestamp = 0
    this.my_poll_timestamp = 0
    this.my_object_timestamp = 0
    Object.keys(this.alias_data).forEach(key => delete this.alias_data[key]);

    if(this.state.stacked_ids != null && this.state.has_wallet_been_set == false && this.state.accounts[this.state.selected_e5] != this.state.stack_address && this.state.stacked_ids.length > 0){
      //sender has set a different address from the previously used one, so delete the transactions they created with the other address
      var stack = this.state.stack_items.slice()
      var new_stack = []
      for(var i=0; i<stack.length; i++){
        if(!this.state.stacked_ids.includes(stack[i].id)){
          new_stack.push(stack[i])
        }
      }
      this.setState({stack_items: new_stack, stack_address: null, stacked_ids: null})
      this.set_cookies_after_stack_action(new_stack)
    }
    
    var me = this
    setTimeout(function() {
        me.start_get_accounts_data(is_synching, false)
    }, (3 * 10));

    this.setState({has_wallet_been_set: true})

    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  generate_one_account_for_all_e5s(seed){
    var _accounts = {}
    var e5 = this.state.e5s['data'][0]
    var web3_url = this.get_web3_url_from_e5(e5)
    var account = this.get_account_from_seed(seed, web3_url)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var focused_e5 = this.state.e5s['data'][i];
      _accounts[focused_e5] = {privateKey:account.privateKey, address: account.address}
    }
    // console.log(_accounts)
    this.setState({accounts: _accounts})
  }


  when_wallet_data_updated(added_tags, set_salt, selected_item, is_synching){
    var seed = added_tags.join(' | ') + set_salt + selected_item;
    if(selected_item != '') {
      this.setState({account_seed: seed});
    }
    this.generate_one_account_for_all_e5s(seed)
    if(this.state.coin_data['BTC'] == null){
      this.generate_account_data_for_each_coin(seed)
    }
    var me = this
    setTimeout(async function() {
        me.start_get_accounts_data(is_synching, false)
        me.setState({my_pub_key: await me.get_my_entire_public_key()})
    }, (3 * 1000));

    if(selected_item != ''){
      this.setState({has_wallet_been_set: true})
    }

    // this.send_filecoin(seed)
  }

  generate_account_for_each_e5(seed){
    var _accounts = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var account = this.get_account_from_seed(seed, web3_url)
      _accounts[e5] = account
    }
    this.setState({accounts: _accounts})
  }

  get_account_from_seed(seed, web3_url){
    const web3 = new Web3(web3_url);
    const mnemonic = seed.trim();
    window.Buffer = window.Buffer || Buffer;
    const seedBytes = mnemonicToSeedSync(mnemonic);
    const hdNode = ethers.utils.HDNode.fromSeed(seedBytes);
    const wallet = new ethers.Wallet(hdNode.privateKey);

    const account = web3.eth.accounts.privateKeyToAccount(wallet.privateKey);
    return account;
  }




  

  generate_account_data_for_each_coin = async (seed1) => {
    this.setState({coin_data_status: 'pending'})
    var seed = seed1.replace('|',' ')
    seed = this.get_formatted_seed(seed)
    this.setState({final_seed: seed})
    console.log('coin', 'starting...')
    var coin_data = this.state.coin_data
    coin_data['BTC'] = await this.get_and_set_bitcoin_wallet_info(seed)
    // console.log('coin', 'bitcoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['FIL'] = await this.get_and_set_filecoin_wallet_info(seed)
    // console.log('coin', 'filecoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['BCH'] = await this.get_and_set_bitcoin_cash_wallet_info(seed)
    // console.log('coin', 'bitcoin cash...')
    // console.log('coin', this.state.coin_data)
    coin_data['LTC'] = await this.get_and_set_litecoin_wallet_info(seed)
    // console.log('coin', 'litecoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['DOGE'] = await this.get_and_set_dogecoin_wallet_info(seed)
    // console.log('coin', 'dogecoin...')
    // console.log('coin', this.state.coin_data)
    coin_data['DASH'] = await this.get_and_set_dash_wallet_info(seed)
    // console.log('coin', 'dash...')
    // console.log('coin', this.state.coin_data)
    coin_data['TRX'] = await this.get_and_set_tron_wallet_info(seed)
    // console.log('coin', 'tron...')
    // console.log('coin', this.state.coin_data)
    coin_data['XRP'] = await this.get_and_set_xrp_wallet_info(seed)
    // console.log('coin', 'xrp...')
    // console.log('coin', this.state.coin_data)
    coin_data['XLM'] = await this.get_and_set_xlm_wallet_info(seed)
    // console.log('coin', 'xlm...')
    // console.log('coin', this.state.coin_data)
    coin_data['DOT'] = await this.get_and_set_dot_wallet_info(seed)
    // console.log('coin', 'dot...')
    // console.log('coin', this.state.coin_data)
    coin_data['KSM'] = await this.get_and_set_kusama_wallet_info(seed)
    // console.log('coin', 'kusama...')
    // console.log('coin', this.state.coin_data)
    coin_data['ALGO'] = await this.get_and_set_algorand_wallet_info(seed)
    // console.log('coin', 'algorand...')
    // console.log('coin', this.state.coin_data)
    coin_data['XTZ'] = await this.get_and_set_tezos_wallet_info(seed)
    // console.log('coin', 'tezos...')
    // console.log('coin', this.state.coin_data)
    coin_data['ATOM'] = await this.get_and_set_cosmos_wallet_info(seed)
    // console.log('coin', 'cosmos...')
    // console.log('coin', this.state.coin_data)
    coin_data['SOL'] = await this.get_and_set_solana_wallet_info(seed)
    // console.log('coin', 'solana...')
    // console.log('coin', this.state.coin_data)
    coin_data['APT'] = await this.get_and_set_aptos_wallet_info(seed)
    // console.log('coin', 'aptos...')
    // console.log('coin', this.state.coin_data)
    coin_data['ADA'] = await this.get_and_set_cardano_wallet_info(seed)
    // console.log('coin', 'cardano...')
    // console.log('coin', this.state.coin_data)
    coin_data['STX'] = await this.get_and_set_stacks_wallet_info(seed)
    // console.log('coin', 'stacks...')
    // console.log('coin', this.state.coin_data)
    coin_data['SUI'] = await this.get_and_set_sui_wallet_info(seed)
    coin_data['TIA'] = await this.get_and_set_celestia_wallet_info(seed)

    //should be last
    coin_data['AR'] = await this.get_and_set_arweave_wallet_info(seed)
    // console.log('coin', 'arweave...')
    // console.log('coin', this.state.coin_data)
    console.log('coin', coin_data)
    this.setState({coin_data_status: 'set', coin_data:coin_data})
  }

  get_formatted_seed(seed){
    var arr = seed.split(' ')
    var new_arr = ''
    arr.forEach(element => {
      if(element.length > 32){
        const hash = CryptoJS.SHA256(element).toString();
        const truncatedHash = hash.substring(0, 16);
        new_arr = new_arr+truncatedHash+' '
      }else{
        new_arr = new_arr+element+' '
      }
    });
    new_arr = new_arr.replace(/[^\w\s]/g, '')
    new_arr = new_arr.replace('_','')
    return new_arr.trim()
  }

  update_coin_balances = async (coin, should_update_all) => {
    if(this.state.account_seed == '') return;
    var coin_data = this.state.coin_data
    if(!should_update_all){
      if(this.update_time == null) this.update_time = {}
      if(this.update_time[coin] == null) this.update_time[coin] = 0
      if(Date.now() - this.update_time[coin] < (30*1000)){
        return;
      }
      this.update_time[coin] = Date.now()
      this.prompt_top_notification(this.getLocale()['2927g']/* Refreshing Wallet... */, 800)
    }
    if(coin == 'FIL' || should_update_all) coin_data = await this.update_filecoin_wallet_balance(coin_data);
    if(coin == 'BTC' || should_update_all) coin_data = await this.update_bitcoin_balance(coin_data);
    if(coin == 'BCH' || should_update_all) coin_data = await this.update_bitcoin_cash_balance(coin_data);
    if(coin == 'LTC' || should_update_all) coin_data = await this.update_litecoin_balance(coin_data);
    if(coin == 'DOGE' || should_update_all) coin_data = await this.update_dogecoin_balance(coin_data);
    if(coin == 'DASH' || should_update_all) coin_data = await this.update_dash_balance(coin_data);
    if(coin == 'TRX' || should_update_all) coin_data = await this.update_tron_balance(coin_data);
    if(coin == 'XRP' || should_update_all) coin_data = await this.update_xrp_balance(coin_data);
    if(coin == 'XLM' || should_update_all) coin_data = await this.update_xlm_balance(coin_data);
    if(coin == 'DOT' || should_update_all) coin_data = await this.update_dot_balance(coin_data);
    if(coin == 'KSM' || should_update_all) coin_data = await this.update_ksm_balance(coin_data);
    if(coin == 'ALGO' || should_update_all) coin_data = await this.update_algorand_balance(coin_data);
    if(coin == 'XTZ' || should_update_all) coin_data = await this.update_tezos_balance(coin_data);
    if(coin == 'ATOM' || should_update_all) coin_data = await this.update_cosmos_balance(coin_data);
    if(coin == 'SOL' || should_update_all) coin_data = await this.update_solana_balance(coin_data);
    if(coin == 'APT' || should_update_all) coin_data = await this.update_aptos_balance(coin_data);
    if(coin == 'ADA' || should_update_all) coin_data = await this.update_ada_balance(coin_data);
    if(coin == 'STX' || should_update_all) coin_data = await this.update_stacks_balance(coin_data);
    if(coin == 'SUI' || should_update_all) coin_data = await this.update_sui_balance(coin_data);
    if(coin == 'TIA' || should_update_all) coin_data = await this.update_celestia_balance(coin_data);
    
    if(coin == 'AR' || should_update_all) coin_data = await this.update_arweave_balance(coin_data);
    this.setState({coin_data: coin_data})
  }

  is_address_set(address){
    var default_addresses = this.state.default_addresses
    if(default_addresses.includes(address)){
      return false
    }
    return true;
  }





  get_and_set_filecoin_wallet_info = async (seed) => {
    const connector = new HttpJsonRpcConnector({ url: 'https://rpc.ankr.com/filecoin', token: '' });
    const hdWalletMnemonic = seed;
    const hdDerivationPath = `m/44'/461'/0'/0/0`;
    const lotusClient = new LotusClient(connector);
    const walletProvider = new MnemonicWalletProvider( lotusClient, hdWalletMnemonic, hdDerivationPath );

    const myAddress = await walletProvider.getDefaultAddress();
    const balance = await this.get_filecoin_balance(myAddress, lotusClient)

    var fee_info = {'fee':await this.get_filecoin_transaction_fee(), 'type':'variable', 'per':'gas'}

    var filecoin_data = {'balance':(balance.toString()), 'address':myAddress, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['FIL'] = filecoin_data;
    // this.setState({coin_data: clone})
    return filecoin_data
  }

  get_filecoin_balance = async (address, lotusClient) => {
    var balance = 0
    if(!this.is_address_set(address)) return 0
    try{
      balance = await lotusClient.wallet.balance(address);
      console.log('filecoin wallet balance:', balance);
    }catch(e){
      console.log(e)
    }
    return balance
  }

  get_filecoin_transaction_fee = async () => {
    return 2_000_000_000
  }

  update_filecoin_wallet_balance = async (clone) => {
    const connector = new HttpJsonRpcConnector({ url: 'https://rpc.ankr.com/filecoin', token: '' });
    const lotusClient = new LotusClient(connector);

    // var clone = structuredClone(this.state.coin_data)
    var address = clone['FIL']['address']
    const balance = await this.get_filecoin_balance(address, lotusClient)
    clone['FIL']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_bitcoin_wallet_info = async (seed) => {
    try{  
      const path = "m/44'/0'/0'/0/0" // bitcoin mainnet
      const network = bitcoin.networks.bitcoin;
      var wallet = await this.get_bitcoin_wallet(seed, network, path)
      const address = wallet.address
      var utxos = await this.get_bitcoin_utxos(address)
      var balance = this.get_total_bitcoin_balance_from_utxos(utxos)

      var fee = await this.get_bitcoin_fees()
      var fee_info = {'fee':fee, 'type':'variable', 'per':'byte'}

      var bitcoin_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
      // console.log('coin', 'bitcoin data:', bitcoin_data)
      // var clone = structuredClone(this.state.coin_data)
      // clone['BTC'] = bitcoin_data;
      // this.setState({coin_data: clone})
      // await this.wait(100)
      return bitcoin_data
    }catch(e){
      console.log('coin', e)
    }
    
  }

  get_bitcoin_wallet = async (mnemonic, network, path) => {
    const seed = mnemonicToSeedSync(mnemonic); 
    const master = bitcoin.HDNode.fromSeedBuffer(seed, network);
    const derived = master.derivePath(path);
    const address = derived.getAddress();
    const privateKey = derived.keyPair.toWIF();
    return {address: address, privateKey: privateKey}

    
  }

  get_bitcoin_utxos = async (address) => {
    var request = `https://blockchain.info/unspent?active=${address}`
    // if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('existential:',response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return {}
      }
      var data = await response.text();
      return JSON.parse(data);
    }
    catch(e){
      console.log('existential:', e)
      return {}
    }
  }

  get_total_bitcoin_balance_from_utxos(utxos){
    var bal = 0
    if(utxos['unspent_outputs'] == null) return
    utxos['unspent_outputs'].forEach(utxo => {
      bal += utxo['value'];
    });
    return bal;
  }

  get_bitcoin_fees = async () => {
    var request = `https://api.blockcypher.com/v1/btc/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 14.37
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return (parsed_obj['medium_fee_per_kb'] / 1024)
    }
    catch(e){
      console.log('coin',e)
      return 14.37
    }
  }

  update_bitcoin_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['BTC']['address']
    var utxos = await this.get_bitcoin_utxos(address)
    var balance = this.get_total_bitcoin_balance_from_utxos(utxos)
    var fees = await this.get_bitcoin_fees()
    clone['BTC']['balance'] = balance
    clone['BTC']['utxos'] = utxos
    clone['BTC']['fee']['fee'] = fees
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_bitcoin_cash_wallet_info = async (seed) =>{
    try{
      const network = bitcoin.networks.bitcoin;
      const path = "m/44'/145'/0'/0/0" // bitcoin cash mainnet
      var wallet = await this.get_bitcoin_wallet(seed, network, path)
      const address = wallet.address
      var utxos = await this.get_bitcoin_cash_utxos(address)
      var balance = this.get_total_bitcoin_cash_balance_from_utxos(utxos)

      var fee_info = {'fee':await this.get_bitcoin_cash_fees(), 'type':'variable', 'per':'byte'}
      var bitcoin_cash_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
      // var clone = structuredClone(this.state.coin_data)
      // clone['BCH'] = bitcoin_cash_data;
      // this.setState({coin_data: clone})
      // await this.wait(100)
      return bitcoin_cash_data
    }catch(e){
      console.log('coin', e)
    }
    
  }

  get_bitcoin_cash_utxos = async (address) => {
    var request = `https://api.fullstack.cash/v5/electrumx/utxos/${address}`
    // if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return {}
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return {}
    }
  }

  get_total_bitcoin_cash_balance_from_utxos(utxos){
    var bal = 0
    if(utxos['utxos'] == null) return 0
    utxos['utxos'].forEach(utxo => {
      bal += utxo['value'];
    });
    return bal;
  }

  get_bitcoin_cash_fees = async () => {
    return (0.0000015 * 100_000_000)
  }

  update_bitcoin_cash_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['BCH']['address']
    var utxos = await this.get_bitcoin_cash_utxos(address)
    var balance = this.get_total_bitcoin_cash_balance_from_utxos(utxos)
    clone['BCH']['balance'] = balance
    clone['BCH']['utxos'] = utxos
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_litecoin_wallet_info = async (seed) => {
    const network = bitcoin.networks.litecoin;
    const path = "m/44'/2'/0'/0/0" // litecoin mainnet
    var wallet = await this.get_bitcoin_wallet(seed, network, path)
    const address = wallet.address

    var utxos = await this.get_litecoin_utxos(address)
    var balance = this.get_total_litecoin_balance_from_utxos(utxos)

    var fee_info = {'fee':await this.get_litecoin_fees(), 'type':'variable', 'per':'byte'}

    var litecoin_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['LTC'] = litecoin_data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return litecoin_data
  }

  get_litecoin_utxos = async (address) => {
    const request = `https://litecoinspace.org/api/address/${address}/utxo`
    if(!this.is_address_set(address)) return []
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        return []
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return []
    }

  }

  get_total_litecoin_balance_from_utxos(utxos){
    var bal = 0
    if(utxos.length == 0) return 0
    utxos.forEach(utxo => {
      bal += utxo['value'];
    });
    return bal;
  }

  get_litecoin_fees = async () => {
    var request = `https://api.blockcypher.com/v1/ltc/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 32.5
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return parsed_obj['medium_fee_per_kb'] / 1024
    }
    catch(e){
      console.log('coin',e)
      return 32.5
    }
  }

  update_litecoin_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['LTC']['address']
    var utxos = await this.get_litecoin_utxos(address)
    var balance = this.get_total_litecoin_balance_from_utxos(utxos)
    clone['LTC']['balance'] = balance
    clone['LTC']['utxos'] = utxos
    clone['LTC']['fee']['fee'] = await this.get_litecoin_fees()
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_dogecoin_wallet_info = async (seed) => {
    const network = {
      messagePrefix: '\x19Dogecoin Signed Message:\n',
      // bech32: null,
      bip32: {
        public: 0x02facafd,  // Public key (xpub) prefix
        private: 0x02fac398  // Private key (xprv) prefix
      },
      pubKeyHash: 0x1e,      // Starts with 'D' for mainnet
      scriptHash: 0x16,      // Starts with '9' or 'A' for mainnet
      wif: 0x9e,             // WIF (Wallet Import Format) prefix
    };
    const wallet = await this.make_dogecoin_wallet(seed, network)
    const address = wallet.address
    
    var utxos = await this.get_dogecoin_utxos(address)
    const balance = this.get_total_dogecoin_balance_from_utxos(utxos)

    var fee_info = {'fee':await this.get_dogecoin_fees(), 'type':'variable', 'per':'byte'}

    var dogecoin_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['DOGE'] = dogecoin_data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return dogecoin_data
  }

  make_dogecoin_wallet = async (mnemonic, network) => {
    const path = "m/44'/3'/0'/0/0"
    const seed = mnemonicToSeedSync(mnemonic);
    const master = bitcoin.HDNode.fromSeedBuffer(seed, network)
    const derived = master.derivePath(path);
    const address = derived.getAddress();
    const privateKey = derived.keyPair.toWIF();
    return {address: address, privateKey: privateKey}
  }

  get_dogecoin_utxos = async (address) => {
    var key = `${process.env.REACT_APP_DOGECOIN_API_KEY}`;
    const request = `https://xdg-mainnet.gomaestro-api.org/v0/addresses/${address}/utxos?count=100`
    var header = {
      headers: {
        'Accept': 'application/json',
        'api-key': key
      }
    }
    if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request, header);
      if (!response.ok) {
        console.log(response)
        return {}
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return {}
    }
  }

  get_total_dogecoin_balance_from_utxos(utxos){
    var bal = 0
    if(utxos['data'] == null) return 0;
    utxos['data'].forEach(utxo => {
      bal += parseInt(utxo['satoshis']);
    });
    return bal;
  }

  get_dogecoin_fees = async () => {
    var request = `https://api.blockcypher.com/v1/doge/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 1600000
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return parsed_obj['medium_fee_per_kb'] / 1024
    }
    catch(e){
      console.log('coin', e)
      return 1600000
    }
  }

  update_dogecoin_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['DOGE']['address']
    var utxos = await this.get_dogecoin_utxos(address)
    const balance = this.get_total_dogecoin_balance_from_utxos(utxos)
    clone['DOGE']['balance'] = balance
    clone['DOGE']['utxos'] = utxos
    clone['DOGE']['fee']['fee'] = await this.get_dogecoin_fees()
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_dash_wallet_info = async (seed) => {
    const network = {
      messagePrefix: '\x19Dash Signed Message:\n',
      bip32: {
        public: 0x02fe52f8, // xpub prefix for Dash
        private: 0x02fe52cc // xprv prefix for Dash
      },
      pubKeyHash: 0x4c,      // P2PKH addresses start with 'X'
      scriptHash: 0x10,      // P2SH addresses start with '7'
      wif: 0xcc              // WIF starts with 'X' for Dash
    };
    const wallet = await this.make_dash_wallet(seed, network)
    const address = wallet.address

    var utxos = await this.get_dash_utxos(address)
    const balance = this.get_total_dash_balance_from_utxos(utxos)

    var fee_info = {'fee':await this.get_dash_fees(), 'type':'variable', 'per':'byte'}
    var dash_data = {'balance':balance, 'address':address, 'utxos':utxos, 'min_deposit':0, 'fee':fee_info}
    
    // var clone = structuredClone(this.state.coin_data)
    // clone['DASH'] = dash_data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return dash_data
  }

  make_dash_wallet = async (mnemonic, network) => {
    const path = "m/44'/5'/0'"
    const seed = mnemonicToSeedSync(mnemonic);

    const master = bitcoin.HDNode.fromSeedBuffer(seed, network)
    const derived = master.derivePath(path);
    const address = derived.getAddress();
    const privateKey = derived.keyPair.toWIF();
    return {address: address, privateKey: privateKey}
  }

  get_dash_utxos = async (address) => {
    const request = `https://insight.dash.org/insight-api/addr/${address}/utxo`
    if(!this.is_address_set(address)) return []
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
        return []
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return []
    }
  }

  get_total_dash_balance_from_utxos(utxos){
    var bal = 0
    utxos.forEach(utxo => {
      bal += parseInt(utxo['satoshis']);
    });
    return bal;
  }

  get_dash_fees = async () => {
    var request = `https://api.blockcypher.com/v1/dash/main`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('coin',response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return 100
      }
      var data = await response.text();
      var parsed_obj = JSON.parse(data);
      return parsed_obj['medium_fee_per_kb'] / 1024
    }
    catch(e){
      console.log('coin',e)
      return 100
    }
  }

  update_dash_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['DASH']['address']
    var utxos = await this.get_dash_utxos(address)
    const balance = this.get_total_dash_balance_from_utxos(utxos)
    clone['DASH']['balance'] = balance
    clone['DASH']['utxos'] = utxos
    clone['DASH']['fee']['fee'] = await this.get_dash_fees()
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_tron_wallet_info = async (seed) => {
    var wallet = await this.make_tron_wallet(seed)
    const address = wallet.address
    const balance = await this.get_tron_balance(address, wallet.tronWeb);

    var fee_info = {'fee':await this.get_tron_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':1_000_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['TRX'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  make_tron_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    var key = `${process.env.REACT_APP_TRON_API_KEY}`;
    const hdNode = ethers.utils.HDNode.fromSeed(seed);
    const w = new ethers.Wallet(hdNode.privateKey);

    var private_key = w.privateKey.toString().slice(2)
    const tronWeb = new TronWeb({
      fullHost: 'https://api.trongrid.io',
      headers: { 'TRON-PRO-API-KEY': key },
      privateKey: private_key
    });

    const wallet = tronWeb.defaultAddress.base58
    return {address: wallet, privateKey: private_key, tronWeb:tronWeb}
  }

  get_tron_balance = async (address, tronWeb) => {
    if(!this.is_address_set(address)) return 0
    try{
      const balance = await tronWeb.trx.getBalance(address);
      return balance
    }catch(e){
      console.log(e)
      return 0
    }
  }

  get_tron_transaction_fee = async () => {
    return 1_100_000
  }

  update_tron_balance = async (clone) => {
    var wallet = await this.make_tron_wallet('hello world')
    const address = clone['TRX']['address']
    const balance = await this.get_tron_balance(address, wallet.tronWeb);
    clone['TRX']['balance'] = balance
    return clone
  }




  get_and_set_xrp_wallet_info = async (seed) => {
    const client = new xrpl.Client("wss://xrplcluster.com/")
    await client.connect()
    const wallet = await this.make_xrp_wallet(seed)
    const address = wallet['classicAddress']

    const balance = await this.get_xrp_balance(address, client)
    await client.disconnect()

    var fee_info = {'fee':await this.get_xrp_transaction_fee(), 'type':'fixed', 'per':'transaction'}

    var data = {'balance':balance, 'address':address, 'min_deposit':10_000_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['XRP'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  make_xrp_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    const hdNode = ethers.utils.HDNode.fromSeed(seed);
    const w = new ethers.Wallet(hdNode.privateKey);
    var private_key = w.privateKey.toString()
    const rs_api = require('ripple-secret-codec')
    const secret_from_hex_seed = rs_api.encodeHex(private_key)
    
    const test_wallet = xrpl.Wallet.fromSeed(secret_from_hex_seed['secret_b58'])
    console.log(test_wallet)

    /* 
    {
        "publicKey": "ED27F84605FB92FF678F42B5E20C392BA7FFBF26FDD5F6D929753B01AD603EA507",
        "privateKey": "ED8D2336E46F4E7B4FF341367CEE4C66D6163FA875BB06810EE9F1C35363F82EA0",
        "classicAddress": "rfpQdN77NiBM4igPW1Rah3KogmaXMJiys3",
        "seed": "spj8jWNZxCjQ7WndBWkkMsdHnFQem"
    }
    */
    
    return test_wallet
  }

  get_xrp_balance = async (address, client) => {
    var balance = 0
    if(!this.is_address_set(address)) return 0
    try{
      const response = await client.request({
        "command": "account_info",
        "account": address,
        "ledger_index": "validated"
      })
      balance = parseInt(response['result']['account_data']['Balance'])
    }catch(e){
      console.log(e)
    }
    return balance
  }

  get_xrp_transaction_fee = async () => {
    return 10
  }

  update_xrp_balance = async (clone) => {
    const client = new xrpl.Client("wss://xrplcluster.com/")
    await client.connect()
    // var clone = structuredClone(this.state.coin_data)
    const address = clone['XRP']['address']
    const balance = await this.get_xrp_balance(address, client)
    await client.disconnect()
    clone['XRP']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_xlm_wallet_info = async (seed) => {
    const server = new StellarSdk.Horizon.Server("https://horizon.stellar.org/")
    const wallet = await this.make_xlm_wallet(seed)
    const address = wallet.publicKey()
    var account = await this.load_xlm_account_info(address, server)
    const balance = this.get_xlm_balance_from_address(account)

    var fee_info = {'fee':await this.get_xlm_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':10_000_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['XLM'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  make_xlm_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    var buff = Buffer.from(seed.toString('hex').substring(0, 32))
    const pair = StellarSdk.Keypair.fromRawEd25519Seed(buff)
    // var pub_key = pair.publicKey()
    return pair
  }

  load_xlm_account_info = async (address, server) => {
    try {
      const account = await server.loadAccount(address);
      return account;
    } catch (error) {
      return null
    }
  }

  get_xlm_balance_from_address(account){
    var balance = 0
    if(account != null){
      account['balances'].forEach(b => {
        if(b['asset_type'] == 'native'){
          balance = (parseFloat(b['balance']) * 10000000)
        }
      });
    }
    return balance
  }

  get_xlm_transaction_fee = async () => {
    return 100
  }

  update_xlm_balance = async (clone) => {
    const server = new StellarSdk.Horizon.Server("https://horizon.stellar.org/")
    // var clone = structuredClone(this.state.coin_data)
    const address = clone['XLM']['address']
    var account = await this.load_xlm_account_info(address, server)
    const balance = this.get_xlm_balance_from_address(account)
    clone['XLM']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_dot_wallet_info = async (seed1) => {
    // var seed = seed1
    // const wallet = await this.generate_dot_wallet(seed)
    // const address = wallet.dot_address
    // const wsProvider = new WsProvider('wss://polkadot-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;
    // const existential_deposit = await this.get_existential_dot_deposit(api)
    // const address_balance = await this.get_dot_balance(address, api)
    // await api.disconnect()

    // var fee_info = {'fee':await this.get_dot_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    // var data = {'balance':address_balance, 'address':address, 'min_deposit':existential_deposit.toString(), 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['DOT'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    // return data
  }

  generate_dot_wallet = async (mnemonic) => {
    // await waitReady();
    // const keyring = new Keyring({ type: 'sr25519' });
    
    // const keys = keyring.addFromMnemonic(mnemonic)
    // const public_address = encodeAddress(keys.publicKey, 0) //2 is Kusama
    // return {keys: keys, dot_address: public_address}
  }

  get_dot_balance = async (address, api) => {
    // if(!this.is_address_set(address)) return 0
    // try{
    //   const { nonce, data: balance } = await api.query.system.account(address);
    //   const address_balance = (balance.free.toString())
    //   return address_balance
    // }catch(e){
    //   console.log(e)
    //   return 0
    // }
  }

  get_existential_dot_deposit = async (api) => {
    // try{
    //   return api.consts.balances.existentialDeposit.toNumber()
    // }catch(e){
    //   console.log(e)
    // }
  }

  get_dot_transaction_fee = async () => {
    return (0.015 * 10_000_000_000)
  }

  update_dot_balance = async (clone) => {
    // // var clone = structuredClone(this.state.coin_data)
    // const address = clone['DOT']['address']
    // const wsProvider = new WsProvider('wss://polkadot-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;
    // const address_balance = await this.get_dot_balance(address, api)
    // await api.disconnect()
    // clone['DOT']['balance'] = address_balance
    // // this.setState({coin_data: clone})
    // return clone
  }




  get_and_set_kusama_wallet_info = async (seed) => {
    // const wallet = await this.generate_ksm_wallet(seed)
    // const address = wallet.ksm_address
    // const wsProvider = new WsProvider('wss://kusama-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady
    // const existential_deposit = await this.get_existential_ksm_deposit(api)
    // const balance = await this.get_ksm_balance(address, api)
    // await api.disconnect()

    // var fee_info = {'fee':await this.get_ksm_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    // var data = {'balance':balance, 'address':address, 'min_deposit':existential_deposit.toString(), 'fee':fee_info}
    // // var clone = structuredClone(this.state.coin_data)
    // // clone['KSM'] = data;
    // // this.setState({coin_data: clone})
    // // await this.wait(100)
    // return data
  }

  generate_ksm_wallet = async (mnemonic) => {
    // await waitReady();
    // const keyring = new Keyring({ type: 'sr25519' });
    // const keys = keyring.addFromMnemonic(mnemonic)
    // const public_address = encodeAddress(keys.publicKey, 2) //2 is Kusama
    // return {keys: keys, ksm_address: public_address}
  }

  get_ksm_balance = async (address, api) => {
    // if(!this.is_address_set(address)) return 0
    // try{
    //   const { nonce, data: balance } = await api.query.system.account(address);
    //   const address_balance = (balance.free.toString())
    //   return address_balance
    // }catch(e){
    //   console.log(e)
    //   return 0
    // }
  }

  get_existential_ksm_deposit = async (api) => {
    // try{
    //   return api.consts.balances.existentialDeposit.toNumber()
    // }catch(e){
    //   console.log(e)
    // }
  }

  get_ksm_transaction_fee = async () => {
    return (0.01 * 1_000_000_000_000)
  }

  update_ksm_balance = async (clone) => {
    // const address = clone['KSM']['address']
    // const wsProvider = new WsProvider('wss://kusama-rpc.publicnode.com');
    // const api = await ApiPromise.create({ provider: wsProvider });
    // await api.isReady;
    // const address_balance = await this.get_ksm_balance(address, api)
    // await api.disconnect()
    // clone['KSM']['balance'] = address_balance
    // return clone
  }




  get_and_set_algorand_wallet_info = async (seed) => {
    const wallet = await this.generate_algo_wallet(seed)
    const address = wallet.addr.toString()
    
    const algodServer = 'https://mainnet-api.4160.nodely.dev';
    const algodPort = 443;
    const algodClient = new algosdk.Algodv2('', algodServer, algodPort);

    const acctInfo = await algodClient.accountInformation(address).do();
    const balance = (acctInfo.amount.toString())

    var fee_info = {'fee':await this.get_algo_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':100_000, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['ALGO'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_algo_wallet = async (mnemonic) => {
    const seed = mnemonicToSeedSync(mnemonic);
    const account = algosdk.secretKeyToMnemonic(Buffer.from(seed.toString('hex')));
    const recoveredAccount = algosdk.mnemonicToSecretKey(account);
    const address = recoveredAccount.addr.toString()
    return recoveredAccount
  }

  get_algo_transaction_fee = async () => {
    return (0.001 * 1_000_000)
  }

  update_algorand_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['ALGO']['address']

    const algodServer = 'https://mainnet-api.4160.nodely.dev';
    const algodPort = 443;
    const algodClient = new algosdk.Algodv2('', algodServer, algodPort);

    const acctInfo = await algodClient.accountInformation(address).do();
    const balance = (acctInfo.amount.toString())
    clone['AlGO']['balance'] = balance
    // this.setState({coin_dcloneata: clone})
    return clone
  }




  get_and_set_tezos_wallet_info = async (seed) => {
    const wallet = await this.generate_tezos_wallet(seed)
    const Tezos = new TezosToolkit('https://mainnet.ecadinfra.com');
    Tezos.setProvider({ signer: wallet });
    const address = await Tezos.signer.publicKeyHash();
    const balance = (await Tezos.tz.getBalance(address)).toString()

    var fee_info = {'fee':await this.get_tezos_transaction_fee(), 'type':'variable', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['XTZ'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_tezos_wallet = async (mnemonic) => {
    await sodium.ready;
    const seed = sodium.crypto_generichash(32, sodium.from_string(mnemonic));
    const keyPair = sodium.crypto_sign_seed_keypair(seed);
    const privateKey = b58cencode(keyPair.privateKey.slice(0, 64), prefix.edsk);
    const signer = await InMemorySigner.fromSecretKey(privateKey);
    return signer
  }

  get_tezos_transaction_fee = async () => {
    return (0.064544 * 1_000_000)
  }

  update_tezos_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['XTZ']['address']
    const Tezos = new TezosToolkit('https://mainnet.ecadinfra.com');
    const balance = (await Tezos.tz.getBalance(address)).toString()
    clone['XTZ']['balance'] = balance
    // this.setState({coin_data: clone})
    return clone
  }




  get_and_set_cosmos_wallet_info = async (seed) => {
    const wallet = await this.generate_atom_wallet(seed)
    const address = wallet.cosmosAddress
    const rpc = "https://cosmos-rpc.publicnode.com:443"
    const client = await StargateClient.connect(rpc)
    const balance = await this.get_atom_address_balance(address, client)
    client.disconnect()

    var fee_info = {'fee':await this.get_atom_transaction_fee(), 'type':'variable', 'per':'transaction'}
    var data = {'balance':(balance.toString()), 'address':address, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['ATOM'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_atom_wallet = async (mnemonic) => {
    const hash = sha256(Buffer.from(mnemonic));
    const privateKey = await Secp256k1.makeKeypair(hash)
    const wallet = await DirectSecp256k1Wallet.fromKey(privateKey.privkey, "cosmos")
    const address = (await wallet.getAccounts())[0].address

    return {keys: privateKey, cosmosAddress:address, wall: wallet}
  }

  get_atom_address_balance = async (address, client) => {
    const balance = await client.getAllBalances(address)
    var bal = 0;
    balance.forEach(item => {
      if(item['denom'] == "uatom"){
        bal = parseInt(item['amount'])
      }
    });
    return bal
  }

  get_atom_transaction_fee = async () => {
    return (0.00640 * 1_000_000)
  }

  update_cosmos_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['ATOM']['address']

    const rpc = "https://cosmos-rpc.publicnode.com:443"
    const client = await StargateClient.connect(rpc)
    const balance = await this.get_atom_address_balance(address, client)
    client.disconnect()

    clone['ATOM']['balance'] = balance;
    // this.setState({coin_data: clone})
    return clone
  }







  get_and_set_solana_wallet_info = async (seed) => {
    const wallet = await this.generate_sol_wallet(seed)
    const address = wallet.address

    // var key = `${process.env.REACT_APP_SOLANA_API_KEY}`
    // const connection = new Connection(`https://mainnet.helius-rpc.com/?api-key=${key}`);
    const connection = new Connection('https://solana-rpc.publicnode.com')
    const balance = await this.get_solana_address_balance(address, connection)
    
    var fee_info = {'fee':await this.get_sol_transaction_fee(), 'type':'fixed', 'per':'transaction'}
    var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info}
    // var clone = structuredClone(this.state.coin_data)
    // clone['SOL'] = data;
    // this.setState({coin_data: clone})
    // await this.wait(100)
    return data
  }

  generate_sol_wallet = async (mnemonic) => {
    const seed = await mnemonicToSeed(mnemonic);
    const derivationPath = "m/44'/501'/0'";
    const derivedSeed = derivePath(derivationPath, seed.toString('hex')).key;
    const keypair = Keypair.fromSeed(derivedSeed);
    return {address: keypair.publicKey.toBase58(), keypair: keypair}
  }

  get_solana_address_balance = async (address, connection) => {
    if(!this.is_address_set(address)) return 0
    try{
      const publicKey = new PublicKey(address);
      return await connection.getBalance(publicKey);
    }
    catch(e){
      console.log(e)
      return 0
    }
  }

  get_sol_transaction_fee(){
    return 5000
  }

  update_solana_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['SOL']['address']
    
    // var key = `${process.env.REACT_APP_SOLANA_API_KEY}`
    // const connection = new Connection(`https://mainnet.helius-rpc.com/?api-key=${key}`);
    const connection = new Connection('https://solana-rpc.publicnode.com')
    const balance = await this.get_solana_address_balance(address, connection)

    clone['SOL']['balance'] = balance;
    // this.setState({coin_data: clone})
    return clone
  }





  get_and_set_aptos_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_aptos_wallet(seed)
      const address = wallet.address
      const NODE_URL = 'https://fullnode.mainnet.aptoslabs.com/v1'; 
      const client = new AptosClient(NODE_URL);
      const balance = await this.get_aptos_wallet_balance(wallet.address, client)
      const network_fee = await this.get_aptos_gas_prices(client)
      
      var fee_info = {'fee':network_fee, 'type':'fixed', 'per':'transaction'}
      var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info}
      // var clone = structuredClone(this.state.coin_data)
      // clone['APT'] = data;
      // this.setState({coin_data: clone})
      // await this.wait(100)
      return data
    }catch(e){
      console.log('coin',e)
    }
    
  }

  generate_aptos_wallet = async (mnemonic) => {
    const seed = await mnemonicToSeed(mnemonic);
    const path = "m/44'/637'/0'/0'/0'"
    const { key } = derivePath(path, Buffer.from(seed).toString('hex'));
    const account = new AptosAccount(key);

    return {address: account.address().toString(), account: account}
  }

  get_aptos_wallet_balance = async (address, client) => {
    try{
      const resource = await client.getAccountResource(address, '0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>');
      console.log(resource)
      const balance = resource.data.coin.value;
      return balance;
    }catch(e){
      console.log(e)
      return 0
    }
  }

  get_aptos_gas_prices = async (client) => {
    return 0.000009 * 100_000_000
  }

  update_aptos_balance = async (clone) => {
    // var clone = structuredClone(this.state.coin_data)
    var address = clone['APT']['address']

    const NODE_URL = 'https://fullnode.mainnet.aptoslabs.com/v1'; 
    const client = new AptosClient(NODE_URL);
    const balance = await this.get_aptos_wallet_balance(address, client)

    clone['APT']['balance'] = balance;
    // this.setState({coin_data: clone})
    return clone
  }



  




  get_and_set_cardano_wallet_info = async (seed) => {
    // try{
    //   const wallet = await this.generate_cardano_wallet(seed)
    //   const address = wallet.address
    //   const balance_and_utxos = await this.get_cardano_wallet_balance(wallet)
    //   const fees = await this.get_cardano_transaction_fees(wallet, balance_and_utxos)

    //   var fee_info = {'fee':fees, 'type':'fixed', 'per':'transaction'}
    //   var data = {'balance':balance_and_utxos.balance, 'address':address,'utxos':balance_and_utxos.utxos, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
    //   return data
    // }catch(e){
    //   console.log('coin',e)
    // }
  }

  generate_cardano_wallet = async (mnemonic) => {
    // var hash = await this.generate_hash(mnemonic)
    // let bytes = Buffer.from(hash, "utf8");
    // if (bytes.length < 16) {
    //   bytes = Buffer.concat([bytes, Buffer.alloc(16 - bytes.length)]); // Pad with zeros
    // } else if (bytes.length > 16) {
    //   bytes = bytes.slice(0, 16); // Trim excess bytes
    // }
    // const mnemonic_entropy = bytes.toString("hex");
    // const new_mnemonic = entropyToMnemonic(mnemonic_entropy);

    // const key = `${process.env.REACT_APP_BLOCKFROST_KEY}`
    // const blockfrost = new Blockfrost("https://cardano-mainnet.blockfrost.io/api/v0", key)
    // const lucid = await Lucid( blockfrost, "Mainnet" );
    // lucid.selectWallet.fromSeed(new_mnemonic);
    // const address = await lucid.wallet().address();

    // return {address: address, lucid: lucid}
  }

  generate_hash = async (data) => {
    // Encode the data as a Uint8Array
    const encoder = new TextEncoder();
    const encodedData = encoder.encode(data);
    // Generate the hash using the SubtleCrypto API
    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedData);
    // Convert the hash to a hexadecimal string
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');

    return hashHex.substring(0, 64);
  }

  get_cardano_wallet_balance = async (wallet) => {
    // const wallet_utxos = await wallet.lucid.wallet().getUtxos();
    // var total_balance = bigInt(0)
    // wallet_utxos.forEach(utxo => {
    //   var assets = utxo['assets']
    //   var lovelace = assets['lovelace']
    //   if(lovelace != null){
    //     total_balance = bigInt(total_balance).plus(lovelace)
    //   }
    // });
    // return {balance: total_balance, utxos: wallet_utxos}
  }

  get_cardano_transaction_fees = async (wallet, balance_and_utxos) => {
    // if(balance_and_utxos.utxos.length > 0){
    //   var test_recipient = 'addr1qy80v2j6xpk7zgrqv74c6lt55nw5ppkc34cwd0vxf247rk7lu29fpk40pdwalsjjrp9dlwvwhp7jg8v9g24lmnfh9tcqfq7f90'
    //   const draftTx = await wallet.lucid.newTx()
    //   .pay.ToAddress(test_recipient, { lovelace: 1n })
    //   .complete();
    //   const fee = (await draftTx.complete()).toTransaction().body().fee();
    //   return fee
    // }else{
    //   return 168_317
    // }
  }

  update_ada_balance = async (clone) => {
    // var wallet = clone['ADA']['wallet']
    // const balance_and_utxos = await this.get_cardano_wallet_balance(wallet)
    // const fees = await this.get_cardano_transaction_fees(wallet, balance_and_utxos)
    // clone['ADA']['balance'] = balance_and_utxos.balance;
    // clone['ADA']['utxos'] = balance_and_utxos.utxos;
    // clone['ADA']['fee']['fee'] = fees;
    // return clone
  }








  get_and_set_stacks_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_stacks_wallet(seed)
      const address = wallet.address
      const balance_object = await this.fetch_stacks_balance(wallet.address)
      const nonce = balance_object.nonce
      const balance = parseInt(balance_object.balance, 16);
      
      const fees_obj = await this.fetch_stacks_network_fees()
      const fees = fees_obj * 200

      var fee_info = {'fee':fees, 'type':'variable', 'per':'transaction'}
      var data = {'balance':bigInt(balance), 'address':address,'nonce':nonce, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
      return data
    }catch(e){
      console.log('coin',e)
    }
  }

  generate_mnemonic_from_seed = async (mnemonic) => {
    var hash = await this.generate_hash(mnemonic)
    let bytes = Buffer.from(hash, "utf8");
    if (bytes.length < 16) {
      bytes = Buffer.concat([bytes, Buffer.alloc(16 - bytes.length)]); // Pad with zeros
    } else if (bytes.length > 16) {
      bytes = bytes.slice(0, 16); // Trim excess bytes
    }
    const mnemonic_entropy = bytes.toString("hex");
    return entropyToMnemonic(mnemonic_entropy); 
  }

  generate_stacks_wallet = async (mnemonic) => {
    const wallet_skd = require('@stacks/wallet-sdk');
    var entropic_mnemonic = await this.generate_mnemonic_from_seed(mnemonic)
    const wallet = await wallet_skd.generateWallet({
      secretKey: entropic_mnemonic,
      password: '',
    });
    const address = getAddressFromPrivateKey(wallet.accounts[0].stxPrivateKey, STACKS_MAINNET);
    return {wallet: wallet, address: address}
  }

  fetch_stacks_balance = async (address) => {
    const STACKS_API = 'https://api.mainnet.hiro.so';
    const request = `${STACKS_API}/v2/accounts/${address}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return null
    }
  }

  fetch_stacks_network_fees = async () => {
    const STACKS_API = 'https://api.mainnet.hiro.so';
    const request = `${STACKS_API}/v2/fees/transfer`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      return JSON.parse(data)
    }
    catch(e){
      console.log(e)
      return null
    }
  }

  update_stacks_balance = async (clone) => {
    var address = clone['STX']['address']
    const balance_object = await this.fetch_stacks_balance(address)
    const nonce = balance_object.nonce
    const balance = parseInt(balance_object.balance, 16);
    clone['STX']['balance'] = balance;
    clone['STX']['nonce'] = nonce;
    return clone
  }











  get_and_set_arweave_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_arweave_wallet(seed)
      const address = wallet.address
      const balance = await this.fetch_arweave_balance(wallet.address)
      const fees = await this.estimate_arweave_network_fees('-zdLm14FOLtTWxTEVzhh2N9AGCnW_-O_6DIcLxgk-W0')

      var fee_info = {'fee':fees, 'type':'fixed', 'per':'transaction'}
      var data = {'balance':bigInt(balance), 'address':address, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
      return data
    }catch(e){
      console.log('coin',e)
    }
  }

  generate_arweave_wallet = async (mnemonic) => {
    var entropic_mnemonic = await this.generate_mnemonic_from_seed(mnemonic)
    let wallet = await getKeyFromMnemonic(entropic_mnemonic)
    const address = await arweave.wallets.jwkToAddress(wallet);
    return { key: wallet, address: address };
  }

  estimate_arweave_network_fees = async (target) => {
    //https://arweave.net/price/{bytes}/{target}
    try{
      const response = await fetch(`https://arweave.net/price/0/${target}`);
      const winstonBalance = await response.text();
      return bigInt(winstonBalance)
    }catch(e){
      console.log('coin', e)
      return 0
    }
    // const key = await arweave.wallets.generate();
    // const tx = await arweave.createTransaction({
    //   target: target,
    //   quantity: arweave.ar.arToWinston('1')
    // }, key);
    // return tx.reward
  }

  update_arweave_balance = async (clone) => {
    var address = clone['AR']['address']
    const balance = await arweave.wallets.getBalance(address)
    const fees = await this.estimate_arweave_network_fees('-zdLm14FOLtTWxTEVzhh2N9AGCnW_-O_6DIcLxgk-W0')
    clone['AR']['balance'] = balance;
    clone['AR']['fee']['fee'] = fees;
    return clone
  }

  fetch_arweave_balance = async (address) => {
    try{
      const response = await fetch(`https://arweave.net/wallet/${address}/balance`);
      const winstonBalance = await response.text();
      return bigInt(winstonBalance)
    }catch(e){
      console.log('coin', e)
      return 0
    }
  }






  


  get_and_set_sui_wallet_info = async (seed) => {
    try{
      const wallet = await this.generate_sui_wallet(seed)
      const address = wallet.address
      const balance = await this.fetch_sui_balance(wallet.address)
      const fees = await this.fetch_sui_network_fees()

      var fee_info = {'fee':fees, 'type':'fixed', 'per':'transaction'}
      var data = {'balance':balance, 'address':address, 'min_deposit':0, 'fee':fee_info, 'wallet': wallet}
      return data
    }catch(e){
      console.log('coin',e)
    }
  }

  generate_sui_wallet = async (mnemonic) => {
    var entropic_mnemonic = await this.generate_mnemonic_from_seed(mnemonic)
    const keyPair = Ed25519Keypair.deriveKeypair(entropic_mnemonic);
    const address = keyPair.getPublicKey().toSuiAddress()
    return {keypair: keyPair, address:address}
  }

  fetch_sui_balance = async (address) => {
    const rpcUrl = getFullnodeUrl('mainnet');
    const client = new SuiClient({ url: rpcUrl });
    const balances = await client.getBalance({ owner: address, });
    return bigInt(balances.totalBalance)
  }

  fetch_sui_network_fees(){
    return (0.001846037 * 1_000_000_000)
  }

  update_sui_balance = async (clone) => {
    var address = clone['SUI']['address']
    const balance = await this.fetch_sui_balance(address)
    clone['SUI']['balance'] = balance;
    return clone
  }








  get_and_set_celestia_wallet_info = async (seed) => {
    const wallet = await this.generate_tia_wallet(seed)
    const address = wallet.celestiaAddress
    const rpc = "https://celestia-rpc.publicnode.com:443"
    const client = await StargateClient.connect(rpc)
    const balance = await this.get_tia_address_balance(address, client)
    client.disconnect()

    var fee_info = {'fee':await this.get_tia_transaction_fee(), 'type':'variable', 'per':'transaction'}
    var data = {'balance':(balance.toString()), 'address':address, 'min_deposit':0, 'fee':fee_info}
    return data
  }

  generate_tia_wallet = async (mnemonic) => {
    const hash = sha256(Buffer.from(mnemonic));
    const privateKey = await Secp256k1.makeKeypair(hash)
    const wallet = await DirectSecp256k1Wallet.fromKey(privateKey.privkey, "celestia")
    const address = (await wallet.getAccounts())[0].address

    return {keys: privateKey, celestiaAddress:address, wall: wallet}
  }

  get_tia_address_balance = async (address, client) => {
    const balance = await client.getAllBalances(address)
    var bal = 0;
    balance.forEach(item => {
      if(item['denom'] == "utia"){
        bal = parseInt(item['amount'])
      }
    });
    return bal
  }

  get_tia_transaction_fee = async () => {
    return (0.002052 * 1_000_000)
  }

  update_celestia_balance = async (clone) => {
    var address = clone['TIA']['address']

    const rpc = "https://celestia-rpc.publicnode.com:443"
    const client = await StargateClient.connect(rpc)
    const balance = await this.get_tia_address_balance(address, client)
    client.disconnect()

    clone['TIA']['balance'] = balance;
    return clone
  }







  

  //unused
  get_transaction_history = async (account) => {
    const web3 = new Web3(this.get_selected_web3_url());
    
    let block = await web3.eth.getBlock('latest');
    this.setState({current_block: block});

    let number = block.number;
    const targetAddress = account.address;
    var transactions = []
    var start = 0;
    const blocks_checked = 50;
    if(number > blocks_checked){
      start = number - blocks_checked
    }
    for (let i = start; i <= number; i++) {
      web3.eth.getBlock(i).then(block => {
        let txs = block.transactions;
        if (block != null && txs != null) {
          for (let txHash of txs) {

            web3.eth.getTransaction(txHash).then(tx => {
              if (targetAddress == tx.to || targetAddress == tx.from) {
                transactions.push(tx)
                const sortedData = this.sortByAttributeDescending(transactions, 'blockNumber');
                this.setState({account_transaction_history: sortedData})
              }
            })
            
          }
        }
      });
    }
  }

  sortByAttributeDescending(array, attribute) {
      return array.sort((a, b) => {
          if (a[attribute] < b[attribute]) {
          return 1;
          }
          if (a[attribute] > b[attribute]) {
          return -1;
          }
          return 0;
      });
  }





  load_coin_and_ether_coin_prices = async () => {
    var api_key = `${process.env.REACT_APP_COINAPI_KEY}`;
    var assets = this.get_all_coin_and_ether_symbols()
    const assetFilter = assets.join(',');
    var request = `https://rest.coinapi.io/v1/assets?filter_asset_id=${assetFilter}`
    
    var body = {
      method: "GET", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json", // Set content type to JSON
        "X-CoinAPI-Key": api_key
      },
    }

    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var json_data = JSON.parse(data)
      var price_data = {}
      for(var i=0; i<json_data.length; i++){
        var asset_id = json_data[i].asset_id
        var asset_name = json_data[i].name
        var price_usd = json_data[i].price_usd
        var volume_1day_usd = json_data[i].volume_1day_usd
        var volume_1hrs_usd = json_data[i].volume_1hrs_usd
        if(price_usd != null){
          var data = {'id':asset_id, 'name':asset_name, 'price':price_usd, 'day_volume':volume_1day_usd, 'hour_volume':volume_1hrs_usd}
          price_data[asset_id] = data
        }
      }
      this.setState({asset_price_data: price_data})
    }
    catch(e){

    }
  }

  get_all_coin_and_ether_symbols(){
    var all_symbols = []
    this.state.e5s['data'].forEach(e5 => {
      var symbol = this.state.e5s[e5].token
      all_symbols.push(symbol)
    });
    var coins = this.state.coins
    for (const coin in coins) {
        if (coins.hasOwnProperty(coin)) {
          all_symbols.push(coin)
        }
    }
    return all_symbols
  }

  check_if_beacon_node_is_online = async () => {
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url
    var request = `${beacon_node}/marco`
    // console.log('apppage', 'check_if_beacon_node_is_online', request)
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == true){
        console.log('apppage', 'beacon node online!')
        this.setState({beacon_node_enabled: true, beacon_data: obj})
      }
    }
    catch(e){
      console.log(e)
    }
  }

  get_browser_cache_size_limit(){
        if (localStorage && !localStorage.getItem('size')) {
            var i = 0;
            try {
                // Test up to 10 MB
                for (i = 250; i <= 10000; i += 250) {
                    localStorage.setItem('test', new Array((i * 1024) + 1).join('a'));
                }
            } catch (e) {
                localStorage.removeItem('test');
                localStorage.setItem('size', i - 250);            
            }
        }
        return localStorage.getItem('size')
  }

  start_get_accounts_data = async (is_synching, should_skip_account_data) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      await this.start_get_accounts_for_specific_e5(is_synching, e5, should_skip_account_data)
    }
  }

  start_get_accounts_for_specific_e5 = async (is_syncing, e5, should_skip_account_data) =>{
    var web3_url = this.get_web3_url_from_e5(e5)
    var e5_address = this.state.e5s[e5].e5_address;
    var account_for_e5 = this.state.accounts[e5]
    if(web3_url != ''){
      this.get_wallet_data(account_for_e5, is_syncing, web3_url, e5_address, e5)
      await this.wait(300)
      if(this.get_contract_from_e5(e5) != ''){
        this.get_all_events_from_e5(account_for_e5, is_syncing, web3_url, e5_address, e5, should_skip_account_data)
      }
    }
  }

  load_all_event_data = async (_web3, contract_instance, event_id, e5, filter, starting_block) => {
    var web3 = this.get_web3_instance_from_e5(e5)
    var latest = await web3.eth.getBlockNumber()
    var events = []
    var iteration = this.get_iteration(e5)
    if(this.log_directory == null) this.log_directory = {}
    
    if(latest - starting_block < iteration){
      events = await contract_instance.getPastEvents(event_id, { fromBlock: starting_block, toBlock: 'latest' }, (error, events) => {});
    }
    else{
      var pos = starting_block
      while (pos < latest) {
        var to = pos+iteration < latest ? pos+iteration : latest
        var from = pos

        // await this.wait(10)
        events = events.concat(await contract_instance.getPastEvents(event_id, { fromBlock: from, toBlock: to }, (error, events) => {}))

        pos = to+1
      }
    }

    if(this.from == null) this.from = {}
    this.from[e5] = latest

    return events
  }

  //needs revision
  load_event_data = async (_web3, contract_instance, event_id, e5, filter) => {
    if(this.state.beacon_node_enabled == true){
      return await this.load_events_from_nitro(_web3, contract_instance, event_id, e5, filter)
    }

    var focused_events = this.e5_events[e5]

    if(contract_instance['_address'] == this.e5_contract_addresses[e5][1]){
      focused_events = this.e52_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][2]){
      focused_events = this.f5_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][3]){
      focused_events = this.g5_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][4]){
      focused_events = this.g52_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][5]){
      focused_events = this.h5_events[e5]
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][6]){
      focused_events = this.h52_events[e5]
    }

    var filtered_events = []
    // focused_events.forEach(event => {
    //   var accepted = true
    //   if(event['event'] != event_id){
    //     accepted = false
    //   }

    //   if(accepted == true){
    //     for (const key in filter) {
    //       if(filter[key] instanceof Array){
    //         if(!filter[key].includes(event['returnValues'][key])){
    //           accepted = false
    //         }
    //       }else{
    //         if(event['returnValues'][key] != filter[key]){
    //           accepted = false
    //         }
    //       }
          
    //     }
    //   }
      
    //   if(accepted){
    //     filtered_events.push(event)
    //   }
    // });

    const check_event = (eventt) => {
        var accepted = true
        if(eventt['event'] != event_id){
          accepted = false
        }

        if(accepted == true){
          for (const key in filter) {
            if(filter[key] instanceof Array){
              if(!filter[key].includes(eventt['returnValues'][key])){
                accepted = false
              }
            }else{
              if(eventt['returnValues'][key] != filter[key]){
                accepted = false
              }
            }
            
          }
        }
        return accepted
    }

    filtered_events = focused_events.filter(check_event)


    return filtered_events
  }

  load_events_from_nitro = async (_web3, contract_instance, event_id, e5, filter) => {
    var requested_contract = this.get_contract_id_from_contract(e5, contract_instance)
    var event_request = {'requested_e5':e5, 'requested_contract':requested_contract, 'requested_event_id':event_id, 'filter':filter}
    const params = new URLSearchParams({
      arg_string:JSON.stringify({requests:[event_request]}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/events?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('all_data2',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      return obj['data'][0]
    }
    catch(e){
      // console.log(e)
      return []
    }
  }

  get_contract_id_from_contract(e5, contract_instance){
    var requested_contract = 'E5'
    if(contract_instance['_address'] == this.e5_contract_addresses[e5][1]){
      requested_contract = 'E52'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][2]){
      requested_contract = 'F5'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][3]){
      requested_contract = 'G5'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][4]){
      requested_contract = 'G52'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][5]){
      requested_contract = 'H5'
    }
    else if(contract_instance['_address'] == this.e5_contract_addresses[e5][6]){
      requested_contract = 'H52'
    }
    return requested_contract
  }

  

  load_event_data_the_old_way = async (_web3, contract_instance, event_id, e5, f) => {
    var web3 = this.get_web3_instance_from_e5(e5)
    var latest = await web3.eth.getBlockNumber()
    var events = []
    var iteration = this.get_iteration(e5)
    var starting_block = this.get_first_block(e5)
    
    if(latest - starting_block < iteration){
      events = await contract_instance.getPastEvents(event_id, {filter: f, fromBlock: starting_block, toBlock: 'latest' }, (error, events) => {});
    }
    else{
      var pos = starting_block
      while (pos < latest) {
        await this.wait(this.state.web3_delay)
        var to = pos+iteration < latest ? pos+iteration : latest
        var from = pos

        events = events.concat(await contract_instance.getPastEvents(event_id, {filter: f, fromBlock: from, toBlock: to }, (error, events) => {}))
        pos = to+1
      }
    }

    return events
  }

  /* here */
  get_all_events_from_e5 = async (_account, is_syncing, web3_url, e5_address, e5, should_skip_account_data) => {
    const web3 = new Web3(web3_url);
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    const address_account = _account

    var contract_addresses_events = await contractInstance.getPastEvents('e7', { fromBlock: this.get_first_block(e5), toBlock: this.get_first_block(e5)+20 }, (error, events) => {})
    var contract_addresses = contract_addresses_events[0].returnValues.p5
    if(this.e5_contract_addresses == null) this.e5_contract_addresses = {}
    this.e5_contract_addresses[e5] = contract_addresses
    var addresses_clone = structuredClone(this.state.addresses)
    addresses_clone[e5] = contract_addresses
    this.setState({addresses: addresses_clone})

    // await this.get_accounts_data(_account, is_syncing, web3_url, e5_address, e5)
    // return;

    if(!this.state.beacon_node_enabled){
      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const F5contractArtifact = require('./contract_abis/F5.json');
      const F5_address = contract_addresses[2];
      const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


      const H5contractArtifact = require('./contract_abis/H5.json');
      const H5_address = contract_addresses[5];
      const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

      const H52contractArtifact = require('./contract_abis/H52.json');
      const H52_address = contract_addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

      if(this.from == null) this.from = {}
      var from = this.from[e5] == null ? this.get_first_block(e5) : this.from[e5] + 1
      
      var all_e5_events = await this.load_all_event_data(web3, contractInstance, 'allEvents', e5, {}, from) 
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_e52_events = await this.load_all_event_data(web3, E52contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_f5_events = await this.load_all_event_data(web3, F5contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_g5_events = await this.load_all_event_data(web3, G5contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_g52_events = await this.load_all_event_data(web3, G52contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_h5_events = await this.load_all_event_data(web3, H5contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      // await this.wait(this.state.web3_delay)
      var all_h52_events = await this.load_all_event_data(web3, H52contractInstance, 'allEvents', e5, {}, from)
      if(is_syncing){
        this.inc_synch_progress()
      }
      await this.wait(this.state.web3_delay)

      if(this.e5_events == null) this.e5_events = {}
      if(this.e52_events == null) this.e52_events = {}
      if(this.f5_events == null) this.f5_events = {}
      if(this.g5_events == null) this.g5_events = {}
      if(this.g52_events == null) this.g52_events = {}
      if(this.h5_events == null) this.h5_events = {}
      if(this.h52_events == null) this.h52_events = {}

      if(this.e5_events[e5] == null) this.e5_events[e5] = []
      if(this.e52_events[e5] == null) this.e52_events[e5] = []
      if(this.f5_events[e5] == null) this.f5_events[e5] = []
      if(this.g5_events[e5] == null) this.g5_events[e5] = []
      if(this.g52_events[e5] == null) this.g52_events[e5] = []
      if(this.h5_events[e5] == null) this.h5_events[e5] = []
      if(this.h52_events[e5] == null) this.h52_events[e5] = []

      all_e5_events.forEach(element => {
        this.e5_events[e5].push(element)
      });
      all_e52_events.forEach(element => {
        this.e52_events[e5].push(element)
      });
      all_f5_events.forEach(element => {
        this.f5_events[e5].push(element)
      });
      all_g5_events.forEach(element => {
        this.g5_events[e5].push(element)
      });
      all_g52_events.forEach(element => {
        this.g52_events[e5].push(element)
      });
      all_h5_events.forEach(element => {
        this.h5_events[e5].push(element)
      });
      all_h52_events.forEach(element => {
        this.h52_events[e5].push(element)
      });
    }else{
      if(is_syncing){
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
        this.inc_synch_progress()
      }
    }

    this.set_cookies()
    if(!should_skip_account_data){
      await this.get_accounts_data(_account, is_syncing, web3_url, e5_address, e5)
    }
  }

  load_root_config = async () => {
    const e5 = root_e5
    const account = root_account
    const web3_url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(web3_url);
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.state.e5s[e5].e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    var contract_addresses_events = await contractInstance.getPastEvents('e7', { fromBlock: this.get_first_block(e5), toBlock: this.get_first_block(e5)+20 }, (error, events) => {})
    var contract_addresses = contract_addresses_events[0].returnValues.p5

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var root_data_events = await E52contractInstance.getPastEvents('e4', { fromBlock: this.get_first_block(e5), toBlock: 'latest', filter: {p1/* target_id */: 24/* 24(dialer admin registry) */, p2/* context */:account/* sender_acc_id */} }, (error, events) => {})

    if(root_data_events.length > 0){
      var latest_event = root_data_events[root_data_events.length - 1];
      var root_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
      if(root_data != null){
        const allowed_countries = root_data.data['allowed_countries']
        const logo_title = this.get_selected_item(root_data.get_logo_title_tags_object, 'e')
        const selected_dark_emblem_country = root_data.selected_dark_emblem_country
        const get_theme_stage_tags_object = this.get_selected_item(root_data.get_theme_stage_tags_object, 'e')
        const get_content_channeling_tags_object = this.get_selected_item(root_data.get_content_channeling_tags_object, 'e')
        const beacon_chain_url = root_data.data['beacon_chain_url']/* 'http://localhost:4000' */
        // console.log('apppage', 'resetting beacon_chain_url to', beacon_chain_url)
        const e5_ether_override = root_data.get_ether_e5_softwrite_object == null ? 'e' : this.get_selected_item(root_data.get_ether_e5_softwrite_object, 'e');
        const e5s = e5_ether_override == 'e' ? structuredClone(this.state.e5s) : this.update_e5_images(root_data.data['e5s'])

        if(this.my_active_e5s != null){
          var final_e5_list = []
          this.my_active_e5s.forEach(e5 => {
            final_e5_list.push(e5)
          });
          e5s['data'].forEach(e5 => {
            if(!final_e5_list.includes(e5)){
              final_e5_list.push(e5)
            }
          });
          e5s['data'] = final_e5_list
        }
        

        const ether_data = e5_ether_override == 'e' ? this.get_ether_data() : root_data.data['ether_data']
        const all_locales = root_data.data['all_locales']
        const dialer_addresses = root_data.data['dialer_addresses']
        const theme_images = root_data.data['theme_images']
        const line_setting = this.get_selected_item(root_data.get_line_setting_object, 'e') == 'enabled' ? true : false
        const get_available_for_all_tags_object = root_data.get_available_for_all_tags_object == null ? 'enabled': this.get_selected_item(root_data.get_available_for_all_tags_object, 'e')

        const recommended_videopost_threshold = root_data.data['recommended_videopost_threshold'] || 10
        const recommended_video_threshold = root_data.data['recommended_video_threshold'] || 20
        const recommended_audiopost_threshold = root_data.data['recommended_audiopost_threshold'] || 10
        const recommended_audio_threshold = root_data.data['recommended_audio_threshold'] || 20

        const theme_images_enabled = root_data.get_custom_background_images_object == null ? false: (this.get_selected_item(root_data.get_custom_background_images_object, 'e') == 'enabled' ? true: false)

        const country_moderators = root_data.data['country_moderators'] == null ? {} : root_data.data['country_moderators']
        const my_states_moderators = country_moderators[this.state.device_country] == null ? [] : country_moderators[this.state.device_country]
        const default_moderators = country_moderators['all'] == null ? [] : country_moderators['all']
        const my_moderators = default_moderators.concat(my_states_moderators)

        const manual_beacon_node_disabled = root_data.get_manual_disable_beacon_node_override_object == null ? 'e': this.get_selected_item(root_data.get_manual_disable_beacon_node_override_object, 'e')/* 'e' */

        const upload_object_size_limit = root_data.data['upload_object_size_limit'] == null ? this.state.upload_object_size_limit : root_data.data['upload_object_size_limit']

        const my_language = this.get_language() == null ? 'en' : this.get_language()
        if(my_language != 'en' && all_locales[my_language] != null){
          // this.prompt_top_notification('language: '+my_language, 5000)
          const language_obj = await this.load_json_object_from_url(all_locales[my_language])
          const language_override = root_data.override_object
          if(language_override[my_language] != null){
            for (const string_text_key in language_override[my_language]) {
              if (language_override[my_language].hasOwnProperty(string_text_key)) {
                language_obj[string_text_key] = language_override[my_language][string_text_key]
              }
            }
          }
          var clone = structuredClone(all_locales)
          clone[my_language] = language_obj
          // this.setState({loc: language_obj, all_locales: clone})
        }

        console.log('apppage', 'data', root_data)
        console.log('apppage', 'theme', get_theme_stage_tags_object)
        console.log('apppage', 'mymods', my_moderators)

        this.setState({
          allowed_countries: allowed_countries, 
          logo_title: logo_title, 
          selected_dark_emblem_country: selected_dark_emblem_country, 
          get_theme_stage_tags_object: get_theme_stage_tags_object, 
          get_content_channeling_tags_object: get_content_channeling_tags_object, 
          beacon_chain_url: beacon_chain_url, 
          e5s: e5s,
          ether_data: ether_data, 
          dialer_addresses: dialer_addresses, 
          theme_images: theme_images, 
          line_setting: line_setting, 
          get_available_for_all_tags_object: get_available_for_all_tags_object, 
          recommended_videopost_threshold: recommended_videopost_threshold, 
          recommended_video_threshold: recommended_video_threshold, 
          recommended_audiopost_threshold: recommended_audiopost_threshold, 
          recommended_audio_threshold: recommended_audio_threshold,
          theme_images_enabled: theme_images_enabled,
          followed_accounts: my_moderators,
          country_moderators: country_moderators,
          manual_beacon_node_disabled: manual_beacon_node_disabled,
          e5_ether_override: e5_ether_override,
          upload_object_size_limit: upload_object_size_limit
        })
        primary_following = primary_following.concat(my_moderators)

        localStorage.setItem("logo_title", logo_title);
        localStorage.setItem("selected_dark_emblem_country", selected_dark_emblem_country);
        localStorage.setItem("is_country_allowed", allowed_countries)

        this.set_stack_page_data()

        var me = this;
        setTimeout(function() {
          if(me.custom_set_providers != null){
            me.set_providers(me.custom_set_providers.selected_providers, me.custom_set_providers.added_providers);
            delete me.custom_set_providers
          }
        }, (1 * 500));
      }
    }
  }

  get_selected_item(object, option){
    var selected_item = object[option][2][0]
    var picked_item = object[option][1][selected_item];
    return picked_item
  }

  load_json_object_from_url = async (request) => {
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('something went wrong:',response)
        return
      }
      var data = await response.text();
      var json_obj = JSON.parse(data);
      return json_obj      
    }
    catch(e){
      console.log('something went wrong:', e)
    }
  }

  update_e5_images(loaded_e5s){
    var hardcoded_e5s = this.state.e5s['data']
    var clone = structuredClone(loaded_e5s)
    console.log('loaded_e5s',loaded_e5s)
    hardcoded_e5s.forEach(e5 => {
      if(clone[e5].end_image != null && clone[e5].end_image.toString().includes('E5UI')){
        clone[e5].end_image = this.state.e5s[e5].end_image
      }
      if(clone[e5].spend_image != null && clone[e5].spend_image.toString().includes('E5UI')){
        clone[e5].spend_image = this.state.e5s[e5].spend_image
      }
      if(clone[e5].ether_image != null && clone[e5].ether_image.toString().includes('E5UI')){
        clone[e5].ether_image = this.state.e5s[e5].ether_image
      }
      if( clone[e5].e5_img != null && clone[e5].e5_img.toString().includes('E5UI')){
        clone[e5].e5_img = this.state.e5s[e5].e5_img
      }
    });
    return clone
  }






  get_wallet_data_for_specific_e5(e5){
    this.prompt_top_notification(this.getLocale()['2730']/* 'reloading your wallet...' */, 2000)
    var web3_url = this.get_web3_url_from_e5(e5)
    var account_for_e5 = this.state.accounts[e5]
    this.get_wallet_data(account_for_e5, false, web3_url, null, e5)
  }

  get_wallet_data = async (_account, is_syncing, web3_url, e5_address, e5) => {
    const web3 = new Web3(web3_url);
    const address_account = _account

    var wallet_status_clone = structuredClone(this.state.wallet_status)
    wallet_status_clone[e5] = 'synchronizing'
    this.setState({wallet_status: wallet_status_clone})

    try{
      this.load_rpc_times(e5)

      var s = JSON.stringify(this.state.account_balance, (key, value) =>
              typeof value === 'bigint'
                  ? value.toString()
                  : value
      )
      var clone = JSON.parse(s)
      clone[e5] = 0
      if(clone[e5] == null)this.setState({account_balance: clone});

      var balance = await web3.eth.getBalance(address_account.address)
      var t = JSON.stringify(this.state.account_balance, (key, value) =>
              typeof value === 'bigint'
                  ? value.toString()
                  : value
      )
      var clone = JSON.parse(t)
      // console.log('bal', balance)
      clone[e5] = bigInt(balance.toString())
      this.setState({account_balance: clone});
      if(is_syncing)this.inc_synch_progress()
    

      // this.load_ether_history(e5, address_account.address)

      var gasPrice = await web3.eth.getGasPrice();
      var clone = structuredClone(this.state.gas_price)
      clone[e5] = parseInt(gasPrice)
      this.setState({gas_price: clone})
      if(is_syncing)this.inc_synch_progress()

      var id = await web3.eth.net.getId()
      var clone = structuredClone(this.state.chain_id)
      clone[e5] = id
      this.setState({chain_id: clone});
      if(is_syncing)this.inc_synch_progress()
      await this.wait(this.state.web3_delay)


      // var peers = await web3.eth.net.getPeerCount()
      // var clone = structuredClone(this.state.number_of_peers)
      // clone[e5] = parseInt(peers)
      // this.setState({ number_of_peers: clone});
      // console.log('number of peers: ', peers)
      // this.inc_synch_progress()

      var blockNumber = await web3.eth.getBlockNumber()
      await this.wait(this.state.web3_delay)
      var last_blocks = [];
      var count = 5
      var start = parseInt(blockNumber)-count;
      if(blockNumber < count){
        start = 0;
      }
      for (let i = start; i <= blockNumber; i++) {
        await this.wait(this.state.web3_delay)
        var block = await web3.eth.getBlock(i)
        last_blocks.push(block)
      }

      var last_blocks_clone = structuredClone(this.state.last_blocks)
      last_blocks_clone[e5] = last_blocks

      var number_of_blocks_clone = structuredClone(this.state.number_of_blocks)
      number_of_blocks_clone[e5] = blockNumber
      this.setState({last_blocks: last_blocks_clone, number_of_blocks: number_of_blocks_clone});
      if(is_syncing)this.inc_synch_progress()



      // var mempool = await web3.eth.getPendingTransactions()
      // var mempool_clone = structuredClone(this.state.mempool)
      // mempool_clone[e5] = mempool
      // this.setState({mempool: mempool_clone})
    }catch(e){

    }


    var wallet_status_clone = structuredClone(this.state.wallet_status)
    wallet_status_clone[e5] = 'done'
    this.setState({wallet_status: wallet_status_clone})


    // this.load_e5_wallet_icons(e5)

  } 






  load_all_wallets_icons = async () => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      await this.load_e5_wallet_icons(e5)
    }
  }

  load_e5_wallet_icons = async (e5) => {
    var end_request = this.state.e5s[e5].end_image
    var spend_request = this.state.e5s[e5].spend_image
    var ether_request = this.state.e5s[e5].ether_image
    var e5_image_request = this.state.e5s[e5].e5_img
    try{
      var clone = structuredClone(this.state.e5s)
      if(end_request != null){
        var response = await fetch(end_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].end_image = data
      }

      if(spend_request != null){
        var response = await fetch(spend_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].spend_image = data
      }

      if(ether_request != null){
        var response = await fetch(ether_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].ether_image = data
      }

      if(e5_image_request != null){
        var response = await fetch(e5_image_request);
        var blob = await response.blob()
        var data = await this.convertBlobToBase64(blob);
        clone[e5].e5_img = data
      }
      this.setState({e5s: clone});
    }
    catch(e){
       console.log(e)
    }
  }

  convertBlobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result); // Remove the "data:image/..." prefix if desired
      reader.onerror = reject;
      reader.readAsDataURL(blob); // Reads the blob as a data URL
    });
  }

  load_static_assets = async () => {
    var clone = structuredClone(this.state.static_assets)
    for (const asset in clone) {
      if (clone.hasOwnProperty(asset)) {
        var url = clone[asset]
        try{
          var response = await fetch(url);
          var blob = await response.blob()
          var data = await this.convertBlobToBase64(blob);
          clone[asset] = data
        }
        catch(e){
          console.log(e)
        }
      }
    }
    this.setState({static_assets: clone})
  }

  load_coin_static_assets = async () => {
    var clone = structuredClone(this.state.coins)
    for (const asset in clone) {
      if (clone.hasOwnProperty(asset)) {
        var url = clone[asset]['label']['image']
        try{
          var response = await fetch(url);
          var blob = await response.blob()
          var data = await this.convertBlobToBase64(blob);
          clone[asset]['label']['image'] = data
          clone[asset]['banner-icon']['image'] = data
        }
        catch(e){
          console.log(e)
        }
      }
    }
    this.setState({coins: clone})
  }

  load_cities_data = async () => {
    var request = this.state.static_assets['all_cities']
    // if(!this.is_address_set(address)) return {}
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('something went wrong:',response)
        // throw new Error(`Failed to retrieve data. Status: ${response}`);
        return
      }
      var data = await response.text();
      var json_obj = JSON.parse(data);
      var storage_obj = []
      for(var i=0; i<json_obj.length; i++){
        var city = json_obj[i]['name'].toLowerCase()
        var country = json_obj[i]['country']
        var id = parseInt(json_obj[i]['id'])
        storage_obj.push({'city':city, 'country':country, 'id':id})
      }
      this.setState({all_cities: storage_obj})
    }
    catch(e){
      console.log('something went wrong:', e)
      
    }
  }




  
  //here
  get_accounts_data = async (_account, is_syncing, web3_url, e5_address, e5) => {
    const web3 = new Web3(web3_url);
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    const address_account = _account


    /* ---------------------------------------- CONTRACT ADDRESSES -------------------------------------- */
    var contract_addresses_events = await contractInstance.getPastEvents('e7', { fromBlock: this.get_first_block(e5), toBlock: this.get_first_block(e5)+50 }, (error, events) => {})
    var contract_addresses = contract_addresses_events[0].returnValues.p5
    var addresses_clone = structuredClone(this.state.addresses)
    addresses_clone[e5] = contract_addresses
    this.setState({addresses: addresses_clone})

    var boot_time_clone = structuredClone(this.state.boot_times)
    boot_time_clone[e5] = {'time': contract_addresses_events[0].returnValues.p3/* timestamp */, 'block':contract_addresses_events[0].returnValues.p4/* block_number */}
    this.setState({boot_times: boot_time_clone})

    if(is_syncing){
      this.inc_synch_progress()
    }


    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    


    /* ---------------------------------------- ACCOUNT DATA ------------------------------------------- */
    var accounts = await contractInstance.methods.f167([],[address_account.address], 2).call((error, result) => {});
    console.log('account_id',accounts[0], 'for e5 ',e5)
    var account = accounts[0] == 0 ? 1 : accounts[0]

    var clone = structuredClone(this.state.user_account_id)
    clone[e5] = account
    this.setState({user_account_id: clone})

    if(is_syncing){
      this.inc_synch_progress()
    }






    /* ---------------------------------------- NITRO LINK DATA -------------------------------------- */
    await this.get_my_nitro_link_data(web3, E52contractInstance, e5, account);
    if(is_syncing){
      this.inc_synch_progress()
    }





    /* ---------------------------------------- BALANCE DATA -------------------------------------- */
    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = contract_addresses[2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);
    await this.get_nitro_data(E52contractInstance, web3, e5, contract_addresses, [], account, F5contractInstance)
    if(is_syncing){
      this.inc_synch_progress()
    }




    /* ---------------------------------------- BALANCE DATA -------------------------------------- */
    await this.load_e5_balance_data(web3, contractInstance, account, e5, contract_addresses);
    this.load_pending_withdraw_event_data(web3, contractInstance, account, e5, contract_addresses)
    if(is_syncing){
      this.inc_synch_progress()
    }







    /* ---------------------------------------- EVENT DATA ------------------------------------------- */
    this.load_all_e5_runs_data(web3, contractInstance, e5, account)
    this.load_my_e5_runs_data(web3, contractInstance, e5, account)

    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- CONTACTS DATA------------------------------------------- */
    this.get_contacts_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }








    /* ---------------------------------------- BLOCKED ACCOUNTS DATA ------------------------------------------- */
    this.get_blocked_accounts_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- FOLLOWED ACCOUNTS DATA ------------------------------------------- */
    this.get_my_followed_accounts_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- MY BLOCKED POSTS DATA ------------------------------------------- */
    this.load_my_blocked_posts(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- MY CENSORED KEYWORDS DATA ------------------------------------------- */
    this.load_my_censored_keywords(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- MY PROMOTED POSTS DATA ------------------------------------------- */
    this.load_my_promoted_posts(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- ALBUM COLLECTION DATA ------------------------------------------- */
    await this.get_my_collection_data(web3, E52contractInstance, e5, account, address_account.address)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- PLAYLIST COLLECTION DATA ------------------------------------------- */
    await this.get_my_playlists_data(web3, E52contractInstance, e5, account, address_account.address)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- SECTION TAGS DATA ------------------------------------------- */
    await this.get_section_tags_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- MY PLAYS DATA ------------------------------------------- */
    await this.get_my_plays_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }






    /* ---------------------------------------- MY VIDEOS DATA ------------------------------------------- */
    await this.get_my_videos_data(web3, E52contractInstance, e5, account, address_account.address)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- UPLOADED DATA ------------------------------------------- */
    this.get_e5_uploaded_cid_data(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }







    /* ---------------------------------------- ALIAS DATA------------------------------------------- */
    this.get_alias_data(E52contractInstance, e5, account, web3);
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }








    /* ------------------------------------ CHANNEL PARTICIPATION DATA-------------------------- */
    this.load_my_participated_channel_ids(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ------------------------------------ POLL PARTICIPATION DATA-------------------------- */
    this.load_my_participated_poll_ids(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ------------------------------------ OBJECT PARTICIPATION DATA-------------------------- */
    this.load_my_participated_object_ids(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }








    /* ------------------------------------ CHANNEL FILE UPLOAD RECROD DATA-------------------------- */
    this.load_my_channel_file_records(web3, E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ------------------------------------ NITRO FILE RENEWAL RECROD DATA-------------------------- */
    this.load_my_file_renewal_records(web3,E52contractInstance, e5, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ---------------------------------------- SUBSCRIPTION DATA ------------------------------------------- */
    

    // this.get_subscription_data(contractInstance, F5contractInstance, account, web3, e5, contract_addresses, E52contractInstance)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ---------------------------------------- CONTRACT DATA ------------------------------------------- */
    const G5contractArtifact = require('./contract_abis/G5.json');
    const G5_address = contract_addresses[3];
    const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = contract_addresses[4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    this.load_main_contracts(e5)
    // this.get_contract_data(contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }





    /* ---------------------------------------- PROPOSAL DATA ------------------------------------------- */
    // this.get_proposal_data(G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }




    /* ---------------------------------------- TOKEN DATA ------------------------------------------- */
    const H5contractArtifact = require('./contract_abis/H5.json');
    const H5_address = contract_addresses[5];
    const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = contract_addresses[6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    
    var priority_ids = await this.get_my_token_ids(web3, contractInstance, e5, account)
    this.get_token_data(contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, priority_ids)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }



    /* ---------------------------------------- JOB DATA ------------------------------------------- */
    var posts_to_prioritize = await this.load_prioritised_job_posts(e5, web3, contract_addresses)
    if(is_syncing) this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, 0, posts_to_prioritize)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }


    /* ---------------------------------------- POST DATA ------------------------------------------- */
    // this.get_post_data(E52contractInstance, web3, e5, contract_addresses)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- CHANNEL DATA ------------------------------------------- */
    // this.get_channel_data(E52contractInstance, web3, e5, contract_addresses, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- MAIL DATA ------------------------------------------- */
    // this.get_sent_mail_data(E52contractInstance, e5, account, web3)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }
    
    // this.get_received_mail_data(E52contractInstance, e5, account, web3);
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- STOREFRONT DATA ------------------------------------------- */  
    // this.get_storefront_data(E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- BAG DATA ------------------------------------------- */
    // this.get_bag_data(contractInstance, web3, e5, contract_addresses, E52contractInstance, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    /* ---------------------------------------- CONTRACTOR DATA ------------------------------------------- */
    // this.get_contractor_data(E52contractInstance, contract_addresses, e5, web3, account)
    // if(is_syncing){
    //   this.inc_synch_progress()
    // }

    this.load_run_data(contractInstance, E52contractInstance, e5, web3, H52contractInstance)


    // this.get_total_supply_of_ether(e5)

    /* ---------------------------------------- ------------------------------------------- */
    /* ---------------------------------------- ------------------------------------------- */
    /* ---------------------------------------- ------------------------------------------- */
    /* ---------------------------------------- ------------------------------------------- */
  }

  load_all_e5_runs_data = async (web3, contractInstance, e5, account) => {
    var events = await this.load_event_data(web3, contractInstance, 'e4', e5, {})
    events = events.reverse()
    var clone = structuredClone(this.state.all_E5_runs)
    clone[e5] = events
    this.setState({all_E5_runs: clone});
  }

  load_my_e5_runs_data = async (web3, contractInstance, e5, account) => {
    var events = await this.load_event_data(web3, contractInstance, 'e4', e5, {p1/* sender_account_id */: account})
    events = events.reverse()
    var clone = structuredClone(this.state.E5_runs)
    clone[e5] = events
    this.setState({E5_runs: clone});
  }

  load_e5_balance_data = async (web3, contractInstance, account, e5, contract_addresses) => {
    var withdraw_balance = await contractInstance.methods.f167([account], [], 1).call((error, result) => {});
    var clone = structuredClone(this.state.withdraw_balance)
    clone[e5] = withdraw_balance[0]
    this.setState({withdraw_balance: clone})
    console.log('withdraw balance for e5: ',e5,' : ',withdraw_balance[0])

    var basic_transaction_data = await contractInstance.methods.f287([account]).call((error, result) => {});
    var clone = structuredClone(this.state.basic_transaction_data)
    clone[e5] = basic_transaction_data[0]
    this.setState({basic_transaction_data: clone})
    console.log('basic transaction data for e5: ',e5,' : ',basic_transaction_data[0])

    var E5_balance = await contractInstance.methods.f147(1).call((error, result) => {});
    var clone = structuredClone(this.state.E5_balance)
    clone[e5] = E5_balance
    this.setState({E5_balance: clone})
    console.log('E5 balance for e5: ',e5,' : ',E5_balance)


    var end_balance_of_E5 = await this.get_balance_in_exchange(3, 2, e5, contract_addresses)
    var spend_balance_of_E5 = await this.get_balance_in_exchange(5, 2, e5, contract_addresses)
    var end_balance_of_burn_account = await this.get_balance_in_exchange(3, 0, e5, contract_addresses)


    console.log('end_balance: ', end_balance_of_E5, ' spend_balance: ',spend_balance_of_E5, ' burn account balance: ', end_balance_of_burn_account)


    var end_balance_of_E5_clone = JSON.parse(JSON.stringify(this.state.end_balance_of_E5))
    end_balance_of_E5_clone[e5] = end_balance_of_E5

    var spend_balance_of_E5_clone = JSON.parse(JSON.stringify(this.state.spend_balance_of_E5))
    spend_balance_of_E5_clone[e5] = spend_balance_of_E5

    var end_balance_of_burn_account_clone = JSON.parse(JSON.stringify(this.state.end_balance_of_burn_account))
    end_balance_of_burn_account_clone[e5] = end_balance_of_burn_account

    this.setState({end_balance_of_E5:end_balance_of_E5_clone, spend_balance_of_E5:spend_balance_of_E5_clone, end_balance_of_burn_account: end_balance_of_burn_account_clone})

  }

  load_pending_withdraw_event_data = async (web3, contractInstance, account, e5, contract_addresses) => {
    var withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e2', e5, {p1/* sender_account_id */: account})

    var pending_withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e3', e5, {p1/* receiver_account_id */: account})

    var withdraw_clone = structuredClone(this.state.withdraw_event_data)
    withdraw_clone[e5] = withdraw_event_data

    var pending_withdraw_clone = structuredClone(this.state.pending_withdraw_event_data)
    pending_withdraw_clone[e5] = pending_withdraw_event_data

    this.setState({withdraw_event_data: withdraw_clone, pending_withdraw_event_data: pending_withdraw_clone})
  }
  
  get_contacts_data = async (web3, E52contractInstance, e5, account) => {
    var contacts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:1})

    if(contacts_data.length > 0){
      var latest_event = contacts_data[contacts_data.length - 1];
      var contacts_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var contacts = contacts_data['all_contacts']
      var time = contacts_data['time']
      if(contacts != null){
        if(this.my_contacts_timestamp == null){
          this.my_contacts_timestamp = 0
        }

        if(time > this.my_contacts_timestamp){
          this.setState({contacts: contacts})
          this.my_contacts_timestamp = time
        }
      }
    }else{
      var clone = structuredClone(this.state.contacts)
      var existing_contacts = clone[e5]
      if(existing_contacts == null){
        existing_contacts = []
      }
      clone[e5] = this.combine_contacts(existing_contacts, [])
      if(!this.state.should_update_contacts_onchain) this.setState({contacts: clone})
    }
  }

  get_blocked_accounts_data = async (web3, E52contractInstance, e5, account) => {
    var blocked_contacts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:2})

    if(blocked_contacts_data.length > 0){
      var latest_event = blocked_contacts_data[blocked_contacts_data.length - 1];
      var blocked_contacts_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
      var loaded_blocked_accounts = blocked_contacts_data['all_blocked_accounts']
      var timestamp = blocked_contacts_data['time']

      if(loaded_blocked_accounts != null){
        if(this.get_blocked_accounts_data_e5_timestamp == null){
          this.get_blocked_accounts_data_e5_timestamp = 0
        }
        if(timestamp > this.get_section_tags_data_e5_timestamp){
          this.setState({blocked_accounts: loaded_blocked_accounts})
          this.get_section_tags_data_e5_timestamp = timestamp
        }
      }
    }else{
      console.log('loaded no blocked accounts')
      var clone = structuredClone(this.state.blocked_accounts)
      var existing_blocked_accounts = clone[e5]
      if(existing_blocked_accounts == null){
        existing_blocked_accounts = []
      }
      clone[e5] = this.combine_contacts(existing_blocked_accounts, [])
      if(!this.state.should_update_blocked_accounts_onchain){
        this.setState({blocked_accounts: clone})
        console.log('setting blocked accounts from chain')
      }else{
        console.log('not setting blocked accounts from chain')
      }
    }
  }

  get_section_tags_data = async (web3, E52contractInstance, e5, account) => {
    var section_tags_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:3})

    if(section_tags_data_events.length != 0){
      var latest_event = section_tags_data_events[section_tags_data_events.length - 1];
      var section_tag_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var job_section_tags = section_tag_data['job_section_tags']
      var explore_section_tags = section_tag_data['explore_section_tags']
      var timestamp = section_tag_data['time']

      if(this.get_section_tags_data_e5_timestamp == null){
        this.get_section_tags_data_e5_timestamp = 0
      }

      if(timestamp > this.get_section_tags_data_e5_timestamp){
        var job_section_tags_clone = this.state.job_section_tags.slice()
        var explore_section_tags_clone = this.state.explore_section_tags.slice()
        
        job_section_tags.forEach(tag => {
          if(!job_section_tags_clone.includes(tag)){
            job_section_tags_clone.push(tag)
          }
        });

        explore_section_tags.forEach(tag => {
          if(!explore_section_tags_clone.includes(tag)){
            explore_section_tags_clone.push(tag)
          }
        });

        this.setState({job_section_tags: job_section_tags_clone, explore_section_tags: explore_section_tags_clone})

        this.homepage.current?.reset_tags_sections(explore_section_tags_clone, job_section_tags_clone)
      }
    }else{
      if(this.section_tags_data_user != account && this.section_tags_data_user != null && this.section_tags_data_user != 1){
        this.setState({job_section_tags: [], explore_section_tags: []})
      }
    }

    this.section_tags_data_user = account
  }

  get_my_token_ids = async (web3, contractInstance, e5, account) => {
    var created_token_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */, p3/* sender_account_id */:account})
    var ids = []
    created_token_events.forEach(event => {
      var id = event.returnValues.p1
      ids.push(id)
    });
    return ids
  }

  get_e5_uploaded_cid_data  = async (web3, E52contractInstance, e5, account) => {
    var section_cid_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:4})
    console.log('apppage', 'loaded cid events', section_cid_data_events)
    if(section_cid_data_events.length != 0){
      const cids = [];
      const latest_events = section_cid_data_events.slice(-3) 
      if(this.state.beacon_node_enabled == true){
        try{
          await this.fetch_multiple_cids_from_nitro(latest_events, 0, 'p4')
        }catch(e){
          console.log('apppage', e)
        }
      }
      console.log('apppage', 'loaded cid event data')
      for(var c = latest_events.length - 1; c >= 0; c--){
        const latest_event = latest_events[c];
        const section_cid_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
        if(section_cid_data != null){
          if(section_cid_data['encrypted'] != null && section_cid_data['encrypted'] == true){
            const key = this.state.accounts['E25'].privateKey.toString()
            const bytes = CryptoJS.AES.decrypt(section_cid_data['cids'], key);
            const originalText = bytes.toString(CryptoJS.enc.Utf8);
            const decrypted_data_object = JSON.parse(JSON.parse(originalText));
            decrypted_data_object['data'].forEach(item => {
              if(item != null && !cids.includes(item)){
                cids.push(item)
              }
            });
          }else{
            // console.log('datas', 'decrypted_data_object', section_cid_data)
            section_cid_data['cids'].forEach(item => {
              if(item != null && !cids.includes(item)){
                cids.push(item)
              }
            });
          }
        }
        console.log('apppage', 'loaded cid event data for one event')
      }
      const clone = this.state.uploaded_data_cids.slice()
      cids.forEach(cid => {
        if(!clone.includes(cid) && !this.state.deleted_files.includes(cid)){
          clone.push(cid)
        }
      });
      console.log('apppage', 'loaded uplpaded cid datas', clone)
      this.fetch_uploaded_data_from_ipfs(clone, true)
    }else{
      if(this.uploaded_data_user != account && this.uploaded_data_user != null && this.uploaded_data_user != 1){
        this.setState({uploaded_data_cids:[]})
      }else{
        if(this.state.uploaded_data_cids.length != 0){
          var clone = this.state.uploaded_data_cids.slice();
          this.fetch_uploaded_data_from_ipfs(clone, true)
        }
      }
    }

    this.uploaded_data_user = account
  }

  fetch_uploaded_data_from_ipfs = async (cids, is_my_cids) => {
    // console.log('datas', 'all cids', cids)
    if(is_my_cids){
      this.setState({uploaded_data_cids: cids})
    }
    var nitro_cid_data = []
    var selected_cids = []
    for(var e=0; e<cids.length; e++){
      var ecid_obj = this.get_cid_split(cids[e])
      var id = ecid_obj['cid']
      var filetype = ecid_obj['filetype']
      var storage_id = ecid_obj['storage']
      var file_name = ecid_obj['file_name']
      if(storage_id == 'ni'){
        var data = await this.fetch_from_storage(cids[e])
        if(data == null){
          nitro_cid_data.push(ecid_obj)
          selected_cids.push(cids[e])
        }else{
          if(filetype == 'video'){
            this.load_and_store_video_thumbnail(cids[e], data)
          }
          var clone = structuredClone(this.state.uploaded_data)
          try{
            if(clone[filetype] == null) clone[filetype] = {}
            clone[filetype][cids[e]] = data
            this.setState({uploaded_data: clone})
            // console.log('apppage', 'set one cid object in memory.')
          }catch(e){
            console.log('datas', e)
          }
        }
      }
    }
    if(nitro_cid_data.length != null){
      await this.fetch_multiple_file_datas_from_nitro_storage(nitro_cid_data, selected_cids)
    }

    // console.log('apppage', 'starting loaded cid objects...')
    for(var i=0; i<cids.length; i++){
      // console.log('datas', 'fetching', cids[i])
      var ecid_obj = this.get_cid_split(cids[i])
      var id = ecid_obj['cid']
      var filetype = ecid_obj['filetype']
      var storage_id = ecid_obj['storage']
      var file_name = ecid_obj['file_name']
      // console.log('datas', 'fetching object', ecid_obj)
      var data = await this.fetch_from_storage(cids[i])
      if(data == null){
        data = await this.fetch_file_data_from_respective_storage(id, storage_id, file_name, 0)
        // console.log('datas', 'loaded:', data)
        if(data != null) this.store_in_local_storage(cids[i], data);
      }
      if(data != null){
        // console.log('apppage', 'loaded one cid event data object')
        if(filetype == 'video'){
          this.load_and_store_video_thumbnail(cids[i], data)
        }
        var clone = structuredClone(this.state.uploaded_data)
        try{
          if(clone[filetype] == null) clone[filetype] = {}
          clone[filetype][cids[i]] = data
          this.setState({uploaded_data: clone})
          // console.log('apppage', 'set one cid object in memory.')
        }catch(e){
          console.log('datas', e)
        }
      }
    }
  }

  load_and_store_video_thumbnail(cid, data){
    var link = data['data']
    var existing_thumbnail = data['thumbnail']
    if(existing_thumbnail != null && existing_thumbnail != ''){
      var clone = structuredClone(this.state.video_thumbnails)
      clone[cid] = existing_thumbnail
      this.setState({video_thumbnails: clone})
    }else{
      this.extractFirstFrame(link).then(blob => {
        const imageUrl = URL.createObjectURL(blob);
        var clone = structuredClone(this.state.video_thumbnails)
        clone[cid] = imageUrl
        this.setState({video_thumbnails: clone})
      });
    }
  }

  extractFirstFrame(videoUrl) {
    return new Promise((resolve, reject) => {
      const video = document.createElement("video");

      video.src = videoUrl;
      video.crossOrigin = "anonymous"; // Needed if video is from another domain
      video.preload = "auto";
      video.muted = true;

      video.addEventListener("loadeddata", () => {
        video.currentTime = 0; // Seek to the beginning
      });

      video.addEventListener("seeked", () => {
        const canvas = document.createElement("canvas");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext("2d");
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Get a base64 image string or blob
        canvas.toBlob(blob => {
          resolve(blob); // Or use canvas.toDataURL() if you want a base64 string
        }, "image/jpeg");
      });

      video.addEventListener("error", (err) => {
        reject("Error loading video: " + err.message);
      });
    });
  }

  get_cid_split(ecid){
    var split_cid_array = ecid.split('_');
    var filetype = split_cid_array[0]
    var cid_with_storage = split_cid_array[1]
    var cid = cid_with_storage
    var storage_with_filename = 'ch.data1'
    var storage = 'ch'
    var file_name = 'data1'
    if(cid_with_storage.includes('.')){
      var split_cid_array2 = cid_with_storage.split('.')
      cid = split_cid_array2[0]
      storage_with_filename = split_cid_array2[1]
      storage = storage_with_filename
      if(storage_with_filename.includes(',')){
        var split_cid_array3 = storage_with_filename.split(',')
        storage = split_cid_array3[0]
        file_name = split_cid_array3[1]
      }
    }

    return {'filetype':filetype, 'cid':cid, 'storage':storage, 'file_name':file_name, 'full':ecid}
  }

  fetch_uploaded_files_for_object = async (object) => {
    var ecids = [];
    if(object['ipfs'] != null){
      var images_to_add = object['ipfs'].entered_image_objects == null ? [] : object['ipfs'].entered_image_objects
      if(images_to_add.length > 0){
        images_to_add.forEach(item => {
          if(this.is_ecid(item)) ecids.push(item)
        });
      }

      var pdfs_to_add = object['ipfs'].entered_pdf_objects == null ? [] : object['ipfs'].entered_pdf_objects
      if(pdfs_to_add.length > 0){
        pdfs_to_add.forEach(item => {
          if(this.is_ecid(item)) ecids.push(item)
        });
      }

      var zips_to_add = object['ipfs'].entered_zip_objects == null ? [] : object['ipfs'].entered_zip_objects
      if(zips_to_add.length > 0){
        zips_to_add.forEach(item => {
          if(this.is_ecid(item)) ecids.push(item)
        });
      }

      var items = object['ipfs'].entered_objects == null ? [] : object['ipfs'].entered_objects
      if(items.length > 0){
        items.forEach(item => {
          if(item['type'] == '11'){
            var image = item['data']['image']
            if(this.is_ecid(image)) ecids.push(image)
          }
        });
      }

      var variants = object['ipfs'].variants == null ? [] : object['ipfs'].variants
      if(variants.length > 0){
        variants.forEach(variant => {
          var variant_images = variant['image_data']['data']['images']
          if(variant_images.length > 0){
            variant_images.forEach(image => {
              if(this.is_ecid(image)) ecids.push(image)
            });
          }
        });
      }
      var songs = object['ipfs'].songs == null ? [] : object['ipfs'].songs
      if(songs.length > 0){
        songs.forEach(song => {
          var song_data_link = song['track']
          if(this.is_ecid(song_data_link)) ecids.push(song_data_link)
        });
      }

      var videos = object['ipfs'].videos == null ? [] : object['ipfs'].videos
      if(videos.length > 0){
        videos.forEach(video => {
          var video_data_link = video['video']
          if(this.is_ecid(video_data_link)) ecids.push(video_data_link)
        });
      }
    }

    if(object['image-data'] != null){
      var images = object['image-data']['images']
      if(images != null && images.length > 0){
        images.forEach(image => {
          if(this.is_ecid(image)) ecids.push(image)
        });
      }
    }

    if(object['pdf-data'] != null){
      var pdfs = object['pdf-data']
      if(pdfs.length > 0){
        pdfs.forEach(pdf => {
          if(this.is_ecid(pdf)) ecids.push(pdf)
        });
      }
    }

    if(ecids.length > 0){
      this.fetch_uploaded_data_from_ipfs(ecids, false)
    }
  }

  is_ecid(ecid){
    if(
      ecid.startsWith('image') || 
      ecid.startsWith('audio') || 
      ecid.startsWith('video') || 
      ecid.startsWith('pdf') || 
      ecid.startsWith('zip') || 
      ecid.startsWith('lyric')|| 
      ecid.startsWith('subtitle')
    ){
      return true;
    }else{
      return false
    }
  }

  get_my_collection_data = async (web3, E52contractInstance, e5, account, address_account) => {
    var my_acquired_album_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:5})

    if(my_acquired_album_data_events.length > 0){
      var latest_event = my_acquired_album_data_events[my_acquired_album_data_events.length - 1];
      // console.log('my_collection_data', latest_event.returnValues.p4)
      var my_acquired_album_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
      var my_albums = my_acquired_album_data['my_albums']
      var my_tracks = my_acquired_album_data['my_tracks']
      var timestamp = my_acquired_album_data['time']

      if(this.my_collection_timestamp == null){
        this.my_collection_timestamp = 0
      }

      if(this.my_collection_account != address_account && this.my_collection_account != null){
        this.my_collection_timestamp = 0
      }

      if(parseInt(this.my_collection_timestamp) < parseInt(timestamp)){
        console.log('my_collection_data', my_albums, my_tracks)
        this.setState({my_albums: my_albums, my_tracks: my_tracks})
        this.my_collection_timestamp = timestamp
      }
    }

    this.my_collection_account = address_account
  }

  get_my_playlists_data = async (web3, E52contractInstance, e5, account, address_account) => {
    var playlists_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:6})

    if(playlists_event_data.length > 0){
      var latest_event = playlists_event_data[playlists_event_data.length - 1];
      var playlists_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_playlists = playlists_data['playlists']
      var timestamp = playlists_data['time']

      if(this.my_playlists_timestamp == null){
        this.my_playlists_timestamp = 0
      }
      
      if(parseInt(this.my_playlists_timestamp) < parseInt(timestamp)){
        var clone = this.state.my_playlists.slice()
        if(this.my_playlist_account != address_account && this.my_playlist_account != null){
          clone = []
        }
        var new_playlist = this.combine_playlists(loaded_playlists, clone)
        this.setState({my_playlists: new_playlist})
        this.my_playlists_timestamp = timestamp
      }
    }

    this.my_playlist_account = address_account
  }

  combine_playlists(loaded_playlists, clone){
    var new_playlist = [].concat(loaded_playlists)
    clone.forEach(playlist => {
      if(this.get_item_in_array(new_playlist, playlist['id']) == null){
        new_playlist.push(playlist)
      }
    });
    return new_playlist
  }

  get_item_in_array(object_array, id){
    var object = object_array.find(x => x['id'] === id);
    return object
  }

  get_my_plays_data = async (web3, E52contractInstance, e5, account) => {
    var plays_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:7})

    if(plays_event_data.length > 0){
      var latest_event = plays_event_data[plays_event_data.length - 1];
      var plays_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      if(plays_data != null){
        var loaded_plays = plays_data['plays']
        var timestamp = plays_data['time']

        if(this.my_loaded_plays_collection_timestamp == null){
          this.my_loaded_plays_collection_timestamp = 0
        }

        if(parseInt(this.my_loaded_plays_collection_timestamp) < parseInt(timestamp)){
          this.my_loaded_plays_collection_timestamp = timestamp
          var clone = structuredClone(this.state.song_plays)
          if(this.my_plays_account != account && this.my_plays_account != 1 && this.my_plays_account != null){
            clone = {}
          }
          for (const song_id in loaded_plays) {
            if (loaded_plays.hasOwnProperty(song_id)) {
              var count_array = loaded_plays[song_id]
              if(clone[song_id] == null){
                clone[song_id] = []
              }
              count_array.forEach(time_element => {
                if(!clone[song_id].includes(time_element)){
                  clone[song_id].push(time_element)
                }
              });
            }
          }
          this.setState({song_plays: clone})
        }
      }
    }

    this.my_plays_account = account
  }

  get_my_videos_data = async (web3, E52contractInstance, e5, account, address_account) => {
    var my_acquired_videos_data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:11})

    if(my_acquired_videos_data_events.length > 0){
      var latest_event = my_acquired_videos_data_events[my_acquired_videos_data_events.length - 1];
      var my_acquired_video_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
      var my_videoposts = my_acquired_video_data['my_videoposts']
      var my_videos = my_acquired_video_data['my_videos']
      var timestamp = my_acquired_video_data['time']

      if(this.my_video_collection_timestamp == null){
        this.my_video_collection_timestamp = 0
      }

      if(this.my_video_collection_account != address_account && this.my_video_collection_account != null){
        this.my_video_collection_timestamp = 0
      }

      if(parseInt(this.my_video_collection_timestamp) < parseInt(timestamp)){
        this.setState({my_videoposts: my_videoposts, my_videos: my_videos})
        this.my_video_collection_timestamp = timestamp
      }
    }

    this.my_video_collection_account = address_account
  }

  get_my_nitro_link_data = async (web3, E52contractInstance, e5, account) => {
    var nitro_link_registry = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:400});
    var registered_nitro_links = {}
    var registered_nitro_links_authors = {}
    nitro_link_registry.forEach(event => {
      var id = event.returnValues.p1/* target_id */
      var data = event.returnValues.p4/* string_data */
      var author = event.returnValues.p2/* sender_acc_id */
      if(registered_nitro_links[(id+e5)] != null){
        if(author.toString() == registered_nitro_links_authors[(id+e5)].toString()){
          //link was reset by author
          registered_nitro_links[(id+e5)] = data
        }
      }else{
        registered_nitro_links[(id+e5)] = data
        registered_nitro_links_authors[(id+e5)] = author
      }
      
    });
    var registered_nitro_links_clone = structuredClone(this.state.nitro_links)
    registered_nitro_links_clone[e5] = registered_nitro_links
    this.setState({nitro_links: registered_nitro_links_clone})
  }

  get_my_followed_accounts_data = async (web3, E52contractInstance, e5, account) => {
    var followed_accounts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:8})

    if(followed_accounts_data.length > 0){
      var latest_event = followed_accounts_data[followed_accounts_data.length - 1];
      var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_followed_accounts = followed_account_data['followed_accounts']
      var timestamp = followed_account_data['time']

      if(this.my_followed_accounts_collection_timestamp == null){
        this.my_followed_accounts_collection_timestamp = 0
      }

      if(loaded_followed_accounts != null && parseInt(this.my_followed_accounts_collection_timestamp) < parseInt(timestamp)){
        var clone = []
        for(var i=0; i<loaded_followed_accounts.length; i++){
          var account = loaded_followed_accounts[i]
          if(!clone.includes(account)){
            clone.push(account)
          }
        }
        if(this.has_my_followed_accounts_loaded[e5] != account){
          this.setState({followed_accounts: clone})
          this.has_my_followed_accounts_loaded[e5] = account
          this.my_followed_accounts_collection_timestamp = timestamp
        }
      }
    }

    if(this.state.followed_accounts.length != 0){
      this.load_blocked_posts(web3, E52contractInstance, e5, account)
      this.load_censored_keywords(web3, E52contractInstance, e5, account)
      this.load_promoted_posts(web3, E52contractInstance, e5, account)
    }
  }

  load_my_blocked_posts = async (web3, E52contractInstance, e5, account) => {
    var my_blocked_posts_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:9})

    if(my_blocked_posts_event_data.length > 0){
      var latest_event = my_blocked_posts_event_data[my_blocked_posts_event_data.length - 1];
      var blocked_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var posts_blocked_by_me = blocked_account_data['posts_blocked_by_me']

      var clone = this.state.posts_blocked_by_me.slice()
      for(var i=0; i<posts_blocked_by_me.length; i++){
        var post = posts_blocked_by_me[i]
        if(!clone.includes(post)){
          clone.push(post)
        }
      }
      if(this.has_posts_blocked_by_me_loaded[e5] != account){
        this.setState({posts_blocked_by_me: clone})
        this.has_posts_blocked_by_me_loaded[e5] = account
      }
    }
  }

  load_blocked_posts = async (web3, E52contractInstance, e5, account) => {
    var accounts_to_load = this.filter_followed_accounts_by_e5(e5)
    var followed_accounts_blocked_posts_events_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:9})

    var followed_accounts_blocked_posts_events_data = followed_accounts_blocked_posts_events_data.filter(function (event) {
      return (accounts_to_load.includes(parseInt(event.returnValues.p1)))
    })

    var accounts_obj = {}
    followed_accounts_blocked_posts_events_data.forEach(event => {
      accounts_obj[event.returnValues.p2/* sender_acc_id */] = event;
    });

    followed_accounts_blocked_posts_events_data = []
    for (const account in accounts_obj) {
      if (accounts_obj.hasOwnProperty(account)) {
        followed_accounts_blocked_posts_events_data.push(accounts_obj[account])
      }
    }

    if(followed_accounts_blocked_posts_events_data.length != 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(followed_accounts_blocked_posts_events_data, 0, 'p4')
      }

      var clone = this.state.posts_blocked_by_my_following.slice()
      for(var i=0; i<followed_accounts_blocked_posts_events_data.length; i++){
        var latest_event = followed_accounts_blocked_posts_events_data[i]
        var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
        var blocked_post = followed_account_data['posts_blocked_by_me']
        blocked_post.forEach(post_id => {
          if(!clone.includes(post_id)){
            clone.push(post_id)
          }
        });
      }
      this.setState({posts_blocked_by_my_following: clone})
    }
  }

  filter_followed_accounts_by_e5(e5){
    var loaded_followed_accounts = this.state.followed_accounts
    var accepted_ids = []
    for(var i=0; i<loaded_followed_accounts.length; i++){
      var item = loaded_followed_accounts[i]
      var split_account_array = item.split(':')
      var item_e5 = split_account_array[0]
      var account = split_account_array[1]
      if(item_e5 == e5){
        accepted_ids.push(parseInt(account))
      }
    }
    return accepted_ids
  }

  load_my_censored_keywords = async (web3, E52contractInstance, e5, account) => {
    var my_censored_keywords_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:10})

    if(my_censored_keywords_event_data.length > 0){
      var latest_event = my_censored_keywords_event_data[my_censored_keywords_event_data.length - 1];
      var censored_keywords_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var censored_keywords_by_me = censored_keywords_data['censored_keywords']

      var clone = this.state.censored_keyword_phrases.slice()
      for(var i=0; i<censored_keywords_by_me.length; i++){
        var post = censored_keywords_by_me[i]
        if(!clone.includes(post)){
          clone.push(post)
        }
      }
      if(this.has_censored_keywords_by_me_loaded[e5] != account){
        this.setState({censored_keyword_phrases: clone})
        this.has_censored_keywords_by_me_loaded[e5] = account
      }
    }
  }

  load_censored_keywords = async (web3, E52contractInstance, e5, account) => {
    var accounts_to_load = this.filter_followed_accounts_by_e5(e5)
    var followed_accounts_censored_keywords_events_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:10})

    var followed_accounts_censored_keywords_events_data = followed_accounts_censored_keywords_events_data.filter(function (event) {
      return (accounts_to_load.includes(parseInt(event.returnValues.p1)))
    })

    var accounts_obj = {}
    followed_accounts_censored_keywords_events_data.forEach(event => {
      accounts_obj[event.returnValues.p2/* sender_acc_id */] = event;
    });

    followed_accounts_censored_keywords_events_data = []
    for (const account in accounts_obj) {
      if (accounts_obj.hasOwnProperty(account)) {
        followed_accounts_censored_keywords_events_data.push(accounts_obj[account])
      }
    }

    if(followed_accounts_censored_keywords_events_data.length != 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(followed_accounts_censored_keywords_events_data, 0, 'p4')
      }

      var clone = this.state.censored_keywords_by_my_following.slice()
      for(var i=0; i<followed_accounts_censored_keywords_events_data.length; i++){
        var latest_event = followed_accounts_censored_keywords_events_data[i]
        var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
        var censored_keywords = followed_account_data['censored_keywords']
        censored_keywords.forEach(keyword => {
          if(!clone.includes(keyword)){
            clone.push(keyword)
          }
        });
      }
      this.setState({censored_keywords_by_my_following: clone})
    }
  }

  load_my_promoted_posts = async (web3, E52contractInstance, e5, account) => {
    var my_promoted_posts_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:12})

    if(my_promoted_posts_event_data.length > 0){
      var latest_event = my_promoted_posts_event_data[my_promoted_posts_event_data.length - 1];
      var promoted_posts_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
      var promoted_posts_by_me = promoted_posts_data['data']

      var clone = structuredClone(this.state.posts_reposted_by_me)
      for(var i=0; i<promoted_posts_by_me['audio'].length; i++){
        var post = promoted_posts_by_me['audio'][i]
        if(!clone['audio'].includes(post)){
          clone['audio'].push(post)
        }
      }
      for(var i=0; i<promoted_posts_by_me['video'].length; i++){
        var post = promoted_posts_by_me['video'][i]
        if(!clone['video'].includes(post)){
          clone['video'].push(post)
        }
      }
      
      for(var i=0; i<promoted_posts_by_me['post'].length; i++){
        var post = promoted_posts_by_me['post'][i]
        if(!clone['post'].includes(post)){
          clone['post'].push(post)
        }
      }
      if(this.has_promoted_posts_by_me_loaded[e5] != account){
        this.setState({posts_reposted_by_me: clone})
        this.has_promoted_posts_by_me_loaded[e5] = account
      }
    }
  }

  load_promoted_posts = async (web3, E52contractInstance, e5, account) => {
    var accounts_to_load = this.filter_followed_accounts_by_e5(e5)

    var followed_accounts_promoted_posts_events_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:12})

    var followed_accounts_promoted_posts_events_data = followed_accounts_promoted_posts_events_data.filter(function (event) {
      return (accounts_to_load.includes(parseInt(event.returnValues.p1)))
    })

    console.log('promoted_posts', accounts_to_load, followed_accounts_promoted_posts_events_data) 

    var accounts_obj = {}
    followed_accounts_promoted_posts_events_data.forEach(event => {
      accounts_obj[event.returnValues.p2/* sender_acc_id */] = event;
    });

    followed_accounts_promoted_posts_events_data = []
    for (const account in accounts_obj) {
      if (accounts_obj.hasOwnProperty(account)) {
        followed_accounts_promoted_posts_events_data.push(accounts_obj[account])
      }
    }

    if(followed_accounts_promoted_posts_events_data.length != 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(followed_accounts_promoted_posts_events_data, 0, 'p4')
      }

      var clone = structuredClone(this.state.posts_reposted_by_my_following)
      for(var i=0; i<followed_accounts_promoted_posts_events_data.length; i++){
        var latest_event = followed_accounts_promoted_posts_events_data[i]
        var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4)
        var promoted_posts = followed_account_data['data']
        promoted_posts['audio'].forEach(post => {
          if(!clone['audio'].includes(post)){
            clone['audio'].push(post)
          }
        });
        promoted_posts['video'].forEach(post => {
          if(!clone['video'].includes(post)){
            clone['video'].push(post)
          }
        });
        promoted_posts['post'].forEach(post => {
          if(!clone['post'].includes(post)){
            clone['post'].push(post)
          }
        });
        
      }
      this.setState({posts_reposted_by_my_following: clone})
    }
  }

  load_my_participated_channel_ids = async (web3, E52contractInstance, e5, account) => {
    var channel_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:14})

    if(channel_event_data.length > 0){
      var latest_event = channel_event_data[channel_event_data.length - 1];
      var channel_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_channels = channel_data['data']
      var timestamp = channel_data['time']

      if(this.my_channel_timestamp == null){
        this.my_channel_timestamp = 0
      }
      
      if(parseInt(this.my_channel_timestamp) < parseInt(timestamp)){
        this.setState({my_channels: loaded_channels})
        this.my_channel_timestamp = timestamp
      }
    }
  }

  load_my_participated_poll_ids = async (web3, E52contractInstance, e5, account) => {
    var poll_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:15})

    if(poll_event_data.length > 0){
      var latest_event = poll_event_data[poll_event_data.length - 1];
      var poll_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_polls = poll_data['data']
      var timestamp = poll_data['time']

      if(this.my_poll_timestamp == null){
        this.my_poll_timestamp = 0
      }
      
      if(parseInt(this.my_poll_timestamp) < parseInt(timestamp)){
        this.setState({my_polls: loaded_polls})
        this.my_poll_timestamp = timestamp
      }
    }
  }

  load_my_participated_object_ids = async (web3, E52contractInstance, e5, account) => {
    var object_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:16})

    if(object_event_data.length > 0){
      var latest_event = object_event_data[object_event_data.length - 1];
      var object_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var loaded_objects = object_data['data']
      var timestamp = object_data['time']

      if(this.my_object_timestamp == null){
        this.my_object_timestamp = 0
      }
      
      if(parseInt(this.my_object_timestamp) < parseInt(timestamp)){
        this.setState({my_objects: loaded_objects})
        this.my_object_timestamp = timestamp
      }
    }
  }

  load_my_channel_file_records = async (web3, E52contractInstance, e5, account) => {
    const object_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 27/* 27(creator_group_channel_container) */, p2/* sender_acc_id */:account})

    if(object_event_data.length > 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(object_event_data, 0, 'p4')
      }

      for(var i=0; i<object_event_data.length; i++){
        const event = object_event_data[i]
        const object_data = await this.fetch_objects_data_from_ipfs_using_option(event.returnValues.p4)
        if(object_data != null){
          const hashed_channel_id = event.returnValues.p3/* context */
          const my_added_files = object_data['e']
          
          var clone = structuredClone(this.state.my_channel_files_directory)
          my_added_files.forEach(file_id => {
            clone[file_id] = hashed_channel_id 
          });
          this.setState({my_channel_files_directory: clone})
        }
      }
    }
  }

  load_my_file_renewal_records = async (web3, E52contractInstance, e5, account) => {
    const object_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:17})

    if(object_event_data.length > 0){
      const latest_event = object_event_data[object_event_data.length -1]
      var object_data = await this.fetch_objects_data_from_ipfs_using_option(latest_event.returnValues.p4) 
      var clone = structuredClone(this.state.latest_file_renewal_time)
      clone[e5] = object_data
      this.setState({latest_file_renewal_time: clone})
    }
  }








  //here
  load_ether_history = async (e5, address) =>{
    if(address.toString() == '0xB5195BA86F7a2D6AE1bFE15129Dbc9202f04B4c1') return;
    console.log('loading ether history from e5: ',e5)
    var link = ''
    var body = {}
    var e5_address_obj = {}

    if(e5 == 'E35'){
      // link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E25'){
      // link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E45'){
      try {
        const response = await fetch('https://api.harmony.one', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            'jsonrpc': '2.0',
            'method': 'hmyv2_getTransactionsHistory',
            'params': [
              {
                'address': toBech32(address),
                'pageIndex': 0,
                'pageSize': 1000,
                'fullTx': true,
                'txType': 'ALL',
                'order': 'DESC'
              }
            ],
            'id': 1
          })
        });
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('------------------------load_ether_history---------------------------')
        console.log(toBech32(address))
        console.log(e5_address_obj)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E55'){
      link = `https://explorer.celo.org/mainnet/api?module=account&action=tokentx&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E55:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E65'){
      link = `https://flare-explorer.flare.network/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E65:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E75'){
      var key = ''+process.env.REACT_APP_GNOSIS_API_KEY
      // link = `https://gnosis.blockscout.com/api/v2/addresses/${address}/transactions`
      link = `https://api.gnosisscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E75:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E85'){
      link = `https://explorer.fuse.io/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E85:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E95'){
      var key = ''+process.env.REACT_APP_MOONBEAM_API_KEY
      link = `https://api-moonbeam.moonscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=latest&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E95:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E105'){
      var key = ''+process.env.REACT_APP_MOONRIVER_API_KEY
      link = `https://api-moonriver.moonscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=2&sort=desc&apikey=${key}`

      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E105:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E125'){
      var key = ''+process.env.REACT_APP_POLYGONSCAN_API_KEY
      link = `https://api.polygonscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E125:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E135'){
      var key = ''+process.env.REACT_APP_BINANCE_API_KEY
      link = `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E135:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E115'){
      var xdc_add = this.replace_0x_with_xdc(address)
      link = `https://xdc.blocksscan.io/api/txs/listByAccount/${xdc_add}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-----------------------------------E115:load_ether_history--------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E155'){
      link = `http://explorer-mainnet.thundercore.com/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E155:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E145'){
      link=`http://explorer.energi.network/api?module=account&action=tokentx&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E145:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E165'){
      link = `https://tomoscan.io/api/transaction/list?account=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E145:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E185'){
      link = `https://eth.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E195'){
      link = `https://optimism.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E205'){
      link = `https://base.blockscout.com/api/v2/addresses/${address}/transactions`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E215'){
      var key = ''+process.env.REACT_APP_ARBITRUM_API_KEY
      link = `https://api.arbiscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E215:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E225'){
      link = `https://blockscout.com/astar/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E225:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E235'){
      link = `https://cronos.org/explorer/api?module=account&action=txlist&address=${address}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E235:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E245'){
      link = `https://kavascan.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E245:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E255'){
      link = `https://neon.blockscout.com/api/v2/addresses/${address}/transactions`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E255:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E265'){
      link = `https://explorer-mainnet-cardano-evm.c1.milkomeda.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E265:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E275'){
      var key = ''+process.env.REACT_APP_FANTOM_API_KEY
      link = `https://api.ftmscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${key}`
      try {
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('-------------------------------------E275:load_ether_history----------------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E285'){
      link = `https://brisescan.com/api/v2/addresses/${address}/transactions`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E285:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E295'){
      link = `https://explorer.syscoin.org/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E295:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E305'){
      link = `https://api-beta.avascan.info/v2/network/mainnet/evm/43114/address/${address}/transactions?ecosystem=avalanche&sort=desc`

      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E305:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E315'){
      link = `https://evm.findorascan.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E315:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E325'){
      link = `https://blockscout.bellecour.iex.ec/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E325:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E335'){
      link = `https://explorer.emerald.oasis.dev/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E335:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E345'){
      link = `https://ozonescan.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E345:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E355'){
      link = `https://scan.chain.pixie.xyz/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E355:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E365'){
      link = `https://scan.rei.network/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E365:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E385'){
      link = `https://explorer.mantle.xyz/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E385:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E395'){
      link = `https://api.scan.pulsechain.com/api/v2/addresses/${address}/transactions`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E395:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E485'){
      link = `https://explorer.energyweb.org/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E485:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E495'){
      link = `https://explorer.callisto.network/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E495:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E505'){
      link = `https://blockscout.com/shiden/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E505:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E515'){
      link = `https://tenetscan.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E515:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E565'){
      link = `https://evmapi.confluxscan.net/api?module=account&action=txlist&address=${address}&page=1&offset=100&sort=desc`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E515:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E625'){
      link = `https://seeleview.net/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E625:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E675'){
      link = `http://edgscan.live/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E675:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E685'){
      link = `http://blockexplorer.bloxberg.org/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E685:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E695'){
      link = `http://phoenixplorer.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E695:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E705'){
      link = `http://explorer.omchain.io/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E705:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E735'){
      link = `https://explorer.ecredits.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        console.log('--------------------------------E735:load_ether_history-----------------------------------')
        console.log(e5_address_obj)
        console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    else if(e5 == 'E755'){
      link = `https://explorer.ethoprotocol.com/api?module=account&action=txlist&address=${address}`
      try{
        const response = await fetch(link);
        if (!response.ok) {
          throw new Error(`Failed to retrieve ${e5} address tx history data. Status: ${response}`);
        }
        const data = await response.text();
        e5_address_obj = JSON.parse(data);
        // console.log('--------------------------------E745:load_ether_history-----------------------------------')
        // console.log(e5_address_obj)
        // console.log(address)
      } catch (error) {
        console.log('Error fetching data: ', error)
      }
    }
    

    var clone = structuredClone(this.state.e5_ether_tx_history)
    clone[e5] = e5_address_obj
    this.setState({e5_ether_tx_history: clone})
    
  }

  replace_0x_with_xdc(address){
    return 'xdc'+address.toString().slice(2)
  }

  //unused
  get_total_supply_of_ether = async (e5) => {
    var link = ''

    if(e5 == 'E35'){
      // link = `https://etc.blockscout.com/api/v2/stats/charts/market&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/stats/charts/market`
    }
    else if(e5 == 'E25'){
      // link = `https://etc.blockscout.com/api/v2/stats/charts/market&apikey=${process.env.REACT_APP_BLOCKSCOUT_API_KEY}`
      link = `https://etc.blockscout.com/api/v2/stats/charts/market`
    }

    var e5_supply_obj = {}
    try {
      const response = await fetch(link);
      if (!response.ok) {
        throw new Error(`Failed to retrieve ether supply data. Status: ${response}`);
      }
      const data = await response.text();
      e5_supply_obj = JSON.parse(data);
      
    } catch (error) {
      console.log('Error fetching data: ', error)
    }

    var clone = structuredClone(this.state.e5_ether_supply_data)
    clone[e5] = e5_supply_obj
    this.setState({e5_ether_supply_data: clone})

  }

  combine_contacts(existing_contacts, updated_contact_list){
    var new_contact_list = structuredClone(existing_contacts)

    updated_contact_list.forEach(contact => {
      if(!this.check_if_includes(new_contact_list, contact)){
        new_contact_list.push(contact)
      }
    });

    return new_contact_list
  }

  check_if_includes(array, item){
    var includes = array.find(e => e['id'] === item['id'])
    // for(var i=0; i<array.length; i++){
    //   if(array[i]['id'] == item['id']){
    //     includes = true
    //     break;
    //   }
    // }
    return includes != null
  }

  get_alias_data = async (E52contractInstance, e5, account, web3) => {
    var alias_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 11})

    var my_alias_events = []
    var alias_bucket = {}
    var alias_owners = {}
    var alias_timestamp = {}
    var is_first_time = this.state.my_alias_events[e5] == null
    for(var i=0; i<alias_events.length; i++){
      var alias_string = alias_events[i].returnValues.p4
      if(alias_string.length > 23){
        alias_string = await this.fetch_objects_data_from_ipfs_using_option(alias_events[i].returnValues.p4)
      } 
      var alias_sender = alias_events[i].returnValues.p2/* owner */
      var alias_time = alias_events[i].returnValues.p6/* timestamp */

      if(alias_owners[alias_string] == null){
        alias_owners[alias_string] = alias_sender
        alias_bucket[alias_sender] = alias_string 
        alias_timestamp[alias_string] = alias_time

        if(alias_sender == account){
          //my alias
          my_alias_events.push({'alias':alias_string, 'event':alias_events[i]})
        }

        if(this.alias_data[alias_string] != null){
          if(this.alias_data[alias_string]['time'] < alias_time){
            //someone already initialized this alias in another e5 earler
            delete alias_owners[alias_string]
            delete alias_bucket[alias_sender]

            const pos = my_alias_events.findIndex(obj => obj['alias'] == alias_string)
            if(pos != -1){
              my_alias_events.splice(pos, 1)
            }
          }else{
            //we need to remove the previously set alias in the other e5 since this event is earler than that of the other e5
            var invalid_data = this.alias_data[alias_string]

            var alias_bucket_clone = structuredClone(this.state.alias_bucket)
            delete alias_bucket_clone[invalid_data['e5']][invalid_data['id']]

            var alias_owners_clone = structuredClone(this.state.alias_owners)
            delete alias_owners_clone[invalid_data['e5']][invalid_data['name']]

            var my_alias_events_clone = structuredClone(this.state.my_alias_events)
            const pos = my_alias_events_clone[invalid_data['e5']].findIndex(obj => obj['alias'] == invalid_data['name'])
            if(pos != -1){
              my_alias_events_clone[invalid_data['e5']].splice(pos, 1)
            }

            var alias_timestamp_clone = structuredClone(this.state.alias_timestamp)
            delete alias_timestamp_clone[invalid_data['e5']][invalid_data['name']]

            this.setState({alias_bucket: alias_bucket_clone, alias_owners:alias_owners_clone, my_alias_events:my_alias_events_clone, alias_timestamp:alias_timestamp_clone})

            this.alias_data[alias_string] = {'id':alias_sender, 'name':alias_string, 'time':alias_time, 'e5':e5}
          }
        }else{
          this.alias_data[alias_string] = {'id':alias_sender, 'name':alias_string, 'time':alias_time, 'e5':e5}
        }
      }
      else if(alias_owners[alias_string] == alias_sender){
        //ownership was revoked
        delete alias_owners[alias_string]
        delete alias_bucket[alias_sender]

        const pos = my_alias_events.findIndex(obj => obj['alias'] == alias_string)
        if(pos != -1){
          my_alias_events.splice(pos, 1)
        }
        delete this.alias_data[alias_string]
      }
      
      if(is_first_time){
        var alias_bucket_clone = structuredClone(this.state.alias_bucket)
        alias_bucket_clone[e5] = alias_bucket

        var alias_owners_clone = structuredClone(this.state.alias_owners)
        alias_owners_clone[e5] = alias_owners

        var my_alias_events_clone = structuredClone(this.state.my_alias_events)
        my_alias_events_clone[e5] = my_alias_events

        var alias_timestamp_clone = structuredClone(this.state.alias_timestamp)
        alias_timestamp_clone[e5] = alias_timestamp

        this.setState({alias_bucket: alias_bucket_clone, alias_owners:alias_owners_clone, my_alias_events:my_alias_events_clone, alias_timestamp:alias_timestamp_clone})
      }
    }

    var alias_bucket_clone = structuredClone(this.state.alias_bucket)
    alias_bucket_clone[e5] = alias_bucket

    var alias_owners_clone = structuredClone(this.state.alias_owners)
    alias_owners_clone[e5] = alias_owners

    var my_alias_events_clone = structuredClone(this.state.my_alias_events)
    my_alias_events_clone[e5] = my_alias_events

    var alias_timestamp_clone = structuredClone(this.state.alias_timestamp)
    alias_timestamp_clone[e5] = alias_timestamp

    this.setState({alias_bucket: alias_bucket_clone, alias_owners:alias_owners_clone, my_alias_events:my_alias_events_clone, alias_timestamp:alias_timestamp_clone})

  }

  record_number_of_items(e5, object_type, count){
    var obj = {'subscriptions':this.state.load_subscription_metrics, 'contracts':this.state.load_contracts_metrics, 'proposals':this.state.load_proposal_metrics, 'tokens':this.state.load_tokens_metrics, 'posts':this.state.load_posts_metrics, 'channels':this.state.load_channels_metrics, 'jobs':this.state.load_jobs_metrics, 'sent_mail':this.state.load_sent_mail_metrics, 'received_mail':this.state.load_received_mail_metrics, 'storefront':this.state.load_storefront_metrics, 'bags':this.state.load_bags_metrics, 'contractor':this.state.load_contractors_metrics, 'audio':this.state.load_audio_metrics, 'video':this.state.load_video_metrics, 'nitro':this.state.load_nitro_metrics, 'poll':this.state.load_poll_metrics}

    var load_metrics_clone = structuredClone(obj[object_type])
    if(load_metrics_clone[e5] == null){
      load_metrics_clone[e5] = {}
    }
    load_metrics_clone[e5] = count

    if(object_type == 'subscriptions'){
      this.setState({load_subscription_metrics: load_metrics_clone})
    }
    else if(object_type == 'contracts'){
      this.setState({load_contracts_metrics: load_metrics_clone})
    }
    else if(object_type == 'proposals'){
      this.setState({load_proposal_metrics: load_metrics_clone})
    }
    else if(object_type == 'tokens'){
      this.setState({load_tokens_metrics: load_metrics_clone})
    }
    else if(object_type == 'posts'){
      this.setState({load_posts_metrics: load_metrics_clone})
    }
    else if(object_type == 'channels'){
      this.setState({load_channels_metrics: load_metrics_clone})
    }
    else if(object_type == 'jobs'){
      this.setState({load_jobs_metrics: load_metrics_clone})
    }
    else if(object_type == 'sent_mail'){
      this.setState({load_sent_mail_metrics: load_metrics_clone})
    }
    else if(object_type == 'received_mail'){
      this.setState({load_received_mail_metrics: load_metrics_clone})
    }
    else if(object_type == 'storefront'){
      this.setState({load_storefront_metrics: load_metrics_clone})
    }
    else if(object_type == 'bags'){
      this.setState({load_bags_metrics: load_metrics_clone})
    }
    else if(object_type == 'contractor'){
      this.setState({load_contractors_metrics: load_metrics_clone})
    }
    else if(object_type == 'audio'){
      this.setState({load_audio_metrics: load_metrics_clone})
    }
    else if(object_type == 'video'){
      this.setState({load_video_metrics: load_metrics_clone})
    }
    else if(object_type == 'nitro'){
      this.setState({load_nitro_metrics: load_metrics_clone})
    }
    else if(object_type == 'poll'){
      this.setState({load_poll_metrics: load_metrics_clone})
    }
  }





  

  get_subscription_data = async (contractInstance, F5contractInstance, account, web3, e5, contract_addresses, E52contractInstance, prioritized_accounts, specific_items) => {
    var created_subscription_events = null
    var my_paid_subscription_events = null
    var created_index_events = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ }],
        [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account }],
        [web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 33/* subscription_object */, p1:this.get_valid_post_index(web3)}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)

      created_subscription_events = all_events[0]
      my_paid_subscription_events = all_events[1]
      created_index_events = all_events[2]
    }
    else{
      created_subscription_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ })

      my_paid_subscription_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account })

      created_index_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 30/* contract_obj_id */, p1:this.get_valid_post_index(web3)})
    }

    var valid_ids = this.get_ids_from_events(created_index_events)
    var created_subscription_events = created_subscription_events.filter(function (event) {
      return (valid_ids.includes(event.returnValues.p1))
    })

    var my_paid_subs = []
    my_paid_subscription_events.forEach(event => {
      if(!my_paid_subs.includes(event.returnValues.p1)){
        my_paid_subs.push(event.returnValues.p1)
      }
    });

    //prioritize my content first
    var my_posted_events = created_subscription_events.filter(function (event) {
      return (event.returnValues.p3/* sender_account_id */ == account)
    })
    created_subscription_events.forEach(event => {
      if(my_paid_subs.includes(event.returnValues.p1)){
        my_posted_events.push(event)
      }
    });
    created_subscription_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
        my_posted_events.push(event)
      }
    });
    created_subscription_events = my_posted_events

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ , p1/* object_id */: prioritized_accounts})

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p1)
        final_object_events.push(element)
      });
      created_subscription_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_subscription_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_subscription_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p1))
      })
      created_subscription_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
          my_events.push(event)
        }
      });
      created_subscription_events = my_events
    }

    var payment_history_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account})

    var created_subscriptions = []
    for(var i=0; i<created_subscription_events.length; i++){
      var id = created_subscription_events[i].returnValues.p1
      created_subscriptions.push(id)
    }

    this.record_number_of_items(e5, 'subscriptions', created_subscriptions.length)

    var created_subscription_data = await F5contractInstance.methods.f74(created_subscriptions).call((error, result) => {});
    var created_subscription_object_data = this.state.created_subscriptions[e5] == null ? [] : this.state.created_subscriptions[e5].slice()
    var created_subscription_object_mapping = this.state.created_subscription_object_mapping[e5] == null ? {} : structuredClone(this.state.created_subscription_object_mapping[e5])
    var is_first_time = this.state.created_subscriptions[e5] == null
    

    var account_as_list = []
    for(var i=0; i<created_subscriptions.length; i++){
      account_as_list.push([account])
    }
    var my_payments_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await F5contractInstance.methods.f229(created_subscriptions, account_as_list).call((error, result) => {});

    // var interactible_checker_status_values_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f254(created_subscriptions,0).call((error, result) => {});

    // var my_interactable_time_value_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f256(created_subscriptions, account_as_list, 0,2).call((error, result) => {})

    // var my_blocked_time_value_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f256(created_subscriptions, account_as_list, 0,3).call((error, result) => {});

    var all_data = await this.fetch_multiple_objects_data(created_subscriptions, web3, e5, contract_addresses)

    for(var i=0; i<created_subscriptions.length; i++){
      var subscription_data = all_data[created_subscriptions[i]] == null ? await this.fetch_objects_data(created_subscriptions[i], web3, e5, contract_addresses): all_data[created_subscriptions[i]]
      var my_payment = my_payments_for_all_subscriptions[i]

      // var paid_accounts = [];
      // var paid_amounts = [];

      // if(created_subscription_events[i].returnValues.p3 == account){
      //   //if the sender is the authority of the subscription
      //   var all_subscription_payment_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */:created_subscriptions[i]})

      //   var accounts_in_focus_as_list = []
      //   for(var j=0; j<all_subscription_payment_events.length; j++){
      //     var account_in_focus = all_subscription_payment_events[j].returnValues.p2
      //     accounts_in_focus_as_list.push(account_in_focus)
      //   }

      //   var collectible_time_value_for_all_accounts = created_subscription_data[i][1][2/* can_cancel_subscription */] == 1?
      //   await F5contractInstance.methods.f235([created_subscriptions[i]], [accounts_in_focus_as_list]).call((error, result) => {}) :
      //   await F5contractInstance.methods.f229([created_subscriptions[i]], [accounts_in_focus_as_list]).call((error, result) => {});

        
      //   for(var j=0; j<all_subscription_payment_events.length; j++){
      //     var account_in_focus = all_subscription_payment_events[j].returnValues.p2
          
      //     if(!paid_accounts.includes(account_in_focus)){
      //       if(created_subscription_data[i][1][2/* can_cancel_subscription */] == 1){
      //         var collectible_time_value = /* await F5contractInstance.methods.f235([created_subscriptions[i]], [[account_in_focus]]).call((error, result) => {}); */ collectible_time_value_for_all_accounts
              
      //         if(collectible_time_value[0][j] != 0){
      //           paid_accounts.push(account_in_focus)
      //           paid_amounts.push(collectible_time_value[0][j])
      //         }
      //       }
      //       else{
      //         var collectible_time_value = /* await F5contractInstance.methods.f229([created_subscriptions[i]], [[account_in_focus]]).call((error, result) => {}); */ collectible_time_value_for_all_accounts

      //         if(collectible_time_value[0][j] != 0){
      //           paid_accounts.push(account_in_focus)
      //           paid_amounts.push(collectible_time_value[0][j])
      //         }
      //       }
      //     }
      //   }
      // }

      // var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_subscriptions[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
      // var old_moderators = []

      // for(var e=0; e<moderator_data.length; e++){
      //   var mod_id = moderator_data[e].returnValues.p3
      //   old_moderators.push(mod_id)
      // }

      // var mod_status_values = await E52contractInstance.methods.f255([created_subscriptions[i]], [old_moderators]).call((error, result) => {});

      // var moderators = []
      // for(var e=0; e<old_moderators.length; e++){
      //   var their_status = mod_status_values[0][e]
      //   if(their_status == true){
      //     moderators.push(old_moderators[e])
      //   }
      // }

      // var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_subscriptions[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_subscriptions[i]

      // var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_subscriptions[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_subscriptions[i]

      // var my_blocked_time_value = /* await E52contractInstance.methods.f256([created_subscriptions[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_subscriptions[i]

      var subscription_config = created_subscription_data[i][1]
      var time_unit = subscription_config[5] == 0 ? 60*53 : subscription_config[5]
      var last_expiration_time = this.get_last_expiration_time(payment_history_events, created_subscriptions[i], time_unit, my_payment/* [0] */[0] )

      var subscription_object = {'id':created_subscriptions[i], 'e5_id':created_subscriptions[i]+e5, 'data':created_subscription_data[i], 'ipfs':subscription_data, 'event':created_subscription_events[i], 'payment':my_payment[0], 'paid_accounts':[]/* paid_accounts */, 'paid_amounts':[]/* paid_amounts */, 'moderators':[]/* moderators */, 'access_rights_enabled':false/* interactible_checker_status_values[0] */, 'e5':e5, 'timestamp':created_subscription_events[i].returnValues.p4, 'author':created_subscription_events[i].returnValues.p3, 'last_expiration_time':last_expiration_time, 'hidden':true, 'pos':created_subscription_object_data.length}

      if(this.homepage.current?.state.selected_subscription_item == created_subscriptions[i]+e5){
        const previous_obj = this.state.created_subscriptions[e5].find(e => e['e5_id'] == created_subscriptions[i]+e5)
        if(previous_obj != null){
          subscription_object['moderators'] = previous_obj['moderators'] 
          subscription_object['paid_accounts'] = previous_obj['paid_accounts']
          subscription_object['paid_amounts'] = previous_obj['paid_amounts']
          subscription_object['access_rights_enabled'] = previous_obj['access_rights_enabled']
          subscription_object['hidden'] = previous_obj['hidden']
          subscription_object['all_payment_history_events'] = previous_obj['all_payment_history_events']
          subscription_object['all_subscription_modification_events'] = previous_obj['all_subscription_modification_events']
          subscription_object['income_stream_data_points'] = previous_obj['income_stream_data_points']
        }
      }

      if(subscription_data != null){
        const index = created_subscription_object_data.findIndex(item => item['e5_id'] === subscription_object['e5_id']);
        if(index != -1){
          created_subscription_object_data[index] = subscription_object
        }else{
          created_subscription_object_data.push(subscription_object)
        }
        created_subscription_object_mapping[created_subscriptions[i]+e5] = subscription_object
      }
      

      if(is_first_time || true){
        var created_subscription_object_data_clone = structuredClone(this.state.created_subscriptions)
        created_subscription_object_data_clone[e5] = created_subscription_object_data
        
        var created_subscription_object_mapping_clone = structuredClone(this.state.created_subscription_object_mapping)
        created_subscription_object_mapping_clone[e5] = created_subscription_object_mapping

        this.setState({created_subscriptions: created_subscription_object_data_clone, created_subscription_object_mapping: created_subscription_object_mapping_clone})
        // await this.wait(150)
      }
    }

    var created_subscription_object_data_clone = structuredClone(this.state.created_subscriptions)
    created_subscription_object_data_clone[e5] = created_subscription_object_data
    
    var created_subscription_object_mapping_clone = structuredClone(this.state.created_subscription_object_mapping)
    created_subscription_object_mapping_clone[e5] = created_subscription_object_mapping

    this.setState({created_subscriptions: created_subscription_object_data_clone, created_subscription_object_mapping: created_subscription_object_mapping_clone})
    
    // console.log('subscription count for e5: ',e5,' : ',created_subscription_object_data.length)
  }

  set_extra_subsctiption_data = async (object) => {
    const e5 = object['e5']
    const id = object['id']
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = contract_addresses[2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);


    var created_subscriptions = [id]
    var account_as_list = [[account]]

    var my_payments_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await F5contractInstance.methods.f229(created_subscriptions, account_as_list).call((error, result) => {});

    var interactible_checker_status_values_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f254(created_subscriptions,0).call((error, result) => {});

    var my_interactable_time_value_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f256(created_subscriptions, account_as_list, 0,2).call((error, result) => {})

    var my_blocked_time_value_for_all_subscriptions = created_subscriptions.length == 0 ? [] : await E52contractInstance.methods.f256(created_subscriptions, account_as_list, 0,3).call((error, result) => {});

    var i = 0
    var paid_accounts = [];
    var paid_amounts = [];

    var my_payment = my_payments_for_all_subscriptions[i]

    if(object['event'].returnValues.p3 == account){
      //if the sender is the authority of the subscription
      var all_subscription_payment_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */:created_subscriptions[i]})

      var accounts_in_focus_as_list = []
      for(var j=0; j<all_subscription_payment_events.length; j++){
        var account_in_focus = all_subscription_payment_events[j].returnValues.p2
        accounts_in_focus_as_list.push(account_in_focus)
      }

      var collectible_time_value_for_all_accounts = object['data'][1][2/* can_cancel_subscription */] == 1?
      await F5contractInstance.methods.f235([created_subscriptions[i]], [accounts_in_focus_as_list]).call((error, result) => {}) :
      await F5contractInstance.methods.f229([created_subscriptions[i]], [accounts_in_focus_as_list]).call((error, result) => {});

      
      for(var j=0; j<all_subscription_payment_events.length; j++){
        var account_in_focus = all_subscription_payment_events[j].returnValues.p2
        
        if(!paid_accounts.includes(account_in_focus)){
          if(object['data'][1][2/* can_cancel_subscription */] == 1){
            var collectible_time_value = /* await F5contractInstance.methods.f235([created_subscriptions[i]], [[account_in_focus]]).call((error, result) => {}); */ collectible_time_value_for_all_accounts
            
            if(collectible_time_value[0][j] != 0){
              paid_accounts.push(account_in_focus)
              paid_amounts.push(collectible_time_value[0][j])
            }
          }
          else{
            var collectible_time_value = /* await F5contractInstance.methods.f229([created_subscriptions[i]], [[account_in_focus]]).call((error, result) => {}); */ collectible_time_value_for_all_accounts

            if(collectible_time_value[0][j] != 0){
              paid_accounts.push(account_in_focus)
              paid_amounts.push(collectible_time_value[0][j])
            }
          }
        }
      }
    }

    var payment_history_events = null
    var all_payment_history_events = null
    var all_subscription_modification_events = null
    var moderator_data = null
    var income_stream_data_points = null;

    if(this.state.beacon_node_enabled == true){
      var subscription_config = object['data'][1]
      var my_account = this.state.user_account_id[e5]
      if(object['author'] == my_account || subscription_config[0] == my_account){
        income_stream_data_points = await this.fetch_subscription_income_stream_data_from_nitro(object)
      }
      
      if(income_stream_data_points == null){
        var event_params = [
          [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account}],
          [web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */:id}],
          [web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */:id}],
          [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:id, p2/* action_type */:4/* <4>modify_moderator_accounts */}],
        ]
        var all_events = await this.load_multiple_events_from_nitro(event_params)
        payment_history_events = all_events[0]
        all_payment_history_events = all_events[1]
        all_subscription_modification_events = all_events[2]
        moderator_data = all_events[3]
      }else{
        var event_params = [
          [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account}],
          [web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */:id}],
          [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:id, p2/* action_type */:4/* <4>modify_moderator_accounts */}],
        ]
        var all_events = await this.load_multiple_events_from_nitro(event_params)
        payment_history_events = all_events[0]
        all_subscription_modification_events = all_events[1]
        moderator_data = all_events[2]
      }
    }
    else{
      payment_history_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account})

      all_payment_history_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */:id})

      all_subscription_modification_events = await this.load_event_data(web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */:id})

      moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_subscriptions[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
    }


    var old_moderators = []

    for(var e=0; e<moderator_data.length; e++){
      var mod_id = moderator_data[e].returnValues.p3
      old_moderators.push(mod_id)
    }

    var mod_status_values = await E52contractInstance.methods.f255([created_subscriptions[i]], [old_moderators]).call((error, result) => {});

    var moderators = []
    for(var e=0; e<old_moderators.length; e++){
      var their_status = mod_status_values[0][e]
      if(their_status == true){
        moderators.push(old_moderators[e])
      }
    }

    var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_subscriptions[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_subscriptions[i]

    var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_subscriptions[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_subscriptions[i]

    var my_blocked_time_value = /* await E52contractInstance.methods.f256([created_subscriptions[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_subscriptions[i]


    var subscription_config = object['data'][1]
    var time_unit = subscription_config[5] == 0 ? 60*53 : subscription_config[5]
    var last_expiration_time = this.get_last_expiration_time(payment_history_events, created_subscriptions[i], time_unit, my_payment/* [0] */[0] )

    object['moderators'] = moderators
    object['paid_accounts'] = paid_accounts
    object['paid_amounts'] = paid_amounts
    object['access_rights_enabled'] = interactible_checker_status_values[0]
    object['hidden'] = false;
    object['payment'] = my_payment[0]
    object['last_expiration_time'] = last_expiration_time
    object['all_payment_history_events'] = all_payment_history_events
    object['all_subscription_modification_events'] = all_subscription_modification_events
    object['income_stream_data_points'] = income_stream_data_points

    if(interactible_checker_status_values/* [0] */[0] == true && (my_interactable_time_value/* [0] */[0] < Date.now()/1000 && !moderators.includes(account) && object['event'].returnValues.p3 != account )){
      object['hidden'] = true;
    }
    else if(my_blocked_time_value/* [0] */[0] > Date.now()/1000){
      object['hidden'] = true;
    }
    else{
      object['hidden'] = false;
    }

    var created_subscription_object_data_clone = structuredClone(this.state.created_subscriptions)
    created_subscription_object_data_clone[e5][object['pos']] = object
    
    var created_subscription_object_mapping_clone = structuredClone(this.state.created_subscription_object_mapping)
    created_subscription_object_mapping_clone[e5][created_subscriptions[i]+e5] = object

    this.setState({created_subscriptions: created_subscription_object_data_clone, created_subscription_object_mapping: created_subscription_object_mapping_clone})
  }

  fetch_subscription_income_stream_data_from_nitro = async (subscription_object) => {
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }

    var token_name_data = {}
    var tokens = subscription_object['data'][2/* exchange_ids */]
    var directory = this.get_all_sorted_objects_mappings(this.state.token_directory)
    tokens.forEach(exchange_id => {
      const token_name = directory[exchange_id]
      token_name_data[exchange_id] = token_name
    });

    const arg_obj = {
      token_name_data,
      subscription_object: subscription_object,
      steps: 60*60,
      filter_value: 60*60*24*7,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${beacon_node}/subscription_income_stream_datapoints`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('fetch_subscription_income_stream', obj)
      if(obj.success == false){
        return null
      }else{
        return obj.data
      }
    }
    catch(e){
      console.log('fetch_subscription_income_stream', e)
      return null
    }
  }

  get_last_expiration_time(payment_history_events, subscription_id, time_unit, expiration_time){
    if(expiration_time != 0) return expiration_time
    var subscription_id_payment_history_events = []
    payment_history_events.forEach(event => {
      if(event.returnValues.p1 == subscription_id){
        subscription_id_payment_history_events.push(event)
      }
    });
    if(subscription_id_payment_history_events.length == 0) return 0
    var last_payment_expiration_time_event = subscription_id_payment_history_events[subscription_id_payment_history_events.length -1];

    var timestamp = bigInt(last_payment_expiration_time_event.returnValues.p5/* timestamp */).plus(bigInt(last_payment_expiration_time_event.returnValues.p3/* time_units_paid_for */).multiply(time_unit))

    return timestamp
  }

  get_contract_data = async (contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance, prioritized_accounts, specific_items) => {
    var created_contract_events = null
    var entered_contract_events = null
    var created_index_events = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */ }],
        [web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */:account, p3/* action */:3}],
        [web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 30/* contract_obj_id */, p1:this.get_valid_post_index(web3)}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)

      created_contract_events = all_events[0]
      entered_contract_events = all_events[1]
      created_index_events = all_events[2]
    }
    else{
      created_contract_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */ })

      entered_contract_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */:account, p3/* action */:3})

      created_index_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 30/* contract_obj_id */, p1:this.get_valid_post_index(web3)})
    }

    var valid_ids = this.get_ids_from_events(created_index_events)
    var created_contract_events = created_contract_events.filter(function (event) {
      return (valid_ids.includes(event.returnValues.p1))
    })

    var entered_contracts = []
    entered_contract_events.forEach(event => {
      if(!entered_contracts.includes(event.returnValues.p1)){
        entered_contracts.push(event.returnValues.p1)
      }
    });

    created_contract_events = created_contract_events.reverse()
    //prioritize my content first
    var my_posted_events = created_contract_events.filter(function (event) {
      return (event.returnValues.p3/* sender_account_id */ == account)
    })
    created_contract_events.forEach(event => {
      if(entered_contracts.includes(event.returnValues.p1)){
        my_posted_events.push(event)
      }
    });
    created_contract_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
        my_posted_events.push(event)
      }
    });
    created_contract_events = my_posted_events

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */ , p1/* object_id */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      created_contract_events.forEach(element => {
        if(prioritized_accounts.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_contract_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_contract_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_contract_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p1))
      })
      created_contract_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
          my_events.push(event)
        }
      });
      created_contract_events = my_events
    }

    var created_contracts = [2]
    var accounts_for_expiry_time = [[account]]
    for(var i=0; i<created_contract_events.length; i++){
      var id = created_contract_events[i].returnValues.p1
      created_contracts.push(id)
      accounts_for_expiry_time.push([account])
    }

    this.record_number_of_items(e5, 'contracts',created_contracts.length)

    var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});
    var entered_timestamp_data = await G52contractInstance.methods.f266(created_contracts, accounts_for_expiry_time, 3).call((error, result) => {});
    
    var created_contract_object_data = this.state.created_contracts[e5] == null ? [] : this.state.created_contracts[e5].slice()
    var created_contract_mapping = this.state.created_contract_mapping[e5] == null ? {} : structuredClone(this.state.created_contract_mapping[e5])
    var is_first_time = this.state.created_contracts[e5].length <= 1 ? true : false



    // var account_as_list = []
    // for(var i=0; i<created_contracts.length; i++){
    //   account_as_list.push([account])
    // }

    // var interactible_checker_status_values_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f254(created_contracts,0).call((error, result) => {});

    // var my_interactable_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,2).call((error, result) => {});

    // var my_blocked_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,3).call((error, result) => {});


    var enter_exit_accounts_notifications = []
    var all_data = await this.fetch_multiple_objects_data(created_contracts, web3, e5, contract_addresses)
    
    for(var i=0; i<created_contracts.length; i++){
      var contracts_data = all_data[created_contracts[i]] == null ? await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses) : all_data[created_contracts[i]]
      var event = i>0 ? created_contract_events[i-1]: null
      
      // var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
      // var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

      // var entered_accounts = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:3/* enter_contract(3) */,p1/* contract_id */:created_contracts[i]})

      // var contract_entered_accounts = []
      // var archive_accounts = []
      // for(var e=0; e<entered_accounts.length; e++){
      //   // var account_entered_time = await G52contractInstance.methods.f266([created_contracts[i]], [[entered_accounts[e].returnValues.p2]], 3).call((error, result) => {});

      //   if(!contract_entered_accounts.includes(entered_accounts[e].returnValues.p2) /* && account_entered_time > Date.now()/1000 */){
      //     contract_entered_accounts.push(entered_accounts[e].returnValues.p2)
      //   }
      //   if(!archive_accounts.includes(entered_accounts[e].returnValues.p2)){
      //     archive_accounts.push(entered_accounts[e].returnValues.p2)
      //   }
      // }

      // var entered_account_times = await G52contractInstance.methods.f266([created_contracts[i]], [contract_entered_accounts], 3).call((error, result) => {});
      // var entered_account_times_data = {}
      // for(var e=0; e<contract_entered_accounts.length; e++){
      //   var time = entered_account_times[0][e]
      //   var account = contract_entered_accounts[e]
      //   entered_account_times_data[account] = time
      // }


      // var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_contracts[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
      // var old_moderators = []

      // for(var e=0; e<moderator_data.length; e++){
      //   var mod_id = moderator_data[e].returnValues.p3
      //   old_moderators.push(mod_id)
      // }

      // var mod_status_values = await E52contractInstance.methods.f255([created_contracts[i]], [old_moderators]).call((error, result) => {});

      // var moderators = []
      // for(var e=0; e<old_moderators.length; e++){
      //   var their_status = mod_status_values[0][e]
      //   if(their_status == true){
      //     moderators.push(old_moderators[e])
      //   }
      // }

      // var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_contracts[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_contracts

      // var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_contracts

      // var my_blocked_time_value =/*  await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_contracts

      var timestamp = event == null ? 0 : parseInt(event.returnValues.p4)
      var author = event == null ? 0 : event.returnValues.p3
      var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'entry_expiry':entered_timestamp_data[i][0], 'end_balance':0/* end_balance */, 'spend_balance':0/* spend_balance */, 'participants':[]/* contract_entered_accounts */, 'participant_times':[]/* entered_account_times_data */, 'archive_accounts':[]/* archive_accounts */, 'moderators':[]/* moderators */, 'access_rights_enabled':true/* interactible_checker_status_values[i] */, 'my_interactable_time_value':0/* my_interactable_time_value[i][0] */, 'my_blocked_time_value':0/* my_blocked_time_value[i][0] */, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5, 'hidden':true, 'pos': created_contract_object_data.length}

      // if(interactible_checker_status_values[0] == true && (my_interactable_time_value[i][0] < Date.now()/1000 && !moderators.includes(account) && event.returnValues.p3 != account )){
      //   contract_obj['hidden'] = true
      // }
      // else if(my_blocked_time_value[i][0] > Date.now()/1000){
      //   contract_obj['hidden'] = true
      // }
      // else{
      //   contract_obj['hidden'] = false
      // }
      if(this.homepage.current?.state.selected_contract_item == created_contracts[i]+e5){
        const previous_obj = this.state.created_contracts[e5].find(e => e['e5_id'] == created_contracts[i]+e5)
        if(previous_obj != null){
          contract_obj['end_balance'] = previous_obj['end_balance']
          contract_obj['spend_balance'] = previous_obj['spend_balance']
          contract_obj['participants'] = previous_obj['participants']
          contract_obj['participant_times'] = previous_obj['participant_times']
          contract_obj['archive_accounts'] = previous_obj['archive_accounts']
          contract_obj['moderators'] = previous_obj['moderators']
          contract_obj['access_rights_enabled'] = previous_obj['access_rights_enabled']
          contract_obj['my_interactable_time_value'] = previous_obj['my_interactable_time_value'] 
          contract_obj['my_blocked_time_value'] = previous_obj['my_blocked_time_value']
          contract_obj['hidden'] = previous_obj['hidden']
        }
      }

      const index = created_contract_object_data.findIndex(item => item['e5_id'] === contract_obj['e5_id']);
      if(index != -1){
        created_contract_object_data[index] = contract_obj
      }else{
        created_contract_object_data.push(contract_obj)
      }
      created_contract_mapping[created_contracts[i]] = contract_obj


      if(is_first_time || true){
        var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
        created_contract_object_data_clone[e5] = created_contract_object_data

        var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
        created_contract_mapping_clone[e5] = created_contract_mapping

        var enter_exit_accounts_notifications_clone = structuredClone(this.state.enter_exit_accounts_notifications)
        enter_exit_accounts_notifications_clone[e5] = enter_exit_accounts_notifications
        

        this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone, enter_exit_accounts_notifications: enter_exit_accounts_notifications_clone})
        // await this.wait(150)
      }
    }

    var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
    created_contract_object_data_clone[e5] = created_contract_object_data

    var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
    created_contract_mapping_clone[e5] = created_contract_mapping

    var enter_exit_accounts_notifications_clone = structuredClone(this.state.enter_exit_accounts_notifications)
    enter_exit_accounts_notifications_clone[e5] = enter_exit_accounts_notifications


    this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone, enter_exit_accounts_notifications: enter_exit_accounts_notifications_clone})
    console.log('contract count for : ',e5, ' : ',created_contract_object_data.length)
    
  }

  set_extra_contract_data = async (object) => {
    const e5 = object['e5']
    const id = object['id']
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = contract_addresses[4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var created_contracts = [id]
    var i = 0
    var account_as_list = [[account]]

    var interactible_checker_status_values_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f254(created_contracts,0).call((error, result) => {});

    var my_interactable_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,2).call((error, result) => {});

    var my_blocked_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,3).call((error, result) => {});

    var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
    var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

    var entered_accounts = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:3/* enter_contract(3) */,p1/* contract_id */:created_contracts[i]})

    var contract_entered_accounts = []
    var archive_accounts = []
    for(var e=0; e<entered_accounts.length; e++){
      if(!contract_entered_accounts.includes(entered_accounts[e].returnValues.p2)){
        contract_entered_accounts.push(entered_accounts[e].returnValues.p2)
      }
      if(!archive_accounts.includes(entered_accounts[e].returnValues.p2)){
        archive_accounts.push(entered_accounts[e].returnValues.p2)
      }
    }

    var entered_account_times = await G52contractInstance.methods.f266([created_contracts[i]], [contract_entered_accounts], 3).call((error, result) => {});
    var entered_account_times_data = {}
    for(var e=0; e<contract_entered_accounts.length; e++){
      var time = entered_account_times[0][e]
      var account = contract_entered_accounts[e]
      entered_account_times_data[account] = time
    }

    var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_contracts[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
    var old_moderators = []

    for(var e=0; e<moderator_data.length; e++){
      var mod_id = moderator_data[e].returnValues.p3
      old_moderators.push(mod_id)
    }

    var mod_status_values = await E52contractInstance.methods.f255([created_contracts[i]], [old_moderators]).call((error, result) => {});

    var moderators = []
    for(var e=0; e<old_moderators.length; e++){
      var their_status = mod_status_values[0][e]
      if(their_status == true){
        moderators.push(old_moderators[e])
      }
    }

    var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_contracts[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_contracts

    var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_contracts

    var my_blocked_time_value =/*  await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_contracts

    object['end_balance'] = end_balance
    object['spend_balance'] = spend_balance
    object['participants'] = contract_entered_accounts
    object['participant_times'] = entered_account_times_data
    object['archive_accounts'] = archive_accounts
    object['moderators'] = moderators
    object['access_rights_enabled'] = interactible_checker_status_values[i]
    object['my_interactable_time_value'] = my_interactable_time_value[i][0] 
    object['my_blocked_time_value'] = my_blocked_time_value[i][0]
    object['hidden'] = false

    if(interactible_checker_status_values[0] == true && (my_interactable_time_value[i][0] < Date.now()/1000 && !moderators.includes(account) && object['event'].returnValues.p3 != account )){
      object['hidden'] = true
    }
    else if(my_blocked_time_value[i][0] > Date.now()/1000){
      object['hidden'] = true
    }
    else{
      object['hidden'] = false
    }

    var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
    created_contract_object_data_clone[e5][object['pos']] = object;

    var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
    created_contract_mapping_clone[e5][created_contracts[i]] = object

    this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone})

  }

  get_proposal_data = async (G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account, accounts_to_load) => {
    var contracts_ive_entered_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */:account, p3/* action */:3 /* <3>enter_contract */})
    
    var created_contracts = []
    var accounts_for_expiry_time = []
    for(var i=0; i<contracts_ive_entered_events.length; i++){
      var contract = contracts_ive_entered_events[i].returnValues.p1
      if(!created_contracts.includes(contract)){
        created_contracts.push(contract)
        accounts_for_expiry_time.push([account])
      }
    }

    var entered_timestamp_data = await G52contractInstance.methods.f266(created_contracts, accounts_for_expiry_time, 3).call((error, result) => {});

    var contracts_ive_entered = ['2']
    entered_timestamp_data.forEach((array, index)=> {
      var time = array[0]
      var contract_id = created_contracts[index]
      if(time != 0){
        contracts_ive_entered.push(contract_id)
      }
    });

    // var contracts_ive_exited_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */:account, p3/* action */:11 /* <11>exit_contract */})
    // for(var i=0; i<contracts_ive_exited_events.length; i++){
    //   var contract = contracts_ive_exited_events[i].returnValues.p1
    //   const index = contracts_ive_entered.indexOf(contract);
    //   if (index > -1) { // only splice array when item is found
    //       contracts_ive_entered.splice(index, 1); // 2nd parameter means remove one item only
    //   }
    // }

    // var all_force_exit_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:18 /* <18>contract_force_exit_accounts */})

    // for(var i=0; i<all_force_exit_events.length; i++){
    //   if(all_force_exit_events[i].returnValues.p5 == account.toString()){
    //     var force_exit_contract_id = all_force_exit_events[i].returnValues.p1
    //     const index = contracts_ive_entered.indexOf(force_exit_contract_id);
    //     if (index > -1) { // only splice array when item is found
    //         contracts_ive_entered.splice(index, 1); // 2nd parameter means remove one item only
    //     }
    //   }
    // }

    var my_proposals_events = []
    var my_proposal_ids = []

    var all_contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {/* p1: contracts_ive_entered */})
    // console.log('get_proposal_data', 'all_contracts_proposals', contracts_ive_entered, all_contracts_proposals)

    for(var j=0; j<all_contracts_proposals.length; j++){
      if(contracts_ive_entered.includes(all_contracts_proposals[j].returnValues.p1)){
        my_proposal_ids.push(parseInt(all_contracts_proposals[j].returnValues.p2))
        // I made a mistake in the smart contract event. The order of the events is wrong because mispositioned the variables. Its a bit too late to change this though, so just keep it as is. Ive elected to ship with the bug in the contract since its not a breaking change in any way.
        my_proposals_events.push(all_contracts_proposals[j])
      }
    }

    my_proposal_ids = my_proposal_ids.reverse()
    my_proposals_events = my_proposals_events.reverse()

    var sorted_proposal_ids = []
    var sorted_proposal_events = []
    for(var k=0; k<my_proposal_ids.length; k++){
      if(accounts_to_load.includes(my_proposal_ids[k])){
        sorted_proposal_ids.push(my_proposal_ids[k])
        sorted_proposal_events.push(my_proposals_events[k])
      }
    }
    for(var k=0; k<my_proposal_ids.length; k++){
      if(!sorted_proposal_ids.includes(my_proposal_ids[k])){
        sorted_proposal_ids.push(my_proposal_ids[k])
        sorted_proposal_events.push(my_proposals_events[k])
      }
    }

    my_proposal_ids = sorted_proposal_ids
    my_proposals_events = sorted_proposal_events
    // var contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:2})
    // for(var i=contracts_proposals.length-1; i>=0; i--){
    //   my_proposal_ids.push(parseInt(contracts_proposals[i].returnValues.p2))//<--------issue! should be p4
    //   my_proposals_events.push(contracts_proposals[i])
    // }
    

    var created_proposal_object_data = this.state.my_proposals[e5] == null ? [] : this.state.my_proposals[e5].slice()
    var created_proposal_data = await G5contractInstance.methods.f78(my_proposal_ids, false).call((error, result) => {});
    // var consensus_data = await G52contractInstance.methods.f266(my_proposal_ids, [], 0).call((error, result) => {});
    var is_first_time = this.state.my_proposals[e5] == null


    // var all_exchanges_in_list = []
    // var depths = []
    // var proposal_modify_target_types = []
    // var account_as_list = []
    // for(var i=0; i<my_proposal_ids.length; i++){
    //   all_exchanges_in_list.push([3, 5])
    //   depths.push(0)
    //   proposal_modify_target_types.push(created_proposal_data[i][1][9])
    //   account_as_list.push([account])
    // }

    // var balances = await this.get_balance_in_exchange_for_multiple_accounts(my_proposal_ids, all_exchanges_in_list, e5, contract_addresses, depths, 1)

    // var proposal_modify_target_type_data = await E52contractInstance.methods.f134(proposal_modify_target_types).call((error, result) => {});

    // var senders_vote_in_proposal_for_all_proposals = await G52contractInstance.methods.f237(my_proposal_ids, account_as_list).call((error, result) => {});

    this.record_number_of_items(e5, 'proposals',my_proposal_ids.length)

    var all_data = await this.fetch_multiple_objects_data(my_proposal_ids, web3, e5, contract_addresses)

    for(var i=0; i<my_proposal_ids.length; i++){
      var proposals_data = all_data[my_proposal_ids[i]] == null ? await this.fetch_objects_data(my_proposal_ids[i], web3, e5, contract_addresses) : all_data[my_proposal_ids[i]]
      var event = my_proposals_events[i]
      
      if(proposals_data == null){
        proposals_data = {
            selected: 0, id: makeid(8), object_type:32, type:this.getLocale()['312'], e5:this.state.selected_e5,
            contract_item: {'data':[[],[0,0,0,0,0,0,0,0,0,0]]},
            entered_tag_text: '',entered_indexing_tags:[],entered_title_text:'Malformed!',
    
            page:0, proposal_expiry_time:Math.round(new Date().getTime()/1000), 
            proposal_submit_expiry_time:Math.round(new Date().getTime()/1000), 
            
            modify_target_id:'', modify_target_data:null,
            
            spend_target_input_text:'', spend_token_input_text:'', 
            spend_amount:0, spend_actions:[], 
            
            reconfig_number:0, reconfig_proportion:0, reconfig_duration:0, reconfig_target_id:'',
            reconfig_values:[],
    
            exchange_transfer_target:'', exchange_transfer_amount:0, exchange_transfer_values:[], exchange_transfer_receiver:'', token_target:'',
    
            bounty_exchange_target:'', bounty_amount:0, bounty_values:[],
    
            content_channeling_setting: this.state.content_channeling, 
            device_language_setting: this.state.device_language, 
            device_country: this.state.device_country,
    
            entered_text_objects:[], entered_image_objects:[],
            entered_objects:[], entered_text:'',
    
            typed_link_text:'', link_search_results:[], added_links:[], 
            edit_text_item_pos:-1, new_price_number:0, entered_pdf_objects:[],
            markdown:'', entered_zip_objects:[]
        }
      }

      var obj = {'id':my_proposal_ids[i], 'data':created_proposal_data[i], 'ipfs':proposals_data, 'event':event, 'end_balance':0/* end_balance */, 'spend_balance':0/* spend_balance */, 'consensus_data':[0,0,0]/* consensus_data[i] */, 'modify_target_type':0/* proposal_modify_target_type */, 'account_vote':0/* senders_vote_in_proposal[0] */, 'archive_accounts':[]/* archive_participants */, 'e5':e5, 'timestamp':parseInt(event.returnValues.p5), 'author':event.returnValues.p3, 'e5_id':my_proposal_ids[i]+e5, 'pos':created_proposal_object_data.length, 'loaded_extra':false, 'is_part_of_contract':false}

      if(this.homepage.current?.state.selected_proposal_item == my_proposal_ids[i]+e5){
        const previous_obj = this.state.my_proposals[e5].find(e => e['e5_id'] == my_proposal_ids[i]+e5)
        if(previous_obj != null){
          obj['archive_accounts'] = previous_obj['archive_accounts']
          obj['loaded_extra'] = previous_obj['loaded_extra']
          obj['consensus_data'] = previous_obj['consensus_data']
          obj['account_vote'] = previous_obj['account_vote']
          obj['modify_target_type'] = previous_obj['modify_target_type']
          obj['end_balance'] = previous_obj['end_balance']
          obj['spend_balance'] = previous_obj['spend_balance']
          obj['is_part_of_contract'] = previous_obj['is_part_of_contract']
        }
      }

      const index = created_proposal_object_data.findIndex(item => item['e5_id'] === obj['e5_id']);
      if(index != -1){
        created_proposal_object_data[index] = obj
      }else{
        created_proposal_object_data.push(obj)
      }

      if(is_first_time || true){
        var my_proposals_clone = structuredClone(this.state.my_proposals)
        my_proposals_clone[e5] = created_proposal_object_data
        this.setState({my_proposals: my_proposals_clone})
        // await this.wait(150)
      }
    }

    var my_proposals_clone = structuredClone(this.state.my_proposals)
    my_proposals_clone[e5] = created_proposal_object_data
    this.setState({my_proposals: my_proposals_clone})

    console.log('proposal count for e5: ',e5,' : ',created_proposal_object_data.length)
  }

  load_extra_proposal_data = async (object) => {
    const e5 = object['e5']
    const id = object['id']
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = contract_addresses[4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var my_proposal_ids = [id]
    const i = 0

    var consensus_data = await G52contractInstance.methods.f266(my_proposal_ids, [], 0).call((error, result) => {});

    var all_exchanges_in_list = []
    var depths = []
    var proposal_modify_target_types = []
    var account_as_list = []
    for(var e=0; e<my_proposal_ids.length; e++){
      all_exchanges_in_list.push([3, 5])
      depths.push(0)
      proposal_modify_target_types.push(object['data'][1][9])
      account_as_list.push([account])
    }

    var proposal_modify_target_type_data = await E52contractInstance.methods.f134(proposal_modify_target_types).call((error, result) => {});

    var senders_vote_in_proposal_for_all_proposals = await G52contractInstance.methods.f237(my_proposal_ids, account_as_list).call((error, result) => {});

    const balances = await this.get_balance_in_exchange_for_multiple_accounts(my_proposal_ids, all_exchanges_in_list, e5, contract_addresses, depths, 1)

    var proposal_voters = await this.load_event_data(web3, G52contractInstance, 'e1', e5, {p2/* consensus_id */:my_proposal_ids[i]})
    var archive_participants = []
    for(var o=0; o<proposal_voters.length; o++){
      if(!archive_participants.includes(proposal_voters[o].returnValues.p3)){
        archive_participants.push(proposal_voters[o].returnValues.p3)
      }
    }

    var proposal_modify_target_type = /* await E52contractInstance.methods.f135(created_proposal_data[i][1][9]).call((error, result) => {}); */ proposal_modify_target_type_data[i]

    var senders_vote_in_proposal = /* await G52contractInstance.methods.f237([my_proposal_ids[i]], [[account]]).call((error, result) => {}); */ senders_vote_in_proposal_for_all_proposals[i]

    var end_balance = /* await this.get_balance_in_exchange(3, my_proposal_ids[i], e5, contract_addresses); */ balances[i][0]
    var spend_balance = /* await this.get_balance_in_exchange(5, my_proposal_ids[i], e5, contract_addresses); */ balances[i][1]

    var is_part_of_contract = true
    var proposal_contract = object['data'][1][5/* <5>target_contract_authority */]
    if(proposal_contract != 2){
      var contract_entered_accounts = [account]
      var entered_account_times = await G52contractInstance.methods.f266([proposal_contract], [contract_entered_accounts], 3).call((error, result) => {});
      var is_part_of_contract = entered_account_times[0][0] > (Date.now()/1000)
    }

    object['archive_accounts'] = archive_participants
    object['loaded_extra'] = true
    object['consensus_data'] = consensus_data[i]
    object['account_vote'] = senders_vote_in_proposal[0]
    object['modify_target_type'] = proposal_modify_target_type
    object['end_balance'] = end_balance
    object['spend_balance'] = spend_balance
    object['is_part_of_contract'] = is_part_of_contract

    var my_proposals_clone = structuredClone(this.state.my_proposals)
    my_proposals_clone[e5][object['pos']] = object
    this.setState({my_proposals: my_proposals_clone})
  }


  get_token_data = async (contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts, specific_items) => {
    var created_token_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */})

    var exchanges_to_load_first = await this.load_accounts_exchange_interactions_data(account, e5)
    var my_posted_events = created_token_events.filter(function (event) {
      return (exchanges_to_load_first.includes(event.returnValues.p1))
    })
    created_token_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
        my_posted_events.push(event)
      }
    });
    created_token_events = my_posted_events

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */ , p1/* object_id */: prioritized_accounts})

      var final_object_events = []
      var added_ids = []
      //load my prioritized exchanges first
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p1)
        final_object_events.push(element)
      });

      // //then load the exchanges that ive interacted with after
      // created_token_events.forEach(element => {
      //   if(!added_ids.includes(element.returnValues.p1) && exchanges_to_load_first.includes(element.returnValues.p1)){
      //     added_ids.push(element.returnValues.p1)
      //     final_object_events.push(element)
      //   }
      // });

      //then load everything else after
      created_token_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_token_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_token_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p1))
      })
      created_token_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
          my_events.push(event)
        }
      });
      created_token_events = my_events
    }


    var token_registry = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */:19/* 19(token_symbol_registry) */});
    var registered_token_names = {}
    var registered_token_symbols = {}
    token_registry.forEach(event => {
      var data = event.returnValues.p4/* string_data */
      var object = JSON.parse(data)
      registered_token_names[object['name']] = object['time']
      registered_token_symbols[object['symbol']] = object['time']
    });
    var registered_token_names_clone = structuredClone(this.state.registered_token_names)
    var registered_token_symbols_clone = structuredClone(this.state.registered_token_symbols)
    registered_token_names_clone[e5] = registered_token_names
    registered_token_symbols_clone[e5] = registered_token_symbols
    this.setState({registered_token_names:registered_token_names_clone, registered_token_symbols:registered_token_symbols_clone})


    var created_tokens = [3, 5]
    var created_token_depths = [0,0]
    var exchange_accounts = [account, account]
    for(var i=0; i<created_token_events.length; i++){
      var id = created_token_events[i].returnValues.p1
      created_tokens.push(id)
      created_token_depths.push(0)
      exchange_accounts.push(account)
    }

    var focused_exchanges = exchanges_to_load_first.slice()
    var depths = []
    exchanges_to_load_first.forEach(exchange_id => {
      depths.push(0)
    });

    this.record_number_of_items(e5, 'tokens', created_tokens.length)
    this.load_received_tokens_events(web3, H52contractInstance, e5, account)
    var created_token_data = await H5contractInstance.methods.f86(created_tokens).call((error, result) => {});

    // var token_balances_and_data = await this.get_balance_from_multiple_exchanges(created_tokens, account, H52contractInstance, created_token_depths, e5)
    // var token_balances = token_balances_and_data['bal']
    // var token_balances_data = token_balances_and_data['bal_data']

    var token_balances_and_data = await this.get_balance_from_multiple_exchanges(focused_exchanges, account, H52contractInstance, depths, e5)
    var token_balances = token_balances_and_data['bal']
    var token_balances_data = token_balances_and_data['bal_data']

    var balance_obj = {}
    focused_exchanges.forEach((exchange, index) => {
      balance_obj[exchange] = {'token_balance':token_balances[index], 'token_balance_data':token_balances_data[index]}
    });

    created_tokens.forEach(created_id => {
      if(balance_obj[created_id] == null){
        balance_obj[created_id] = {'token_balance':'0', 'token_balance_data':{'0':'0'}}
      }
    });

    // var accounts_exchange_data = await H5contractInstance.methods.f241(exchange_accounts, created_tokens).call((error, result) => {});
    
    var created_token_object_data = this.state.created_tokens[e5] || []
    var created_token_object_mapping = this.state.created_token_object_mapping[e5] || {}
    var is_first_time = this.state.created_tokens[e5] == null

    // var account_as_list = []
    // for(var i=0; i<created_tokens.length; i++){
    //   account_as_list.push([account])
    // }

    // var interactible_checker_status_values_for_all_tokens = await E52contractInstance.methods.f254(created_tokens,0).call((error, result) => {});

    // var my_interactable_time_value_for_all_tokens = await E52contractInstance.methods.f256(created_tokens, account_as_list, 0,2).call((error, result) => {});

    // var my_blocked_time_value_for_all_tokens = await E52contractInstance.methods.f256(created_tokens, account_as_list, 0,3).call((error, result) => {});


    var token_symbol_directory = this.state.token_directory[e5] == null ? {} : structuredClone(this.state.token_directory[e5])
    var token_name_directory = this.state.token_name_directory[e5] == null ? {} : structuredClone(this.state.token_name_directory[e5])
    var token_thumbnail_directory = this.state.token_thumbnail_directory[e5] == null ? {} : structuredClone(this.state.token_thumbnail_directory[e5])
    var end_tokens = this.state.end_tokens[e5] == null ? [] : this.state.end_tokens[e5].slice()

    token_symbol_directory[0] = 'wei'
    token_symbol_directory['wei'] = 0
    token_name_directory[e5+'0'] = this.state.e5s[e5].token

    var all_data = await this.fetch_multiple_objects_data(created_tokens, web3, e5, contract_addresses)

    for(var i=0; i<created_tokens.length; i++){
      var tokens_data = all_data[created_tokens[i]] == null ? await this.fetch_objects_data(created_tokens[i], web3, e5, contract_addresses) : all_data[created_tokens[i]]
      var event = i>1 ? created_token_events[i-2]: null

      var depth_values = []
      for(var j=0; j<created_token_data[i][3].length; j++){
        depth_values.push(0)
      }
      // var exchanges_balances = await H52contractInstance.methods.f140e(created_token_data[i][3], created_tokens[i], depth_values).call((error, result) => {});

      // var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_tokens[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
      // var old_moderators = []

      // for(var e=0; e<moderator_data.length; e++){
      //   var mod_id = moderator_data[e].returnValues.p3
      //   old_moderators.push(mod_id)
      // }

      // var mod_status_values = await E52contractInstance.methods.f255([created_tokens[i]], [old_moderators]).call((error, result) => {});

      // var moderators = []
      // for(var e=0; e<old_moderators.length; e++){
      //   var their_status = mod_status_values[0][e]
      //   if(their_status == true){
      //     moderators.push(old_moderators[e])
      //   }
      // }

      // var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_tokens[i]],0).call((error, result) => {}); */ interactible_checker_status_values_for_all_tokens

      // var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_tokens[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_tokens

      // var my_blocked_time_value = /* await E52contractInstance.methods.f256([created_tokens[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_tokens



      // var update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p1/* exchange */: created_tokens[i]})

      // var update_proportion_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e2', e5, {p1/* exchange */: created_tokens[i]})

      var timestamp = event == null ? 0 : parseInt(event.returnValues.p4)
      var author = event == null ? 0 : event.returnValues.p3

      // var balance = token_balances[i]
      // var token_balance_data = token_balances_data[i]
      var balance = balance_obj[created_tokens[i]]['token_balance']
      var token_balance_data = balance_obj[created_tokens[i]]['token_balance_data']

      var exchanges_depth = 0
      if(tokens_data != null){
        exchanges_depth = tokens_data.default_depth == null ? 0 : tokens_data.default_depth
      }

      // if(exchanges_depth > 13){
      //   var token_balances_and_data2 = await this.get_balance_from_multiple_exchanges([created_tokens[i]], account, H52contractInstance, [exchanges_depth], e5)
      //   balance = token_balances_and_data2['bal'][0]
      //   token_balance_data = token_balances_and_data2['bal_data'][0]
      // }

      if(tokens_data != null && tokens_data.token_image != null && tokens_data.token_image.startsWith('image')) this.fetch_uploaded_data_from_ipfs([tokens_data.token_image], false);
      
      if(tokens_data != null){
        token_thumbnail_directory[created_tokens[i]] = tokens_data.token_image
      }
      else if(created_tokens[i] == 3){
        token_thumbnail_directory[created_tokens[i]] = this.state.e5s[e5].end_image
      }
      else if(created_tokens[i] == 5){
        token_thumbnail_directory[created_tokens[i]] = this.state.e5s[e5].spend_image
      }

      if(exchanges_depth != 0){
        end_tokens.push(created_tokens[i])
      }
        
      var token_obj = {
        'id':created_tokens[i], 'data':created_token_data[i], 'ipfs':tokens_data, 'event':event, 'balance':balance, 'account_data':[0,0,0,0]/* accounts_exchange_data[i] */, 'exchanges_balances':depth_values/* exchanges_balances */, 'moderators':[]/* moderators */, 'access_rights_enabled':true/* interactible_checker_status_values[i] */,'e5':e5, 'timestamp':timestamp, 'exchange_ratio_data':[]/* update_exchange_ratio_event_data */, 'proportion_ratio_data':[]/* update_proportion_ratio_event_data */, 'author':author, 'e5_id':created_tokens[i]+e5, 'token_balances_data':token_balance_data, 'hidden':true, 'pos':created_token_object_data.length
      }

      // if(interactible_checker_status_values[i] == true && (my_interactable_time_value[i][0] < Date.now()/1000 && !moderators.includes(account) && event.returnValues.p3 != account )){
      //   token_obj['hidden'] = true
      // }
      // else if(my_blocked_time_value[i][0] > Date.now()/1000){
      //   token_obj['hidden'] = true
      // }
      // else{
      //   token_obj['hidden'] = false
      // }

      if(this.homepage.current?.state.selected_end_item == created_tokens[i]+e5 || this.homepage.current?.state.selected_spend_item == created_tokens[i]+e5){
        // the token is being viewed
        const previous_obj = this.state.created_tokens[e5].find(e => e['e5_id'] == created_tokens[i]+e5)
        if(previous_obj != null){
          token_obj['exchanges_balances'] = previous_obj['exchanges_balances']
          token_obj['moderators'] = previous_obj['moderators']
          token_obj['access_rights_enabled'] = previous_obj['access_rights_enabled']
          token_obj['exchange_ratio_data'] = previous_obj['exchange_ratio_data']
          token_obj['proportion_ratio_data'] = previous_obj['proportion_ratio_data']
          token_obj['hidden'] = previous_obj['hidden']
          token_obj['balance'] = previous_obj['balance']
          token_obj['token_balances_data'] = previous_obj['token_balances_data']
          token_obj['account_data'] = previous_obj['account_data'] 
        }
      }

      if(tokens_data != null || (created_tokens[i] == 3 || created_tokens[i] == 5)){
        const index = created_token_object_data.findIndex(item => item['e5_id'] === token_obj['e5_id']);
        if(index != -1){
          created_token_object_data[index] = token_obj
        }else{
          created_token_object_data.push(token_obj)
        }
        created_token_object_mapping[created_tokens[i]] = token_obj
      }
      
      var token_name = tokens_data == null ? 'tokens' : tokens_data.entered_symbol_text
      var token_title = tokens_data == null ? 'tokens' : tokens_data.entered_title_text
      var token_id = created_tokens[i]

      if(token_id == 3){
        token_name = 'END'
        token_title = e5
      } 
      if(token_id == 5) {
        token_name = 'SPEND'
        token_title = e5.replace('E','3')
      }
      token_symbol_directory[token_id] = token_name;
      token_symbol_directory[token_name] = token_id;
      token_name_directory[e5+token_id] = token_title;


      if(is_first_time || true){
        var created_tokens_clone = structuredClone(this.state.created_tokens)
        created_tokens_clone[e5] = created_token_object_data

        var created_token_object_mapping_clone = structuredClone(this.state.created_token_object_mapping)
        created_token_object_mapping_clone[e5] = created_token_object_mapping

        var token_directory_clone = structuredClone(this.state.token_directory)
        token_directory_clone[e5] = token_symbol_directory

        var token_name_directory_clone = structuredClone(this.state.token_name_directory)
        token_name_directory_clone[e5] = token_name_directory

        var token_thumbnail_directory_clone = structuredClone(this.state.token_thumbnail_directory)
        token_thumbnail_directory_clone[e5] = token_thumbnail_directory

        var end_tokens_clone = structuredClone(this.state.end_tokens)
        end_tokens_clone[e5] = end_tokens

        this.setState({created_tokens: created_tokens_clone, created_token_object_mapping: created_token_object_mapping_clone, token_directory: token_directory_clone, token_name_directory: token_name_directory_clone, token_thumbnail_directory: token_thumbnail_directory_clone, end_tokens: end_tokens_clone})
        // await this.wait(150)
      }
    }

    var created_tokens_clone = this.structuredClone(this.state.created_tokens)
    created_tokens_clone[e5] = created_token_object_data

    var created_token_object_mapping_clone = structuredClone(this.state.created_token_object_mapping)
    created_token_object_mapping_clone[e5] = created_token_object_mapping

    var token_directory_clone = structuredClone(this.state.token_directory)
    token_directory_clone[e5] = token_symbol_directory

    var token_name_directory_clone = structuredClone(this.state.token_name_directory)
    token_name_directory_clone[e5] = token_name_directory

    var token_thumbnail_directory_clone = structuredClone(this.state.token_thumbnail_directory)
    token_thumbnail_directory_clone[e5] = token_thumbnail_directory

    var end_tokens_clone = structuredClone(this.state.end_tokens)
    end_tokens_clone[e5] = end_tokens

    this.setState({created_tokens: created_tokens_clone, created_token_object_mapping: created_token_object_mapping_clone, token_directory: token_directory_clone, token_name_directory: token_name_directory_clone, token_thumbnail_directory: token_thumbnail_directory_clone, end_tokens: end_tokens_clone})
    // console.log('token count for e5: ',e5,' : ',created_token_object_data.length)

  }

  load_my_bills = async (contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts, specific_items) => {
    if(this.state.accounts[e5].privateKey == '') return;
    var created_bill_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:13/* bills */, p1/* target_id */:account})

    var my_sent_bill_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:13/* bills */, p2/* sender_acc_id */:account})

    created_bill_events = created_bill_events.reverse()
    my_sent_bill_events = my_sent_bill_events.reverse()

    const all_bills = created_bill_events.concat(my_sent_bill_events)

    console.log('all_bills', all_bills)

    const my_bills = []
    var is_first_time = this.state.created_bills[e5] == null
    if(all_bills.length > 0){
      if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
        await this.fetch_multiple_cids_from_nitro(all_bills, 0, 'p4')
      }
    }
    for(var i=0; i<all_bills.length; i++){
      const event = all_bills[i]
      const ipfs = await this.fetch_objects_data_from_ipfs_using_option(event.returnValues.p4)
      const data = await this.fetch_and_decrypt_ipfs_object(ipfs, e5)
      console.log('all_bills','loaded data', data)
      if(data != null && data != ipfs){
        var id = event.returnValues.p5/* int_data */
        var bill = {'id':id, 'ipfs':data, 'event': event, 'e5':e5, 'timestamp':parseInt(event.returnValues.p6/* timestamp */), 'author':event.returnValues.p2/* sender_acc_id */ ,'e5_id':id+e5, 'target':event.returnValues.p1}
        my_bills.push(bill)

        if(is_first_time){
          var created_bills_clone = structuredClone(this.state.created_bills)
          created_bills_clone[e5] = my_bills
          this.setState({created_bills: created_bills_clone});
        }
      }
    }

    var created_bills_clone = structuredClone(this.state.created_bills)
    created_bills_clone[e5] = my_bills
    this.setState({created_bills: created_bills_clone});
  }

  load_extra_token_data = async (object) => {
    const e5 = object['e5']
    const id = object['id']
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const H5contractArtifact = require('./contract_abis/H5.json');
    const H5_address = contract_addresses[5];
    const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = contract_addresses[6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);


    var created_tokens = [id]
    var i = 0
    var account_as_list = [[account]]
    var exchange_accounts = [account]

    var interactible_checker_status_values_for_all_tokens = await E52contractInstance.methods.f254(created_tokens,0).call((error, result) => {});

    var my_interactable_time_value_for_all_tokens = await E52contractInstance.methods.f256(created_tokens, account_as_list, 0,2).call((error, result) => {});

    var my_blocked_time_value_for_all_tokens = await E52contractInstance.methods.f256(created_tokens, account_as_list, 0,3).call((error, result) => {});


    var accounts_exchange_data = await H5contractInstance.methods.f241(exchange_accounts, created_tokens).call((error, result) => {});

    var depth_values = []
    for(var j=0; j<object['data'][3].length; j++){
      depth_values.push(0)
    }
    var exchanges_balances = await H52contractInstance.methods.f140e(object['data'][3], created_tokens[i], depth_values).call((error, result) => {});

    var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_tokens[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
    var old_moderators = []

    for(var e=0; e<moderator_data.length; e++){
      var mod_id = moderator_data[e].returnValues.p3
      old_moderators.push(mod_id)
    }

    var mod_status_values = await E52contractInstance.methods.f255([created_tokens[i]], [old_moderators]).call((error, result) => {});

    var moderators = []
    for(var e=0; e<old_moderators.length; e++){
      var their_status = mod_status_values[0][e]
      if(their_status == true){
        moderators.push(old_moderators[e])
      }
    }

    var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_tokens[i]],0).call((error, result) => {}); */ interactible_checker_status_values_for_all_tokens

    var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_tokens[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_tokens

    var my_blocked_time_value = /* await E52contractInstance.methods.f256([created_tokens[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_tokens


    var update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p1/* exchange */: created_tokens[i]})

    var update_proportion_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e2', e5, {p1/* exchange */: created_tokens[i]})

    var exchanges_depth = 0
    if(object['ipfs'] != null){
      exchanges_depth = object['ipfs'].default_depth == null ? 0 : object['ipfs'].default_depth
    }

    var token_balances_and_data2 = await this.get_balance_from_multiple_exchanges([created_tokens[i]], account, H52contractInstance, [exchanges_depth], e5)
    var balance = token_balances_and_data2['bal'][0]
    var token_balance_data = token_balances_and_data2['bal_data'][0]

    object['exchanges_balances'] = exchanges_balances
    object['moderators'] = moderators
    object['access_rights_enabled'] = interactible_checker_status_values[i]
    object['exchange_ratio_data'] = update_exchange_ratio_event_data
    object['proportion_ratio_data'] = update_proportion_ratio_event_data
    object['hidden'] = false
    object['balance'] = balance
    object['token_balances_data'] = token_balance_data
    object['account_data'] = accounts_exchange_data[i]

    if(interactible_checker_status_values[i] == true && (my_interactable_time_value[i][0] < Date.now()/1000 && !moderators.includes(account) && object['event'].returnValues.p3 != account )){
      object['hidden'] = true
    }
    else if(my_blocked_time_value[i][0] > Date.now()/1000){
      object['hidden'] = true
    }
    else{
      object['hidden'] = false
    }

    console.log('load_extra', object)
    var created_tokens_clone = this.structuredClone(this.state.created_tokens)
    created_tokens_clone[e5][object['pos']] = object

    var created_token_object_mapping_clone = structuredClone(this.state.created_token_object_mapping)
    created_token_object_mapping_clone[e5][created_tokens[i]] = object

    this.setState({created_tokens: created_tokens_clone, created_token_object_mapping: created_token_object_mapping_clone})

  }

  load_accounts_exchange_interactions_data = async (account_id, e5) => {
    if(account_id < 1000) return [];
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var received_tokens_event_data = null
    var update_balance_event_data = null
    var stack_depth_swap_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id}],
        [web3, H52contractInstance, 'e2', e5, {p2/* receiver */: account_id}],
        [web3, H52contractInstance, 'power', e5, {p3/* receiver */: account_id, p2/* action */:2/* depth_auth_mint */}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      received_tokens_event_data = all_events[0]
      update_balance_event_data = all_events[1]
      stack_depth_swap_event_data = all_events[2]
    }else{

      received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id})

      update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p2/* receiver */: account_id})

      stack_depth_swap_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p3/* receiver */: account_id, p2/* action */:2/* depth_auth_mint */})

    }

    var all_events = [];
    for(var i=0; i<update_balance_event_data.length; i++){
      all_events.push({'event':update_balance_event_data[i], 'action':'Update', 'timestamp':update_balance_event_data[i].returnValues.p4})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }

    for(var i=0; i<stack_depth_swap_event_data.length; i++){
      all_events.push({'event':stack_depth_swap_event_data[i], 'action':'DepthMint', 'timestamp':stack_depth_swap_event_data[i].returnValues.p7})
    }

    var data = []
    all_events.forEach(token_event => {
      var exchange = token_event['event'].returnValues.p1
      if(!data.includes(exchange)){
        data.push(exchange)
      }
    });

    return data
  }

  load_received_tokens_events = async (web3, H52contractInstance, e5, account) => {
    //load my received token events
    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account})
    var my_token_event_notifications_data = []
    for(var i=0; i<received_tokens_event_data.length; i++){
      my_token_event_notifications_data.push({'type':'token_event_notification', 'event':received_tokens_event_data[i], 'e5':e5, 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }

    var my_token_event_notifications_clone = structuredClone(this.state.my_token_event_notifications)
    my_token_event_notifications_clone[e5] = my_token_event_notifications_data

    this.setState({my_token_event_notifications: my_token_event_notifications_clone});
  }

  

  structuredClone(page_data){
    var clone = {}
    for (var key in page_data) {
      if (page_data.hasOwnProperty(key)) {
        clone[key] = page_data[key];
      }
    }
    return clone

    // return JSON.parse(JSON.stringify(page_data))
  }

  is_post_index_valid(emitted_index, web3){
    var setting = {}
    setting[this.getLocale()['1231']/* 'local' */] = 'local'
    setting[this.getLocale()['1232']/* 'language' */] = 'language'
    setting[this.getLocale()['1233']/* 'international' */ ] = 'international'
    
    var content_channeling = setting[this.state.content_channeling]
    if(content_channeling == 'local'){
      content_channeling = this.state.device_country
    }
    var hash = web3.utils.keccak256(content_channeling).toString()
    var hash2 = web3.utils.keccak256('en').toString()
    return hash == emitted_index || hash2 == emitted_index
  }

  get_valid_post_index(web3){
    var setting = {}
    setting[this.getLocale()['1231']/* 'local' */] = 'local'
    setting[this.getLocale()['1232']/* 'language' */] = 'language'
    setting[this.getLocale()['1233']/* 'international' */ ] = 'international'
    
    var content_channeling = setting[this.state.content_channeling]
    if(content_channeling == 'local'){
      content_channeling = this.state.device_country
    }
    if(this.state.e5s['E25'].e5_address =='0xF3895fe95f423A4EBDdD16232274091a320c5284'){
      return web3.utils.keccak256('en').toString()
    }
    return web3.utils.keccak256(content_channeling).toString()
  }

  get_post_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, specific_items, account) => {
    var created_post_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 18/* 18(post object) */, p1:this.get_valid_post_index(web3)})
    created_post_events = created_post_events.reverse()

    //prioritize my content first
    var my_posted_events = created_post_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_post_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_post_events = my_posted_events


    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_post_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p2))
      })
      created_post_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_post_events = my_participated_events
    }



    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:18/* post_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_post_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_post_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_post_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_post_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_post_events = my_events
    }

    
    this.record_number_of_items(e5, 'posts', created_post_events.length)
    var created_posts = this.state.created_posts[e5] == null ? [] : this.state.created_posts[e5].slice()
    var is_first_time = this.state.created_posts[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_post_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)
    console.log('all_data', all_data)

    for(var i=0; i<created_post_events.length; i++){
      var id = created_post_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_post_events[i].returnValues.p1.toString() == hash.toString() || this.is_post_index_valid(created_post_events[i].returnValues.p1.toString(), web3)){
        var post_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
        
        const obj = {'id':id, 'ipfs':post_data, 'event': created_post_events[i], 'e5':e5, 'timestamp':parseInt(created_post_events[i].returnValues.p6), 'author':created_post_events[i].returnValues.p5, 'e5_id':id+e5}

        const index = created_posts.findIndex(item => item['e5_id'] === obj['e5_id']);
        if(index != -1){
          created_posts[index] = obj
        }else{
          created_posts.push(obj)
        }
      }

      if(is_first_time || true){
        var created_posts_clone = structuredClone(this.state.created_posts)
        created_posts_clone[e5] = created_posts
        this.setState({created_posts: created_posts_clone}) 
        // await this.wait(150)       
      }
    }

    var created_posts_clone = structuredClone(this.state.created_posts)
    created_posts_clone[e5] = created_posts
    this.setState({created_posts: created_posts_clone})

    console.log('post count: '+created_posts.length)
  }

  get_channel_data = async (E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts, specific_items) => {
    var created_channel_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 36/* 36(type_channel_target) */, p1:this.get_valid_post_index(web3)})
    created_channel_events = created_channel_events.reverse()

    //prioritize my content first
    var my_posted_events = created_channel_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */== account)
    })
    created_channel_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_channel_events = my_posted_events

    //prioritize the channels ive participated in first
    if(this.state.my_channels.length > 0){
      //prioritize my participated in channels first
      var my_participated_channel_ids = this.filter_accounts_by_e5(this.state.my_channels, e5)
      var my_participated_events = created_channel_events.filter(function (event) {
        return (my_participated_channel_ids.includes(event.returnValues.p2))
      })
      created_channel_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_channel_events = my_participated_events
    }

    //prioritize the channels im looking for first
    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:36/* channel_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_channel_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_channel_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_channel_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_channel_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_channel_events = my_events
    }

    this.record_number_of_items(e5, 'channels', created_channel_events.length)
    var created_channel = this.state.created_channels[e5] == null ? [] : this.state.created_channels[e5].slice()
    var is_first_time = this.state.created_channels[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_channel_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)

    const my_unique_crosschain_identifier = await this.get_my_unique_crosschain_identifier_number()
    const privateKey = this.state.accounts['E25'].privateKey
    const private_key_hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    const private_key_to_use = Buffer.from(private_key_hash)

    for(var i=0; i<created_channel_events.length; i++){
      var id = created_channel_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_channel_events[i].returnValues.p1.toString() == hash.toString()|| this.is_post_index_valid(created_channel_events[i].returnValues.p1.toString(), web3)){
        var channel_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]

        var channel_obj = {'id':id, 'ipfs':channel_data, 'event': created_channel_events[i], 'messages':[], 'moderators':[], 'access_rights_enabled':false, 'my_interactible_time_value':0, 'my_blocked_time_value':0,'e5':e5, 'timestamp':parseInt(created_channel_events[i].returnValues.p6), 'author':created_channel_events[i].returnValues.p5, 'e5_id':id+e5, 'hidden':false }

        if(channel_data['channel_keys'] != null && channel_data['channel_keys'].length > 0){
          var active_key = channel_data['channel_keys'].length - 1;
          var encrypted_key = channel_data['channel_keys'][active_key][my_unique_crosschain_identifier]
          channel_obj['hidden'] = encrypted_key == null
          var unencrypted_keys = []
          for(var k=0; k<channel_data['channel_keys'].length; k++){
            var focused_encrypted_key = channel_data['channel_keys'][k][my_unique_crosschain_identifier]
            if(focused_encrypted_key != null){
              var uint8array = Uint8Array.from(focused_encrypted_key.split(',').map(x=>parseInt(x,10)));
              var my_key = await ecies.decrypt(private_key_to_use, uint8array)
              unencrypted_keys.push(my_key.toString())
            }else{
              unencrypted_keys.push('')
            }
          }
          channel_obj['unencrypted_keys'] = unencrypted_keys
          console.log('apppage', 'channel keys',channel_data.entered_title_text, unencrypted_keys)
        }


        const index = created_channel.findIndex(item => item['e5_id'] === channel_obj['e5_id']);
        if(index != -1){
          created_channel[index] = channel_obj
        }else{
          created_channel.push(channel_obj)
        }
      }

      if(is_first_time || true){
        var created_channels_clone = structuredClone(this.state.created_channels)
        created_channels_clone[e5] = created_channel
        this.setState({created_channels: created_channels_clone})
        // await this.wait(150)
      }
    }

    var created_channels_clone = structuredClone(this.state.created_channels)
    created_channels_clone[e5] = created_channel
    this.setState({created_channels: created_channels_clone})

    console.log('channel count: '+created_channel.length)
  }

  filter_accounts_by_e5(channel_ids, e5){
    var accepted_ids = []
    for(var i=0; i<channel_ids.length; i++){
      var item = channel_ids[i]
      var split_account_array = item.split(':')
      var item_e5 = split_account_array[0]
      var account = split_account_array[1]
      if(item_e5 == e5){
        accepted_ids.push(parseInt(account))
      }
    }
    return accepted_ids
  }

  get_job_data = async (E52contractInstance, web3, e5, contract_addresses, account, loop_count, prioritized_accounts, specific_items) => {
    var created_job_events =  await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 17/* 17(job_object) */, p1:this.get_valid_post_index(web3)})
    created_job_events = created_job_events.reverse()

    //prioritize my content first
    var my_posted_events = created_job_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_job_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2/* item */ === event.returnValues.p2/* item */) == null){
        my_posted_events.push(event)
      }
    });
    created_job_events = my_posted_events


    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_job_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p2))
      })
      created_job_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_job_events = my_participated_events
    }


    var page = this.homepage.current?.get_selected_tag_name()
    if(page == this.getLocale()['1205']/* 'applied' */){
      //if were in the applied section, prioritize my applied jobs first
      var my_applied_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account ,p3/* context */:36})
      var my_applied_jobs = []
      my_applied_responses.forEach(event => {
        if(!my_applied_jobs.includes(event.returnValues.p1)){
          my_applied_jobs.push(event.returnValues.p1)
        }
      });

      var my_applied_events = created_job_events.filter(function (event) {
        return (my_applied_jobs.includes(event.returnValues.p2/* item */))
      })
      created_job_events.forEach(event => {
        if(my_applied_events.find(e => e.returnValues.p2/* item */ === event.returnValues.p2/* item */) == null){
          my_applied_events.push(event)
        }
      });
      created_job_events = my_applied_events
    }

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:17/* job_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_job_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_job_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_job_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_job_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_job_events = my_events
    }

    // console.log('created_job_events', created_job_events)
    this.record_number_of_items(e5, 'jobs', created_job_events.length)

    var created_job = this.state.created_jobs[e5] == null ? [] : this.state.created_jobs[e5].slice()
    var created_job_mappings = this.state.created_job_mappings[e5] == null ? {} : structuredClone(this.state.created_job_mappings[e5])
    var my_jobs = []
    var my_job_ids = []
    var is_first_time = this.state.created_jobs[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_job_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)

    var all_response_count = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:36})
    var response_data = {}
    all_response_count.forEach(event => {
      var target_id = event.returnValues.p1/* target_id */
      if(response_data[target_id] == null){
        response_data[target_id] = []
      }
      response_data[target_id].push(event)
    });

    for(var i=0; i<created_job_events.length; i++){
      var id = created_job_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_job_events[i].returnValues.p1.toString() == hash.toString()|| this.is_post_index_valid(created_job_events[i].returnValues.p1.toString(), web3)){
        var job_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
        if(job_data != null){
          var response_count = response_data[id] == null ? [] : response_data[id]
          var job = {'id':id, 'ipfs':job_data, 'event': created_job_events[i], 'e5':e5, 'timestamp':parseInt(created_job_events[i].returnValues.p6), 'author':created_job_events[i].returnValues.p5 ,'e5_id':id+e5, 'responses':response_count.length}
          
          
          const index = created_job.findIndex(item => item['e5_id'] === job['e5_id']);
          if(index != -1){
            created_job[index] = job
          }else{
            created_job.push(job)
          }

          created_job_mappings[id] = job

          if(job['author'] == account){
            my_jobs.push(job)
            my_job_ids.push(job['id'])
          }
        }
      }

      if(is_first_time || true){
        var created_jobs_clone = structuredClone(this.state.created_jobs)
        created_jobs_clone[e5] = created_job

        var created_job_mappings_clone = structuredClone(this.state.created_job_mappings)
        created_job_mappings_clone[e5] = created_job_mappings

        this.setState({created_jobs: created_jobs_clone, created_job_mappings:created_job_mappings_clone});
        // await this.wait(150)
      }
    }

    //my job applications
    var my_created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* target_id */: account, p3/* context */:36})
    var my_applications = []
    var my_application_targets = []
    var my_application_int_data = []
    for(var i=0; i<my_created_job_respnse_data.length; i++){
      var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_created_job_respnse_data[i].returnValues.p4)

      if(ipfs_data['type'] == 'job_application'){
        my_applications.push({'ipfs':ipfs_data, 'event':my_created_job_respnse_data[i], 'e5':e5, 'timestamp':my_created_job_respnse_data[i].returnValues.p6})
        my_application_targets.push(my_created_job_respnse_data[i].returnValues.p1)
        my_application_int_data.push(my_created_job_respnse_data[i].returnValues.p5)
      }

      if(is_first_time){
        var my_applications_clone = structuredClone(this.state.my_applications)
        my_applications_clone[e5] = my_applications
        this.setState({my_applications:my_applications_clone})
      }
    }

    //------------ my job application responses
    var my_accepted_applications_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_application_targets, p3/* context */:37})
    var my_accepted_applications = []
    for(var i=0; i<my_accepted_applications_events.length; i++){
      if(my_application_int_data.includes(my_accepted_applications_events[i].returnValues.p5)){
        my_accepted_applications.push({'type':'my_job_application_response_notification', 'event':my_accepted_applications_events[i], 'e5':e5, 'timestamp':my_accepted_applications_events[i].returnValues.p6})

        if(is_first_time){
          var my_job_application_responses_clone = structuredClone(this.state.my_job_application_responses_notifications)
          my_job_application_responses_clone[e5] = my_accepted_applications
          this.setState({my_job_application_responses_notifications: my_job_application_responses_clone})
        }
      }
    }

    //------------ when someone responds to my job
    var my_job_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_job_ids, p3/* context */:36})
    var notifications = []
    for(var i=0; i<my_job_responses.length; i++){
      var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_job_responses[i].returnValues.p4)
      if(ipfs_data['type'] == 'job_application'){
        notifications.push({'type':'job_response_notification', 'ipfs':ipfs_data, 'event':my_job_responses[i], 'e5':e5, 'timestamp':my_job_responses[i].returnValues.p6})
      }

      if(is_first_time){
        var my_received_applications_clone = structuredClone(this.state.my_job_responses_notifications)
        my_received_applications_clone[e5] = notifications
        this.setState({my_job_responses_notifications: my_received_applications_clone})
      }
    }


    var created_jobs_clone = structuredClone(this.state.created_jobs)
    created_jobs_clone[e5] = created_job

    var created_job_mappings_clone = structuredClone(this.state.created_job_mappings)
    created_job_mappings_clone[e5] = created_job_mappings

    var my_applications_clone = structuredClone(this.state.my_applications)
    my_applications_clone[e5] = my_applications

    var my_received_applications_clone = structuredClone(this.state.my_job_responses_notifications)
    my_received_applications_clone[e5] = notifications

    var my_job_application_responses_clone = structuredClone(this.state.my_job_application_responses_notifications)
    my_job_application_responses_clone[e5] = my_accepted_applications

    this.setState({created_jobs: created_jobs_clone, created_job_mappings:created_job_mappings_clone, my_applications:my_applications_clone, my_job_responses_notifications: my_received_applications_clone, my_job_application_responses_notifications: my_job_application_responses_clone})
    
    console.log(e5, 'job count: ',created_job.length)
    console.log(e5, 'job applications count: ', my_applications.length)

    // if(created_job.length == 0 && loop_count < 3){
    //   this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, loop_count+1)
    // }
  }

  get_all_mail_data = async (E52contractInstance, e5, account, web3, specific_items) => {
    if(this.state.accounts[e5].privateKey == '') return;
    
    const all_events = await this.load_mail_events(E52contractInstance, e5, account, web3)
    const my_received_mail_events = all_events.my_received_mail_events;
    const my_created_mail_events = all_events.my_created_mail_events;
    const my_received_message_events = all_events.my_received_message_events;
    const my_created_message_events = all_events.my_created_message_events;

    const all_my_messages = my_received_message_events.concat(my_created_message_events)
    const message_event_array = {}
    const newest_event_time = {}
    all_my_messages.forEach(event => {
      if(message_event_array[event.returnValues.p5] == null){
        message_event_array[event.returnValues.p5] = []
        newest_event_time[event.returnValues.p5] = 0
      }
      message_event_array[event.returnValues.p5].push(event)
      if(newest_event_time[event.returnValues.p5] < parseInt(event.returnValues.p6)/* timestamp */){
        newest_event_time[event.returnValues.p5] = parseInt(event.returnValues.p6)/* timestamp */
      }
    });

    var all_my_mail_events = my_received_mail_events.concat(my_created_mail_events)

    if(specific_items != null && specific_items.length > 0){
      var my_events = all_my_mail_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p5))
      })
      all_my_mail_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p5 === event.returnValues.p5) == null){
          my_events.push(event)
        }
      });
      all_my_mail_events = my_events
    }

    if(this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(all_my_mail_events, 0, 'p4')
    }
    
    for(var i=0; i<all_my_mail_events.length; i++){
      const event = all_my_mail_events[i]
      const convo_id = event.returnValues.p5
      const cid = event.returnValues.p4
      const ipfs = await this.fetch_objects_data_from_ipfs_using_option(cid)
      const ipfs_obj = await this.fetch_and_decrypt_ipfs_object(ipfs, e5)

      if(ipfs_obj != null && ipfs != ipfs_obj && ipfs_obj.entered_title_text != null){
        const all_mail_clone = structuredClone(this.state.all_mail)
        if(all_mail_clone[convo_id] == null){
          all_mail_clone[convo_id] = []
        }
        ipfs_obj['time'] = event.returnValues.p6
      
        const recipient = ipfs_obj['recipient'] || ipfs_obj['target_recipient']
        event.returnValues.p1 = (recipient)
        const recipient_e5 = ipfs_obj['type'] == null ? ipfs_obj['recipients_e5'] : ipfs_obj['e5'];
        const type  = event.returnValues.p2 == account ? 'sent': 'received'
        const convo_with = event.returnValues.p2 == account ? recipient : event.returnValues.p2
        const messages = message_event_array[convo_id] == null ? [] : message_event_array[convo_id]
        const newest_message_time = newest_event_time[convo_id] == null ? parseInt(event.returnValues.p6) : newest_event_time[convo_id]
        const obj = {'convo_id':convo_id,'id':cid, 'event':event, 'ipfs':ipfs_obj, 'type':type, 'time':event.returnValues.p6, 'convo_with':convo_with, 'sender':event.returnValues.p2, 'recipient':recipient, 'e5':recipient_e5, 'timestamp':parseInt(event.returnValues.p6), 'author':event.returnValues.p2, 'e5_id':cid, 'messages':messages, 'newest_message_time':newest_message_time}
        
        const includes = all_mail_clone[convo_id].find(e => e['id'] === obj['id'])
        if(includes == null){
          // console.log('apppage', 'includes is null, pushing it')
          all_mail_clone[convo_id].push(obj);
          this.setState({all_mail: all_mail_clone})
          this.fetch_uploaded_files_for_object(ipfs_obj)
          // await this.wait(150)
        }
      }
    }

    console.log('apppage', 'all_mail', this.state.all_mail)
  }

  load_mail_events = async (E52contractInstance, e5, account, web3) => {
    const crosschain_identifier = await this.get_my_unique_crosschain_identifier_number()
    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:30}],
        [web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:31}],
        [web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:30}],
        [web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:31}],

        [web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:32}],
        [web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:33}],
        [web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:32}],
        [web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:33}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      const my_received_mail_events = (all_events[0]).concat(all_events[1])
      const my_created_mail_events = (all_events[2]).concat(all_events[3])
      const my_received_message_events = (all_events[4]).concat(all_events[5])
      const my_created_message_events = (all_events[6]).concat(all_events[7])
      
      return { my_received_mail_events: my_received_mail_events, my_created_mail_events: my_created_mail_events, my_received_message_events: my_received_message_events, my_created_message_events: my_created_message_events }
    }else{
      const f30received = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:30})
      const f31received = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:31})
      const my_received_mail_events = f30received.concat(f31received)
    
      const f30created = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:30})
      const f31created = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:31})
      const my_created_mail_events = f30created.concat(f31created)

      console.log('apppage', e5, 'mail created', f30created, f31created)
      console.log('apppage', e5, 'mail received', f30received, f31received)

      const e32received = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:32})
      const e33received = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: crosschain_identifier, p3/* context */:33})
      const my_received_message_events = e32received.concat(e33received)

      const e32created = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:32})
      const e33created = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account, p3/* context */:33})
      const my_created_message_events = e32created.concat(e33created)

      //console.log('apppage', e5, 'messages created', e32created, e33created)
      //console.log('apppage', e5, 'messages received', e32received, e33received)

      return { my_received_mail_events: my_received_mail_events, my_created_mail_events: my_created_mail_events, my_received_message_events: my_received_message_events, my_created_message_events: my_created_message_events }
    }
  }

  get_my_unique_crosschain_identifier_number = async () => {
    var uint8array_string = await this.get_my_entire_public_key()
    var uint8array = Uint8Array.from(uint8array_string.split(',').map(x=>parseInt(x,10)));
    var arr = uint8array.toString().replaceAll(',','')
    if(arr.length > 36){
      arr = arr.slice(0, 36);
    }
    var final = bigInt(arr)
    return final
  }

  get_my_unique_crosschain_identifier_number2 = async () => {
    var uint8array_string = await this.get_my_entire_public_key()
    var uint8array = Uint8Array.from(uint8array_string.split(',').map(x=>parseInt(x,10)));
    var arr = uint8array.toString().replaceAll(',','')
    if(arr.length > 36){
      arr = arr.slice(0, 36);
    }
    return arr
  }

  get_storefront_data = async (E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account, prioritized_accounts, load_prioritized_accounts_exclusively, specific_items) => {
    var created_store_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 27/* 27(storefront-item) */, p1:this.get_valid_post_index(web3)})
    created_store_events = created_store_events.reverse()

    //prioritize my content first
    var my_posted_events = created_store_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_store_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_store_events = my_posted_events

    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_store_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p2))
      })
      created_store_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_store_events = my_participated_events
    }

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:27/* storefront_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_store_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2) && !load_prioritized_accounts_exclusively){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_store_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_store_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_store_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_store_events = my_events
    }

    this.record_number_of_items(e5, 'storefront', created_store_events.length)
    const created_stores = this.state.created_stores[e5] == null ? [] : this.state.created_stores[e5].slice()
    const created_store_mappings = this.state.created_store_mappings[e5] == null ? {} : structuredClone(this.state.created_store_mappings[e5])
    const my_stores = []
    var is_first_time = this.state.created_stores[e5] == null

    const all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_store_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)

    for(var i=0; i<created_store_events.length; i++){
      var id = created_store_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_store_events[i].returnValues.p1.toString() == hash.toString() || this.is_post_index_valid(created_store_events[i].returnValues.p1.toString(), web3)){
        var data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
        if(data != null){
          if(data != null && data.storefront_item_art != null && data.storefront_item_art.startsWith('image')) this.fetch_uploaded_data_from_ipfs([data.storefront_item_art], false)

          var obj = {'id':id, 'ipfs':data, 'event': created_store_events[i], 'e5':e5, 'timestamp':parseInt(created_store_events[i].returnValues.p6), 'author':created_store_events[i].returnValues.p5, 'e5_id':id+e5}
          
          const index = created_stores.findIndex(item => item['e5_id'] === obj['e5_id']);
          if(index != -1){
            created_stores[index] = obj
          }else{
            created_stores.push(obj)
          }
          created_store_mappings[id] = obj

          if(obj['author'] == account){
            my_stores.push(id)
          }

          if(load_prioritized_accounts_exclusively){
            this.fetch_uploaded_files_for_object(obj)
          }
        }
      }
      if(is_first_time || true){
        var created_stores_clone = structuredClone(this.state.created_stores)
        created_stores_clone[e5] = created_stores

        var created_store_mappings_clone = structuredClone(this.state.created_store_mappings)
        created_store_mappings_clone[e5] = created_store_mappings
        
        this.setState({created_stores: created_stores_clone, created_store_mappings:created_store_mappings_clone})
        // await this.wait(150)
      }
    }


    // var my_store_direct_purchases = await this.load_event_data(web3, H52contractInstance, 'e5', e5, {p3/* awward_context */: my_stores})
    // var my_store_direct_purchases_notifications = []
    // for(var i=0; i<my_store_direct_purchases.length; i++){
    //   my_store_direct_purchases_notifications.push({'type':'direct_purchase_notification', 'event':my_store_direct_purchases[i], 'e5':e5, 'timestamp':my_store_direct_purchases[i].returnValues.p5})
    // }


    var created_stores_clone = structuredClone(this.state.created_stores)
    created_stores_clone[e5] = created_stores

    var created_store_mappings_clone = structuredClone(this.state.created_store_mappings)
    created_store_mappings_clone[e5] = created_store_mappings

    // var my_store_direct_purchases_notifications_clone = structuredClone(this.state.my_store_direct_purchases_notifications)
    // my_store_direct_purchases_notifications_clone[e5] = my_store_direct_purchases_notifications
    
    if(!is_first_time){
      this.setState({created_stores: created_stores_clone, created_store_mappings:created_store_mappings_clone/* , my_store_direct_purchases_notifications: my_store_direct_purchases_notifications_clone */})
    }
    
    console.log('store count: '+created_stores.length)
  }

  get_bag_data = async (contractInstance, web3, e5, contract_addresses, E52contractInstance, account, prioritized_accounts, specific_items) => {
    var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */})
    created_bag_events = created_bag_events.reverse();

    //prioritize my content first
    var my_posted_events = created_bag_events.filter(function (event) {
      return (event.returnValues.p3/* sender_account_id */ == account)
    })
    created_bag_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
        my_posted_events.push(event)
      }
    });
    created_bag_events = my_posted_events

    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_bag_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p1))
      })
      created_bag_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
          my_participated_events.push(event)
        }
      });
      created_bag_events = my_participated_events
    }

    var page = this.homepage.current?.get_selected_tag_name()
    if(page == this.getLocale()['1264ae']/* 'my-responses' */){
      //if were in the applied section, prioritize my applied jobs first
      var my_applied_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* sender_acc_id */: account ,p3/* context */:36})
      var my_applied_bags = []
      my_applied_responses.forEach(event => {
        if(!my_applied_bags.includes(event.returnValues.p1)){
          my_applied_bags.push(event.returnValues.p1)
        }
      });

      var my_applied_events = created_bag_events.filter(function (event) {
        return (my_applied_bags.includes(event.returnValues.p2/* item */))
      })
      created_bag_events.forEach(event => {
        if(my_applied_events.find(e => e.returnValues.p1/* item */ === event.returnValues.p1/* item */) == null){
          my_applied_events.push(event)
        }
      });
      created_bag_events = my_applied_events
    }

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* item_type */:25/* bag_object */ , p3/* sender_account_id */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      console.log('bag_data', 'events', prioritized_object_events)

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p1)
        final_object_events.push(element)
      });
      created_bag_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p1)){
          added_ids.push(element.returnValues.p1)
          final_object_events.push(element)
        }
      });
      created_bag_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_bag_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p1))
      })
      created_bag_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p1 === event.returnValues.p1) == null){
          my_events.push(event)
        }
      });
      created_bag_events = my_events
    }

    this.record_number_of_items(e5, 'bags', created_bag_events.length)
    const my_created_bags = this.state.created_bags[e5] == null ? [] : this.state.created_bags[e5].slice()
    var my_created_bag_ids =  []
    var is_first_time = this.state.created_bags[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events3(created_bag_events), web3, e5, contract_addresses)

    var response_count_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:36})

    var my_bag_responses = []

    var response_data = {}
    var response_data2 = {}
    response_count_data.forEach(event => {
      var target_id = event.returnValues.p1/* target_id */
      if(response_data[target_id] == null){
        response_data[target_id] = []
        response_data2[target_id] = false
      }
      response_data[target_id].push(event)
      if(event.returnValues.p2/* sender_acc_id */ == account){
        //sender is author of response
        response_data2[target_id] = true
      }
    });

    for(var i=0; i<created_bag_events.length; i++){
      var id = created_bag_events[i].returnValues.p1
      var data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]
      console.log('bag_data', 'id', id, data)
      var response_count = response_data[id] == null ? [] : response_data[id]
      var responded_to = response_data2[id] == null ? [] : response_data2[id]
      
      if(data != null && id != 1523 && id != 1538){
        const bag = {'id':id, 'ipfs':data, 'event': created_bag_events[i], 'e5':e5, 'timestamp':parseInt(created_bag_events[i].returnValues.p4), 'author':created_bag_events[i].returnValues.p3, 'e5_id':id+e5, 'responses':response_count.length, 'responded_to':responded_to}
        
        const index = my_created_bags.findIndex(item => item['e5_id'] === bag['e5_id']);
        if(index != -1){
          my_created_bags[index] = bag
        }else{
          my_created_bags.push(bag)
        }

        var images = this.get_bag_images(bag)
        // console.log('all_data2', 'staged images for bag ', bag, images)
        if(images.length > 0){
          // console.log('all_data2', 'starting fetch of images', images)
          this.fetch_uploaded_data_from_ipfs(images, false)
          // console.log('all_data2', 'finished calling fetch of images', images)
        }

        if(bag['author'] == account){
          // console.log('all_data2', 'bag is my bag')
          my_created_bag_ids.push(id)
          my_bag_responses = my_bag_responses.concat(response_count)
        }
      }
      if(is_first_time || true){
        var created_bags_clone = structuredClone(this.state.created_bags)
        created_bags_clone[e5] = my_created_bags
        this.setState({created_bags: created_bags_clone})
        // await this.wait(150)
      }
    }
    // console.log('all_data2', 'reached end of loading bag data')


    //------------ when someone responds to my bag
    // var my_bag_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_created_bag_ids, p3/* context */:36})
    // console.log('all_data2', 'my_bag_responses', my_bag_responses)
    // var notifications = []
    // if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
    //   await this.fetch_multiple_cids_from_nitro(my_bag_responses, 0, 'p4')
    // }
    // for(var i=0; i<my_bag_responses.length; i++){
    //   var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_bag_responses[i].returnValues.p4)

    //   if(ipfs_data['type'] == 'bag_application'){
    //     notifications.push({'type':'bag_response_notification', 'ipfs':ipfs_data, 'event':my_bag_responses[i], 'e5':e5, 'timestamp':my_bag_responses[i].returnValues.p6})
    //   }

    //   if(is_first_time){
    //     var my_received_applications_clone = structuredClone(this.state.my_bag_responses_notifications)
    //     my_received_applications_clone[e5] = notifications
    //     this.setState({my_bag_responses_notifications: my_received_applications_clone})
    //   }
    // }

    // console.log('all_data2', 'reached end of loading bag responses data', notifications)



    //my bag applications
    // var my_created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p2/* target_id */: account, p3/* context */:36})
    // var my_applications = []
    // var my_application_targets = []
    // var my_application_int_data = []
    // if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
    //   await this.fetch_multiple_cids_from_nitro(my_created_job_respnse_data, 0, 'p4')
    // }
    // for(var i=0; i<my_created_job_respnse_data.length; i++){
    //   var ipfs_data = await this.fetch_objects_data_from_ipfs_using_option(my_created_job_respnse_data[i].returnValues.p4)

    //   if(ipfs_data['type'] == 'bag_application'){
    //     my_applications.push({'ipfs':ipfs_data, 'event':my_created_job_respnse_data[i], 'e5':e5, 'timestamp':my_created_job_respnse_data[i].returnValues.p6})
    //     my_application_targets.push(my_created_job_respnse_data[i].returnValues.p1)
    //     my_application_int_data.push(my_created_job_respnse_data[i].returnValues.p5)
    //   }

    //   if(is_first_time){
    //     var my_applications_clone = structuredClone(this.state.my_bag_applications)
    //     my_applications_clone[e5] = my_applications
    //     this.setState({my_bag_applications: my_applications_clone})
    //   }
    // }

    // console.log('all_data2', 'reached end of loading my bag applications data')


    //------------ my bag application responses
    // var my_accepted_applications_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_application_targets, p3/* context */:37})
    // console.log('all_data2', 'my_accepted_applications_events: ', my_accepted_applications_events)
    // var my_accepted_applications = []
    // for(var i=0; i<my_accepted_applications_events.length; i++){
    //   if(my_application_int_data.includes(my_accepted_applications_events[i].returnValues.p5)){
    //     my_accepted_applications.push({'type':'my_bag_application_response_notification', 'event':my_accepted_applications_events[i], 'e5':e5, 'timestamp':my_accepted_applications_events[i].returnValues.p6})

    //     if(is_first_time){
    //       var my_job_application_responses_clone = structuredClone(this.state.my_bag_application_responses_notifications)
    //       my_job_application_responses_clone[e5] = my_accepted_applications
    //       this.setState({my_bag_application_responses_notifications: my_job_application_responses_clone})
    //     }
    //   }
    // }

    // console.log('all_data2', 'reached end of loading my bag application responses data')


    var created_bags_clone = structuredClone(this.state.created_bags)
    created_bags_clone[e5] = my_created_bags

    // var my_received_applications_clone = structuredClone(this.state.my_bag_responses_notifications)
    // my_received_applications_clone[e5] = notifications

    // var my_applications_clone = structuredClone(this.state.my_bag_applications)
    // my_applications_clone[e5] = my_applications

    // var my_job_application_responses_clone = structuredClone(this.state.my_bag_application_responses_notifications)
    // my_job_application_responses_clone[e5] = my_accepted_applications

    this.setState({created_bags: created_bags_clone, /* my_bag_responses_notifications: my_received_applications_clone, my_bag_applications: my_applications_clone, my_bag_application_responses_notifications: my_job_application_responses_clone */})

    console.log('bag_data', ' bag count: '+my_created_bags.length)
    console.log('bag_data', my_created_bags)
  }

  get_bag_images(object){
    var images = []
    for(var i=0; i<object['ipfs']['bag_orders'].length; i++){
        var bag_order = object['ipfs']['bag_orders'][i]
        var variant_images = bag_order['variant_images']
        if(variant_images != null && variant_images.length > 0){
            variant_images.forEach(image => {
              if(image.startsWith('image')){
                images.push(image)
              }
            });
        }
    }
    return images
  }

  get_contractor_data = async (E52contractInstance, contract_addresses, e5, web3, account, prioritized_accounts, specific_items) => {
    var created_contractor_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 26/* 26(contractor_object) */, p1:this.get_valid_post_index(web3)})
    created_contractor_events = created_contractor_events.reverse()

    //prioritize my content first
    var my_posted_events = created_contractor_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_contractor_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_contractor_events = my_posted_events

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:26/* contractor_object */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_contractor_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_contractor_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_contractor_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_contractor_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_contractor_events = my_events
    }

    this.record_number_of_items(e5, 'contractor', created_contractor_events.length)
    var created_contractor = this.state.created_contractors[e5] == null ? [] : this.state.created_contractors[e5].slice()
    var my_contractor_posts = []
    var is_first_time = this.state.created_contractors[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_contractor_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)

    var all_requests = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:38})
    var all_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */:39})

    var request_data = {}
    var clients_data = {}
    all_requests.forEach(event => {
      var target_id = event.returnValues.p1/* target_id */
      if(request_data[target_id] == null){
        request_data[target_id] = []
        clients_data[target_id] = []
      }
      request_data[target_id].push(event)
      if(!clients_data[target_id].includes(event.returnValues.p2)){
        clients_data[target_id].push(event.returnValues.p2)
      }
    });
    var response_data = {}
    all_responses.forEach(event => {
      var target_id = event.returnValues.p1/* target_id */
      if(response_data[target_id] == null){
        response_data[target_id] = []
      }
      response_data[target_id].push(event)
    });

    for(var i=0; i<created_contractor_events.length; i++){
      var id = created_contractor_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_contractor_events[i].returnValues.p1.toString() == hash.toString()|| this.is_post_index_valid(created_contractor_events[i].returnValues.p1.toString(), web3)){
        var contractor_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        
        if(contractor_data != null){
          var requests = request_data[id] == null ? [] : request_data[id]
          var clients = clients_data[id] == null ? [] : clients_data[id]
          var responses = response_data[id] == null ? [] : response_data[id]

          var post = {'id':id, 'ipfs':contractor_data, 'event': created_contractor_events[i], 'e5':e5, 'timestamp':parseInt(created_contractor_events[i].returnValues.p6), 'author':created_contractor_events[i].returnValues.p5, 'e5_id':id+e5, 'requests':requests.length, 'responses': responses.length, 'clients': clients.length}
          
          const index = created_contractor.findIndex(item => item['e5_id'] === post['e5_id']);
          if(index != -1){
            created_contractor[index] = post
          }else{
            created_contractor.push(post)
          }

          if(post['author'] == account){
            my_contractor_posts.push(id)
          }
        }
      }

      if(is_first_time || true){
        var created_contractors_clone = structuredClone(this.state.created_contractors)
        created_contractors_clone[e5] = created_contractor
        this.setState({created_contractors: created_contractors_clone,})
        // await this.wait(150)
      }
    }


    var my_contractor_job_requests = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: my_contractor_posts, p3/* context */:38})
    var my_contractor_job_request_notifications = []
    for(var i=0; i<my_contractor_job_requests.length; i++){
      my_contractor_job_request_notifications.push({'type':'contractor_request_notification', 'event':my_contractor_job_requests[i], 'e5':e5, 'timestamp':my_contractor_job_requests[i].returnValues.p6})
    }

    var created_contractors_clone = structuredClone(this.state.created_contractors)
    created_contractors_clone[e5] = created_contractor

    var my_contractor_job_request_notifications_clone = structuredClone(this.state.my_contractor_job_request_notifications)
    my_contractor_job_request_notifications_clone[e5] = my_contractor_job_request_notifications

    this.setState({created_contractors: created_contractors_clone, my_contractor_job_request_notifications: my_contractor_job_request_notifications_clone})

    console.log('contractor count: '+created_contractor.length)
  }

  get_audio_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, specific_items, account) => {
    var created_audio_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 19/* 19(audio_object) */, p1:this.get_valid_post_index(web3)})
    created_audio_events = created_audio_events.reverse()

    //prioritize my content first
    var my_posted_events = created_audio_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_audio_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_audio_events = my_posted_events


    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_audio_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p2))
      })
      created_audio_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_audio_events = my_participated_events
    }


    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:19/* 19(audio_object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_audio_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_audio_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_audio_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_audio_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_audio_events = my_events
    }
    
    this.record_number_of_items(e5, 'audio', created_audio_events.length)
    var created_audios = this.state.created_audios[e5] == null ? [] : this.state.created_audios[e5].slice()
    var my_acquired_audios = this.state.my_acquired_audios.slice()
    var created_audio_mappings = this.state.created_audio_mappings[e5] == null ? {} : structuredClone(this.state.created_audio_mappings[e5])
    var is_first_time = this.state.created_audios[e5] == null
    is_first_time = true

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_audio_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)

    var requests = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 21})

    var album_sale_data = {}
    var song_sale_data = {}
    requests.forEach(event => {
      var context = event.returnValues.p3/* context */
      if(album_sale_data[context] == null){
        album_sale_data[context] = 0
        song_sale_data[context] = 0
      }
      if(event.returnValues.p5/* sales_type */ == 0/* entire_album */){
        album_sale_data[context]++
      }else{
        song_sale_data[context]++
      }
    });

    var songs_to_load = []

    for(var i=0; i<created_audio_events.length; i++){
      var id = created_audio_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_audio_events[i].returnValues.p1.toString() == hash.toString()|| this.is_post_index_valid(created_audio_events[i].returnValues.p1.toString(), web3)){
        var audio_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        
        if(audio_data != null){
          if(audio_data != null && audio_data.album_art != null && audio_data.album_art.startsWith('image')) this.fetch_uploaded_data_from_ipfs([audio_data.album_art], false);

          audio_data.songs.forEach(song => {
            songs_to_load.push(song['track'])
          });

          if(i % this.state.file_load_step_count == 0 || i == created_audio_events.length -1){
            this.fetch_uploaded_data_from_ipfs(songs_to_load, false)
            songs_to_load = []
          }

          var album_sales = album_sale_data[id] == null ? 0 : album_sale_data[id]
          var song_sales = song_sale_data[id] == null ? 0 : song_sale_data[id]

          const data = {'id':id, 'ipfs':audio_data, 'event': created_audio_events[i], 'e5':e5, 'timestamp':parseInt(created_audio_events[i].returnValues.p6), 
          'author':created_audio_events[i].returnValues.p5, 'e5_id':id+e5, 'album_sales':album_sales, 'song_sales':song_sales
          }

          const index = created_audios.findIndex(item => item['e5_id'] === data['e5_id']);
          if(index != -1){
            created_audios[index] = data
          }else{
            created_audios.push(data)
          }
          created_audio_mappings[id] = data

          if(this.state.my_albums.includes(id)){
            const index2 = my_acquired_audios.findIndex(item => item['e5_id'] === data['e5_id']);
            if(index2 != -1){
              my_acquired_audios[index] = data
            }else{
              my_acquired_audios.push(data)
            }
          }
        }
      }

      if(is_first_time || true){
        var created_audios_clone = structuredClone(this.state.created_audios)
        var created_audio_mappings_clone = structuredClone(this.state.created_audio_mappings)
        created_audios_clone[e5] = created_audios
        created_audio_mappings_clone[e5] = created_audio_mappings
        this.setState({created_audios: created_audios_clone, created_audio_mappings:created_audio_mappings_clone, my_acquired_audios: my_acquired_audios}) 
        // await this.wait(150)       
      }
    }

    var created_audios_clone = structuredClone(this.state.created_audios)
    var created_audio_mappings_clone = structuredClone(this.state.created_audio_mappings)
    created_audios_clone[e5] = created_audios
    created_audio_mappings_clone[e5] = created_audio_mappings
    this.setState({created_audios: created_audios_clone, created_audio_mappings:created_audio_mappings_clone, my_acquired_audios: my_acquired_audios})

    console.log('audio count: '+created_audios.length)
  }

  get_video_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, specific_items, account) => {
    var created_video_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 20/* 20(video_object) */, p1:this.get_valid_post_index(web3)})
    created_video_events = created_video_events.reverse()

    //prioritize my content first
    var my_posted_events = created_video_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_video_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_video_events = my_posted_events


    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_video_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p2))
      })
      created_video_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_video_events = my_participated_events
    }

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:20/* 20(video_object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_video_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_video_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_video_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_video_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_video_events = my_events
    }
    
    this.record_number_of_items(e5, 'video', created_video_events.length)
    var created_videos = this.state.created_videos[e5] == null ? [] : this.state.created_videos[e5].slice()
    var created_video_mappings = this.state.created_video_mappings[e5] == null ? {} : structuredClone(this.state.created_video_mappings[e5])
    var my_acquired_videos = this.state.my_acquired_videos.slice()
    var is_first_time = this.state.created_videos[e5] == null
    is_first_time = true

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_video_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)

    var sales_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 21})

    var videopost_sale_data = {}
    var video_sale_data = {}
    sales_events.forEach(event => {
      var context = event.returnValues.p3/* context */
      if(videopost_sale_data[context] == null){
        videopost_sale_data[context] = 0
        video_sale_data[context] = 0
      }
      if(event.returnValues.p5/* sales_type */ == 0/* entire_album */){
        videopost_sale_data[context]++
      }else{
        video_sale_data[context]++
      }
    });

    var videos_to_load = []

    for(var i=0; i<created_video_events.length; i++){
      var id = created_video_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_video_events[i].returnValues.p1.toString() == hash.toString()|| this.is_post_index_valid(created_video_events[i].returnValues.p1.toString(), web3)){
        var video_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        console.log('video_data', video_data)
        if(video_data != null){
          if(video_data.album_art != null && video_data.album_art.startsWith('image')) {
            this.fetch_uploaded_data_from_ipfs([video_data.album_art], false)
          }
          
          video_data.videos.forEach(video => {
            videos_to_load.push(video['video'])
          });

          if(i % this.state.file_load_step_count == 0 || i == created_video_events.length -1){
            this.fetch_uploaded_data_from_ipfs(videos_to_load, false)
            videos_to_load = []
          }

          var videopost_sales = videopost_sale_data[id] == null ? 0 : videopost_sale_data[id]
          var video_sales = video_sale_data[id] == null ? 0 : video_sale_data[id]

          const data = {'id':id, 'ipfs':video_data, 'event': created_video_events[i], 'e5':e5, 'timestamp':parseInt(created_video_events[i].returnValues.p6), 
          'author':created_video_events[i].returnValues.p5, 'e5_id':id+e5, 'videopost_sales':videopost_sales, 'video_sales':video_sales,
          }

          const index = created_videos.findIndex(item => item['e5_id'] === data['e5_id']);
          if(index != -1){
            created_videos[index] = data
          }else{
            created_videos.push(data)
          }

          created_video_mappings[id] = data
          if(this.state.my_videoposts.includes(id)){
            const index2 = my_acquired_videos.findIndex(item => item['e5_id'] === data['e5_id']);
            if(index2 != -1){
              my_acquired_videos[index] = data
            }else{
              my_acquired_videos.push(data)
            }
          }
        }
      }

      if(is_first_time || true){
        var created_videos_clone = structuredClone(this.state.created_videos)
        var created_video_mappings_clone = structuredClone(this.state.created_video_mappings)
        created_videos_clone[e5] = created_videos
        created_video_mappings_clone[e5] = created_video_mappings

        this.setState({created_videos: created_videos_clone, created_video_mappings: created_video_mappings_clone, my_acquired_videos: my_acquired_videos})   
        // await this.wait(150)     
      }
    }

    var created_videos_clone = structuredClone(this.state.created_videos)
    var created_video_mappings_clone = structuredClone(this.state.created_video_mappings)
    created_videos_clone[e5] = created_videos
    created_video_mappings_clone[e5] = created_video_mappings
    this.setState({created_videos: created_videos_clone, created_video_mappings:created_video_mappings_clone, my_acquired_videos: my_acquired_videos})

    console.log('video count: '+created_videos.length)
    
  }

  get_nitro_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account, F5contractInstance, specific_items) => {
    var created_nitro_events = null
    var bought_nitro_events = null
    var paid_subscription_events = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */}],
        [web3, E52contractInstance, 'e4', e5, {p1/* target_id */:23, p2/* sender_acc_id */:account}],
        [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account}]
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      created_nitro_events = all_events[0]
      bought_nitro_events = all_events[1]
      paid_subscription_events = all_events[2]
    }
    else{
      created_nitro_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */})
      bought_nitro_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */:23, p2/* sender_acc_id */:account})
      paid_subscription_events = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */:account})
    }

    console.log('bought_nitros', bought_nitro_events, 'account', account, 'e5', e5)
    // created_nitro_events = created_nitro_events.reverse()

    //prioritize my content first
    var my_posted_events = created_nitro_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_nitro_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2/* item */ === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_nitro_events = my_posted_events

    //prioritize the objects ive participated in first
    if(this.state.my_objects.length > 0){
      //prioritize my participated in objects first
      var my_participated_object_ids = this.filter_accounts_by_e5(this.state.my_objects, e5)
      var my_participated_events = created_nitro_events.filter(function (event) {
        return (my_participated_object_ids.includes(event.returnValues.p2))
      })
      created_nitro_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_nitro_events = my_participated_events
    }

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:21/* 21(nitro_object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_nitro_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_nitro_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_nitro_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_nitro_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_nitro_events = my_events
    }

    const bought_nitros = []
    bought_nitro_events.forEach(event => {
      if(!bought_nitros.includes(event.returnValues.p3/* context */)){
        bought_nitros.push(event.returnValues.p3/* context */)
      }
    });

    var subscriptions_interacted_with = []
    var account_as_list = []
    paid_subscription_events.forEach(event => {
      var subscription = event.returnValues.p1
      if(!subscriptions_interacted_with.includes(subscription)){
        subscriptions_interacted_with.push(subscription)
        account_as_list.push([account])
      }
    });

    var my_payments_for_all_subscriptions = subscriptions_interacted_with.length == 0 ? [] : await F5contractInstance.methods.f229(subscriptions_interacted_with, account_as_list).call((error, result) => {});

    var subscription_payment_obj = {}
    for(var s=0; s<subscriptions_interacted_with.length; s++){
      var sub = subscriptions_interacted_with[s]
      var my_payment = my_payments_for_all_subscriptions[s][0]
      subscription_payment_obj[parseInt(sub)] = my_payment
    }

    var my_subscription_payment_mappings = structuredClone(this.state.my_subscription_payment_mappings)
    my_subscription_payment_mappings[e5] = subscription_payment_obj
    this.setState({my_subscription_payment_mappings: my_subscription_payment_mappings})


    
    this.record_number_of_items(e5, 'nitro', created_nitro_events.length)
    var created_nitros = this.state.created_nitros[e5] == null ? [] : this.state.created_nitros[e5].slice()
    var created_nitro_mappings = this.state.created_nitro_mappings[e5] == null ? {} : structuredClone(this.state.created_nitro_mappings[e5])

    var is_first_time = this.state.created_nitros[e5] == null
    is_first_time = true

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_nitro_events), web3, e5, contract_addresses)

    for(var i=0; i<created_nitro_events.length; i++){
      var id = created_nitro_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_nitro_events[i].returnValues.p1.toString() == hash.toString() || this.is_post_index_valid(created_nitro_events[i].returnValues.p1.toString(), web3) || true){
        var nitro_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id]
        if(nitro_data != null){
          if(nitro_data.album_art != null && nitro_data.album_art.startsWith('image')) {
            this.fetch_uploaded_data_from_ipfs([nitro_data.album_art], false)
          }

          var is_bought = bought_nitros.includes(id)
          const data = {'id':id, 'ipfs':nitro_data, 'event': created_nitro_events[i], 'e5':e5, 'timestamp':parseInt(created_nitro_events[i].returnValues.p6),
          'author':created_nitro_events[i].returnValues.p5, 'e5_id':id+e5, 'bought':is_bought,
          }

          if(this.state.my_preferred_nitro == (id+e5)){
            this.load_nitro_node_details(data, false)
            this.load_my_account_storage_info(data)
          }

          const index = created_nitros.findIndex(item => item['e5_id'] === data['e5_id']);
          if(index != -1){
            created_nitros[index] = data
          }else{
            created_nitros.push(data)
          }
          created_nitro_mappings[id] = data
        }
      }

      if(is_first_time || true){
        var created_nitros_clone = structuredClone(this.state.created_nitros)
        var created_nitro_mappings_clone = structuredClone(this.state.created_nitro_mappings)
        
        created_nitros_clone[e5] = created_nitros
        created_nitro_mappings_clone[e5] = created_nitro_mappings
        
        this.setState({created_nitros: created_nitros_clone, created_nitro_mappings: created_nitro_mappings_clone})   
        // await this.wait(150)     
      }
    }

    var created_nitros_clone = structuredClone(this.state.created_nitros)
    var created_nitro_mappings_clone = structuredClone(this.state.created_nitro_mappings)
    
    created_nitros_clone[e5] = created_nitros
    created_nitro_mappings_clone[e5] = created_nitro_mappings
    
    this.setState({created_nitros: created_nitros_clone, created_nitro_mappings:created_nitro_mappings_clone})

    console.log('nitro count',created_nitros.length)
    
  }

  get_poll_data = async (E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, specific_items, account) => {
    var created_post_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 28/* 28(poll-object) */, p1:this.get_valid_post_index(web3)})
    console.log('poll_loader', created_post_events)
    created_post_events = created_post_events.reverse()

    //prioritize my content first
    var my_posted_events = created_post_events.filter(function (event) {
      return (event.returnValues.p5/* sender_account */ == account)
    })
    created_post_events.forEach(event => {
      if(my_posted_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
        my_posted_events.push(event)
      }
    });
    created_post_events = my_posted_events

    //prioritize the polls ive participated in first
    if(this.state.my_polls.length > 0){
      //prioritize my participated in polls first
      var my_participated_poll_ids = this.filter_accounts_by_e5(this.state.my_polls, e5)
      var my_participated_events = created_post_events.filter(function (event) {
        return (my_participated_poll_ids.includes(event.returnValues.p2))
      })
      created_post_events.forEach(event => {
        if(my_participated_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_participated_events.push(event)
        }
      });
      created_post_events = my_participated_events
    }

    if(prioritized_accounts && prioritized_accounts.length > 0){
      var prioritized_object_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */:28/* 28(poll-object) */ , p2/* item */: prioritized_accounts})

      prioritized_object_events = prioritized_object_events.reverse()

      var final_object_events = []
      var added_ids = []
      prioritized_object_events.forEach(element => {
        added_ids.push(element.returnValues.p2)
        final_object_events.push(element)
      });
      created_post_events.forEach(element => {
        if(!added_ids.includes(element.returnValues.p2)){
          added_ids.push(element.returnValues.p2)
          final_object_events.push(element)
        }
      });
      created_post_events = final_object_events
    }

    if(specific_items != null && specific_items.length > 0){
      var my_events = created_post_events.filter(function (event) {
        return (specific_items.includes(event.returnValues.p2))
      })
      created_post_events.forEach(event => {
        if(my_events.find(e => e.returnValues.p2 === event.returnValues.p2) == null){
          my_events.push(event)
        }
      });
      created_post_events = my_events
    }

    
    this.record_number_of_items(e5, 'poll', created_post_events.length)
    var created_posts = this.state.created_polls[e5] == null ? [] : this.state.created_polls[e5].slice()
    var is_first_time = this.state.created_polls[e5] == null

    var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events(created_post_events).slice(0, this.state.max_post_bulk_load_count), web3, e5, contract_addresses)
    console.log('all_data', all_data)

    for(var i=0; i<created_post_events.length; i++){
      var id = created_post_events[i].returnValues.p2
      var hash = web3.utils.keccak256('en')
      if(created_post_events[i].returnValues.p1.toString() == hash.toString()|| this.is_post_index_valid(created_post_events[i].returnValues.p1.toString(), web3)){
        var post_data = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses): all_data[id]

        const data = {'id':id, 'ipfs':post_data, 'event': created_post_events[i], 'e5':e5, 'timestamp':parseInt(created_post_events[i].returnValues.p6), 'author':created_post_events[i].returnValues.p5, 'e5_id':id+e5}

        const index = created_posts.findIndex(item => item['e5_id'] === data['e5_id']);
        if(index != -1){
          created_posts[index] = data
        }else{
          created_posts.push(data)
        }
      }

      if(is_first_time || true){
        var created_polls_clone = structuredClone(this.state.created_polls)
        created_polls_clone[e5] = created_posts
        this.setState({created_polls: created_polls_clone}) 
      }
    }

    var created_posts_clone = structuredClone(this.state.created_polls)
    created_posts_clone[e5] = created_posts
    this.setState({created_polls: created_posts_clone})

    console.log('poll count: '+created_posts.length)
  }

  load_run_data = async (contractInstance, E52contractInstance, e5, web3, H52contractInstance) => {
    if(this.state.beacon_node_enabled == true){
      // var event_params = [
      //   /* 0 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ }],
      //   /* 1 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */}],
      //   /* 2 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:32/* 32(consensus_request) */}],
      //   /* 3 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */}],

      //   /* 4 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 18/* 18(post object) */ }],
      // /* 5 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 36/* 36(type_channel_target) */ }],
      //   /* 6 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 17/* 17(job_object) */}],
      //   /* 7 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 27/* 27(storefront-item) */}],

      // /* 8 */[web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */}],

      //   /* 9 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 26/* 26(contractor_object) */}],
      //   /* 10 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 19/* 19(audio_object) */}],
      //   /* 11 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 20/* 20(video_object) */}],
      //   /* 12 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */}],

      //   /* 13 */[web3, E52contractInstance, 'e4', e5, {}],/* data */
      //   /* 14 */[web3, E52contractInstance, 'e5', e5, {}],/* metadata */
      //   /* 15 */[web3, contractInstance, 'e2', e5, {}],/* withdraw */
      //   /* 16 */[web3, contractInstance, 'e4', e5, {}],/* transaction */
      //   /* 17 */[web3, H52contractInstance, 'e1', e5, {}],/* transfer */
      //   /* 18 */[web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 28/* 28(poll-object) */ }],
      //   /* 19 */[web3, E52contractInstance, 'e2', e5, {}],
      // ]

      // var all_events = await this.load_multiple_events_from_nitro(event_params)
      // var obj = {'subscription':all_events[0], 'contract':all_events[1], 'proposal':all_events[2], 'exchange':all_events[3], 'post':all_events[4], 'channel':all_events[5], 'job':all_events[6], 'store':all_events[7], 'bag':all_events[8], 'contractor':all_events[9], 'data':all_events[13], 'metadata':all_events[14], 'withdraw':all_events[15], 'transaction':all_events[16], 'transfer':all_events[17], 'audio':all_events[10], 'video':all_events[11], 'nitro':all_events[12], 'poll':all_events[18], 'all_indexed_events':all_events[19]}

      // var all_data_clone = structuredClone(this.state.all_data)
      // all_data_clone[e5] = obj
      // this.setState({all_data: all_data_clone})


      var event_params2 = [
        [web3, contractInstance, 'e1', e5, {}],
        [web3, E52contractInstance, 'e2', e5, {}],
        [web3, E52contractInstance, 'e4', e5, {}],/* data */
        [web3, E52contractInstance, 'e5', e5, {}],/* metadata */
        [web3, contractInstance, 'e2', e5, {}],/* withdraw */
        [web3, contractInstance, 'e4', e5, {}],/* transaction */
        [web3, H52contractInstance, 'e1', e5, {}],/* transfer */
      ]

      var all_events = await this.load_multiple_events_from_nitro(event_params2)

      var obj = {'subscription':[], 'contract':[], 'proposal':[], 'exchange':[], 'post':[], 'channel':[], 'job':[], 'store':[], 'bag':[], 'contractor':[], 'data':all_events[2], 'metadata':all_events[3], 'withdraw':all_events[4], 'transaction':all_events[5], 'transfer':all_events[6], 'audio':[], 'video':[], 'nitro':[], 'poll':[], 'all_indexed_events':all_events[1]}

      all_events[0].forEach(event_item => {
        if(event_item.returnValues.p2 == 33/* subscription_object */){
          obj['subscription'].push(event_item)
        }
        else if(event_item.returnValues.p2 == 30/* contract_obj_id */){
          obj['contract'].push(event_item)
        }
        else if(event_item.returnValues.p2 == 32/* 32(consensus_request) */){
          obj['proposal'].push(event_item)
        }
        else if(event_item.returnValues.p2 == 31/* token_exchange */){
          obj['exchange'].push(event_item)
        }
        else if(event_item.returnValues.p2 == 25/* 25(storefront_bag_object) */){
          obj['bag'].push(event_item)
        }
      });

      all_events[1].forEach(event_item => {
        if(event_item.returnValues.p3 == 18/* 18(post object) */ ){
          obj['post'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 36/* 36(type_channel_target) */){
          obj['channel'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 17/* 17(job_object) */){
          obj['job'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 27/* 27(storefront-item) */){
          obj['store'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 26/* 26(contractor_object) */){
          obj['contractor'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 19/* 19(audio_object) */){
          obj['audio'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 20/* 20(video_object) */){
          obj['video'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 21/* 21(nitro_object) */){
          obj['nitro'].push(event_item)
        }
        else if(event_item.returnValues.p3 == 28/* 28(poll-object) */){
          obj['poll'].push(event_item)
        }
      });

      var all_data_clone = structuredClone(this.state.all_data)
      all_data_clone[e5] = obj
      this.setState({all_data: all_data_clone})
    }
    else{
      var created_subscription_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */ })

      var created_contract_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */})

      var created_proposals_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:32/* 32(consensus_request) */})

      var created_token_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:31/* token_exchange */})

      var created_post_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 18/* 18(post object) */ })

      var created_channel_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 36/* 36(type_channel_target) */ })

      var created_job_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 17/* 17(job_object) */})

      var created_store_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 27/* 27(storefront-item) */})

      var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */})

      var created_contractor_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 26/* 26(contractor_object) */})

      var created_audio_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 19/* 19(audio_object) */})

      var created_video_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 20/* 20(video_object) */})

      var created_nitro_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 21/* 21(nitro_object) */})

      var data_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {})

      var metadata_events = await this.load_event_data(web3, E52contractInstance, 'e5', e5, {})

      var withdraw_events = await this.load_event_data(web3, contractInstance, 'e2', e5, {})

      var transaction_events = await this.load_event_data(web3, contractInstance, 'e4', e5, {})

      var transfer_events = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {})
      
      var poll_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {p3/* item_type */: 28/* 28(poll-object) */ })

      var all_indexed_events = await this.load_event_data(web3, E52contractInstance, 'e2', e5, {})

      var obj = {'subscription':created_subscription_events, 'contract':created_contract_events, 'proposal':created_proposals_events, 'exchange':created_token_events, 'post':created_post_events, 'channel':created_channel_events, 'job':created_job_events, 'store':created_store_events, 'bag':created_bag_events, 'contractor':created_contractor_events, 'data':data_events, 'metadata':metadata_events, 'withdraw':withdraw_events, 'transaction':transaction_events, 'transfer':transfer_events, 'audio':created_audio_events, 'video':created_video_events, 'nitro':created_nitro_events, 'poll':poll_events, 'all_indexed_events':all_indexed_events}

      var all_data_clone = structuredClone(this.state.all_data)
      all_data_clone[e5] = obj
      this.setState({all_data: all_data_clone})
    }
  }

  load_multiple_events_from_nitro = async (event_params) => {
    var event_requests = []
    for(var i=0; i<event_params.length; i++){
      const _web3 = event_params[i][0]
      const contract_instance = event_params[i][1]
      const event_id = event_params[i][2]
      const e5 = event_params[i][3]
      const filter = event_params[i][4]
      var requested_contract = this.get_contract_id_from_contract(e5, contract_instance)
      var event_request = {'requested_e5':e5, 'requested_contract':requested_contract, 'requested_event_id':event_id, 'filter':filter}
      event_requests.push(event_request)
    }

    console.log('all_data', event_requests)
    
    const params = new URLSearchParams({
      arg_string:JSON.stringify({requests: event_requests}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/events?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('all_data', response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('all_data', obj)
      return obj['data']
    }
    catch(e){
      return []
    }
  }

  get_ids_from_events(events){
    var ids = []
    events.forEach(event => {
      var id = event.returnValues.p2
      ids.push(id);
    });
    return ids
  }

  get_ids_from_events3(events){
    var ids = []
    events.forEach(event => {
      var id = event.returnValues.p1
      if(ids.length <= this.state.max_post_bulk_load_count) ids.push(id);
    });
    return ids
  }







  load_data_from_page_in_focus = async (page) => {
    this.focused_page = page
    var prioritized_accounts = this.prioritized_accounts
    if(page == this.getLocale()['1196']/* 'jobs' */){
      this.load_contract_data(prioritized_accounts)
      this.load_jobs_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1197']/* 'contracts' */){
      this.load_contract_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1199']/* 'proposals' */){
      this.load_proposal_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1198']/* 'contractors' */){
      this.load_contract_data(prioritized_accounts)
      this.load_contractor_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1200']/* 'subscriptions' */){
      this.load_subscription_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1201']/* 'mail' */){
      this.load_mail_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1213']/* 'posts' */){
      this.load_subscription_data(prioritized_accounts)
      this.load_post_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1214']/* 'channels' */){
      this.load_subscription_data(prioritized_accounts)
      this.load_channel_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1215']/* 'storefront' */){
      this.load_storefront_data(prioritized_accounts)
      this.load_bag_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1216']/* 'bags' */){
      this.load_bag_data(prioritized_accounts)
      this.load_storefront_data([])
      this.load_contract_data([])
    }
    if(page == this.getLocale()['1264k']/* 'audioport' */){
      this.load_subscription_data(prioritized_accounts)
      this.load_audio_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1264p']/* videoport */){
      this.load_subscription_data(prioritized_accounts)
      this.load_video_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1264s']/* 'nitro' */){
      this.load_nitro_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1264aj']/* 'bills' */){
      this.load_bill_data(prioritized_accounts)
    }
    if(page == this.getLocale()['1264ao']/* 'polls' */){
      this.load_poll_data(prioritized_accounts)
    }

    if(page == 'w'){
      this.load_token_data(prioritized_accounts)
    }
  }

  load_jobs_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
        this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts)
      }
    }
  }

  load_contract_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = contract_addresses[3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = contract_addresses[4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

        this.get_contract_data(contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance, prioritized_accounts)
      }
    }
    // this.has_gotten_contracts = true
  }

  load_proposal_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = contract_addresses[3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = contract_addresses[4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


        this.get_proposal_data(G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts)
      }
    }
  }

  load_contractor_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_contractor_data(E52contractInstance, contract_addresses, e5, web3, account, prioritized_accounts)
      }
    }
  }

  load_subscription_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const F5contractArtifact = require('./contract_abis/F5.json');
        const F5_address = contract_addresses[2];
        const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

        this.get_subscription_data(contractInstance, F5contractInstance, account, web3, e5, contract_addresses, E52contractInstance, prioritized_accounts)
      }
    }
  }

  load_mail_data = async () => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);


        await this.get_all_mail_data(E52contractInstance, e5, account, web3)
      }
    }
  }

  load_post_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_post_data(E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account)
      }
    }
  }

  load_channel_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_channel_data(E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts)
      }
    }
  }

  load_storefront_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = contract_addresses[6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        this.get_storefront_data(E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account, prioritized_accounts, false)
      }
    }
  }

  load_bag_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_bag_data(contractInstance, web3, e5, contract_addresses, E52contractInstance, account, prioritized_accounts)
      }
    }
  }

  load_token_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const H5contractArtifact = require('./contract_abis/H5.json');
        const H5_address = contract_addresses[5];
        const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = contract_addresses[6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        this.get_token_data(contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts)
      }
    }
  }

  load_bill_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      }
      if(e5_address != ''){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const H5contractArtifact = require('./contract_abis/H5.json');
        const H5_address = contract_addresses[5];
        const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = contract_addresses[6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        this.load_my_bills(contractInstance, H5contractInstance, H52contractInstance, E52contractInstance, web3, e5, contract_addresses, account, prioritized_accounts)
      }
    }
  }

  load_poll_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_poll_data(E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account)
      }
    }
  }

  load_my_contracts = async () => {
    var e5 = this.state.selected_e5
    var e5_address = this.state.e5s[e5].e5_address;

    var web3_url = this.get_web3_url_from_e5(e5)
    const web3 = new Web3(web3_url);

    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const G5contractArtifact = require('./contract_abis/G5.json');
    const G5_address = contract_addresses[3];
    const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = contract_addresses[4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var created_contract_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* contract_obj_id */, p3/* sender_account_id */:account })

    var created_contracts = []
    var accounts_for_expiry_time = [[account]]
    for(var i=0; i<created_contract_events.length; i++){
      var id = created_contract_events[i].returnValues.p1
      created_contracts.push(id)
      accounts_for_expiry_time.push([account])
    }

    var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});
    var entered_timestamp_data = await G52contractInstance.methods.f266(created_contracts, accounts_for_expiry_time, 3).call((error, result) => {});
    var created_contract_object_data = []
    var created_contract_mapping = {}

    for(var i=0; i<created_contracts.length; i++){
      var contracts_data = await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses);
      var event = created_contract_events[i]
      var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
      var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

      var timestamp = event == null ? 0 : event.returnValues.p4
      var author = event == null ? 0 : event.returnValues.p3
      var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'entry_expiry':entered_timestamp_data[i][0], 'end_balance':end_balance, 'spend_balance':spend_balance, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5 }

      created_contract_object_data.push(contract_obj)
      created_contract_mapping[created_contracts[i]] = contract_obj
    }

    var created_contract_object_data_clone = structuredClone(this.state.my_created_contracts)
    created_contract_object_data_clone[e5] = created_contract_object_data

    var created_contract_mapping_clone = structuredClone(this.state.my_created_contract_mapping)
    created_contract_mapping_clone[e5] = created_contract_mapping

    this.setState({my_created_contracts: created_contract_object_data_clone, my_created_contract_mapping: created_contract_mapping_clone})
  }

  load_my_subscriptions = async () => {
    var e5 = this.state.selected_e5
    var web3_url = this.get_web3_url_from_e5(e5)
    var e5_address = this.state.e5s[e5].e5_address;

    const web3 = new Web3(web3_url);
    var account = this.state.user_account_id[e5]
    var contract_addresses = this.state.addresses[e5]

    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = e5_address
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = contract_addresses[2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

    var created_subscription_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:33/* subscription_object */, p3/* sender_account_id */:account })

    var created_subscriptions = []
    for(var i=0; i<created_subscription_events.length; i++){
      var id = created_subscription_events[i].returnValues.p1
      created_subscriptions.push(id)
    }
    var created_subscription_data = await F5contractInstance.methods.f74(created_subscriptions).call((error, result) => {});
    var created_subscription_object_data = []
    var created_subscription_object_mapping = {}

    var account_as_list = []
    for(var i=0; i<created_subscriptions.length; i++){
      account_as_list.push([account])
    }

    for(var i=0; i<created_subscriptions.length; i++){
      var subscription_data = await this.fetch_objects_data(created_subscriptions[i], web3, e5, contract_addresses);

      var subscription_object = {'id':created_subscriptions[i], 'e5_id':created_subscriptions[i]+e5, 'data':created_subscription_data[i], 'ipfs':subscription_data, 'event':created_subscription_events[i],  'e5':e5, 'timestamp':created_subscription_events[i].returnValues.p4, 'author':created_subscription_events[i].returnValues.p3}

      created_subscription_object_data.push(subscription_object)
      created_subscription_object_mapping[created_subscriptions[i]+e5] = subscription_object
    }

    var created_subscription_object_data_clone = structuredClone(this.state.my_created_subscriptions)
    created_subscription_object_data_clone[e5] = created_subscription_object_data
    
    var created_subscription_object_mapping_clone = structuredClone(this.state.my_created_subscription_object_mapping)
    created_subscription_object_mapping_clone[e5] = created_subscription_object_mapping

    this.setState({my_created_subscriptions: created_subscription_object_data_clone, my_created_subscription_object_mapping: created_subscription_object_mapping_clone})
  }

  load_main_contracts = async (e5) => {
    if(this.state.created_contracts[e5] != null){
      return;
    }
    var e5_address = this.state.e5s[e5].e5_address;
    if(e5_address != ''){
      var web3_url = this.get_web3_url_from_e5(e5)
      const web3 = new Web3(web3_url);

      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = e5_address
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

      var created_contracts = [2]
      var created_contract_object_data = []
      var created_contract_mapping = {}

      var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});

      for(var i=0; i<created_contracts.length; i++){
        var contracts_data = await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses);
        var event = null
        var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
        var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);

        var timestamp = event == null ? 0 : event.returnValues.p4
        var author = event == null ? 0 : event.returnValues.p3
        var contract_obj = {'id':created_contracts[i], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'end_balance':end_balance, 'spend_balance':spend_balance, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5 }

        created_contract_object_data.push(contract_obj)
        created_contract_mapping[created_contracts[i]] = contract_obj
      }

      var created_contract_object_data_clone = structuredClone(this.state.created_contracts)
      created_contract_object_data_clone[e5] = created_contract_object_data

      var created_contract_mapping_clone = structuredClone(this.state.created_contract_mapping)
      created_contract_mapping_clone[e5] = created_contract_mapping

      this.setState({created_contracts: created_contract_object_data_clone, created_contract_mapping: created_contract_mapping_clone})
    }
  }

  load_contract_item = async (e5, contract_id) => {
    var e5_address = this.state.e5s[e5].e5_address;
    // console.log('load_contract_item','contract data to load', e5, contract_id)
    
    if(e5_address != ''){
      var web3_url = this.get_web3_url_from_e5(e5)
      const web3 = new Web3(web3_url);
      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = e5_address
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

      var created_contracts = [contract_id]
      var accounts_for_expiry_time = [[account]]
      var created_contract_object_data = []
      var created_contract_mapping = {}

      var created_contract_data = await G5contractInstance.methods.f78(created_contracts, false).call((error, result) => {});

      var entered_timestamp_data = await G52contractInstance.methods.f266(created_contracts, accounts_for_expiry_time, 3).call((error, result) => {});

      var account_as_list = [[account]]
      var interactible_checker_status_values_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f254(created_contracts,0).call((error, result) => {});

      var my_interactable_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,2).call((error, result) => {});

      var my_blocked_time_value_for_all_contracts = created_contracts.length==0? []: await E52contractInstance.methods.f256(created_contracts, account_as_list, 0,3).call((error, result) => {});

      for(var i=0; i<created_contracts.length; i++){
        var contracts_data = await this.fetch_objects_data(created_contracts[i], web3, e5, contract_addresses);
        var event = null
        var end_balance = await this.get_balance_in_exchange(3, created_contracts[i], e5, contract_addresses);
        var spend_balance = await this.get_balance_in_exchange(5, created_contracts[i], e5, contract_addresses);


        var entered_accounts = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:3/* enter_contract(3) */,p1/* contract_id */:created_contracts[i]})

        var force_exit_events = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p3/* action */:18/* force_exit(18) */,p1/* contract_id */:created_contracts[i]})

        var contract_entered_accounts = []
        var archive_accounts = []
        for(var e=0; e<entered_accounts.length; e++){
          if(!contract_entered_accounts.includes(entered_accounts[e].returnValues.p2)){
            contract_entered_accounts.push(entered_accounts[e].returnValues.p2)
          }
          if(!archive_accounts.includes(entered_accounts[e].returnValues.p2)){
            archive_accounts.push(entered_accounts[e].returnValues.p2)
          }
        }

        var entered_account_times = await G52contractInstance.methods.f266([created_contracts[i]], [contract_entered_accounts], 3).call((error, result) => {});
        var entered_account_times_data = {}
        for(var e=0; e<contract_entered_accounts.length; e++){
          var time = entered_account_times[0][e]
          var account = contract_entered_accounts[e]
          entered_account_times_data[account] = time
        }

        var moderator_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */:created_contracts[i], p2/* action_type */:4/* <4>modify_moderator_accounts */})
        var old_moderators = []

        for(var e=0; e<moderator_data.length; e++){
          var mod_id = moderator_data[e].returnValues.p3
          old_moderators.push(mod_id)
        }

        var mod_status_values = await E52contractInstance.methods.f255([created_contracts[i]], [old_moderators]).call((error, result) => {});

        var moderators = []
        for(var e=0; e<old_moderators.length; e++){
          var their_status = mod_status_values[0][e]
          if(their_status == true){
            moderators.push(old_moderators[e])
          }
        }

        var interactible_checker_status_values = /* await E52contractInstance.methods.f254([created_contracts[i]],0).call((error, result) => {}); */interactible_checker_status_values_for_all_contracts

        var my_interactable_time_value = /* await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,2).call((error, result) => {}); */ my_interactable_time_value_for_all_contracts

        var my_blocked_time_value =/*  await E52contractInstance.methods.f256([created_contracts[i]], [[account]], 0,3).call((error, result) => {}); */ my_blocked_time_value_for_all_contracts

        var timestamp = event == null ? 0 : event.returnValues.p4
        var author = event == null ? 0 : event.returnValues.p3
        var contract_obj = {'id':created_contracts[i], 'entry_expiry':entered_timestamp_data[i][0], 'data':created_contract_data[i], 'ipfs':contracts_data, 'event':event, 'end_balance':end_balance, 'spend_balance':spend_balance, 'e5':e5, 'timestamp':timestamp, 'author':author, 'e5_id':created_contracts[i]+e5, 'force_exit_events':force_exit_events}

        contract_obj['participants'] = contract_entered_accounts
        contract_obj['participant_times'] = entered_account_times_data
        contract_obj['archive_accounts'] = archive_accounts
        contract_obj['moderators'] = moderators
        contract_obj['access_rights_enabled'] = interactible_checker_status_values[i]
        contract_obj['my_interactable_time_value'] = my_interactable_time_value[i][0] 
        contract_obj['my_blocked_time_value'] = my_blocked_time_value[i][0]

        created_contract_object_data.push(contract_obj)
        created_contract_mapping[created_contracts[i]] = contract_obj

      }



      var contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:contract_id})
      contracts_proposals = contracts_proposals.reverse()
      var proposal_ids = []
      var proposal_ids_events = []
      contracts_proposals.forEach(proposal_event => {
        proposal_ids.push(parseInt(proposal_event.returnValues.p2))
        proposal_ids_events.push(proposal_event)
      });

      var created_proposal_object_data = []
      var created_proposal_data = await G5contractInstance.methods.f78(proposal_ids, false).call((error, result) => {});
      var consensus_data = await G52contractInstance.methods.f266(proposal_ids, [], 0).call((error, result) => {});
      var all_data = await this.fetch_multiple_objects_data(proposal_ids, web3, e5, contract_addresses)
      var all_submit_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'e3', e5, {})

      for(var i=0; i<proposal_ids.length; i++){
        var id = proposal_ids[i];
        var proposals_data = all_data[id] == null ? await this.fetch_objects_data(proposal_ids[i], web3, e5, contract_addresses) : all_data[id]
        var event = proposal_ids_events[i]
        
        var submit_proposal_event_data = all_submit_proposal_event_data.filter(function (ev) {
          return (event.returnValues.p1 == ev.returnValues.p1)
        })

        var obj = {'id':proposal_ids[i], 'data':created_proposal_data[i], 'ipfs':proposals_data, 'event':event, 'consensus_data':consensus_data[i], 'e5':e5, 'timestamp':event.returnValues.p5, 'author':event.returnValues.p3, 'e5_id':proposal_ids[i]+e5, 'submitted': submit_proposal_event_data.length > 0}

        created_proposal_object_data.push(obj)
      }

      var clone = structuredClone(this.state.loaded_contract_and_proposal_data)
      clone[contract_id] = {'contract':created_contract_object_data[0], 'proposals':created_proposal_object_data}
      this.setState({loaded_contract_and_proposal_data: clone})

      return {'contract':created_contract_object_data[0], 'proposals':created_proposal_object_data}
    }
  }

  load_contracts_proposals = async (e5, contract_id) => {
    var e5_address = this.state.e5s[e5].e5_address;

    if(e5_address != ''){
      var web3_url = this.get_web3_url_from_e5(e5)
      const web3 = new Web3(web3_url);
      var account = this.state.user_account_id[e5]
      var contract_addresses = this.state.addresses[e5]

      const contractArtifact = require('./contract_abis/E5.json');
      const contractAddress = e5_address
      const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = contract_addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = contract_addresses[3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      const G52contractArtifact = require('./contract_abis/G52.json');
      const G52_address = contract_addresses[4];
      const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


      var contracts_proposals = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */:contract_id})
      contracts_proposals = contracts_proposals.reverse()
      var proposal_ids = []
      var proposal_ids_events = []
      contracts_proposals.forEach(proposal_event => {
        proposal_ids.push(parseInt(proposal_event.returnValues.p2))//<--------issue! should be p4
        proposal_ids_events.push(proposal_event)
      });

      var created_proposal_object_data = []
      var created_proposal_data = await G5contractInstance.methods.f78(proposal_ids, false).call((error, result) => {});
      var consensus_data = await G52contractInstance.methods.f266(proposal_ids, [], 0).call((error, result) => {});
      for(var i=0; i<proposal_ids.length; i++){
        var proposals_data = await this.fetch_objects_data(proposal_ids[i], web3, e5, contract_addresses);
        var submit_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: proposal_ids_events[i] })

        var event = proposal_ids_events[i]

        var obj = {'id':proposal_ids[i], 'data':created_proposal_data[i], 'ipfs':proposals_data, 'event':event, 'consensus_data':consensus_data[i], 'e5':e5, 'timestamp':event.returnValues.p5, 'author':event.returnValues.p3, 'e5_id':proposal_ids[i]+e5, 'submitted': submit_proposal_event_data.length > 0}

        created_proposal_object_data.push(obj)
      }

      var clone = this.structuredClone(this.state.contracts_proposals)
      clone[contract_id] = created_proposal_object_data
      this.setState({contracts_proposals: clone})

    }
  }

  load_audio_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_audio_data(E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account)
      }
    }
  }

  load_video_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_video_data(E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account)
      }
    }
  }

  load_nitro_data = async (prioritized_accounts, preferred_e5) => {
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(preferred_e5 != null && e5 != preferred_e5){
        e5_address = '';
      } 
      if(e5_address != ''){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const F5contractArtifact = require('./contract_abis/F5.json');
        const F5_address = contract_addresses[2];
        const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

        this.get_nitro_data(E52contractInstance, web3, e5, contract_addresses, prioritized_accounts, account, F5contractInstance)
      }
    }
  }

  load_bag_storefront_items = async (object) => {
    var items_to_deliver = object['ipfs']['bag_orders']
    var storefronts_to_load = []
    items_to_deliver.forEach(item => {
      var storefront_id = item['storefront_item_id']
      if(!storefronts_to_load.includes(storefront_id)) storefronts_to_load.push(storefront_id);
    });
    this.load_storefront_data(storefronts_to_load)
  }

  when_e5_link_tapped = async (id) => {
    this.show_dialog_bottomsheet({'id':id}, 'view_e5_link')
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != ''){
        const web3 = new Web3(web3_url);
        var contract_addresses = this.state.addresses[e5]
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.load_id_type_then_object(id, E52contractInstance, e5) 
      }
    }
  }

  load_id_type_then_object = async (id, E52contractInstance, e5) => {
    var object_type = await E52contractInstance.methods.f135(id).call((error, result) => {});
    
    var clone = structuredClone(this.state.link_type_data)
    clone[e5] = object_type
    this.setState({link_type_data: clone})

    if(object_type != 0){
      // its a real object, so we load it based on the reported datatype
      if(object_type == 17/* jobs */){
        this.load_jobs_data([id], e5)
      }
      else if(object_type == 30/* contracts */){
        this.load_contract_data([id], e5)
      }
      else if(object_type == 32/* proposal */){
        this.load_proposal_data([id], e5)
      }
      else if(object_type == 26/* contractor */){
        this.load_contractor_data([id], e5)
      }
      else if(object_type == 33/* subscription */){
        this.load_subscription_data([id], e5)
      }
      else if(object_type == 18/* post */){
        this.load_post_data([id], e5)
      }
      else if(object_type == 36/* channel */){
        this.load_channel_data([id], e5)
      }
      else if(object_type == 27/* storefront */){
        this.load_storefront_data([id], e5)
      }
      else if(object_type == 25/* bag */){
        this.load_bag_data([id], e5)
      }
      else if(object_type == 31/* token */){
        this.load_token_data([id], e5)
      }
      else if(object_type == 19/* audioport */){
        this.load_audio_data([id], e5)
      }
      else if(object_type == 20/* videoport */){
        this.load_video_data([id], e5)
      }
      else if(object_type == 21/* nitro */){
        this.load_nitro_data([id], e5)
      }
      else if(object_type == 28/* 28(poll-object) */){
        this.load_poll_data([id], e5)
      }
    }

    return object_type
  }










  load_and_notify_flash = async () => {
    if(this.state.syncronizing_progress < 10) return;
    this.load_and_notify_user_of_incoming_payments()
    this.load_and_notify_user_of_incoming_mail()
    this.load_and_notify_user_of_incoming_messages()
    this.load_and_notify_user_of_incoming_proposals()
    this.load_and_notify_user_of_incoming_job_applications()
    this.load_and_notify_user_of_incoming_job_requests()
    this.load_and_notify_user_of_incoming_job_application_responses()
    this.load_and_notify_user_of_incoming_job_request_responses()
    this.load_and_notify_user_of_incoming_entered_contracts()
    this.load_and_notify_user_of_incoming_bag_application()
    this.load_and_nofity_user_of_incoming_bag_application_responses()
    this.load_and_notify_user_of_incoming_storefront_direct_order()
    this.load_and_notify_user_of_incoming_bills()

    this.update_watched_account_data()
    this.update_contextual_transfer_account_data()
  }

  load_and_notify_user_of_incoming_payments = async () => {
    console.log('notifier', 'loading notification for upcoming recepits...')
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = this.state.addresses[focused_e5][6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var all_received_events = await H52contractInstance.getPastEvents('e1', { filter: { p3/* receiver */: account }, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    console.log('notifier', 'objects', all_unsorted_events, block_stamp)

    if(this.load_and_notify_user_times == null){
      this.load_and_notify_user_times = {}
    }

    var notifs = []
    var previous_notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times[e5] == null){
          this.load_and_notify_user_times[e5] = block_stamp[e5]
        }
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p6/* block_number */
          if(event_block > this.load_and_notify_user_times[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          else if(event_block > (current_blocks[e5]-10000)){
            //if its a recent event
            event['e5'] = e5
            previous_notifs.push(event)
          }

          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p5
          event['block'] = event.returnValues.p6
          event['sender'] = event.returnValues.p2
          event['type'] = 'token'
          event['event_type'] = 'token'
          event['view'] = {}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one object to nofity', notifs)
      this.handle_money_receipt_notifications(notifs, previous_notifs.reverse())
    }

    var clone = structuredClone(this.state.notification_object)
    clone['token'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_money_receipt_notifications(events, previous_notifs){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender */, event['e5'])
      if(!senders.includes(alias)) senders.push(alias)
    });
    var prompt = this.getLocale()['2738k']/* 'Incoming payments from $' */
    prompt = prompt.replace('$', senders.toString())
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_receipts','events':events, 'previous_events':previous_notifs})
  }

  get_sender_title_text(account, e5){
    if(account == this.state.user_account_id[e5]){
        return this.getLocale()['1694']/* 'You' */
    }else{
        const bucket = this.get_all_sorted_objects_mappings(this.state.alias_bucket)
        var alias = (bucket[account] == null ? account : bucket[account])
        return alias
    }
  }



  load_and_notify_user_of_incoming_mail = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    const crosschain_identifier = await this.get_my_unique_crosschain_identifier_number2()
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: crosschain_identifier, p3/* context */:30}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        var all_received_cross_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: crosschain_identifier, p3/* context */:31}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})
        const my_received_mail_events = all_received_on_chain_events.concat(all_received_cross_chain_events)

        all_unsorted_events[focused_e5] = my_received_mail_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_mail == null){
      this.load_and_notify_user_times_mail = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_mail[e5] == null){
          this.load_and_notify_user_times_mail[e5] = block_stamp[e5]
        }
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          if(event_block > this.load_and_notify_user_times_mail[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p5
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'message'
          event['event_type'] = 'mail'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'message', 'p':'p5', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_mail[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one mail object to nofity', notifs)
      this.handle_mail_notifications(notifs)
    }
    var clone = structuredClone(this.state.notification_object)
    clone['mail'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_mail_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738m']/* 'Incoming mail from $' */
    prompt = prompt.replace('$', senders.toString())
    this.prompt_top_notification(prompt, 15000)
  }



  load_and_notify_user_of_incoming_messages = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    const crosschain_identifier = await this.get_my_unique_crosschain_identifier_number2()
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: crosschain_identifier, p3/* context */:32}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        var all_received_cross_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: crosschain_identifier, p3/* context */:33}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})
        const my_received_mail_events = all_received_on_chain_events.concat(all_received_cross_chain_events)

        all_unsorted_events[focused_e5] = my_received_mail_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_messages == null){
      this.load_and_notify_user_times_messages = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_messages[e5] == null){
          this.load_and_notify_user_times_messages[e5] = block_stamp[e5]
        }
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          if(event_block > this.load_and_notify_user_times_messages[e5]){
            event['e5'] = e5
            notifs.push(event)
          }

          event['e5'] = e5
          event['p'] = event.returnValues.p5
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'message'
          event['event_type'] = 'message'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'message', 'p':'p5', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_messages[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one message object to nofity', notifs)
      this.handle_messages_notifications(notifs)
    }
    var clone = structuredClone(this.state.notification_object)
    clone['message'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_messages_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738n']/* 'Incoming messages from $' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_incoming_message_mail_item(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'message', 'p':'p5', 'time':'p6','block':'p7', 'sender':'p2'})
  }

  load_specific_incoming_message_mail_item = async (events) => {
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p5)
    });
    const keys = Object.keys(e5_data)

    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
        await this.get_all_mail_data(E52contractInstance, e5, account, web3, e5_data[e5])
      }
    }
  }



  load_and_notify_user_of_incoming_proposals = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        var ids = await this.get_my_created_contract_ids_in_e5(focused_e5, account)
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = this.state.addresses[focused_e5][3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        if(ids.length == 0){
          ids.push(0)
        }
        ids.push(2)



        var all_received_on_chain_events = await G5contractInstance.getPastEvents('e1', { filter: {p1/* contract_id */: ids}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_proposals == null){
      this.load_and_notify_user_times_proposals = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_proposals[e5] == null){
          this.load_and_notify_user_times_proposals[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p6/* block_number */
          var proposal_sender = event.returnValues.p3/* proposer_account_id */
          if(event_block > this.load_and_notify_user_times_proposals[e5] && account != proposal_sender){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p2
          event['time'] = event.returnValues.p5
          event['block'] = event.returnValues.p6
          event['sender'] = event.returnValues.p4
          event['type'] = 'proposal'
          event['event_type'] = 'proposal'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'proposal', 'p':'p2', 'time':'p5','block':'p6', 'sender':'p4'}
          if(account != proposal_sender) all_notifications.push(event)
        });
        this.load_and_notify_user_times_proposals[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one proposal object to nofity', notifs)
      this.handle_proposal_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['proposal'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  get_my_created_contract_ids_in_e5 = async (e5, account) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E5contractArtifact = require('./contract_abis/E5.json');
    const E5_address = this.state.addresses[e5][0];
    const contractInstance = new web3.eth.Contract(E5contractArtifact.abi, E5_address);
    var created_contracts_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:30/* 30(contract_obj_id) */, p3/* sender_account_id */: account})

    var my_contracts = []
    created_contracts_events.forEach(event => {
      var id = event.returnValues.p1/* object_id */
      if(my_contracts.includes(id)){
        my_contracts.push(id)
      }
    });
    return my_contracts
  }

  handle_proposal_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p4/* proposer_account_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738o']/* 'Incoming proposals from $' */
    prompt = prompt.replace('$', senders.toString())
    this.prompt_top_notification(prompt, 15000)
  }

  load_specific_notification_proposals(events){
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p2)
    });
    const keys = Object.keys(e5_data)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = contract_addresses[3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = contract_addresses[4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


        this.get_proposal_data(G52contractInstance, G5contractInstance, E52contractInstance, web3, e5, contract_addresses, account, e5_data[e5])
      }
    }
  }



  load_and_notify_user_of_incoming_job_applications = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const ids = this.get_my_job_ids(focused_e5)
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        if(ids.length == 0){
          ids.push(0)
        }

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: ids, p3/* context */:36}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_job_applications == null){
      this.load_and_notify_user_times_job_applications = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_job_applications[e5] == null){
          this.load_and_notify_user_times_job_applications[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          if(event_block > this.load_and_notify_user_times_job_applications[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'job'
          event['event_type'] = 'job_application'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'job', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_job_applications[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one job application to nofity', notifs)
      this.handle_job_application_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['job_application'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  get_my_job_ids(e5){
    const all_jobs = this.state.created_jobs[e5]
    var ids = []
    all_jobs.forEach(job => {
      var post_author = job['event'] == null ? 0 : job['event'].returnValues.p5
      var myid = this.state.user_account_id[job['e5']]
      if(myid == null) myid = 1
      if(post_author.toString() == myid.toString()){
        ids.push(job['id'])
      }
    });
    return ids
  }

  handle_job_application_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738p']/* 'Incoming job applications from $' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_job_application_jobs(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'job', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }

  load_specific_job_application_jobs = async (events) => {
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p1)
    });
    const keys = Object.keys(e5_data)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
        this.get_job_data(E52contractInstance, web3, e5, contract_addresses, account, null, e5_data[e5])
      }
    }
  }



  load_and_notify_user_of_incoming_job_requests = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var my_contractor_post_events = await this.load_event_data(web3, E52contractInstance, 'e2', focused_e5, {p3/* item_type */: 26/* 26(contractor_object) */, p5/* sender_account */: account});

        var ids = []
        my_contractor_post_events.forEach(event => {
          var id = event.returnValues.p2/* item */
          if(!ids.includes(id)){
            ids.push(id)
          }
        });

        if(ids.length == 0){
          ids.push(0)
        }

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: ids, p3/* context */:38}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number

      }
    }

    if(this.load_and_notify_user_times_job_requests == null){
      this.load_and_notify_user_times_job_requests = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_job_requests[e5] == null){
          this.load_and_notify_user_times_job_requests[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          if(event_block > this.load_and_notify_user_times_job_requests[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'contractor'
          event['event_type'] = 'job_request'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'contractor', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_job_requests[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one job request to nofity', notifs)
      this.handle_job_request_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['job_request'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_job_request_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738q']/* 'Incoming job requests from $' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_contractor_objects(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'contractor', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }
  


  load_and_notify_user_of_incoming_job_application_responses = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const all_bag_ids = await this.get_all_bags_ids(focused_e5)
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var my_created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:36})

        var ids = []
        my_created_job_respnse_data.forEach(event => {
          var id = event.returnValues.p1/* target_id */
          if(!ids.includes(id) && !all_bag_ids.includes(id)){
            ids.push(id)
          }
        });

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: ids, p3/* context */:37}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_job_application_responses == null){
      this.load_and_notify_user_times_job_application_responses = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_job_application_responses[e5] == null){
          this.load_and_notify_user_times_job_application_responses[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          var event_emitter = event.returnValues.p2/* sender_acc_id */
          if(event_block > this.load_and_notify_user_times_job_application_responses[e5] && event_emitter != account){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'job'
          event['event_type'] = 'job_application_response'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'job', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          if(event_emitter != account) all_notifications.push(event);
        });
        this.load_and_notify_user_times_job_application_responses[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one job application response to nofity', notifs)
      this.handle_job_application_response_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['job_application_response'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  get_all_bags_ids = async (focused_e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
    const E5contractArtifact = require('./contract_abis/E5.json');
    const E5_address = this.state.addresses[focused_e5][0];
    const contractInstance = new web3.eth.Contract(E5contractArtifact.abi, E5_address);
    var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', focused_e5, {p2/* object_type */:25/* 25(storefront_bag_object) */})

    var my_bags = []
    created_bag_events.forEach(event => {
      var id = event.returnValues.p1/* object_id */
      if(!my_bags.includes(id)){
        my_bags.push(id)
      }
    });

    return my_bags
  }

  handle_job_application_response_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738r']/* 'Youre applications for jobs posted by $ have been accepted.' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_job_application_jobs(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'job', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }



  load_and_notify_user_of_incoming_job_request_responses = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var my_job_request_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:38})

        var ids = []
        my_job_request_respnse_data.forEach(event => {
          var id = event.returnValues.p1/* target_id */
          if(!ids.includes(id)){
            ids.push(id)
          }
        });

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: ids, p3/* context */:39}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_job_request_responses == null){
      this.load_and_notify_user_times_job_request_responses = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_job_request_responses[e5] == null){
          this.load_and_notify_user_times_job_request_responses[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          var event_emitter = event.returnValues.p2/* sender_acc_id */
          if(event_block > this.load_and_notify_user_times_job_request_responses[e5] && event_emitter != account){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'contractor'
          event['event_type'] = 'job_request_response'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'contractor', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          if(event_emitter != account) all_notifications.push(event);
        });
        this.load_and_notify_user_times_job_request_responses[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one job request response to nofity', notifs)
      this.handle_job_request_response_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['job_request_response'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_job_request_response_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738t']/* 'Incoming contractor job responses from $' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_contractor_objects(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'contractor', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }

  load_specific_contractor_objects(events){
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p1)
    });
    const keys = Object.keys(e5_data)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_contractor_data(E52contractInstance, contract_addresses, e5, web3, account, null, e5_data[e5])
      }
    }
  }



  load_and_notify_user_of_incoming_entered_contracts = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        var ids = await this.get_my_created_contract_ids_in_e5(focused_e5, account)
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = this.state.addresses[focused_e5][4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var all_received_on_chain_events = await G52contractInstance.getPastEvents('e2', { filter: {p1/* contract_id */: ids, p3/* action */: 3/* enters_a_contract */}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        // console.log('dialog_page','all the received g52 events', ids, all_received_on_chain_events)

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_enter_contract == null){
      this.load_and_notify_user_times_enter_contract = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_enter_contract[e5] == null){
          this.load_and_notify_user_times_enter_contract[e5] = block_stamp[e5]
        }
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p6/* block_number */
          if(event_block > this.load_and_notify_user_times_enter_contract[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'contract'
          event['event_type'] = 'contract'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'contract', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_enter_contract[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one enter contract event to nofity', notifs)
      this.handle_enter_contract_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['contract'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_enter_contract_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738u']/* '$ entered your contract' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_contract_objects(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'contract', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }

  load_specific_contract_objects(events){
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p1/* contract_id */)
    });
    const keys = Object.keys(e5_data)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        var web3_url = this.get_web3_url_from_e5(e5)
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const G5contractArtifact = require('./contract_abis/G5.json');
        const G5_address = contract_addresses[3];
        const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = contract_addresses[4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

        this.get_contract_data(contractInstance, account, G5contractInstance, G52contractInstance, web3, e5, contract_addresses, E52contractInstance, null, e5_data[e5])
      }
    }
  }



  load_and_notify_user_of_incoming_bag_application = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const ids = await this.load_my_bag_ids(focused_e5, account)
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        if(ids.length == 0){
          ids.push(0)
        }

        console.log('notifier', 'incoming bags to check', ids)
        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: ids, p3/* context */:36}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_bag_applications == null){
      this.load_and_notify_user_times_bag_applications = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_bag_applications[e5] == null){
          this.load_and_notify_user_times_bag_applications[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          if(event_block > this.load_and_notify_user_times_bag_applications[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'bag'
          event['event_type'] = 'bag'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'bag', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_bag_applications[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one bag application response to nofity', notifs)
      this.handle_incoming_bag_application_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['bag'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  load_my_bag_ids = async (e5, account) =>{
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E5contractArtifact = require('./contract_abis/E5.json');
    const E5_address = this.state.addresses[e5][0];
    const contractInstance = new web3.eth.Contract(E5contractArtifact.abi, E5_address);
    var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:25/* 25(storefront_bag_object) */, p3/* sender_account_id */: account})

    var my_bags = []
    created_bag_events.forEach(event => {
      var id = event.returnValues.p1/* object_id */
      if(!my_bags.includes(id)){
        my_bags.push(id)
      }
    });
    return my_bags
  }

  handle_incoming_bag_application_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738w']/* 'Incoming bag applications from $' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_bag_items(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'bag', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }

  load_specific_bag_items(events){
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p1)
    });
    const keys = Object.keys(e5_data)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = e5_address
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        this.get_bag_data(contractInstance, web3, e5, contract_addresses, E52contractInstance, account, null, e5_data[e5])
      }
    }
  }




  load_and_nofity_user_of_incoming_bag_application_responses = async() => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const all_bag_ids = await this.get_all_bags_ids(focused_e5)
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var my_created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:36})

        var ids = []
        my_created_job_respnse_data.forEach(event => {
          var id = event.returnValues.p1/* target_id */
          if(!ids.includes(id) && all_bag_ids.includes(id)){
            ids.push(id)
          }
        });

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: ids, p3/* context */:37}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_bag_application_responses == null){
      this.load_and_notify_user_times_bag_application_responses = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_bag_application_responses[e5] == null){
          this.load_and_notify_user_times_bag_application_responses[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          var event_emitter = event.returnValues.p2/* sender_acc_id */
          if(event_block > this.load_and_notify_user_times_bag_application_responses[e5] && event_emitter != account){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p1
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'bag'
          event['event_type'] = 'bag_application_response'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'bag', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'}
          if(event_emitter != account) all_notifications.push(event);
        });
        this.load_and_notify_user_times_bag_application_responses[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one bag application response to nofity', notifs)
      this.handle_bag_application_response_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['bag_application_response'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_bag_application_response_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738ad']/* 'Youre applications for bags posted by $ have been accepted.' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_bag_items(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'bag', 'p':'p1', 'time':'p6','block':'p7', 'sender':'p2'})
  }





  load_and_notify_user_of_incoming_storefront_direct_order = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const ids = await this.load_my_storefront_ids(focused_e5, account)
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = this.state.addresses[focused_e5][6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        if(ids.length == 0){
          ids.push(0)
        }

        var all_received_on_chain_events = await H52contractInstance.getPastEvents('e5', { filter: { p3/* awward_context */: ids}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_direct_storefront_order == null){
      this.load_and_notify_user_times_direct_storefront_order = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_direct_storefront_order[e5] == null){
          this.load_and_notify_user_times_direct_storefront_order[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p6/* block_number */
          if(event_block > this.load_and_notify_user_times_direct_storefront_order[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p3
          event['time'] = event.returnValues.p5
          event['block'] = event.returnValues.p6
          event['sender'] = event.returnValues.p1
          event['type'] = 'storefront'
          event['event_type'] = 'storefront'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'storefront', 'p':'p3', 'time':'p5','block':'p6', 'sender':'p1'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_direct_storefront_order[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one storefront purchase response to nofity', notifs)
      this.handle_incoming_storefront_direct_purchase_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['storefront'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  load_my_storefront_ids = async (e5, account) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E5contractArtifact = require('./contract_abis/E5.json');
    const E5_address = this.state.addresses[e5][0];
    const contractInstance = new web3.eth.Contract(E5contractArtifact.abi, E5_address);
    var created_bag_events = await this.load_event_data(web3, contractInstance, 'e1', e5, {p2/* object_type */:27/* 27(storefront-item) */, p3/* sender_account_id */: account})

    var my_bags = []
    created_bag_events.forEach(event => {
      var id = event.returnValues.p1/* object_id */
      if(!my_bags.includes(id)){
        my_bags.push(id)
      }
    });
    return my_bags
  }

  handle_incoming_storefront_direct_purchase_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p1/* awward_sender */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738x']/* 'Incoming storefront direct purchases from $' */
    prompt = prompt.replace('$', senders.toString())
    this.load_specific_storefront_items(events)
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'storefront', 'p':'p3', 'time':'p5','block':'p6', 'sender':'p1'})
  }

  load_specific_storefront_items(events){
    var e5_data = {}
    events.forEach(event => {
      if(e5_data[event['e5']] == null){
        e5_data[event['e5']] = []
      }
      e5_data[event['e5']].push(event.returnValues.p3/* awward_context */)
    });
    const keys = Object.keys(e5_data)
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      var web3_url = this.get_web3_url_from_e5(e5)
      var e5_address = this.state.e5s[e5].e5_address;
      if(e5_address != '' && keys.includes(e5)){
        const web3 = new Web3(web3_url);

        var account = this.state.user_account_id[e5]
        var contract_addresses = this.state.addresses[e5]

        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = contract_addresses[6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        this.get_storefront_data(E52contractInstance, web3, e5, contract_addresses, H52contractInstance, account, null, false, e5_data[e5])
      }
    }
  }




  load_and_notify_user_of_incoming_bills = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: {p1/* target_id */: account, p3/* context */:13/* bills */}, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        all_unsorted_events[focused_e5] = all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_bill_requests == null){
      this.load_and_notify_user_times_bill_requests = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_bill_requests[e5] == null){
          this.load_and_notify_user_times_bill_requests[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p7/* block_number */
          if(event_block > this.load_and_notify_user_times_bill_requests[e5]){
            event['e5'] = e5
            notifs.push(event)
          }

          event['e5'] = e5
          event['p'] = event.returnValues.p5
          event['time'] = event.returnValues.p6
          event['block'] = event.returnValues.p7
          event['sender'] = event.returnValues.p2
          event['type'] = 'bill'
          event['event_type'] = 'bill_request'
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'bill', 'p':'p5', 'time':'p6','block':'p7', 'sender':'p2'}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_bill_requests[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one bill request to nofity', notifs)
      this.handle_bill_request_notifications(notifs)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['bill_request'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  handle_bill_request_notifications(events){
    var senders = []
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      senders.push(alias)
    });
    var prompt = this.getLocale()['2738ag']/* 'Incoming bills from $' */
    prompt = prompt.replace('$', senders.toString())
    this.prompt_top_notification(prompt, 15000)
  }









  load_and_notify_user_of_incoming_post_comments = async () => {
    var all_unsorted_events = {}
    var block_stamp = {}
    var current_blocks = {}
    const id_object_data_object = await this.load_my_post_ids()
    const id_object_data = id_object_data_object.ids_data
    const id_types = id_object_data_object.id_types_data
    const id_types_data_arrays = id_object_data_object.id_types_data_arrays
    for(var i=0; i<this.state.e5s['data'].length; i++){
      const focused_e5 = this.state.e5s['data'][i]
      var account = this.state.user_account_id[focused_e5]
      if(this.state.addresses[focused_e5] != null && account > 1000){
        const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = this.state.addresses[focused_e5][1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        var current_block_number = await web3.eth.getBlockNumber()
        var difference = this.state.e5s[focused_e5].notification_blocks == null ? 10_000 : this.state.e5s[focused_e5].notification_blocks
        var start = current_block_number == 0 ? 0 : current_block_number - difference
        if(start < 0) start = 0;

        const ids = Object.values(id_object_data).flat()

        var all_received_on_chain_events = await E52contractInstance.getPastEvents('e4', { filter: { p3/* context */: ids, p1/* target_id */: 17/* shadow_object_container */ }, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

        var filtered_all_received_on_chain_events = []
        all_received_on_chain_events.forEach(event => {
          const targeted_e5 = 'E'+event.returnValues.p5/* int_data */
          if(id_object_data[targeted_e5].includes(event.returnValues.p3/* context */)){
            filtered_all_received_on_chain_events.push(event)
          }
        });

        all_unsorted_events[focused_e5] = filtered_all_received_on_chain_events
        block_stamp[focused_e5] = current_block_number
        current_blocks[focused_e5] = current_block_number
      }
    }

    if(this.load_and_notify_user_times_post_comment == null){
      this.load_and_notify_user_times_direct_storefront_order = {}
    }

    var notifs = []
    var all_notifications = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        if(this.load_and_notify_user_times_post_comment[e5] == null){
          this.load_and_notify_user_times_post_comment[e5] = block_stamp[e5]
        }
        var account = this.state.user_account_id[e5]
        all_unsorted_events[e5].forEach(event => {
          var event_block = event.returnValues.p6/* block_number */
          if(event_block > this.load_and_notify_user_times_post_comment[e5]){
            event['e5'] = e5
            notifs.push(event)
          }
          event['e5'] = e5
          event['p'] = event.returnValues.p3/* context */
          event['time'] = event.returnValues.p6/* timestamp */
          event['block'] = event.returnValues.p7/* block_number */
          event['sender'] = event.returnValues.p2/* sender_acc_id */
          event['type'] = 'comment'
          event['event_type'] = 'comment'
          const target_e5 = Object.entries(id_object_data).find(([key, arr]) => arr.includes(event.returnValues.p3/* context */))?.[0];
          event['view'] = {'notification_id':'view_incoming_transactions','events':[], 'type':'comment', 'p':'p3', 'time':'p6','block':'p7', 'sender':'p2', 'id_type':id_types[event.returnValues.p3/* context */], 'target_e5':target_e5}
          all_notifications.push(event)
        });
        this.load_and_notify_user_times_post_comment[e5] = block_stamp[e5]
      }
    }

    if(notifs.length > 0){
      console.log('notifier', 'found one comment to nofity', notifs)
      this.handle_incoming_post_comment_notifications(notifs, id_types)
      this.start_loading_objects_in_background(id_types_data_arrays)
    }

    var clone = structuredClone(this.state.notification_object)
    clone['comment'] = all_notifications.reverse()
    this.setState({notification_object: clone})
  }

  load_my_post_ids = async () => {
    const accepted_object_types = [17/* 17(job object) */, 18/* 18(post object) */, 19/* 19(audio_object) */, 20/* 20(video_object) */, 21/* 21(nitro_object) */, 25/* 25(storefront_bag_object) */, 27/* 27(storefront-item) */, 32/* 32(consensus_request) */, 36/* 36(type_channel_target) */]

    const ids_data = {}
    const id_types_data = {}
    const id_types_data_arrays = {}
    if(this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        const account = this.state.user_account_id[focused_e5]
        if(account != null && account > 1000){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          var contract_addresses = this.state.addresses[focused_e5]
          const contractArtifact = require('./contract_abis/E5.json');
          const contractAddress = contract_addresses[0]
          const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
          event_params.push([web3, contractInstance, 'e1', focused_e5, {p3/* sender_account_id */: account}])
          used_e5s.push(focused_e5)
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index) => {
        const e5_used = used_e5s[index]
        event_array.forEach(event => {
          if(accepted_object_types.includes(event.returnValues.p2/* object_type */)){
            if(ids_data[e5_used] == null){
              ids_data[e5_used] = []
            }
            ids_data[e5_used].push(event.returnValues.p1/* object_id */)
            id_types_data[event.returnValues.p1/* object_id */] = event.returnValues.p2/* object_type */
            if(id_types_data_arrays[event.returnValues.p2/* object_type */] == null){
              id_types_data_arrays[event.returnValues.p2/* object_type */] = []
            }
            id_types_data_arrays[event.returnValues.p2/* object_type */].push(event.returnValues.p1/* object_id */)
          }
        });
      });
    }else{
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        const account = this.state.user_account_id[focused_e5]
        if(account != null && account > 1000){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          var contract_addresses = this.state.addresses[focused_e5]
          const contractArtifact = require('./contract_abis/E5.json');
          const contractAddress = contract_addresses[0]
          const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

          const event_array = await this.load_event_data(web3, contractInstance, 'e1', focused_e5, {p3/* sender_account_id */: account})
          event_array.forEach(event => {
            if(accepted_object_types.includes(event.returnValues.p2/* object_type */)){
              if(ids_data[focused_e5] == null){
                ids_data[focused_e5] = []
              }
              ids_data[focused_e5].push(event.returnValues.p1/* object_id */)
              id_types_data[event.returnValues.p1/* object_id */] = event.returnValues.p2/* object_type */
              if(id_types_data_arrays[event.returnValues.p2/* object_type */] == null){
                id_types_data_arrays[event.returnValues.p2/* object_type */] = []
              }
              id_types_data_arrays[event.returnValues.p2/* object_type */].push(event.returnValues.p1/* object_id */)
            }
          });
        }
      }
    }

    return {ids_data, id_types_data, id_types_data_arrays}
  }

  handle_incoming_post_comment_notifications(events, id_types){
    var senders = []
    var and_more = false
    events.forEach(event => {
      var alias = this.get_sender_title_text(event.returnValues.p2/* sender_acc_id */, event['e5'])
      if(senders.length < 5) senders.push(alias);
      else and_more = true
    });
    var prompt = and_more == true ? this.getLocale()['2738aj']/* 'Incoming comments from $ and more.' */ : this.getLocale()['2738ai']/* 'Incoming comments from $' */;
    prompt = prompt.replace('$', senders.toString())
    this.prompt_top_notification(prompt, 15000, {'notification_id':'view_incoming_transactions','events':events, 'type':'comment', 'p':'p3', 'time':'p6','block':'p7', 'sender':'p2', 'id_types':id_types})
  }

  start_loading_objects_in_background(id_types_data_arrays){
    var keys = Object.keys(id_types_data_arrays)
    keys.forEach(id_type => {
      const load_ids = id_types_data_arrays[id_type]
      if(id_type == 17/* 17(job object) */){
        this.load_jobs_data(load_ids)
      }
      else if(id_type == 18/* 18(post object) */){
        this.load_post_data(load_ids)
      }
      else if(id_type == 19/* 19(audio_object) */){
        this.load_audio_data(load_ids)
      }
      else if(id_type == 20/* 20(video_object) */){
        this.load_video_data(load_ids)
      }
      else if(id_type == 21/* 21(nitro_object) */){
        this.load_nitro_data(load_ids)
      }
      else if(id_type == 25/* 25(storefront_bag_object) */){
        this.load_bag_data(load_ids)
      }
      else if(id_type == 27/* 27(storefront-item) */){
        this.load_storefront_data(load_ids)
      }
      else if(id_type == 32/* 32(consensus_request) */){
        this.load_proposal_data(load_ids)
      }
      else if(id_type == 36/* 36(type_channel_target) */){
        this.load_channel_data(load_ids)
      }
    });
  }

  

  






  


  fetch_objects_to_load_from_searched_tags = async (searched_tags, page, search, accounts) => {
    var target_type = this.get_target_type_from_page(page)
    if(target_type == 0) return;

    // if(this.fetch_object_history == null){
    //   this.fetch_object_history = {}
    // }

    // var search_index = JSON.stringify({'tags':searched_tags, 'page':page, 'search':search, 'accounts':accounts})

    // const now = Date.now()

    // if(this.fetch_object_history[search_index] != null && (now - this.fetch_object_history[search_index]) > this.state.fetch_object_time_limit){
    //   return;
    // }else{
    //   this.fetch_object_history[search_index] = now
    // }

    var searched_tags_including_prioritized_tags = (this.load_selected_tags(page)).concat(searched_tags)

    if((page == this.getLocale()['1197']/* 'contracts' */ || page == this.getLocale()['1200']/* 'subscriptions' */ || page == this.getLocale()['1198']/* 'contractors' */) && searched_tags.length == 0 && this.state.user_account_id[this.state.selected_e5] != 1){
      //prioritize my accounts data first
      searched_tags_including_prioritized_tags = [this.state.user_account_id[this.state.selected_e5]].concat(searched_tags_including_prioritized_tags)
    }

    if(searched_tags.length != 0) searched_tags_including_prioritized_tags = searched_tags

    var prioritized_accounts = []
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }

    if(searched_tags.length != 0 && this.state.beacon_node_enabled == true){
      var arg_obj = {tags: searched_tags, target_type: target_type}
      const params = new URLSearchParams({
        arg_string: JSON.stringify(arg_obj)
      });
      var request = `${beacon_node}/tags?${params.toString()}`
      try{
        const response = await fetch(request);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        obj['data'].forEach(element => {
          if(!prioritized_accounts.includes(parseInt(element))) prioritized_accounts.push(parseInt(element))
        });
      }
      catch(e){
        
      }
    }

    if(search != null && search != '' && this.state.beacon_node_enabled == true){
      var arg_obj = {title: search, target_type: target_type}
      const params = new URLSearchParams({
        arg_string: JSON.stringify(arg_obj)
      });
      var request = `${beacon_node}/title?${params.toString()}`
      try{
        const response = await fetch(request);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        obj['data'].forEach(element => {
          if(!prioritized_accounts.includes(parseInt(element))) prioritized_accounts.push(parseInt(element))
        });
      }
      catch(e){
        console.log(e)
      }
    }

    if(prioritized_accounts.length == 0){
      prioritized_accounts = prioritized_accounts.concat(this.fetch_all_followed_accounts())
    }
    this.prioritized_accounts = prioritized_accounts
    if(accounts != null){
      this.prioritized_accounts = accounts.concat(this.prioritized_accounts)
    }
    this.load_data_from_page_in_focus(page)
  }

  fetch_all_followed_accounts(){
    var loaded_followed_accounts = this.state.followed_accounts
    var accepted_ids = []
    for(var i=0; i<loaded_followed_accounts.length; i++){
      var item = loaded_followed_accounts[i]
      var split_account_array = item.split(':')
      var account = split_account_array[1]
      accepted_ids.push(account)
    }
    return accepted_ids
  }

  get_target_type_from_page(page){
    var obj={'e':0}
    obj[this.getLocale()['1196']/* 'jobs' */] = 17
    obj[this.getLocale()['1197']/* 'contracts' */] = 30
    obj[this.getLocale()['1199']/* 'proposals' */] = 32
    obj[this.getLocale()['1198']/* 'contractors' */] = 26
    obj[this.getLocale()['1200']/* 'subscriptions' */] = 33
    obj[this.getLocale()['1213']/* 'posts' */] = 18
    obj[this.getLocale()['1214']/* 'channels' */] = 36
    obj[this.getLocale()['1215']/* 'storefront' */] = 27
    obj[this.getLocale()['1216']/* 'bags' */] = 25
    obj[this.getLocale()['1264k']/* 'audioport' */] = 19
    obj[this.getLocale()['1264p']/* 'videoport' */] = 20
    obj[this.getLocale()['1264s']/* 'nitro' */] = 21
    obj['w'] = 31
    obj[this.getLocale()['1264aj']/* 'bills' */] = 31
    obj[this.getLocale()['1264ao']/* 'polls' */] = 28

    return obj[page]
  }

  load_selected_tags(page){
    var job_section_tags = this.state.job_section_tags;
    var explore_section_tags = this.state.explore_section_tags;

    var should_prioritise_followed_tags = this.state.section_tags_setting === this.getLocale()['1427'] /* 'filtered' */

    var return_obj = [this.state.content_channeling]

    if(!should_prioritise_followed_tags){
      return return_obj
    } 

    if(page == this.getLocale()['1196']/* 'jobs' */ || page == this.getLocale()['1197']/* 'contracts' */ || page == this.getLocale()['1198']/* 'contractors' */ || page == this.getLocale()['1200']/* 'subscriptions' */){
      return_obj =  return_obj.concat(job_section_tags)
    }
    else{
      return_obj =  return_obj.concat(explore_section_tags)
    }

    return return_obj
  }

  load_prioritised_job_posts = async (e5, web3, contract_addresses) => {
    var searched_tags_including_prioritized_tags = this.load_selected_tags(this.getLocale()['1196']/* 'jobs' */)
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = contract_addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var all_indexed_tags_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p3/* context */: 20/* 20(tag_registry) */, p5/* int_data */:17/* jobs */});

    var prioritized_accounts = []
    all_indexed_tags_events.forEach(event_item => {
      var items_tag = event_item.returnValues.p4/* string_data */
      var items_id = event_item.returnValues.p1/* target_id */
      if(searched_tags_including_prioritized_tags.includes(items_tag) || searched_tags_including_prioritized_tags.includes(items_id)){
        prioritized_accounts.push(items_id)
      }
    });

    return prioritized_accounts
  }







  fetch_multiple_objects_data = async (ids, web3, e5, addresses) => {
    if(this.state.beacon_node_enabled == false){
      console.log('all_data', 'beacon node offline')
      return {}
    }else{
      console.log('all_data', 'beacon node online, loading: ', ids)
    }
    var event_params = []
    for(var i=0; i<ids.length; i++){
      const E52contractArtifact = require('./contract_abis/E52.json');
      const E52_address = addresses[1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
      var target_id = ids[i];
      event_params.push([web3, E52contractInstance, 'e5', e5, {p1/* target_obj_id */: target_id}])
    }
    var all_events = await this.load_multiple_events_from_nitro(event_params)
    var obj_id_ecid = {}
    var hashes = []
    var valid_ids = []
    var obj_types = {}
    // console.log('apppage', 'all events length', all_events.length)

    for(var i=0; i<all_events.length; i++){
      var objects_event = all_events[i]
      if(objects_event.length != 0){
        var ecid = objects_event[objects_event.length - 1].returnValues.p4
        if(ecid != 'e3' && ecid != 'e2' && ecid != 'e1' && ecid != 'e'){
          var cid = ecid
          var option = 'in'
          if(ecid.includes('.')){
            var split_cid_array = ecid.split('.');
            option = split_cid_array[0]
            cid = split_cid_array[1]
          }
          var id = cid;
          var internal_id = ''
          if(cid.includes('_')){
            var split_cid_array2 = cid.split('_');
            id = split_cid_array2[0]
            internal_id = split_cid_array2[1]
          }
          obj_id_ecid[ids[i]] = {'id':id, 'internal_id':internal_id,'option':option }
          obj_types[id] = option
          if(await this.fetch_from_storage(id) == null) hashes.push(id)
          valid_ids.push(ids[i])
        }
      }
    }

    // console.log('apppage', 'obj_id_ecid', obj_id_ecid, 'hashes', hashes)
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes: hashes}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var object_data = obj['data']
      console.log('apppage', 'data', obj)
      for(var i=0; i<hashes.length; i++){
        var cid_data = object_data[hashes[i]]
        if(cid_data != null){
          var confirmation_hash = await this.generate_hash(JSON.stringify(cid_data))
          if(confirmation_hash != hashes[i] && obj_types[hashes[i]] == 'ni'){
            console.log('apppage', hashes[i], 'data has been modified! bad data!', confirmation_hash)
          }else{
            var decrypted_data = this.decrypt_storage_object2(cid_data)
            // console.log('apppage', 'decrypted object', decrypted_data)
            this.store_in_local_storage(hashes[i], JSON.parse(decrypted_data))
          }
        }
      }
    }
    catch(e){
      console.log('apppage', e)
      return {}
    }

    var data = {}
    for(var i=0; i<valid_ids.length; i++){
      var valid_id = valid_ids[i]
      var valid_id_cid = obj_id_ecid[valid_id]['id']
      var valid_id_internal_id = obj_id_ecid[valid_id]['internal_id']
      var valid_id_data = await this.fetch_from_storage(valid_id_cid)
      if(valid_id_data != null){
        var final_data = valid_id_data
        if(valid_id_internal_id != ''){
          final_data = valid_id_data[valid_id_internal_id]
        }
        data[valid_id] = final_data
      }
    }

    console.log('apppage', 'return', data)
    return data
  }

  fetch_objects_data = async (id, web3, e5, addresses) => {
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = addresses[1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
    var target_id = id;
    var events = await this.load_event_data(web3, E52contractInstance, 'e5', e5, {p1/* target_obj_id */: target_id})
    if(events.length == 0) return;
    var n = 1
    var cid = events[events.length - n].returnValues.p4
    if(cid == 'e3' || cid == 'e2' || cid == 'e1' || cid == 'e') return;

    var data = null
    while(data == null && events.length >= n){
      var cid = events[events.length - n].returnValues.p4
      data = await this.fetch_objects_data_from_ipfs_using_option(cid)
      if(data == null){
        n++
      }
    }
    return data
  }



  fetch_objects_data_from_ipfs_using_option = async (ecid) => {
    if(ecid == 'ar.MY_Kh9i3VhChJuTzo_Cyu6bG6hCvasqzWGfo4oniNnA_1xjiAYxW') return null
    if(!ecid.includes('.')){
      var data = await this.fetch_object_data_from_infura(ecid)
      return data
    }
    var split_cid_array = ecid.split('.');
    var option = split_cid_array[0]
    var cid = split_cid_array[1]

    var included_underscore = false
    var id = cid;
    var internal_id = ''
    if(cid.includes('_')){
      included_underscore = true;
      var split_cid_array2 = cid.split('_');
      id = split_cid_array2[0]
      internal_id = split_cid_array2[1]
    }
    
    if(option == 'in'){
      var data = await this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_object_data_from_infura(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        // console.log('found_underscore', data)
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'we'){
      var data = await this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_objects_data_from_web3(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'nf'){
      var data = await this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_objects_data_from_nft_storage(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'ni'){
      var data = await this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_data_from_nitro(id, 0)
        this.store_in_local_storage(id, data)
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
    else if(option == 'ar'){
      var data = await this.fetch_from_storage(id)
      if(data == null){
        data = await this.fetch_data_from_arweave(id)
        if(data != null) this.store_in_local_storage(id, data);
      }
      if(included_underscore){
        if(data == null) return null;
        return data[internal_id]
      }
      return data
    }
  }

  store_image_in_ipfs = async (data) => {
    // var cid = await this.store_objects_data_in_ipfs_using_option(data, true, true)
    // return `https://nftstorage.link/ipfs/${cid}`
  }

  store_objects_data_in_ipfs_using_option = async (data, unappend_identifier, unencrypt_image, tags) => {
    var set_storage_option = this.state.storage_option
    var my_preferred_nitro = this.state.my_preferred_nitro

    if(my_preferred_nitro != '' && this.nitro_node_storage_enabled(my_preferred_nitro) && set_storage_option == this.getLocale()['1593cw']/* 'nitro 🛰️' */){
      //upload to nitro storage
      var cid = await this.store_data_in_nitro(data, unencrypt_image, my_preferred_nitro, tags)
      if(cid == '' || cid == null) return ''
      if(unappend_identifier == true) return cid
      return 'ni.'+cid;
    }
    // if(set_storage_option == 'infura'){
    //   var cid = await this.store_data_in_infura(data, unencrypt_image, tags)
    //   if(cid == '' || cid == null) return ''
    //   if(unappend_identifier == true) return cid
    //   return 'in.'+cid;
    // }
    // else if(set_storage_option == 'web3-storage'){
    //   var cid = await this.store_data_in_web3(data, unencrypt_image)
    //   if(unappend_identifier == true) return cid
    //   return 'we.'+cid;
    // }
    // else if(set_storage_option == 'nft-storage'){
    //   var cid = await this.store_data_in_nft_storage(data, unencrypt_image)
    //   if(unappend_identifier == true) return cid
    //   return 'nf.'+cid;
    // }
    // else if(set_storage_option == 'chainsafe'){
    //   var cid = await this.store_data_in_chainsafe_storage(data, unencrypt_image, tags)
    //   if(unappend_identifier == true) return cid
    //   return 'ch.'+cid;
    // }
    if(set_storage_option == this.getLocale()['1593cw']/* 'nitro 🛰️' */){
      //upload to nitro storage
      var cid = await this.store_data_in_nitro(data, unencrypt_image, default_nitro_option, tags)
      if(cid == '' || cid == null) return ''
      if(unappend_identifier == true) return cid
      return 'ni.'+cid;
    }
    else if(set_storage_option == 'arweave'){
      var cid = await this.store_data_in_arweave_storage(data, unencrypt_image, tags)
      if(cid == '' || cid == null) return ''
      if(unappend_identifier == true) return cid
      return 'ar.'+cid;
    }
  }

  nitro_node_storage_enabled(my_preferred_nitro){
    var node_details = this.state.nitro_node_details[my_preferred_nitro]
    if(node_details == null){
      return false
    }
    else{
      return node_details['max_buyable_capacity'] != 0
    }
  }





  store_data_in_arweave_storage = async (_data, unencrypt_image, tags_obj) => {
    var final_data = unencrypt_image ? _data: this.encrypt_storage_object(_data, tags_obj)
    var wallet_data = this.state.coin_data['AR']
    if(wallet_data != null){
      const wallet = wallet_data['wallet']
      try{
        var transaction = await arweave.createTransaction({
          data: final_data
        }, wallet.key);
        transaction.addTag('Content-Type', 'text');
        transaction.addTag('Client', 'E5')
        transaction.addTag('Version', this.state.version)
        await arweave.transactions.sign(transaction, wallet.key);

        const transaction_hash = transaction['id']
        var uploader = await arweave.transactions.getUploader(transaction);
        while (!uploader.isComplete) {
          await uploader.uploadChunk();
        }

        this.prompt_top_notification(this.getLocale()['2738g']/* 'Arweave uploade complete, waiting for 1 network confirmations...' */, 15000)

        this.is_uploading_arweave_file = true
        while (this.is_uploading_arweave_file == true) {
          if (this.is_uploading_arweave_file == false) break
          console.log('appdata','Waiting for data to be uploaded')
          this.check_if_required_confirmations(transaction_hash)
          await new Promise(resolve => setTimeout(resolve, 15_000))
        }

        this.update_coin_balances('AR', false)
        this.prompt_top_notification(this.getLocale()['2738i']/* 'Arweave transaction confirmed! proceeding with run...' */, 5000)

        const encoded = Buffer.from(transaction_hash).toString('base64')
        return encoded
      }catch(e){
        console.log('Error uploading data: ', e)
        this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
        this.lock_run(false)
        return '';
      }
    }
  }

  check_if_required_confirmations = async (transaction_hash) => {
    const pending_status = await arweave.transactions.getStatus(transaction_hash)
    if(pending_status.confirmed != null && pending_status.confirmed.number_of_confirmations != null && pending_status.confirmed.number_of_confirmations > 1){
      this.is_uploading_arweave_file = false
    }
    console.log(pending_status)
  }

  fetch_data_from_arweave = async (id) => {
    try{
      const decoded = Buffer.from(id, 'base64').toString();
      console.log(decoded)
      // var data = await arweave.transactions.getData(decoded, {decode: true, string: true})
      var return_data = await fetch(`https://arweave.net/${decoded}`)
      var data = await return_data.text()
      // console.log('appdata', data)
      var decrypted_data = this.decrypt_storage_object(data)
      // console.log('appdata', decrypted_data)
      var obj = JSON.parse(decrypted_data)
      // console.log('appdata', obj)
      return obj
    }catch(e){
      console.log('appdata',e)
      return null
    }
    
  }




  store_data_in_nitro = async (_data, unencrypt_image, my_preferred_nitro, tags_obj) => {
    var node_details = this.state.nitro_node_details[my_preferred_nitro]
    if(node_details == null){
      this.prompt_top_notification(this.getLocale()['1593db']/* 'Please wait a few moments for your selected node to come online.' */, 5000)
      return '';
    }
    var data = this.encrypt_storage_object(_data, tags_obj)
    var block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_storage_recipinet_accounts'])
    if(block_hash_and_signature == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return '';
    }

    var node_url = this.get_nitro_link_from_e5_id(my_preferred_nitro)
    var file_object = JSON.stringify(data)
    var arg_obj = {
      signature_data: block_hash_and_signature.data,
      signature:block_hash_and_signature.signature,
      e5: block_hash_and_signature.e5,
      file_datas: [file_object],
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/store_data`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      if(obj.success == false){
        this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */+' '+obj.message, 8000)
        return '';
      }else{
        var valid_hash = await this.get_valid_data_hash(file_object, false)
        if(valid_hash != obj.files[0]){
          console.log('apppage','Data has beeen tampered with, reverting', valid_hash, obj.files[0])
          throw new Error(`Data has beeen tampered with, reverting`);
        }
        return my_preferred_nitro+'-'+obj.files[0]
      }
    }
    catch(e){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      this.lock_run(false)
      return '';
    }
  }

  fetch_data_from_nitro = async (cid, depth) => {
    await this.wait(this.state.ipfs_delay)
    var split_cid_array = cid.split('-');
    var e5_id = split_cid_array[0]
    var nitro_cid = split_cid_array[1]

    var nitro_url = this.get_nitro_link_from_e5_id(e5_id)
    if(nitro_url == null) return
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes:[nitro_cid]}),
    });
    var request = `${nitro_url}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      // console.log('datas', 'hash object', obj)
      var object_data = obj['data']
      var cid_data = object_data[nitro_cid]
      var confirmation_hash = await this.generate_hash(JSON.stringify(cid_data))
      if(confirmation_hash != nitro_cid){
        console.log('apppage', 'data has been modified')
        console.log('apppage', nitro_cid)
        console.log('apppage', confirmation_hash)
        return null
      }
      var decrypted_data = this.decrypt_storage_object(cid_data)
      var return_data = JSON.parse(decrypted_data)
      // console.log('datas', 'hash object return_data', return_data)
      return return_data
    }
    catch(e){
      if(depth < 3){
        return await this.fetch_data_from_nitro(cid, depth+1)
      }
    }
  }




  store_data_in_infura = async (_data, unencrypt_image, tags_obj) => {
    var data = unencrypt_image ? _data: this.encrypt_storage_object(_data, tags_obj)
    var data = unencrypt_image ? _data: (tags_obj != null ? this.encrypt_storage_object(_data, tags_obj) :this.encrypt_storage_data(_data))

    const projectId = `${process.env.REACT_APP_INFURA_API_KEY}`;
    const projectSecret = `${process.env.REACT_APP_INFURA_API_SECRET}`;
    const auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');
    const client = create({
      host: 'ipfs.infura.io',
      port: 5001,
      protocol: 'https',
      apiPath: '/api/v0',
      headers: {
        authorization: auth,
      }
    })

    try {
      const added = await client.add(data)
      return added.path.toString()
    } catch (error) {
      console.log('Error uploading file: ', error)
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      this.lock_run(false)
      return '';
    }
  }

  store_data_in_infura2 = async (_data, unencrypt_image, tags_obj) => {
    var data = unencrypt_image ? _data: (tags_obj != null ? this.encrypt_storage_object(_data, tags_obj) :this.encrypt_storage_data(_data))
    
    const obj = { data: data }
    const final_data = JSON.stringify(obj)
    const projectId = `${process.env.REACT_APP_INFURA_API_KEY}`;
    const projectSecret = `${process.env.REACT_APP_INFURA_API_SECRET}`;
    const auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');
    const client = create({
      host: 'ipfs.infura.io',
      port: 5001,
      protocol: 'https',
      apiPath: '/api/v0',
      headers: {
        authorization: auth,
      }
    })

    try {
      const added = await client.add(final_data)
      return added.path.toString()
    } catch (error) {
      console.log('Error uploading file: ', error)
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return '';
    }
  }

  fetch_object_data_from_infura = async (cid, depth) => {
    if(
      cid.includes('QmYBx95TyCASAEx8bu2fG6yT7fMQirwZxnRbLgANg5MdKG') || 
      cid.includes('QmdSTjEkHPVwrbrFpuVRshCnPEx1rxSXxatPtkj29V6muA') ||
      cid.includes('QmPRZMnbFHhErrVPunL2f2ddxLXCKMQnny4q7x6nXcoReM') ||
      cid.includes('QmZCDWu2v4Co7msuAZ7Z5qS6PfnyqhHiHHcotwosdKFko1') ||
      cid.includes('QmVism7hS71hBxhPoyE4ov4w3rv2aqrJ5y4vADQD9xHwoY') ||
      cid.includes('QmTTEn4rJC6YRyvctJMkDYzeFevJS9S54rj2hwE3rUJdC5') ||
      cid.includes('Qmf5ivGEBeopqoQKu8Hc5DqdjGscBRQcxTwUnFV4BMWG3U') ||
      cid.includes('QmRhhLZckJpkvZ6kHzHEx5hAf2wK5JPWhPvePWMtPBBbsQ') ||
      cid.includes('QmZYveGfHPDLSbhyusr7f452bAAzqZUsmxqaecku71HXvQ')
    ){
      return null
    }
    await this.wait(this.state.ipfs_delay)
    var gateways = [
      `https://ipfs.io/ipfs/${cid}`,
      `https://gateway.ipfs.io/ipfs/${cid}`,
      `https://cloudflare-ipfs.com/ipfs/${cid}`,
      `https://dweb.link/ipfs/${cid}`,
      // `https://gateway.pinata.cloud/ipfs/${cid}`,
      `https://nftstorage.link/ipfs/${cid}`,
      `https://hardbin.com/ipfs/${cid}`,
      `https://4everland.io/ipfs/${cid}`,
      `https://cf-ipfs.com/ipfs/${cid}`,
      `https://ipfs.decentralized-content.com/ipfs/${cid}`,
      `https://ipfs.eth.aragon.network/ipfs/${cid}`,
      `https://pz-acyuix.meson.network/ipfs/${cid}`,
      `https://fleek.ipfs.io/ipfs/${cid}`,
      `https://ipfs.w3s.link/ipfs/${cid}`,
    ]

    var gateways = [
      `https://gateway.pinata.cloud/ipfs/${cid}`,
      `https://ipfs.io/ipfs/${cid}`,
    ]
    
    await this.wait(this.state.ipfs_delay)
    // var selected_gateway = gateways[Math.round(Math.random() * 12)]
    var selected_gateway = gateways[1]
    if(depth > 2){
      selected_gateway = gateways[1]
    }
    selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), 9000);
    console.log('infura', cid)
    try {
      const response = await fetch(selected_gateway ,{ signal: controller.signal });
      clearTimeout(id)
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS. Status: ${response}`);
      }
      var data = await response.text();
      data = this.decrypt_storage_object(data)
      return JSON.parse(data);
      // Do something with the retrieved data
    } catch (error) {
      console.log('Error fetching infura file: ', cid, error)

      if(depth<3){
        await this.wait(3000)
        return await this.fetch_object_data_from_infura(cid, depth+1)
      }
    }
  }

  get_selected_gateway_if_custom_set(cid, default_gateway){
    if(this.state.custom_gateway != ''){
      var my_gateway = `${this.state.custom_gateway}`
      return my_gateway.replace('cid', cid)
    }else{
      return default_gateway
    }
  }





  store_data_in_web3 = async (_data, unencrypt_image) => {
    return null;
    // var data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    // const client = new Web3Storage({ token: `${process.env.REACT_APP_WEB3_STORAGE_ACCESS_TOKEN}` })
    // var file = this.makeFileObjects(data);
    // const cid = await client.put(file)
    // return cid
  }

  makeFileObjects(data) {
    // You can create File objects from a Blob of binary data
    // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob
    // Here we're just storing a JSON object, but you can store images,
    // audio, or whatever you want!
    const obj = { data: data }
    const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })

    const files = [
      new File([blob], 'bry.json'),
      new File(['contents-of-file-1'], 'plain-utf8.txt')
    ]
    return files
  }

  fetch_objects_data_from_web3 = async (cid, depth) => {
    // const client = new Web3Storage({ token: `${process.env.REACT_APP_WEB3_STORAGE_ACCESS_TOKEN}` })

    // try{
    //   const res = await client.get(cid)
    //   const files = await res.files()

    //   var file = files[0]
    //   return JSON.parse(JSON.parse(await file.text()).data);
    // }catch(e){
    //   console.log(e)
    //   return null
    // }

    var gateways = [
      `https://ipfs.io/ipfs/${cid}/bry.json`,
      `https://gateway.ipfs.io/ipfs/${cid}/bry.json`,
      `https://cloudflare-ipfs.com/ipfs/${cid}/bry.json`,
      `https://dweb.link/ipfs/${cid}/bry.json`,
      // `https://gateway.pinata.cloud/ipfs/${cid}/bry.json`,
      `https://nftstorage.link/ipfs/${cid}/bry.json`,
      `https://hardbin.com/ipfs/${cid}/bry.json`,
      `https://4everland.io/ipfs/${cid}/bry.json`,
      `https://cf-ipfs.com/ipfs/${cid}/bry.json`,
      `https://ipfs.decentralized-content.com/ipfs/${cid}/bry.json`,
      `https://ipfs.eth.aragon.network/ipfs/${cid}/bry.json`,
      `https://pz-acyuix.meson.network/ipfs/${cid}/bry.json`,
      `https://fleek.ipfs.io/ipfs/${cid}/bry.json`,
      `https://ipfs.w3s.link/ipfs/${cid}/bry.json`,
    ]

    var gateways = [
      `https://nftstorage.link/ipfs/${cid}`
    ]
    
    await this.wait(this.state.ipfs_delay)
    // var selected_gateway = gateways[Math.round(Math.random() * 11)]
    var selected_gateway = gateways[0]
    selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS. Status: ${response}`);
      }
      var data = await response.text();
      data = this.decrypt_storage_object(data)
      var json = JSON.parse((JSON.parse(data)).data);
      return json
      // Do something with the retrieved data
    } catch (error) {
      console.log('Error fetching web3.storage file: ', error)

      if(depth<5){
        return this.fetch_objects_data_from_web3(cid, depth+1)
      }
    }
    
  }




  store_data_in_nft_storage = async (_data, unencrypt_image) => {
    // var data = unencrypt_image ? _data: this.encrypt_storage_data(_data)
    // const NFT_STORAGE_TOKEN = `${process.env.REACT_APP_NFT_STORAGE_ACCESS_TOKEN}`
    // const client = new NFTStorage({ token: NFT_STORAGE_TOKEN })

    // const someData = new Blob([data])
    // const cid = await client.storeBlob(someData)

    // return cid;
  }

  fetch_objects_data_from_nft_storage = async (cid, depth) => {
    await this.wait(this.state.ipfs_delay)

    var gateways = [
      `https://ipfs.io/ipfs/${cid}`,
      `https://gateway.ipfs.io/ipfs/${cid}`,
      `https://cloudflare-ipfs.com/ipfs/${cid}`,
      `https://dweb.link/ipfs/${cid}`,
      // `https://gateway.pinata.cloud/ipfs/${cid}`,
      `https://nftstorage.link/ipfs/${cid}`,
      `https://hardbin.com/ipfs/${cid}`,
      `https://4everland.io/ipfs/${cid}`,
      `https://cf-ipfs.com/ipfs/${cid}`,
      `https://ipfs.decentralized-content.com/ipfs/${cid}`,
      `https://ipfs.eth.aragon.network/ipfs/${cid}`,
      `https://pz-acyuix.meson.network/ipfs/${cid}`,
      `https://fleek.ipfs.io/ipfs/${cid}`,
      `https://ipfs.w3s.link/ipfs/${cid}`,
    ]

    var gateways = [
      `https://nftstorage.link/ipfs/${cid}`
    ]
    
    await this.wait(this.state.ipfs_delay)
    // var selected_gateway = gateways[Math.round(Math.random() * 12)]
    var selected_gateway = gateways[0]
    selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS. Status: ${response}`);
      }
      var data = await response.text();
      data = this.decrypt_storage_object(data)
      return JSON.parse(data);
      // Do something with the retrieved data
    } catch (error) {
      console.log('Error fetching nft storage file: ', error)

      if(depth<5){
        return this.fetch_objects_data_from_nft_storage(cid, depth+1)
      }
    }
  }





  store_data_in_chainsafe_storage = async(_data, unencrypt_image, tags_obj) => {
    // var data = unencrypt_image ? _data: (tags_obj != null ? this.encrypt_storage_object(_data, tags_obj) :this.encrypt_storage_data(_data))
    // const CHAINSAFE_STORAGE_KEY = `${process.env.REACT_APP_CHAINSAFE_API_KEY}`
    // const CHAINSAFE_STORAGE_BUCKET_ID = `${process.env.REACT_APP_CHAINSAFE_BUCKET_ID}`
   
    // const form = new FormData();
    // const now = Date.now()
    // const file_data = this.make_file(data, (makeid(32)+now))
    // form.append('file', file_data);
    // form.append('path', '/');

    // var request = `https://api.chainsafe.io/api/v1/bucket/${CHAINSAFE_STORAGE_BUCKET_ID}/upload`
    // var request_data = {
    //   method: 'POST',
    //   headers: {
    //     'Authorization': `Bearer ${CHAINSAFE_STORAGE_KEY}`
    //   },
    //   body: form
    // }

    // try{
    //   const response = await fetch(request, request_data);
    //   if (!response.ok) {
    //     console.log(response)
    //     // throw new Error(`Failed to retrieve data. Status: ${response}`);
    //     return '';
    //   }
    //   var data = await response.text();
    //   var parsed_obj = JSON.parse(data);
    //   var cid = parsed_obj['files_details'][0]['cid']
    //   return cid
    // }
    // catch(e){
    //   console.log(e)
    //   return ''
    // }
  }

  make_file(data, file_name){
    const obj = { data: data }
    const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })
    // const now = Date.now()
    return new File([blob], `${file_name}.json`)
  }

  fetch_file_data_from_respective_storage = async (cid, storage_id, file_name, depth) => {
    if(storage_id == 'ni'){
      // console.log('datas', 'file is a nitro object, fetching from nitro storage instead...')
      // return await this.fetch_file_data_from_nitro_storage(cid, depth)
      return;
    }
    await this.wait(this.state.ipfs_delay)
    var gateways = [
      `https://ipfs.chainsafe.io/ipfs/${cid}`,
      `https://${cid}.ipfs.w3s.link/${file_name}.json`,
      `https://ipfs.io/ipfs/${cid}`,
    ]
    await this.wait(this.state.ipfs_delay)
    var obje = {'ch':gateways[0], 'w3':gateways[1], 'in':gateways[2]}
    var selected_gateway = obje[storage_id]
    if(storage_id == 'ch' || storage_id == 'in'){
      selected_gateway = this.get_selected_gateway_if_custom_set(cid, selected_gateway)
    }else{
      selected_gateway = this.get_selected_gateway_if_custom_set2(cid, selected_gateway, file_name)
    }
    // console.log('datas', cid, storage_id)
    try {
      const response = await fetch(selected_gateway);
      if (!response.ok) {
        throw new Error(`Failed to retrieve data from IPFS`);
      }
      var data = await response.text();
      var encrypted_data = (JSON.parse(data)).data
      // console.log('stackdata','encrypted data', encrypted_data)
      var unencrypted_data = this.decrypt_storage_object(encrypted_data)
      // console.log('stackdata','decrypted data', unencrypted_data)
      var json = JSON.parse(unencrypted_data);
      // console.log('stackdata','decrypted data', json)
      return json
      // Do something with the retrieved data
    } catch (error) {
      // console.log('datas', error)
      if(depth<2){
        return this.fetch_file_data_from_respective_storage(cid, storage_id, file_name, depth+1)
      }
    }
  }

  get_selected_gateway_if_custom_set2(cid, default_gateway, file_name){
    if(this.state.custom_gateway != ''){
      var my_gateway = `${this.state.custom_gateway}`
      var new_gateway = my_gateway.replace('cid', cid)
      if(new_gateway.endsWith('/')){
        return `${new_gateway}${file_name}.json`
      }else{
        return `${new_gateway}/${file_name}.json`
      }
    }else{
      return default_gateway
    }
  }


  fetch_multiple_file_datas_from_nitro_storage = async (ecid_objs, original_cids) => {
    var search_data = {}
    var search_data_file_types = {}
    var search_data_cids = {}
    ecid_objs.forEach((ecid_obj, index) => {
      var cid = ecid_obj['cid']
      var filetype = ecid_obj['filetype']
      var split_cid_array = cid.split('-');
      var e5_id = split_cid_array[0]
      var nitro_cid = split_cid_array[1]
      var nitro_url = this.get_nitro_link_from_e5_id(e5_id)
      if(nitro_url != null){
        if(search_data[nitro_url] == null){
          search_data[nitro_url] = []
        }
        search_data[nitro_url].push(nitro_cid)
        search_data_file_types[nitro_cid] = filetype
        search_data_cids[nitro_cid] = original_cids[index]
      }
    });

    if(this.fetch_index == null){
      this.fetch_index = {}
    }

    const search_index = JSON.stringify(original_cids)
    if(this.fetch_index[search_index] == null){
      const nitro_keys = Object.keys(search_data)

      this.fetch_index[search_index] = {'search_item_count':nitro_keys.length, 'successful':0}
      nitro_keys.forEach(nitro_url => {
        const cids = search_data[nitro_url]
        this.fetch_multiple_file_datas_from_one_nitro_storage(nitro_url, cids, search_data_file_types, search_data_cids, search_index)
      });

      while (this.fetch_index[search_index]['search_item_count'] > this.fetch_index[search_index]['successful']) {
        if (this.fetch_index[search_index]['search_item_count'] == this.fetch_index[search_index]['successful']) break;
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }
  }

  fetch_multiple_file_datas_from_one_nitro_storage = async (nitro_url, nitro_cids, search_data_file_types, search_data_cids, search_index) => {
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes:nitro_cids}),
    });
    var request = `${nitro_url}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var object_data = obj['data']
      var files_to_fetch_view_data = []
      for(var s=0; s<nitro_cids.length; s++){
        const nitro_cid = nitro_cids[s]
        const filetype = search_data_file_types[nitro_cid]
        var cid_data = object_data[nitro_cid]
        if(cid_data != null){
          var confirmation_hash = await this.generate_hash(JSON.stringify(cid_data))
          if(confirmation_hash != nitro_cid){
            console.log('apppage', nitro_cid, 'data has been modified', confirmation_hash)
            return null
          }
          var file_pointer_link = cid_data['data']
          if(file_pointer_link.includes('-')){
            var split_cid_array2 = file_pointer_link.split('-');
            var e5_id2 = split_cid_array2[0]
            var nitro_cid2 = split_cid_array2[1]

            var nitro_url = this.get_nitro_link_from_e5_id(e5_id2)
            var content_type = this.get_file_extension(cid_data['name'])
            if(nitro_url != null){
              cid_data['data'] = `${nitro_url}/stream_file/${content_type}/${nitro_cid2}.${content_type}`
              cid_data['hash'] = nitro_cid2
              if(cid_data['nitro'] == null){
                cid_data['nitro'] = e5_id2
              }

              if(!files_to_fetch_view_data.includes(nitro_cid2)) files_to_fetch_view_data.push(nitro_cid2);
            }
          }
          if(filetype == 'lyric'){
            cid_data['lyrics'] = await this.load_lyric_subtitle_data(cid_data, true)
          }
          else if(filetype == 'subtitle'){
            cid_data['subtitles'] = cid_data['data']
            // cid_data['subtitles'] = await this.load_lyric_subtitle_data(cid_data, false)
          }

          this.store_in_local_storage(search_data_cids[nitro_cid], cid_data);
          if(filetype == 'video'){
            this.load_and_store_video_thumbnail(search_data_cids[nitro_cid], cid_data)
          }
          var clone = structuredClone(this.state.uploaded_data)
          try{
            if(clone[filetype] == null) clone[filetype] = {}
            clone[filetype][search_data_cids[nitro_cid]] = cid_data
            this.setState({uploaded_data: clone})
          }catch(e){
            console.log('datas', e)
          }
        }
      }
      this.fetch_index[search_index]['successful']++
      if(files_to_fetch_view_data.length > 0){
        this.fetch_multiple_file_viewcounts_from_one_nitro_storage(nitro_url, files_to_fetch_view_data)
      }
    }
    catch(e){
      console.log('datas', 'error', e)
      this.fetch_index[search_index]['successful']++
    }
  }

  fetch_multiple_file_viewcounts_from_one_nitro_storage = async (nitro_url, files_to_fetch_view_data) => {
    const arg_obj = {
      files: files_to_fetch_view_data,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${nitro_url}/streams`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('fetch_view_data', obj)
      if(obj.success != false){
        var file_streaming_data_clone = structuredClone(this.state.file_streaming_data)
        for(var f=0; f<files_to_fetch_view_data.length; f++){
          const file = files_to_fetch_view_data[f]
          const files_view_count = obj.views[file]
          const files_stream_count = obj.streams[file]
          const files_renewal_years = obj.renewal_years == null ? [] : obj.renewal_years[file]
          const is_file_deleted = obj.file_status == null ? false : obj.file_status[file]
          file_streaming_data_clone[file] = {files_view_count, files_stream_count, files_renewal_years, is_file_deleted}
        }
        this.setState({file_streaming_data: file_streaming_data_clone})
      }
    }
    catch(e){
      console.log('fetch_view_data', e)
    }
  }

  get_nitro_link_from_e5_id(e5_id){
    var all_nitro_pointer_mappings = this.get_all_sorted_objects_mappings(this.state.nitro_links)
    return all_nitro_pointer_mappings[e5_id]
  }

  load_lyric_subtitle_data = async (cid_data, is_lyric) => {
    var link = cid_data['data']
    try {
      // Fetch the image as a blob
      const response = await fetch(link);
      if (!response.ok) {
          throw new Error("Failed to fetch lyric data");
      }
      var plaintext = await response.text()
      if(is_lyric == true){
        return this.parseLyric(plaintext)
      }
      return plaintext
    } catch (error) {
      console.error("Error downloading the lyric data:", error);
    }
  }

  parseLyric(lrc) {
    const regex = /^\[(?<time>\d{2}:\d{2}(.\d{2})?)\](?<text>.*)/;
    // split lrc string to individual lines
    const lines = lrc.split("\n");
    const output = [];

    lines.forEach(line => {
        const match = line.match(regex);
        if (match == null) return;
        const { time, text } = match.groups;
        output.push({
            time: this.parseTime(time),
            text: text.trim()
        });
    });
    return output
  }

  parseTime(time) {
    const minsec = time.split(":");

    const min = parseInt(minsec[0]) * 60;
    const sec = parseFloat(minsec[1]);

    return min + sec;
  }







  upload_multiple_files_to_web3_or_chainsafe = async (datas, type) => {
    this.prompt_top_notification(this.getLocale()['1593bq']/* Uploading.. */, 8000)
    if(this.state.web3_account_email != ''){
      //upload to web3
      const client = await createW3UpClient()
      const myAccount = await client.login(this.state.web3_account_email)
      while (true) {
        const res = await myAccount.plan.get()
        if (res.ok) break
        console.log('stackdata','Waiting for payment plan to be selected...')
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      var data_files = []
      for(var i=0; i<datas.length; i++){
        var _data = datas[i]
        var file_name = _data['name']
        data_files.push(this.make_file2(_data['data'], file_name))
      }
      //upload the streamable files
      const streamable_cid_obj = await client.uploadDirectory(data_files)
      var streamable_cid = streamable_cid_obj.toString()

      var files = []
      for(var i=0; i<datas.length; i++){
        var _data = structuredClone(datas[i])
        var file_name = 'data'+i
        _data['data'] = `https://${streamable_cid}.ipfs.w3s.link/${_data['name']}`
        files.push(this.make_file(this.encrypt_storage_data(JSON.stringify(_data)), file_name))
      }
      const directoryCid = await client.uploadDirectory(files)
      var cid = directoryCid.toString()
      var e_cids = []
      var cids = []
      for(var i=0; i<datas.length; i++){
        var file_name = 'data'+i
        var _data = datas[i]
        const ecid = _data['type']+'_'+cid+'.w3'+','+file_name
        e_cids.push(ecid)
        cids.push(cid)
      }
      this.when_uploading_multiple_files_complete(e_cids, cids, datas)
      this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 9000)
    }else{
      //upload to chainsasfe
      var e_cids = []
      var cids = []
      for(var i=0; i<datas.length; i++){
        var _data = datas[i]
        var cid = await this.store_data_in_infura2(JSON.stringify(_data), null, null)
        if(cid == ''){
          this.prompt_top_notification(this.getLocale()['1593bo']/* Something went wrong with the upload. */, 5000)
          return;
        }else{
          var e_cid = _data['type']+'_'+cid+'.in'
          e_cids.push(e_cid)
          cids.push(cid)
        }
      }
      this.when_uploading_multiple_files_complete(e_cids, cids, datas)
      this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 9000)
      
      this.setState({storage_permissions:this.getLocale()['1428']/* 'enabled' */})
      var me = this;
      setTimeout(function() {
        me.set_cookies()
      }, (1 * 1000));
    }
  }

  upload_multiple_files_to_nitro_node = async (datas, type, nitro_object, node_details) => {
    this.prompt_top_notification(this.getLocale()['1593bq']/* Uploading.. */, 8000)
    var file_datas = []
    var file_types = []
    var total_size = 0
    var file_sizes = []
    for(var i=0; i<datas.length; i++){
      var data = datas[i]
      file_datas.push(data['data'])
      file_types.push(this.get_file_extension(data['name']))
      total_size += data['size']
      file_sizes.push(data['size'])
    }

    var file_names = await this.upload_multiple_datas_to_nitro_node(file_datas, file_types, nitro_object, node_details, total_size, file_sizes)
    if(file_names == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    // console.log('datas', 'uploaded nitro file names', file_names)

    var nitro_object_e5_id = nitro_object['e5_id']
    var final_objects = []
    var datas_clone = JSON.parse(JSON.stringify({'data':datas}))['data']
    for(var i=0; i<datas_clone.length; i++){
      var data2 = structuredClone(datas_clone[i])
      var file_cid = file_names[i]
      var link = nitro_object_e5_id+'-'+file_cid
      data2['data'] = link
      final_objects.push(JSON.stringify(data2))
    }

    var file_object_cids = await this.upload_file_objects_to_nitro(final_objects, nitro_object, node_details)
    if(file_object_cids == null){
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    console.log('file_object_cids', 'file_object_cids', file_object_cids)

    var e_cids = []
    for(var i=0; i<datas.length; i++){
      var cid = nitro_object_e5_id+'-'+file_object_cids[i]
      var _data = datas[i]
      const ecid = _data['type']+'_'+cid+'.ni'+',0';
      e_cids.push(ecid)
    }

    this.when_uploading_multiple_files_complete(e_cids, '', datas)
    this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 2000)
    this.load_my_account_storage_info(nitro_object)

    this.setState({storage_permissions:this.getLocale()['1428']/* 'enabled' */})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));

  }




  prompt_confirmation_for_arweave_upload = async (data, type) => {
    var wallet_data = this.state.coin_data['AR']
    if(wallet_data != null){
      const wallet = wallet_data['wallet']
      const balance = wallet_data['balance']
      const balance_in_ar = arweave.ar.winstonToAr(balance.toString())
      try{
        var transaction = await arweave.createTransaction({
          data: data['data']
        }, wallet.key);
        transaction.addTag('Content-Type', this.get_file_mimetype(this.get_file_extension(data['name'])));
        transaction.addTag('Client', 'E5')
        transaction.addTag('Version', this.state.version)
        await arweave.transactions.sign(transaction, wallet.key);
        const transaction_hash = transaction['id']
        const transaction_reward = transaction.reward
        const transaction_reward_in_ar = arweave.ar.winstonToAr(transaction_reward.toString())

        const dialog_data = {'hash':transaction_hash, 'reward':transaction_reward, 'data':data, 'type':type, 'address':wallet.address, 'balance':balance, 'balance_in_ar':balance_in_ar, 'transaction_reward_in_ar':transaction_reward_in_ar}
        this.show_dialog_bottomsheet(dialog_data, 'confirm_upload_file_to_arweave')
      }catch(e){
        console.log('Error uploading data: ', e)
        this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      }
    }
  }

  upload_file_to_arweave = async (data) => {
    this.setState({is_uploading_to_arweave: true})
    this.prompt_top_notification(this.getLocale()['1593bq']/* Uploading.. */, 8000)
    var wallet_data = this.state.coin_data['AR']
    if(wallet_data != null){
      const wallet = wallet_data['wallet']
      try{
        var transaction = await arweave.createTransaction({
          data: data['data']
        }, wallet.key);
        transaction.addTag('Content-Type', this.get_file_mimetype(this.get_file_extension(data['name'])));
        transaction.addTag('Client', 'E5')
        transaction.addTag('Version', this.state.version)
        await arweave.transactions.sign(transaction, wallet.key);

        const transaction_hash = transaction['id']
        const transaction_reward = transaction.reward
        const transaction_reward_in_ar = arweave.ar.winstonToAr(transaction_reward.toString())

        this.setState({current_upload_data: data, current_upload_transaction_reward: {transaction_reward: transaction_reward, transaction_reward_in_ar: transaction_reward_in_ar, transaction_hash: transaction_hash}})
        var uploader = await arweave.transactions.getUploader(transaction);
        this.setState({uploader_percentage: 0})
        while (!uploader.isComplete) {
          await uploader.uploadChunk();
          this.setState({uploader_percentage: uploader.pctComplete})
        }

        this.prompt_top_notification(this.getLocale()['2738g']/* 'Arweave uploade complete, waiting for 1 network confirmation...' */, 15000)

        this.is_uploading_arweave_file2 = true
        while (this.is_uploading_arweave_file2 == true) {
          if (this.is_uploading_arweave_file2 == false) break
          console.log('appdata','Waiting for data to be uploaded')
          this.check_if_required_confirmations2(transaction_hash)
          await new Promise(resolve => setTimeout(resolve, 15_000))
        }
        this.update_coin_balances('AR', false)

        var e_cids = []
        var cids = []
        var _data = structuredClone(data)
        _data['data'] = `https://arweave.net/${transaction_hash}`
        // var cid = await this.store_data_in_infura2(JSON.stringify(_data), null, null)
        var cid = await this.store_data_in_nitro(JSON.stringify(_data), null, default_nitro_option, null)
        if(cid == ''){
          this.prompt_top_notification(this.getLocale()['1593bo']/* Something went wrong with the upload. */, 5000)
          this.setState({is_uploading_to_arweave: false})
          return;
        }else{
          var e_cid = _data['type']+'_'+cid+'.ni'
          e_cids.push(e_cid)
          cids.push(cid)
        }
        this.when_uploading_multiple_files_complete(e_cids, cids, [_data])
        this.prompt_top_notification(this.getLocale()['1593bp']/* Upload Successful. */, 9000)
        
        this.setState({storage_permissions:this.getLocale()['1428']/* 'enabled' */})
        var me = this;
        setTimeout(function() {
          me.set_cookies()
        }, (1 * 1000));
        this.setState({is_uploading_to_arweave: false})
      }catch(e){
        console.log('Error uploading data: ', e)
        this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
        this.setState({is_uploading_to_arweave: false})
      }
    }
  }

  check_if_required_confirmations2 = async (transaction_hash) => {
    const pending_status = await arweave.transactions.getStatus(transaction_hash)
    if(pending_status.confirmed != null && pending_status.confirmed.number_of_confirmations != null && pending_status.confirmed.number_of_confirmations > 1){
      this.is_uploading_arweave_file2 = false
    }
    console.log(pending_status)
  }



  get_file_mimetype(extension){
    if(extension == 'lrc'){
      return 'text/plain'
    }
    else if(extension == 'vtt'){
      return 'text/vtt'
    }
    const mime = require("mime-types");
    return mime.lookup(extension)
  }

  get_file_extension(fileName) {
    const lastDotIndex = fileName.lastIndexOf('.');
    if (lastDotIndex === -1 || lastDotIndex === 0) {
      return null; // No extension or hidden file
    }
    return fileName.substring(lastDotIndex + 1);
  }

  upload_multiple_datas_to_nitro_node = async (file_datas, file_types, nitro_object, node_details, total_size, file_sizes) => {
    var block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_storage_recipinet_accounts'])
    if(block_hash_and_signature == null){
      console.log('apppage', 'upload_multiple_datas_to_nitro_node', 'failed to load block hash and signature')
      return null;
    }

    console.log('apppage', 'filetypes', file_types, this.get_file_mimetype(this.get_file_extension(file_types[0])))

    if(total_size < (5.3 * 1024 * 1024)){
      var node_url = nitro_object['ipfs'].node_url
      var arg_obj = {
        signature_data: block_hash_and_signature.data,
        signature:block_hash_and_signature.signature,
        file_datas: file_datas,
        file_types: file_types,
        e5: block_hash_and_signature.e5,
      }

      var body = {
        method: "POST", // Specify the HTTP method
        headers: {
          "Content-Type": "application/json" // Set content type to JSON
        },
        body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
      }

      var request = `${node_url}/store_files`
      try{
        const response = await fetch(request, body);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        if(obj.success == false){
          console.log('apppage','Upload was not successful', obj)
          return null
        }else{
          obj.files.forEach(async (encoded_data_name, index) => {
            var valid_hash = await this.get_valid_data_hash(file_datas[index], true)
            if(valid_hash != encoded_data_name){
              console.log('apppage','Data has beeen tampered with, reverting', valid_hash, encoded_data_name)
              throw new Error(`Data has beeen tampered with, reverting`);
            }
          });
          return obj.files
        }
      }
      catch(e){
        return null
      }
    }else{
      const files = []
      for(var e=0; e<file_datas.length; e++){

        const block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_storage_recipinet_accounts'])
        if(block_hash_and_signature == null){
          return null;
        }

        const focused_data = file_datas[e]
        const base64Data = focused_data.split(",")[1];
        const encoded_data = Buffer.from(base64Data, "base64");
        const extension = await this.get_valid_data_hash(encoded_data, false)
        const totalSize = encoded_data.length;

        const node_url = nitro_object['ipfs'].node_url
        const arg_obj = {
          signature_data: block_hash_and_signature.data,
          signature: block_hash_and_signature.signature,
          e5: block_hash_and_signature.e5,
          file_length: totalSize + (5 * 1024 * 1024),
          file_type: file_types[e],
          upload_extension: extension
        }

        const body = {
          method: "POST", // Specify the HTTP method
          headers: {
            "Content-Type": "application/json" // Set content type to JSON
          },
          body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
        }
        const request = `${node_url}/reserve_upload`
        try{
          const response = await fetch(request, body);
          if (!response.ok) {
            console.log('uploader', response)
            throw new Error(`Failed to retrieve data. Status: ${response}`);
          }
          var data = await response.text();
          var obj = JSON.parse(data);
          if(obj.success == false){
            console.log('uploader','error', obj.message)
            return null
          }else{
            // extension = obj.extension
          }
        }
        catch(e){
          console.log('uploader','error', e)
          return null
        }

        files.push(extension)
        this.is_uploading_file = true
        const xhr = new XMLHttpRequest();
        const url = `${node_url}/upload/${extension}`;
        xhr.open("POST", url);
        const me = this;
        xhr.upload.onprogress = (event) => {
          if (event.lengthComputable) {
            const percent = ((event.loaded / event.total) * 100).toFixed(2);
            me.setState({nitro_upload_progress_data:{'percentage':percent, 'file_number':e+1, 'file_count':file_datas.length ,'total_size':total_size}})
          }
        };
        
        var success = true;
        xhr.onload = () => {
          console.log('uploader',"Upload complete! Server said:", xhr.responseText);
          var obj = JSON.parse(data)
          if(obj.success == false){
            console.log('uploader','error during upload', obj.message)
            success = false
          }else{
            success = true
          }
          this.is_uploading_file = false
        };

        xhr.onerror = () => {
          console.error('uploader',"Upload failed!");
          success = false
          this.is_uploading_file = false
        };

        xhr.setRequestHeader("Content-Type", "text/plain");
        xhr.send(encoded_data);

        while (this.is_uploading_file == true) {
          if (this.is_uploading_file == false) break
          await new Promise(resolve => setTimeout(resolve, 1000))
        }

        if(success == false){
          return null
        }
      }
      return files
    }
  }

  get_block_hash_and_signature = async (target_storage_recipinet_accounts) => {
    const e5 = Object.keys(target_storage_recipinet_accounts)[0]
    try{
      const web3 = new Web3(this.get_web3_url_from_e5(e5))
      var current_block_number = parseInt(await web3.eth.getBlockNumber())
      var round_down_value = await this.get_round_down_value(web3, current_block_number)
      var round_down_block = this.round_down(current_block_number, round_down_value)
      var current_block = await web3.eth.getBlock(round_down_block);
      var block_hash = current_block.hash.toString()

      var address = this.state.accounts[e5].address
      web3.eth.accounts.wallet.add(this.state.accounts[e5].privateKey);
      var signature = await web3.eth.sign(block_hash, address)
      return {data: block_hash, signature: signature, e5: this.state.selected_e5}
    }catch(e){
      console.log(e)
      return null
    }
  }

  round_down(number, round_down_value){
    var n = (Math.floor(number / round_down_value)) * round_down_value
    return n
  }

  get_round_down_value = async (web3, blockNumber) => {
    try{
      const currentBlock = await web3.eth.getBlock(blockNumber - 1);
      const previousBlock = await web3.eth.getBlock(blockNumber - 2);
      const miningTime = currentBlock.timestamp - previousBlock.timestamp;
      return Math.round(1 / (miningTime / 12000))
    }
    catch(e){
      console.log(e)
      return 10
    }
  }

  upload_file_objects_to_nitro = async (file_objects, nitro_object, node_details) => {
    var block_hash_and_signature = await this.get_block_hash_and_signature(node_details['target_storage_recipinet_accounts'])
    if(block_hash_and_signature == null){
      console.log('apppage','upload_file_objects_to_nitro', 'failed to load block hash and signature')
      this.prompt_top_notification(this.getLocale()['1593dc']/* something went wrong. */, 8000)
      return;
    }

    var node_url = nitro_object['ipfs'].node_url
    var arg_obj = {
      signature_data: block_hash_and_signature.data,
      signature:block_hash_and_signature.signature,
      e5: block_hash_and_signature.e5,
      file_datas: file_objects,
    }

    var body = {
      method: "POST", // Specify the HTTP method
      headers: {
        "Content-Type": "application/json" // Set content type to JSON
      },
      body: JSON.stringify(arg_obj) // Convert the data object to a JSON string
    }

    var request = `${node_url}/store_data`
    try{
      const response = await fetch(request, body);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      console.log('upload_file_objects_to_nitro', 'obj', obj)
      if(obj.success == false){
        return null
      }else{
        obj.files.forEach(async (encoded_data_name, index) => {
          var valid_hash = await this.get_valid_data_hash(file_objects[index], false)
          if(valid_hash != encoded_data_name){
            console.log('apppage','Data has beeen tampered with, reverting', valid_hash, encoded_data_name)
            throw new Error(`Data has beeen tampered with, reverting`);
          }
        });
        return obj.files
      }
    }
    catch(e){
      return null
    }
  }

  get_valid_data_hash = async (data, encoded) => {
    if(encoded == true){
      const base64Data = data.split(",")[1];
      const binaryData = Buffer.from(base64Data, "base64");
      return await this.generate_hash(binaryData)
    }
    return await this.generate_hash(data)
  }









  when_uploading_multiple_files_complete(e_cids, cids, datas){
    // console.log('datas', datas)
    var clone = structuredClone(this.state.uploaded_data)
    var cid_clone = this.state.uploaded_data_cids.slice()
    var cid_clone_2 = this.state.uncommitted_upload_cids.slice()
    for(var i=0; i<datas.length; i++){
      var _data = datas[i]
      if(clone[_data['type']] == null) clone[_data['type']] = {}
      clone[_data['type']][e_cids[i]] = _data
      cid_clone.push(e_cids[i])
      cid_clone_2.push(e_cids[i])
    }

    this.setState({uploaded_data: clone, uploaded_data_cids: cid_clone, update_data_in_E5: true, uncommitted_upload_cids: cid_clone_2})
    var me = this;
    setTimeout(function() {
      me.set_cookies()
    }, (1 * 1000));
  }

  make_file2(dataURL, file_name){
    const [metadata, base64Data] = dataURL.split(',');
    const mimeType = metadata.match(/:(.*?);/)[1]; // Extract the MIME type

    // Decode the Base64 data into binary data
    const binaryString = atob(base64Data);
    const binaryData = new Uint8Array(binaryString.length);

    for (let i = 0; i < binaryString.length; i++) {
      binaryData[i] = binaryString.charCodeAt(i);
    }

    // Create a Blob from the binary data
    const blob = new Blob([binaryData], { type: mimeType });
    return new File([blob], file_name, { type: mimeType });
  }







  encrypt_storage_object(data, tags_obj){
    const APP_KEY = `${process.env.REACT_APP_APPKEY_API_KEY}`
    var ciphertext = CryptoJS.AES.encrypt(data, APP_KEY).toString();
    const compressed = pako.deflate(base64ToUint8Array(ciphertext))/* Im not sure if compressing data then converting it to base64 makes much of a difference in the long run for storage efficiency. Im yet to actually gauge if this a good thing since storage objects cant exceeed the limit i've set in the state of about 350Kb... */
    var final_obj = {'ciphertext':uint8ArrayToBase64(compressed), 'tags':tags_obj, 'c'/* compressed */: true}
    return JSON.stringify(final_obj)
  }

  encrypt_storage_object_using_provided_key(data, tags_obj, key){
    const APP_KEY = key
    var ciphertext = CryptoJS.AES.encrypt(data, APP_KEY).toString();
    const compressed = pako.deflate(base64ToUint8Array(ciphertext))/* Im not sure if compressing data then converting it to base64 makes much of a difference in the long run for storage efficiency. Im yet to actually gauge if this a good thing since storage objects cant exceeed the limit i've set in the state of about 350Kb... */
    var final_obj = {'ciphertext':uint8ArrayToBase64(compressed), 'tags':tags_obj, 'c'/* compressed */: true}
    return JSON.stringify(final_obj)
  }

  decrypt_storage_object_using_provided_key(data, key){
    const APP_KEY = key
    var cipher_text = data
    try{
      var json_object = JSON.parse(data)
      cipher_text = json_object['ciphertext']
      if(json_object['c'] != null && json_object['c'] == true){
        //the object was compressed
        // console.log('apppage', 'found compressed object...')
        cipher_text = uint8ArrayToBase64(pako.inflate(base64ToUint8Array(cipher_text)))
        // console.log('apppage', 'uncompressed ciphertext', cipher_text)
      }
      // console.log('apppage', 'obtained cyphertext in the form of an object', json_object)
    }catch(f){
      // console.log('apppage', f)
    }
    try{
      var bytes = CryptoJS.AES.decrypt(cipher_text, APP_KEY);
      console.log('sigbytes', bytes.sigBytes)
      if (bytes && bytes.sigBytes > 0 && bytes.sigBytes < 1_300_000) {
        var originalText = bytes.toString(CryptoJS.enc.Utf8);
        return originalText
      } else {
        return data
      }
    }catch(e){
      console.error('apppage',"Decryption failed:", e);
      return data
    }
  }

  decrypt_storage_object(data){
    const APP_KEY = `${process.env.REACT_APP_APPKEY_API_KEY}`
    var cipher_text = data
    try{
      var json_object = JSON.parse(data)
      cipher_text = json_object['ciphertext']
      if(json_object['c'] != null && json_object['c'] == true){
        //the object was compressed
        // console.log('apppage', 'found compressed object...')
        cipher_text = uint8ArrayToBase64(pako.inflate(base64ToUint8Array(cipher_text)))
        // console.log('apppage', 'uncompressed ciphertext', cipher_text)
      }
      // console.log('apppage', 'obtained cyphertext in the form of an object', json_object)
    }catch(f){
      // console.log('apppage', f)
    }
    try{
      var bytes = CryptoJS.AES.decrypt(cipher_text, APP_KEY);
      console.log('sigbytes', bytes.sigBytes)
      if (bytes && bytes.sigBytes > 0 && bytes.sigBytes < 1_300_000) {
        var originalText = bytes.toString(CryptoJS.enc.Utf8);
        return originalText
      } else {
        return data
      }
    }catch(e){
      console.error('apppage',"Decryption failed:", e);
      return data
    }
  }

  decrypt_storage_object2(data){
    const APP_KEY = `${process.env.REACT_APP_APPKEY_API_KEY}`
    var cipher_text = data
    if(isJsonObject(data)){
      try{
        cipher_text = data['ciphertext']
        if(data['c'] != null && data['c'] == true){
          //the object was compressed
          cipher_text = uint8ArrayToBase64(pako.inflate(base64ToUint8Array(cipher_text)))
        }
      }catch(f){
        // console.log('apppage',f)
      }
    }else{
      try{
        var json_object = JSON.parse(data)
        cipher_text = json_object['ciphertext']
        if(json_object['c'] != null && json_object['c'] == true){
          //the object was compressed
          cipher_text = uint8ArrayToBase64(pako.inflate(base64ToUint8Array(cipher_text)))
        }
      }catch(f){
        // console.log(f)
      }
    }
    try{
      var bytes  = CryptoJS.AES.decrypt(cipher_text, APP_KEY);
      if (bytes && bytes.sigBytes > 0 && bytes.sigBytes < 1_300_000) {
        var originalText = bytes.toString(CryptoJS.enc.Utf8);
        return originalText
      } else {
        console.error('apppage',"Decryption failed: invalid bytes output.");
        return data
      }
    }catch(e){
      console.log('apppage', e)
      return data
    }
  }

  encrypt_storage_data(data){
    const APP_KEY = `${process.env.REACT_APP_APPKEY_API_KEY}`
    var ciphertext = CryptoJS.AES.encrypt(data, APP_KEY).toString();
    return ciphertext
  }






  fetch_from_storage = async(cid) => {
    if(this.gateway_traffic_cache == null){
      this.gateway_traffic_cache = {}
    }
    var data_or_pointer = this.gateway_traffic_cache[cid];
    if(data_or_pointer != null){
      return data_or_pointer
    }else{
      if(this.gateway_traffic_cache_pointers != null){
        var pointer = this.gateway_traffic_cache_pointers[cid]
        if(pointer != null){
          var storage_object = await this.load_data_from_indexdb(pointer.toString())
          return storage_object[cid]
        }
      }
    }
  }

  store_in_local_storage(cid, data){
    if(this.gateway_traffic_cache == null){
      this.gateway_traffic_cache = {}
    }
    this.gateway_traffic_cache[cid] = data

    if(this.get_object_size_in_mbs(this.gateway_traffic_cache) > 5.3){
      this.gateway_traffic_cache_pointers_index += 1
      var keys = Object.keys(this.gateway_traffic_cache)
      var store_obj = {}
      if(this.gateway_traffic_cache_pointers == null){
        this.gateway_traffic_cache_pointers = {}
      }
      keys.forEach(key => {
        store_obj[key] = this.gateway_traffic_cache[key]
        this.gateway_traffic_cache_pointers[key] = this.gateway_traffic_cache_pointers_index
      });

      var x = JSON.stringify(store_obj, (key, value) =>
        typeof value === 'bigint'
            ? value.toString()
            : value // return everything else unchanged));
      )
      this.update_data_in_db(x, this.gateway_traffic_cache_pointers_index.toString())
      Object.keys(this.gateway_traffic_cache).forEach(key => delete this.gateway_traffic_cache[key]);
    }
  }

  get_object_size_in_mbs(obj) {
    const bytes = new TextEncoder().encode(JSON.stringify(obj, (_, v) => typeof v === 'bigint' ? v.toString() : v)).length;
    return (bytes / (1024 * 1024)).toFixed(2); // Convert bytes to MB
  }

  wait = async (t) => {
    await this.sleep(t)
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }





  get_balance_from_multiple_exchanges = async (exchanges, account, H52contractInstance, exchanges_depth, e5) => {
    var interacted_exchange_depth_data = await this.load_accounts_exchange_depth_interactions_data(account, e5)
    var exchange_ids = []
    var depths = []
    var positions = []
    for(var j=0; j<exchanges.length; j++){
      var exchange_depth = exchanges_depth[j]
      for(var i=exchange_depth; i>=0; i--){
        if((interacted_exchange_depth_data[exchanges[j]] != null && interacted_exchange_depth_data[exchanges[j]].includes(i)) || i == 0){
          exchange_ids.push(exchanges[j])
          depths.push(i)
          positions.push(j)
        }
      }
    }
    
    var token_balances = await H52contractInstance.methods.f140e(exchange_ids, account, depths).call((error, result) => {});

    var bal = [];
    var balance_data = [];
    for(var i=0; i<token_balances.length; i++){
      var bal_pos = positions[i]
      if(bal_pos == bal.length){
        bal.push(0)
        balance_data.push({})
      }
      var balance = bal[bal_pos]
      var balance_at_depth = bigInt(this.get_actual_number(token_balances[i], depths[i]))
      
      balance = bigInt(balance).add(balance_at_depth)
      bal[bal_pos] = balance.toString().toLocaleString('fullwide', {useGrouping:false})
      balance_data[bal_pos][depths[i]] = token_balances[i].toString().toLocaleString('fullwide', {useGrouping:false})
    }

    for(var k=0; k<exchanges.length; k++){
      var exchange_depth = exchanges_depth[j]
      for(var l=exchange_depth; l>=0; l--){
        if(interacted_exchange_depth_data[exchanges[k]] == null || !interacted_exchange_depth_data[exchanges[k]].includes(l)){
          balance_data[k][l] = '0'
        }
      }
    }



    // return bal
    return { 'bal':bal, 'bal_data':balance_data }
  }

  load_accounts_exchange_depth_interactions_data = async (account_id, e5) => {
    if(account_id < 1000) return {};
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var received_tokens_event_data = null
    var stack_depth_swap_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id}],
        [web3, H52contractInstance, 'power'/* StackDepthSwap */, e5, {p3/* receiver */: account_id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      received_tokens_event_data = all_events[0]
      stack_depth_swap_event_data = all_events[1]
    }else{
      received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id})
      stack_depth_swap_event_data = await this.load_event_data(web3, H52contractInstance, 'power'/* StackDepthSwap */, e5, {p3/* receiver */: account_id})

    }

    var all_event_data = {}
    for(var i=0; i<stack_depth_swap_event_data.length; i++){
      var exchange = stack_depth_swap_event_data[i].returnValues.p1/* exchange */
      var depth = stack_depth_swap_event_data[i].returnValues.p4/* depth_val */
      if(all_event_data[exchange] == null){
        all_event_data[exchange] = []
      }
      if(!all_event_data[exchange].includes(depth)){
        all_event_data[exchange].push(depth)
      }
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      var exchange = received_tokens_event_data[i].returnValues.p1/* exchange */
      var depth = received_tokens_event_data[i].returnValues.p7/* depth */
      if(all_event_data[exchange] == null){
        all_event_data[exchange] = []
      }
      if(!all_event_data[exchange].includes(depth)){
        all_event_data[exchange].push(depth)
      }
    }

    return all_event_data
  }

  get_balance_in_exchange = async (exchange_id, account, e5, addresses) => {
    var interacted_exchange_depth_data = await this.load_accounts_exchange_depth_interactions_data(account, e5)
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = addresses[6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var exchange = this.state.created_token_object_mapping[e5] == null ? null : this.state.created_token_object_mapping[e5][exchange_id];
    var exchanges_depth = 0
    if(exchange != null && exchange['ipfs'] != null){
      exchanges_depth = exchange['ipfs'].default_depth == null ? 0 : exchange['ipfs'].default_depth
    }
    var exchange_ids = []
    var depths = []
    for(var i=exchanges_depth; i>=0; i--){
      if((interacted_exchange_depth_data[exchange_id] != null && interacted_exchange_depth_data[exchange_id].includes(i)) || i == 0){
        exchange_ids.push(exchange_id)
        depths.push(i)
      }
    }
    
    var token_balances = await H52contractInstance.methods.f140e(exchange_ids, account, depths).call((error, result) => {});

    var bal = bigInt('0');
    for(var i=0; i<token_balances.length; i++){
      var balance_at_depth = bigInt(this.get_actual_number(token_balances[i], depths[i]))
      bal = bigInt(bal).add(balance_at_depth)
    }


    return bal
  }

  get_balance_in_exchange_for_multiple_accounts = async (exchange_ids, accounts, e5, addresses, depths, action) => {
      const web3 = new Web3(this.get_web3_url_from_e5(e5));
      const H52contractArtifact = require('./contract_abis/H52.json');
      const H52_address = addresses[6];
      const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
      
      var token_balances = await H52contractInstance.methods.f270(exchange_ids, accounts, depths, 1, action).call((error, result) => {});

      return token_balances
  }

  get_actual_number(number, depth){
    var p = (bigInt(depth).times(72)).toString().toLocaleString('fullwide', {useGrouping:false})
    var depth_vaule = bigInt(('1e'+p))
    return (bigInt(number).times(depth_vaule)).toString().toLocaleString('fullwide', {useGrouping:false})
  }







  // encrypt_data = async () => {
  //   var address = await this.get_accounts_address(1002)
  //   console.log(address)

  //   const web3 = new Web3(this.state.web3);
  //   console.log(this.state.account)
  //   const privateKey = this.state.account.privateKey
  //   var hash = web3.utils.keccak256(privateKey.toString()).slice(34)

  //   // const pubKey = secp256k1.publicKeyCreate(Uint8Array.from(this.state.account.privateKey.slice(1)), false)
  //   // const publicKey = privateKeyToPublicKey(privateKey).toString('hex')
    
  //   var data = 'hello world'
  //   var private_key_to_use = Buffer.from(hash)
  //   const publicKeyA = await ecies.getPublic(private_key_to_use);
  //   // console.log(publicKeyA)
    
  //   const encrypted_data = (await ecies.encrypt(publicKeyA, Buffer.from(data)))
  //   // console.log(encrypted_data)
  //   var string = (new Uint8Array(encrypted_data)).toString()

  //   var uint8array = Uint8Array.from(string.split(',').map(x=>parseInt(x,10)));
  //   // console.log(uint8array)
  //   var plain_text = await ecies.decrypt(private_key_to_use, uint8array)
  //   // console.log(plain_text.toString())


  //   var ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123').toString();
  //   var bytes  = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');
  //   var originalText = bytes.toString(CryptoJS.enc.Utf8);
  //   // console.log(originalText)

  //   this.get_accounts_public_key(1002)
  // }

  // get_accounts_address = async (account_id) => {
  //   const web3 = new Web3(this.state.web3);
  //   const contractArtifact = require('./contract_abis/E5.json');
  //   const contractAddress = this.state.e5_address
  //   const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

  //   return await contractInstance.methods.f289(account_id).call((error, result) => {});
  // }






  get_account_public_key = async () => {
    const web3 = new Web3(this.get_selected_web3_url());
    const privateKey = this.state.accounts[this.state.selected_e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)
    const publicKeyA = await ecies.getPublic(private_key_to_use);
    // var key = (new Uint8Array(publicKeyA)).toString()//oh my god
    var key = this.uint8ToBase64(new Uint8Array(publicKeyA))

    return key
    var object_as_string = JSON.stringify({'key':key})
    var obj_cid = await this.store_objects_data_in_ipfs_using_option(object_as_string)
    return obj_cid
  }

  uint8ToBase64(uint8) {
    return btoa(String.fromCharCode(...uint8));
  }

  get_my_entire_public_key = async () => {
    const web3 = new Web3(this.get_selected_web3_url());
    const privateKey = this.state.accounts[this.state.selected_e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)
    const publicKeyA = await ecies.getPublic(private_key_to_use);
    return (new Uint8Array(publicKeyA)).toString()
  }

  get_account_raw_public_key = async () => {
    const web3 = new Web3(this.get_selected_web3_url());
    const privateKey = this.state.accounts[this.state.selected_e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)
    const publicKeyA = await ecies.getPublic(private_key_to_use);
    return publicKeyA
  }

  encrypt_data_object(tx, key){
    var object_as_string = JSON.stringify(tx)
    var ciphertext = CryptoJS.AES.encrypt(object_as_string, key).toString();
    return ciphertext
  }

  get_accounts_public_key = async (account, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
    var events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:'0'})

    if(events.length == 0){
      events = await this.get_accounts_public_key_from_other_e5s(account, e5)
    }

    if(events.length == 0){
      return ''
    }

    const most_recent_event_data = events[events.length-1].returnValues.p4
    if(!most_recent_event_data.includes('.')){
      try{
        var k = this.base64ToUint8(most_recent_event_data)
        return k
      }catch(e){
        console.log(e)
        return ''
      }
    }
    var obj_key = await this.fetch_objects_data_from_ipfs_using_option(most_recent_event_data)
    
    if(obj_key['key'] != null){
      return Uint8Array.from(obj_key['key'].split(',').map(x=>parseInt(x,10)));
    }
    else{
      return ''
    }
  }

  get_accounts_public_key_from_other_e5s = async(account, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_contract_from_e5(e5)
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    var account_address = await contractInstance.methods.f289(account).call((error, result) => {});
    if(account_address.toString() != '0x0000000000000000000000000000000000000000'){
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.e5s[focused_e5].active == true && focused_e5 != e5){
          const focused_web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const focused_contractAddress = this.get_contract_from_e5(focused_e5)
          const focused_contractInstance = new focused_web3.eth.Contract(contractArtifact.abi, focused_contractAddress);

          var accounts_in_other_e5s = await focused_contractInstance.methods.f167([],[account_address], 2).call((error, result) => {});
          var focused_account_id = accounts_in_other_e5s[0]

          if(focused_account_id != 0){
            const E52contractArtifact = require('./contract_abis/E52.json');
            const E52_address = this.state.addresses[focused_e5][1];
            const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
            var events = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: focused_account_id, p3/* context */:'0'})

            if(events.length != 0){
              return events
            }
          }
        }
      }
    }
    return []
  }

  base64ToUint8(base64) {
    const binary = atob(base64);
    return new Uint8Array([...binary].map(char => char.charCodeAt(0)));
  }

  encrypt_key_with_accounts_public_key_hash = async (key, pub_key_hash) => {
    const encrypted_data = (await ecies.encrypt(pub_key_hash, Buffer.from(key)))
    var string = (new Uint8Array(encrypted_data)).toString()
    return string
  }

  fetch_and_decrypt_ipfs_object = async (encrypted_ipfs_obj, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const privateKey = this.state.accounts[e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)

    if(encrypted_ipfs_obj == null || encrypted_ipfs_obj['recipient_data'] == null){
      return null
    }

    try{
      var my_uniquie_crosschain_identifier = await this.get_my_unique_crosschain_identifier_number()
      var encrypted_key = encrypted_ipfs_obj['recipient_data'][my_uniquie_crosschain_identifier]
      if(encrypted_key == null){
        return null;
      }
      var uint8array = Uint8Array.from(encrypted_key.split(',').map(x=>parseInt(x,10)));
      var my_key = await ecies.decrypt(private_key_to_use, uint8array)
      var encrypted_object = encrypted_ipfs_obj['obj']
    
      var bytes = CryptoJS.AES.decrypt(encrypted_object, my_key.toString());
      var originalText = bytes.toString(CryptoJS.enc.Utf8);
      return JSON.parse(originalText);
    }catch(e){
      console.log(e)
      return null
    }
    
  }


  encrypt_nitro_node_key_with_my_public_key = async (key) => {
    var uint8array = await this.get_account_raw_public_key()
    var encrypted_key = this.encrypt_key_with_accounts_public_key_hash(key, uint8array)
    return encrypted_key
  }

  decrypt_nitro_node_key_with_my_public_key = async (encrypted_key, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const privateKey = this.state.accounts[e5].privateKey
    var hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    var private_key_to_use = Buffer.from(hash)

    var uint8array = Uint8Array.from(encrypted_key.split(',').map(x=>parseInt(x,10)));
    var my_key = await ecies.decrypt(private_key_to_use, uint8array)

    return my_key.toString()
  }







  get_objects_messages = async (id, e5, object) => {
    // for(var i=0; i<this.state.e5s['data'].length; i++){
    //   var focused_e5 = this.state.e5s['data'][i]
    //   const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
    //   const E52contractArtifact = require('./contract_abis/E52.json');
    //   if(this.state.addresses[focused_e5] != null){
    //     const E52_address = this.state.addresses[focused_e5][1];
    //     const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    //     var e5_id = parseInt(e5.replace('E',''))
    //     var cutoff_timestamp = Math.round(Date.now()/1000) - (60*60*24*400)
    //     var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 17, p3/* context */:id, p5: e5_id,})
    //     created_channel_data = created_channel_data.reverse()

    //     if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
    //       await this.fetch_multiple_cids_from_nitro(created_channel_data, 0, 'p4')
    //     }

    //     var is_first_time = this.state.object_messages[id] == null ? true: false
    //     for(var j=0; j<created_channel_data.length; j++){
    //       if(parseInt(created_channel_data[j].returnValues.p6) > cutoff_timestamp){
    //         var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_channel_data[j].returnValues.p4)
    //         if(ipfs_message != null){
    //           ipfs_message['time'] = created_channel_data[j].returnValues.p6
    //           this.fetch_uploaded_files_for_object(ipfs_message)

    //           if(!messages.includes(ipfs_message)){
    //             messages = [ipfs_message].concat(messages)
    //           }
    //           if(is_first_time){
    //             var clone = JSON.parse(JSON.stringify(this.state.object_messages))
    //             clone[id] = messages
    //             this.setState({object_messages: clone})
    //           }
    //         }
    //       }
    //     }
    //   }
    // }

    
    const all_object_comment_events = await this.get_object_comment_events(id, e5, 17)
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(all_object_comment_events, 0, 'p4')
    }
    var messages = []
    var is_first_time = this.state.object_messages[id] == null ? true: false
    for(var j=0; j<all_object_comment_events.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(all_object_comment_events[j].returnValues.p4)
      console.log('apppage', 'ipfs message', ipfs_message)
      if(ipfs_message != null){
        if(ipfs_message['encrypted_data'] != null){
          //channel message was encrypted
          console.log('apppage', 'comment is encrypted, decrypting...')
          const key_used = object['unencrypted_keys'][parseInt(ipfs_message['key_index'])]
          console.log('apppage', 'key used: ', key_used)
          var bytes = CryptoJS.AES.decrypt(ipfs_message['encrypted_data'], key_used.toString());
          var originalText = bytes.toString(CryptoJS.enc.Utf8);
          ipfs_message = JSON.parse(JSON.parse(originalText));
          console.log('apppage', 'parsed object: ', ipfs_message)
        }
        ipfs_message['time'] = all_object_comment_events[j].returnValues.p6
        this.fetch_uploaded_files_for_object(ipfs_message)

        const includes = messages.find(e => e['message_id'] === ipfs_message['message_id'])
        if(includes == null){
          messages.push(ipfs_message)
        }
        if(is_first_time){
          const clone = structuredClone(this.state.object_messages)
          clone[id] = messages
          this.setState({object_messages: clone})
          // await this.wait(150)
        }
      }
    }

    const clone = structuredClone(this.state.object_messages)
    clone[id] = messages
    this.setState({object_messages: clone})
  }

  get_object_comment_events = async (id, e5, target_id) => {
    var all_unsorted_events = []
    const cutoff_timestamp = Math.round(Date.now()/1000) - (60*60*24*400)
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          var e5_id = parseInt(e5.replace('E',''))
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: target_id, p3/* context */:id, p5: e5_id,}])
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index)=> {
        // var focused_e5 = used_e5s[index]
        var m = 0
        for(var l=0; l<event_array.length; l++){
          const event = event_array[l]
          const focused_e5 = 'E'+event.returnValues.p5
          event['e5'] = focused_e5
          if(parseInt(event.returnValues.p6) > cutoff_timestamp){
            var time = parseInt(event.returnValues.p6)/* timestamp */
            if(m!=0){
              const prev_event_object = all_unsorted_events[m-1]
              if(prev_event_object['time'] == time){
                time++
              }
            }
            all_unsorted_events.push({'time':time, 'event':event})
            m++
          }
        }
      });
    }else{
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          const e5_id = parseInt(e5.replace('E',''))
          
          const created_comment_data = (await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: target_id, p3/* context */:id, p5: e5_id,}))
          console.log('apppage', 'loaded_events for e5',focused_e5, created_comment_data)
          var m = 0
          for(var k=0; k<created_comment_data.length; k++){
            const event = created_comment_data[k]
            event['e5'] = 'E'+event.returnValues.p5
            if(parseInt(event.returnValues.p6) > cutoff_timestamp){
              var time = parseInt(event.returnValues.p6)/* timestamp */
              if(m!=0){
                var prev_event_object = all_unsorted_events[m-1]
                if(prev_event_object['time'] == time){
                  time++
                }
              }
              all_unsorted_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
              m++
            }
          }
        }
      }
    }

    var sorted_object_events = this.sortByAttributeDescending(all_unsorted_events, 'time')
    var events = []
    sorted_object_events.forEach(object => {
      const includes = events.find(e => e.returnValues.p4 === object['event'].returnValues.p4)
      if(includes == null){
        events.push(object['event'])
      }
    });

    return events
  }

  get_job_objects_responses = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:36})

    var application_responses = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:37})

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_job_respnse_data, 0, 'p4')
      await this.fetch_multiple_cids_from_nitro(application_responses, 0, 'p4')
    }

    var messages = []
    var is_first_time = this.state.job_responses[id] == null ? true: false
    for(var j=0; j<created_job_respnse_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_job_respnse_data[j].returnValues.p4)

      // console.log('foundd', 'ipfs', id, ipfs_message)
      
      if(ipfs_message != null && ipfs_message['picked_contract_id'] != null){
        // var data = await this.load_contract_item(e5, ipfs_message['picked_contract_id'])
        // console.log('foundd', 'contract', data)
        var data = ''
        if(data != null){
          // ipfs_message['contract'] = data['contract']
          // ipfs_message['proposals'] = data['proposals']
          ipfs_message['contract'] = ipfs_message['picked_contract_id']
          ipfs_message['proposals'] = []
          ipfs_message['id'] = created_job_respnse_data[j].returnValues.p5
          ipfs_message['job_id'] = id;
          ipfs_message['e5'] = e5
          ipfs_message['time'] = created_job_respnse_data[j].returnValues.p6

          var filtered_events = []
          for(var i=0; i<application_responses.length; i++){
            if(application_responses[i].returnValues.p5 == created_job_respnse_data[j].returnValues.p5){
              filtered_events.push(application_responses[i])
            }
          }
          if(filtered_events.length > 0){
            // var last_response = filtered_events[filtered_events.length -1]
            // var last_response_ipfs_obj = await this.fetch_objects_data_from_ipfs_using_option(last_response.returnValues.p4)
            // ipfs_message['is_response_accepted'] = last_response_ipfs_obj['accepted'];
            ipfs_message['is_response_accepted'] = true
          }else{
            ipfs_message['is_response_accepted'] = false
          }
          // console.log('foundd', 'final', ipfs_message)
          messages.push(ipfs_message)
          if(is_first_time){
            var clone = JSON.parse(JSON.stringify(this.state.job_responses))
            clone[id] = messages
            this.setState({job_responses: clone})
          }
        }else{
          console.log('get_job_objects_responses', 'data is null')
        }
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.job_responses))
    clone[id] = messages
    this.setState({job_responses: clone})

  }

  get_direct_purchase_events = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var created_awward_data = await this.load_event_data(web3, H52contractInstance, 'e5', e5, {p3/* awward_context */: id})

    created_awward_data = created_awward_data.reverse()

    console.log('direct_purchase', created_awward_data)
    
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_awward_data, 0, 'p4')
    }

    var direct_purchases = structuredClone(this.state.direct_purchases)
    var is_first_time_for_direct_purchases = this.state.direct_purchases[id] == null ? true: false
    for(var j=0; j<created_awward_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_awward_data[j].returnValues.p4)
      if(ipfs_message != null){
        console.log('direct_purchase', ipfs_message)
        ipfs_message['purchase_id'] = created_awward_data[j].returnValues.p4
        if(direct_purchases[id] == null){
          direct_purchases[id] = []
        }
        const includes = direct_purchases[id].find(e => e['purchase_id'] === ipfs_message['purchase_id'])
        if(includes == null){
          direct_purchases[id].push(ipfs_message)
          this.setState({direct_purchases: direct_purchases})
        }
      }
    }


    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_fulfilment_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id})
    
    var fulfilments = {}
    var is_first_time_for_fulfilments = this.state.direct_purchase_fulfilments[id] == null ? true: false
    for(var j=0; j<created_fulfilment_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_fulfilment_data[j].returnValues.p4)
      if(ipfs_message != null){
        var signature_data = ipfs_message['signature_data']
        fulfilments[signature_data] = ipfs_message
      }

      if(is_first_time_for_fulfilments){
        var fulfilment_clone = JSON.parse(JSON.stringify(this.state.direct_purchase_fulfilments))
        fulfilment_clone[id] = fulfilments
        this.setState({direct_purchase_fulfilments: fulfilment_clone})
      }
    }

    var fulfilment_clone = JSON.parse(JSON.stringify(this.state.direct_purchase_fulfilments))
    fulfilment_clone[id] = fulfilments
    this.setState({direct_purchase_fulfilments: fulfilment_clone})
  }

  get_contractor_applications = async (id, E5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(E5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[E5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_job_respnse_data = await this.load_event_data(web3, E52contractInstance, 'e4', E5, {p1/* target_id */: id, p3/* context */:38})

    var application_responses = await this.load_event_data(web3, E52contractInstance, 'e4', E5, {p1/* target_id */: id, p3/* context */:39})

    created_job_respnse_data = created_job_respnse_data.reverse()

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_job_respnse_data, 0, 'p4')
    }

    var messages = []
    var is_first_time = this.state.contractor_applications[id] == null ? true: false
    for(var j=0; j<created_job_respnse_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_job_respnse_data[j].returnValues.p4)
      if(ipfs_message != null && ipfs_message['job_request_id'] != null){
        ipfs_message['request_id'] = created_job_respnse_data[j].returnValues.p5
        ipfs_message['contractor_post_id'] = id;
        ipfs_message['e5'] = E5
        ipfs_message['time'] = created_job_respnse_data[j].returnValues.p6

        var filtered_events = []
        for(var i=0; i<application_responses.length; i++){
          if(application_responses[i].returnValues.p5 == created_job_respnse_data[j].returnValues.p5){
            filtered_events.push(application_responses[i])
          }
        }
        if(filtered_events.length > 0){
          var last_response = filtered_events[filtered_events.length -1]
          var last_response_ipfs_obj = {'accepted': true, 'contract_id':parseInt(last_response.returnValues.p4)}
          ipfs_message['is_response_accepted'] = last_response_ipfs_obj['accepted'];
          
          // this.load_contract_item(E5, last_response_ipfs_obj['contract_id'])
          ipfs_message['contract'] = last_response_ipfs_obj['contract_id']
          ipfs_message['proposals'] = []
        }else{
          ipfs_message['is_response_accepted'] = false
        }

        messages.push(ipfs_message)
      }
      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.contractor_applications))
        clone[id] = messages
        this.setState({contractor_applications: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.contractor_applications))
    clone[id] = messages
    this.setState({contractor_applications: clone})

  }

  get_all_sorted_objects_mappings(object){
        var all_objects = {}
        for(var i=0; i<this.state.e5s['data'].length; i++){
            var e5 = this.state.e5s['data'][i]
            var e5_objects = object[e5]
            var all_objects_clone = structuredClone(all_objects)
            all_objects = { ...all_objects_clone, ...e5_objects}
        }

        return all_objects
  }

  load_job_request_messages = async (contractor_id, request_id, e5, key_data) => {
    // var messages = []
    // for(var i=0; i<this.state.e5s['data'].length; i++){
    //   var focused_e5 = this.state.e5s['data'][i]
    //   const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
    //   const E52contractArtifact = require('./contract_abis/E52.json');
      
    //   if(this.state.addresses[focused_e5] != null){
    //     const E52_address = this.state.addresses[focused_e5][1];
    //     const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    //     var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 17/* shadow_object_container */, p3/* context */:contractor_id, p5/* int_data */:request_id})
    //     if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
    //       await this.fetch_multiple_cids_from_nitro(created_channel_data, 0, 'p4')
    //     }
    //     var is_first_time = this.state.object_messages[request_id] == null ? true: false
    //     for(var j=0; j<created_channel_data.length; j++){
    //       var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_channel_data[j].returnValues.p4)
    //       if(ipfs_message != null && ipfs_message['e5'] == e5){
    //         this.fetch_uploaded_files_for_object(ipfs_message)
    //         messages.push(ipfs_message)
    //       }
    //       if(is_first_time){
    //         var clone = JSON.parse(JSON.stringify(this.state.object_messages))
    //         clone[request_id] = messages
    //         this.setState({object_messages: clone})
    //       }
    //     }
    //   }
    // }

    
    var all_object_comment_events = await this.get_job_request_comment_events(contractor_id, request_id)
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(all_object_comment_events, 0, 'p4')
    }

    var convo_key = ''
    const my_unique_crosschain_identifier = await this.get_my_unique_crosschain_identifier_number()
    const private_key_to_use = this.get_my_private_key()
    if(key_data != null && key_data[my_unique_crosschain_identifier] != null){
        var focused_encrypted_key = key_data[my_unique_crosschain_identifier]
        if(focused_encrypted_key != null){
          var uint8array = Uint8Array.from(focused_encrypted_key.split(',').map(x=>parseInt(x,10)));
          convo_key = await ecies.decrypt(private_key_to_use, uint8array)
        }
    }

    var is_first_time = this.state.object_messages[request_id] == null ? true: false
    var messages = []
    for(var j=0; j<all_object_comment_events.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(all_object_comment_events[j].returnValues.p4)
      console.log('apppage', 'ipfs message', ipfs_message)
      if(ipfs_message != null){
        if(ipfs_message['encrypted_data'] != null){
          //channel message was encrypted
          console.log('apppage', 'message is encrypted, decrypting...')
          console.log('apppage', 'key used: ', convo_key)
          var bytes = CryptoJS.AES.decrypt(ipfs_message['encrypted_data'], convo_key.toString());
          var originalText = bytes.toString(CryptoJS.enc.Utf8);
          ipfs_message = JSON.parse(JSON.parse(originalText));
          console.log('apppage', 'parsed object: ', ipfs_message)
        }
        ipfs_message['time'] = all_object_comment_events[j].returnValues.p6
        this.fetch_uploaded_files_for_object(ipfs_message)
        const includes = messages.find(e => e['message_id'] === ipfs_message['message_id'])
        if(includes == null){
          messages.push(ipfs_message)
        }
        if(is_first_time){
          const clone = structuredClone(this.state.object_messages)
          clone[request_id] = messages
          this.setState({object_messages: clone})
        }
      }
    }

    const clone = structuredClone(this.state.object_messages)
    clone[request_id] = messages
    this.setState({object_messages: clone})
  }

  get_my_private_key(){
    const web3 = new Web3(this.get_web3_url_from_e5('E25'));
    const privateKey = this.state.accounts['E25'].privateKey == null ? 'e' : this.state.accounts['E25'].privateKey
    const private_key_hash = web3.utils.keccak256(privateKey.toString()).slice(34)
    const private_key_to_use = Buffer.from(private_key_hash)
    return private_key_to_use
  }

  get_job_request_comment_events = async (contractor_id, request_id) => {
    var all_unsorted_events = []
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 17/* shadow_object_container */, p3/* context */:contractor_id, p5/* int_data */:request_id}])
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index)=> {
        var focused_e5 = used_e5s[index]
        var m = 0
        for(var l=0; l<event_array.length; l++){
          var event = event_array[l]
          event['e5'] = focused_e5
          var time = parseInt(event.returnValues.p6)/* timestamp */
          if(m!=0){
            const prev_event_object = all_unsorted_events[m-1]
            if(prev_event_object['time'] == time){
              time++
            }
          }
          all_unsorted_events.push({'time':time, 'event':event})
          m++
        }
      });
    }else{
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          
          const created_comment_data = (await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 17/* shadow_object_container */, p3/* context */:contractor_id, p5/* int_data */:request_id}))
          for(var k=0; k<created_comment_data.length; k++){
            const event = created_comment_data[k]
            event['e5'] = focused_e5
            var time = parseInt(event.returnValues.p6)/* timestamp */
            if(k!=0){
              const prev_event_object = all_unsorted_events[k-1]
              if(prev_event_object['time'] == time){
                time++
              }
            }
            all_unsorted_events.push({'time':time, 'event':event})
          }
        }
      }
    }

    var sorted_object_events = this.sortByAttributeDescending(all_unsorted_events, 'time')
    var events = []
    sorted_object_events.forEach(object => {
      const includes = events.find(e => e.returnValues.p4 === object['event'].returnValues.p4)
      if(includes == null){
        events.push(object['event'])
      }
    });

    console.log('apppage', 'job_request message comment events', events)
    return events
  }

  get_post_award_data = async (id, e5) => {
    // const web3 = new Web3(this.get_web3_url_from_e5(e5));
    // const H52contractArtifact = require('./contract_abis/H52.json');
    // const H52_address = this.state.addresses[e5][6];
    // const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
    // var created_awward_data = (await this.load_event_data(web3, H52contractInstance, 'e5', e5, {p3/* awward_context */: id})).reverse()
    var created_awward_data = await this.get_and_sort_all_award_events(id)

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_awward_data, 0, 'p4')
    }

    var award_events = []
    var is_first_time = this.state.award_data[id] == null ? true: false
    for(var j=0; j<created_awward_data.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_awward_data[j].returnValues.p4)
      var e5_id = created_awward_data[j].returnValues.p3 + created_awward_data[j]['e5']
      if(ipfs_message != null && (ipfs_message['e5_id'] == e5_id || ipfs_message['e5_id'] == null)){
        award_events.push(ipfs_message)
      }

      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.award_data))
        clone[id] = award_events
        this.setState({award_data: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.award_data))
    clone[id] = award_events
    this.setState({award_data: clone})
  }

  get_and_sort_all_award_events = async (id) => {
    var all_unsorted_events = []
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const H52contractArtifact = require('./contract_abis/H52.json');
          const H52_address = this.state.addresses[focused_e5][6];
          const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
          event_params.push([web3, H52contractInstance, 'e5', focused_e5, {p3/* awward_context */: id}])
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index)=> {
        var focused_e5 = used_e5s[index]
        for(var l=0; l<event_array.length; l++){
          var event = event_array[l]
          event['e5'] = focused_e5
          all_unsorted_events.push({'time':event.returnValues.p5/* timestamp */, 'event':event})
        }
      });
    }else{
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const H52contractArtifact = require('./contract_abis/H52.json');
          const H52_address = this.state.addresses[focused_e5][6];
          const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
          
          const created_award_data = (await this.load_event_data(web3, H52contractInstance, 'e5', focused_e5, {p3/* awward_context */: id}))
          for(var k=0; k<created_award_data.length; k++){
            var event = created_award_data[k]
            event['e5'] = focused_e5
            all_unsorted_events.push({'time':event.returnValues.p5/* timestamp */, 'event':event})
          }
        }
      }
    }

    var sorted_object_events = this.sortByAttributeDescending(all_unsorted_events, 'time')
    var events = []
    sorted_object_events.forEach(object => {
      events.push(object['event'])
    });

    return events
  }

  get_mail_messages = async (mail) => {
    var convo_id = mail['convo_id']
    var all_my_mail_events = await this.get_sorted_convo_message_events(convo_id)
    console.log('apppage', 'all events to load', all_my_mail_events)
    if(this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(all_my_mail_events, 0, 'p4')
    }
    
    var messages = []
    var is_first_time = this.state.mail_messages[convo_id] == null ? true : false
    for(var i=0; i<all_my_mail_events.length; i++){
      const event = all_my_mail_events[i]
      const convo_id = event.returnValues.p5
      const cid = event.returnValues.p4
      const e5 = event['e5']
      const account = this.state.user_account_id[e5];
      const ipfs = await this.fetch_objects_data_from_ipfs_using_option(cid)
      const ipfs_obj = await this.fetch_and_decrypt_ipfs_object(ipfs, e5)

      if(ipfs_obj != null && ipfs != ipfs_obj){
        ipfs_obj['time'] = event.returnValues.p6
      
        const recipient = ipfs_obj['recipient'] || ipfs_obj['target_recipient']
        event.returnValues.p1 = (recipient)
        const recipient_e5 = ipfs_obj['type'] == null ? ipfs_obj['recipients_e5'] : ipfs_obj['e5'];
        const type  = event.returnValues.p2 == account ? 'sent': 'received'
        const convo_with = event.returnValues.p2 == account ? recipient : event.returnValues.p2
        
        const obj = {'convo_id':convo_id,'id':cid, 'event':event, 'ipfs':ipfs_obj, 'type':type, 'time':parseInt(event.returnValues.p6), 'convo_with':convo_with, 'sender':event.returnValues.p2, 'recipient':recipient, 'e5':recipient_e5, 'timestamp':parseInt(event.returnValues.p6), 'author':event.returnValues.p2, 'e5_id':cid}
        
        const includes = messages.find(e => e['id'] === obj['id'])
        if(includes == null){
          messages.push(obj);
          this.fetch_uploaded_files_for_object(ipfs_obj)
        }

        if(is_first_time){
          const mail_messages_clone = structuredClone(this.state.mail_messages)
          mail_messages_clone[convo_id] = messages
          this.setState({mail_messages: mail_messages_clone})
          // await this.wait(150)
        }
      }
    }
    const mail_messages_clone = structuredClone(this.state.mail_messages)
    mail_messages_clone[convo_id] = messages
    this.setState({mail_messages: mail_messages_clone})
  }

  get_sorted_convo_message_events = async (convo_id) => {
    var unsorted_message_object_events = []
    // var all_mail_data = this.state.mail_message_events
    // for(var i=0; i<this.state.e5s['data'].length; i++){
    //   const e5 = this.state.e5s['data'][i]
    //   const messages = all_mail_data[e5] == null ? [] : all_mail_data[e5]
    //   if(messages != null & messages.length > 0){
    //     messages.forEach(message => {
    //       if(message.returnValues.p5 == convo_id){
    //         message['e5'] = e5
    //         unsorted_message_object_events.push({'time':message.returnValues.p6, 'event':message})
    //       }
    //     });
    //   }
    // }

    const crosschain_identifier = await this.get_my_unique_crosschain_identifier_number()
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const account = this.state.user_account_id[focused_e5]
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: crosschain_identifier, p3/* context */:32, p5/* convo_id */:convo_id }])/* received_messages_from_this_e5 */
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: crosschain_identifier, p3/* context */:33, p5/* convo_id */:convo_id }])/* received_messages_from_other_e5s */

          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:32, p5/* convo_id */:convo_id}])/* sent_messages_to_mail_in_this_e5 */
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:33, p5/* convo_id */:convo_id}])/* sent_messages_to_mail_in_other_e5s */
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      for(var e=0; e<all_events.length; e+=4){
        var focused_e5 = used_e5s[e/4]
        const my_received_message_events = (all_events[e]).concat(all_events[e+1])
        const my_created_message_events = (all_events[e+2]).concat(all_events[e+3])
        const all_loaded_events = my_received_message_events.concat(my_created_message_events)
        for(var l=0; l<all_loaded_events.length; l++){
          var event = all_loaded_events[l]
          event['e5'] = focused_e5
          unsorted_message_object_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
        }
      }
    }else{
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const account = this.state.user_account_id[focused_e5]
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          
          const e32received = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: crosschain_identifier, p3/* context */:32, p5/* convo_id */:convo_id})
          const e33received = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: crosschain_identifier, p3/* context */:33, p5/* convo_id */:convo_id})
          const my_received_message_events = e32received.concat(e33received)

          const e32created = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:32, p5/* convo_id */:convo_id})
          const e33created = await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p2/* sender_acc_id */: account, p3/* context */:33, p5/* convo_id */:convo_id})
          const my_created_message_events = e32created.concat(e33created)
          
          const all_events = my_received_message_events.concat(my_created_message_events)
          for(var l=0; l<all_events.length; l++){
            var event = all_events[l]
            event['e5'] = focused_e5
            unsorted_message_object_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
          }
        }
      }
    }

    const sorted_message_object_events = this.sortByAttributeDescending(unsorted_message_object_events, 'time')
    const events = []
    sorted_message_object_events.forEach(object => {
      events.push(object['event'])
    });

    return events
  }

  get_object_censored_keywords_and_accounts = async (object) => {
    const sender = object['author']
    const sender_e5 = object['e5']
    const sender_address = await this.get_accounts_address(sender, sender_e5)
    var accounts_blocked_contacts_data_time = 0
    var accounts_censored_keywords_event_data_time = 0
    var accounts_blocked_contacts_data_chosen_event = null
    var accounts_censored_keywords_event_data_chosen_event = null
    
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      if(this.state.e5s[e5].active == true){
        const web3 = new Web3(this.get_web3_url_from_e5(e5));
        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = this.get_contract_from_e5(e5)
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
        var account = 0
        if(e5 == sender_e5){
          account = sender
        }else{
          var accounts = await contractInstance.methods.f167([],[sender_address], 2).call((error, result) => {});
          account = accounts[0]
        }
        
        if(account != 0){
          var contract_addresses = this.state.addresses[e5]
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = contract_addresses[1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

          var accounts_blocked_contacts_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:2})
          
          var accounts_censored_keywords_event_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: account, p3/* context */:10})

          if(accounts_blocked_contacts_data.length > 0){
            var latest = accounts_blocked_contacts_data[accounts_blocked_contacts_data.length-1]
            if(latest.returnValues.p6/* timestamp */ > accounts_blocked_contacts_data_time){
              accounts_blocked_contacts_data_chosen_event = latest
              accounts_blocked_contacts_data_time = latest.returnValues.p6/* timestamp */
            }
          }
          if(accounts_censored_keywords_event_data.length > 0){
            var latest = accounts_censored_keywords_event_data[accounts_censored_keywords_event_data.length-1]
            if(latest.returnValues.p6/* timestamp */ > accounts_censored_keywords_event_data_time){
              accounts_censored_keywords_event_data_chosen_event = latest
              accounts_censored_keywords_event_data_time = latest.returnValues.p6/* timestamp */
            }
          }
        }
      }
    }

    var blocked_contacts = []
    var censored_keywords = []
    if(accounts_blocked_contacts_data_chosen_event != null){
      var blocked_contacts_data = await this.fetch_objects_data_from_ipfs_using_option(accounts_blocked_contacts_data_chosen_event.returnValues.p4)
      var loaded_blocked_accounts = blocked_contacts_data['all_blocked_accounts']
      if(loaded_blocked_accounts != null){
        blocked_contacts = this.get_all_sorted_objects_mappings(loaded_blocked_accounts)
      }
    }

    if(accounts_censored_keywords_event_data_chosen_event != null){
      var followed_account_data = await this.fetch_objects_data_from_ipfs_using_option(accounts_censored_keywords_event_data_chosen_event.returnValues.p4)
      censored_keywords = followed_account_data['censored_keywords'] == null ? [] : followed_account_data['censored_keywords']
    }

    var clone = structuredClone(this.state.post_censored_data);
    clone[sender+sender_e5] = {'blocked_contacts':blocked_contacts, 'censored_keywords': censored_keywords}
    this.setState({post_censored_data: clone})
  }

  get_accounts_address = async(account, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_contract_from_e5(e5)
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
    return await contractInstance.methods.f289(account).call((error, result) => {});
  }

  get_unique_crosschain_identifier_number = async (account, default_e5) => {
    var arr = null;
    var hash = await this.get_accounts_public_key(account, default_e5)
    arr = hash.toString().replaceAll(',','')
    if(arr.length > 36){
      arr = arr.slice(0, 36);
    }
    return arr
  }

  perform_bill_object_payment_search = async (bill_object) => {
    const focused_e5 = bill_object['e5']
    const identifier = bill_object['ipfs'].identifier
    const account = bill_object['event'].returnValues.p1
    const recipient = bill_object['ipfs'].transfer_recipient
    const used_identifier = this.hash_data(identifier)

    const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[focused_e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
    
    var itransfer_event_params = []
    var transfer_event_params = []
    if(account != ''){
      itransfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e5', focused_e5, {p4/* metadata */: used_identifier,p2/* awward_receiver */: recipient, p1/* awward_sender */:account, p3/* awward_context */: 2/* bill_payment */})
      transfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e1', focused_e5, {p3/* receiver */: recipient, p2/* sender */:account})
    }else{
      itransfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e5', focused_e5, {p4/* metadata */: used_identifier,p2/* awward_receiver */: recipient, p3/* awward_context */: 2/* bill_payment */})
      transfer_event_params = await this.load_event_data(web3, H52contractInstance, 'e1', focused_e5, {p3/* receiver */: recipient})
    }

    var grouped_transfers_by_block = {}
    transfer_event_params.forEach(event => {
      if(grouped_transfers_by_block[event.returnValues.p6/* block_number */] == null){
        grouped_transfers_by_block[event.returnValues.p6/* block_number */] = []
      }
      grouped_transfers_by_block[event.returnValues.p6/* block_number */].push(event)
    });

    var iTransfer_objects = {}
    var found = false
    itransfer_event_params.forEach(event => {
      var block = event.returnValues.p6/* block_number */
      var transfers_for_block = grouped_transfers_by_block[block]
      if(iTransfer_objects[block] == null){
        iTransfer_objects[block] = {}
      }
      transfers_for_block.forEach(transfer => {
        var transfer_receiver = transfer.returnValues.p3/* receiver */
        var transfer_sender = transfer.returnValues.p2/* sender */
        if(transfer_receiver == recipient){
          if(iTransfer_objects[block][transfer_sender] == null){
            iTransfer_objects[block][transfer_sender] = []
          }
          iTransfer_objects[block][transfer_sender].push(transfer)
          found = true;
        }
      });
    });

    const id = bill_object['e5_id']
    var clone = structuredClone(this.state.bill_payment_results)
    clone[id] = iTransfer_objects
    this.setState({bill_payment_results: clone})
  }

  get_objects_votes = async (id, e5, object) => {  
    const all_object_comment_events = await this.get_object_vote_events(id, e5, object)
    const clone = structuredClone(this.state.object_votes)
    clone[id] = all_object_comment_events
    this.setState({object_votes: clone})
  }

  get_object_vote_events = async (id, e5, object) => {
    var all_unsorted_events = []
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<object['ipfs'].poll_e5s.length; i++){
        const focused_e5 = object['ipfs'].poll_e5s[i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const account_id = this.state.user_account_id[focused_e5]
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          var e5_id = parseInt(e5.replace('E',''))
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 25, p3/* context */:id, p5: e5_id, p2/* sender_acc_id */:account_id}])
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index)=> {       
        for(var l=0; l<event_array.length; l++){
          const event = event_array[l]
          const focused_e5 = 'E'+event.returnValues.p5
          event['e5'] = focused_e5
          all_unsorted_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
        }
      });
    }else{
      for(var i=0; i<object['ipfs'].poll_e5s.length; i++){
        const focused_e5 = object['ipfs'].poll_e5s[i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const account_id = this.state.user_account_id[focused_e5]
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          const e5_id = parseInt(e5.replace('E',''))
          
          const created_comment_data = (await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 25, p3/* context */:id, p5: e5_id, p2/* sender_acc_id */:account_id}))
          var m = 0
          for(var k=0; k<created_comment_data.length; k++){
            const event = created_comment_data[k]
            event['e5'] = 'E'+event.returnValues.p5
            all_unsorted_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
          }
        }
      }
    }
    if(all_unsorted_events.length > 0){
      var sorted_object_events = this.sortByAttributeDescending(all_unsorted_events, 'time').reverse()
      return [sorted_object_events[0]]
    }
    return []
  }

  get_poll_results = async(id, e5, object) => {
    const author = object['author']
    const e5_id = object['e5_id']
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const created_results_data = (await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:43, p2/* sender_acc_id */:author}))

    if(this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_results_data, 0, 'p4')
    }

    const result_objects = []
    var is_first_time = this.state.poll_results[e5_id] == null ? true : false
    for(var i=0; i<created_results_data.length; i++){
      const event = created_results_data[i]
      const cid = event.returnValues.p4
      const ipfs = await this.fetch_objects_data_from_ipfs_using_option(cid)
      const obj = {'ipfs':ipfs, 'event':event}
      result_objects.push(obj)
      if(is_first_time == true){
        const poll_resutls_clone = structuredClone(this.state.poll_results)
        poll_resutls_clone[e5_id] = result_objects
        this.setState({poll_results: poll_resutls_clone})
      }
    }

    const poll_resutls_clone = structuredClone(this.state.poll_results)
    poll_resutls_clone[e5_id] = result_objects
    this.setState({poll_results: poll_resutls_clone})
  }

  load_video_messages = async(video, videopost) => {
    var id = isNaN(video['video_id']) ? await this.stringToBigNumber(video['video_id']) : video['video_id']
    var e5 = videopost['e5']
    const all_object_comment_events = await this.get_object_comment_events(id, e5, 26)
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(all_object_comment_events, 0, 'p4')
    }
    var messages = []
    var is_first_time = this.state.object_messages[id] == null ? true: false
    for(var j=0; j<all_object_comment_events.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(all_object_comment_events[j].returnValues.p4)
      console.log('apppage', 'ipfs message', ipfs_message)
      if(ipfs_message != null){
        ipfs_message['time'] = all_object_comment_events[j].returnValues.p6
        this.fetch_uploaded_files_for_object(ipfs_message)

        const includes = messages.find(e => e['message_id'] === ipfs_message['message_id'])
        if(includes == null){
          messages.push(ipfs_message)
        }
        if(is_first_time){
          const clone = structuredClone(this.state.object_messages)
          clone[video['video_id']] = messages
          this.setState({object_messages: clone})
          // await this.wait(150)
        }
      }
    }

    const clone = structuredClone(this.state.object_messages)
    clone[video['video_id']] = messages
    this.setState({object_messages: clone})
  }

  get_channel_creator_file_records = async (object) => {
    var id = object['id']
    var e5 = object['e5']
    var my_account = this.state.user_account_id[object['e5']]
    var subscriptions = object['e5'].selected_creator_group_subscriptions
    var channel_creators = object['e5'].creators

    if(object['author'] != my_account || channel_creators == null || channel_creators.length == 0 || subscriptions == null || subscriptions.length == 0){
      return;
    }
    
    const all_object_creator_file_events = await this.get_channel_creator_file_events(id, e5)
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(all_object_creator_file_events, 0, 'p4')
    }
    var messages = []
    var is_first_time = this.state.object_creator_files[id] == null ? true: false

    var all_files = []
    for(var j=0; j<all_object_creator_file_events.length; j++){
      var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(all_object_creator_file_events[j].returnValues.p4)
      var author = all_object_creator_file_events[j].returnValues.p2/* sender_acc_id */
      var event_e5 = all_object_creator_file_events[j]['e5']
      var author_account = event_e5+':'+author

      if(ipfs_message != null && ipfs_message['e'] != null && ipfs_message['e'].length > 0 && channel_creators.includes(author_account)){
        var files = ipfs_message['e']
        files.forEach(file => {
          const includes = messages.find(e => e['file'] === file)
          if(includes == null){
            var obj = {'file':file, 'author':author, 'e5':event_e5}
            all_files.push(file)
            messages.push(obj)
          }
        });

        if(is_first_time){
          const clone = structuredClone(this.state.object_creator_files)
          clone[object['e5_id']] = messages
          this.setState({object_creator_files: clone})
        }
      }
    }

    this.fetch_uploaded_data_from_ipfs(all_files, false)
    var subscription_ids = []
    subscriptions.forEach(subscription_e5_id => {
      var id = subscription_e5_id.split('E')[0]
      if(!subscription_ids.includes(id)){
        subscription_ids.push(id)
      }
    });
    this.load_subscription_data(subscription_ids)

    const clone = structuredClone(this.state.object_creator_files)
    clone[object['e5_id']] = messages
    this.setState({object_creator_files: clone})

  }

  get_channel_creator_file_events = async (id, e5) => {
    var all_unsorted_events = []
    const cutoff_timestamp = 0
    const creator_group_context = await this.channel_id_to_hashed_id(id)
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          var e5_id = parseInt(e5.replace('E',''))
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 27/* 27(creator_group_channel_container) */, p3/* context */:creator_group_context, p5: e5_id,}])
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index)=> {
        // var focused_e5 = used_e5s[index]
        var m = 0
        for(var l=0; l<event_array.length; l++){
          const event = event_array[l]
          const focused_e5 = 'E'+event.returnValues.p5
          event['e5'] = focused_e5
          if(parseInt(event.returnValues.p6) > cutoff_timestamp){
            var time = parseInt(event.returnValues.p6)/* timestamp */
            if(m!=0){
              const prev_event_object = all_unsorted_events[m-1]
              if(prev_event_object['time'] == time){
                time++
              }
            }
            all_unsorted_events.push({'time':time, 'event':event})
            m++
          }
        }
      });
    }else{
      for(var i=0; i<this.state.e5s['data'].length; i++){
        const focused_e5 = this.state.e5s['data'][i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          const e5_id = parseInt(e5.replace('E',''))
          
          const created_comment_data = (await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 27/* 27(creator_group_channel_container) */, p3/* context */:creator_group_context, p5: e5_id,}))
          console.log('apppage', 'loaded_events for e5',focused_e5, created_comment_data)
          var m = 0
          for(var k=0; k<created_comment_data.length; k++){
            const event = created_comment_data[k]
            event['e5'] = 'E'+event.returnValues.p5
            if(parseInt(event.returnValues.p6) > cutoff_timestamp){
              var time = parseInt(event.returnValues.p6)/* timestamp */
              if(m!=0){
                var prev_event_object = all_unsorted_events[m-1]
                if(prev_event_object['time'] == time){
                  time++
                }
              }
              all_unsorted_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
              m++
            }
          }
        }
      }
    }

    const sorted_object_events = this.sortByAttributeDescending(all_unsorted_events, 'time')
    const events = []
    sorted_object_events.forEach(object => {
      const includes = events.find(e => e.returnValues.p4 === object['event'].returnValues.p4)
      if(includes == null){
        events.push(object['event'])
      }
    });

    return events
  }

  get_channel_creator_payout_stagings = async (object) => {
    const author = object['author']
    const e5_id = object['e5_id']
    const e5 = object['e5']
    const id = object['id']
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    const created_results_data = (await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id, p3/* context */:44, p2/* sender_acc_id */:author})).reverse()

    if(this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_results_data, 0, 'p4')
    }

    const result_objects = []
    var is_first_time = this.state.channel_payout_stagings[e5_id] == null ? true : false
    for(var i=0; i<created_results_data.length; i++){
      const event = created_results_data[i]
      const cid = event.returnValues.p4
      const ipfs = await this.fetch_objects_data_from_ipfs_using_option(cid)
      const obj = {'ipfs':ipfs, 'event':event}
      result_objects.push(obj)
      if(is_first_time == true){
        const channel_payout_stagings_clone = structuredClone(this.state.channel_payout_stagings)
        channel_payout_stagings_clone[e5_id] = result_objects
        this.setState({channel_payout_stagings: channel_payout_stagings_clone})
      }
    }

    const channel_payout_stagings_clone = structuredClone(this.state.channel_payout_stagings)
    channel_payout_stagings_clone[e5_id] = result_objects
    this.setState({channel_payout_stagings: channel_payout_stagings_clone})
  }

  get_channel_payout_records = async (object) => {
    const all_object_comment_events = await this.get_channel_creator_payout_events(object)
    const clone = structuredClone(this.state.channel_creator_payout_records)
    clone[object['e5_id']] = all_object_comment_events
    this.setState({channel_creator_payout_records: clone})
  }

  get_channel_creator_payout_events = async (object) => {
    const all_unsorted_events = []
    const id = object['id']
    const e5 = object['e5']
    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      const event_params = []
      const used_e5s = []
      for(var i=0; i<object['ipfs'].poll_e5s.length; i++){
        const focused_e5 = object['ipfs'].poll_e5s[i]
        if(this.state.addresses[focused_e5] != null){
          used_e5s.push(focused_e5)
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const account_id = this.state.user_account_id[focused_e5]
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          var e5_id = parseInt(e5.replace('E',''))
          event_params.push([web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 28 /* 28(creator_group_payout_record_container) */, p3/* context */:id, p5: e5_id, p2/* sender_acc_id */:account_id}])
        }
      }
      const all_events = await this.load_multiple_events_from_nitro(event_params)
      all_events.forEach((event_array, index)=> {       
        for(var l=0; l<event_array.length; l++){
          const event = event_array[l]
          const focused_e5 = 'E'+event.returnValues.p5
          event['e5'] = focused_e5
          all_unsorted_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
        }
      });
    }else{
      for(var i=0; i<object['ipfs'].poll_e5s.length; i++){
        const focused_e5 = object['ipfs'].poll_e5s[i]
        if(this.state.addresses[focused_e5] != null){
          const web3 = new Web3(this.get_web3_url_from_e5(focused_e5));
          const account_id = this.state.user_account_id[focused_e5]
          const E52contractArtifact = require('./contract_abis/E52.json');
          const E52_address = this.state.addresses[focused_e5][1];
          const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
          const e5_id = parseInt(e5.replace('E',''))
          
          const created_comment_data = (await this.load_event_data(web3, E52contractInstance, 'e4', focused_e5, {p1/* target_id */: 28 /* 28(creator_group_payout_record_container) */, p3/* context */:id, p5: e5_id, p2/* sender_acc_id */:account_id}))
          var m = 0
          for(var k=0; k<created_comment_data.length; k++){
            const event = created_comment_data[k]
            event['e5'] = 'E'+event.returnValues.p5
            all_unsorted_events.push({'time':event.returnValues.p6/* timestamp */, 'event':event})
          }
        }
      }
    }

    if(all_unsorted_events.length > 0){
      const sorted_object_events = this.sortByAttributeDescending(all_unsorted_events, 'time').reverse()
      return sorted_object_events
    }
    return []
  }









  load_modify_item_data = async (modify_target, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var modify_id = parseInt(modify_target)
    var modify_id_type = await E52contractInstance.methods.f135(modify_id).call((error, result) => {});

    if(modify_id_type == 31/* 31(token_exchange) */){
      const H5contractArtifact = require('./contract_abis/H5.json');
      const H5_address = this.state.addresses[e5][5];
      const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

      var exchange_data = await H5contractInstance.methods.f85(modify_id).call((error, result) => {});
      return {'data': exchange_data, 'type':modify_id_type};
    }
    else if(modify_id_type == 33/* 33(subscription_object) */){
      const F5contractArtifact = require('./contract_abis/F5.json');
      const F5_address = this.state.addresses[e5][2];
      const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

      var subscription_data = await F5contractInstance.methods.f73(modify_id).call((error, result) => {});
      return {'data': subscription_data, 'type':modify_id_type};
    }
    else{
      const G5contractArtifact = require('./contract_abis/G5.json');
      const G5_address = this.state.addresses[e5][3];
      const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

      var contract_data = await G5contractInstance.methods.f77(modify_id, false).call((error, result) => {});
      return {'data': contract_data, 'type':modify_id_type};
    }
  }

  test_generate_signature= async (account) => {
    const web3 = new Web3(this.state.web3);

    var data = 'hello world'
    var address = account.address
    console.log('----------------------www----------------------')
    console.log('account address: ',address)

    web3.eth.accounts.wallet.add(account.privateKey);
    var signature = await web3.eth.sign(data, address)
    
    console.log('signature: ',signature)
    var original_address = await web3.eth.accounts.recover(data, signature)
    console.log('original address: ',original_address)


  }




  add_account_to_contacts = async (account, e5) => {
    if(this.check_for_duplicates(account, e5)){
      this.prompt_top_notification(this.getLocale()['2734']/* 'A matching contact was found' */, 3600)
      return
    }

    var me = this.state.user_account_id[e5]
    if(account == me){
      this.prompt_top_notification(this.getLocale()['2735']/* 'You cant add yourself.' */, 3600)
      return
    }

    this.prompt_top_notification(this.getLocale()['2736']/* 'Adding account ID to Contacts...' */, 2000)
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    var account_address = await contractInstance.methods.f289(account).call((error, result) => {});
    var contacts_object_clone = structuredClone(this.state.contacts)
    if(contacts_object_clone[e5] == null){
      contacts_object_clone[e5] = []
    }
    contacts_object_clone[e5].push({'id':account.toString(), 'e5':e5, 'address':account_address.toString()})

    this.setState({contacts: contacts_object_clone, should_update_contacts_onchain: true})

    var me = this;
    setTimeout(function() {
        me.set_cookies()
        me.prompt_top_notification(this.getLocale()['3055bj']/* 'Done' */, 1000)
    }, (1 * 1000));
  }

  check_for_duplicates(account, e5){
    var do_duplicates_exist = false
    if(this.state.contacts[e5] == null){
      return do_duplicates_exist;
    }
    this.state.contacts[e5].forEach(contact => {
      if(contact['id'] == account && contact['e5'] == e5){
        do_duplicates_exist = true
      }
    });
    return do_duplicates_exist
  }
 
  add_account_to_blocked_list = async (account, e5) => {
    if(this.check_for_blocked_duplicates(account, e5)){
      this.prompt_top_notification(this.getLocale()['2731']/* 'A matching blocked account was found' */, 2600)
      return
    }
    var me = this.state.user_account_id[e5]
    if(account == me){
      this.prompt_top_notification(this.getLocale()['2732']/* 'You cant block yourself!' */, 2600)
      return
    }
    this.prompt_top_notification(this.getLocale()['2733']/* 'Adding account ID to blocked list...' */, 1600)
    const web3 = new Web3(this.get_selected_web3_url());
    const contractArtifact = require('./contract_abis/E5.json');
    const contractAddress = this.get_selected_E5_contract()
    const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

    var account_address = await contractInstance.methods.f289(account).call((error, result) => {});
    var blocked_object_clone = structuredClone(this.state.blocked_accounts)
    if(blocked_object_clone[e5] == null){
      blocked_object_clone[e5] = []
    }
    blocked_object_clone[e5].push({'id':account.toString(), 'e5': e5, 'address':account_address.toString()})

    this.setState({blocked_accounts: blocked_object_clone, should_update_blocked_accounts_onchain: true})

    var me = this;
    setTimeout(function() {
      me.set_cookies()
      me.prompt_top_notification(this.getLocale()['3055bj']/* 'Done' */, 1000)
    }, (1 * 1000));
  }

  check_for_blocked_duplicates(account, e5){
    var do_duplicates_exist = false
    if(this.state.blocked_accounts[e5] == null){
      return do_duplicates_exist
    }
    this.state.blocked_accounts[e5].forEach(contact => {
      if(contact['id'] == account && contact['e5'] == e5){
        do_duplicates_exist = true
      }
    });
    return do_duplicates_exist
  }
  






  get_contract_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const G5contractArtifact = require('./contract_abis/G5.json');
    const G5_address = this.state.addresses[e5][3];
    const G5contractInstance = new web3.eth.Contract(G5contractArtifact.abi, G5_address);

    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = this.state.addresses[e5][4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);


    var make_proposal_event_data = null
    var modify_object_event_data = null
    var enter_contract_event_data = null
    var extend_contract_event_data = null
    var exit_contract_event_data = null
    var force_exit_contract_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, G5contractInstance, 'e1', e5, {p1/* contract_id */: id}],
        [web3, G5contractInstance, 'e2', e5, {p1/* contract_or_proposal_id */: id}],
        [web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 3}],

        [web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 14}],
        [web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 11}],
        [web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 18}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)

      make_proposal_event_data = all_events[0]
      modify_object_event_data = all_events[1]
      enter_contract_event_data = all_events[2]
      extend_contract_event_data = all_events[3]
      exit_contract_event_data = all_events[4]
      force_exit_contract_event_data = all_events[5]
    }
    else{
      make_proposal_event_data = await this.load_event_data(web3, G5contractInstance, 'e1', e5, {p1/* contract_id */: id})

      modify_object_event_data = await this.load_event_data(web3, G5contractInstance, 'e2', e5, {p1/* contract_or_proposal_id */: id})

      enter_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 3})

      extend_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 14})

      exit_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 11})

      force_exit_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p1/* contract_id */: id , p3/* action */: 18})
    }


    var contract_token_event_data = await this.get_token_event_data(id, e5);

    var clone = structuredClone(this.state.contract_events)
    clone[id] = {'modify_object':modify_object_event_data.reverse(), 'make_proposal':make_proposal_event_data.reverse(), 'enter_contract':enter_contract_event_data.reverse(), 'extend_contract':extend_contract_event_data.reverse(), 'exit_contract':exit_contract_event_data.reverse(), 'force_exit':force_exit_contract_event_data.reverse(), 'transfer':contract_token_event_data}
    

    var me = this;
    setTimeout(function() {
      me.setState({contract_events: clone})
    }, (1 * 200));
    
  }

  get_token_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p2/* sender */: id})

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: id})

    // console.log('get_token_event_data',received_tokens_event_data)

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5, 'e5':e5})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5, 'e5':e5})
    }
    var sorted_events = this.sortByAttributeDescending(all_events, 'timestamp');

    return sorted_events;

  }

  get_proposal_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const G52contractArtifact = require('./contract_abis/G52.json');
    const G52_address = this.state.addresses[e5][4];
    const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

    var record_proposal_vote_event_data = null
    var submit_proposal_event_data = null
    var archive_proposal_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, G52contractInstance, 'e1', e5, {p2/* consensus_id */: id}],
        [web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: id }],
        [web3, G52contractInstance, 'archive', e5, {p1/* proposal_id */: id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      
      record_proposal_vote_event_data = all_events[0]
      submit_proposal_event_data = all_events[1]
      archive_proposal_event_data = all_events[2]
    }
    else{
      record_proposal_vote_event_data = await this.load_event_data(web3, G52contractInstance, 'e1', e5, {p2/* consensus_id */: id})

      submit_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'e3', e5, {p1/* proposal_id */: id })

      archive_proposal_event_data = await this.load_event_data(web3, G52contractInstance, 'archive', e5, {p1/* proposal_id */: id})
    }
    var proposal_token_event_data = await this.get_token_event_data(id, e5);

    var clone = structuredClone(this.state.proposal_events)
    clone[id] = {'vote':record_proposal_vote_event_data, 'submit':submit_proposal_event_data, 'archive':archive_proposal_event_data, 'transfer':proposal_token_event_data}

    this.setState({proposal_events: clone})
  }

  get_subscription_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = this.state.addresses[e5][2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

    var pay_subscription_event_data = null
    var cancel_subscription_event_data = null
    var modify_subscription_event_data = null
    var collect_subscription_event_data = null
    
    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */: id}],
        [web3, F5contractInstance, 'e2', e5, {p1/* subscription_id */: id}],
        [web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */: id}],
        [web3, F5contractInstance, 'e4', e5, {p1/* subscription_id */: id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      
      pay_subscription_event_data = all_events[0]
      cancel_subscription_event_data = all_events[1]
      modify_subscription_event_data = all_events[2]
      collect_subscription_event_data = all_events[3]
    }else{
      pay_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */: id})

      cancel_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e2', e5, {p1/* subscription_id */: id})

      modify_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e5', e5, {p1/* subscription_id */: id})

      collect_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e4', e5, {p1/* subscription_id */: id})
    }

    var subscription_token_event_data = await this.get_token_event_data(id, e5);

    var clone = structuredClone(this.state.subscription_events)
    clone[id] = {'transfer':subscription_token_event_data, 'pay':pay_subscription_event_data.reverse(), 'cancel':cancel_subscription_event_data, 'modify':modify_subscription_event_data, 'collect':collect_subscription_event_data}

    this.setState({subscription_events: clone})


  }

  get_exchange_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H5contractArtifact = require('./contract_abis/H5.json');
    const H5_address = this.state.addresses[e5][5];
    const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var transfer_event_data = await this.get_accounts_token_event_data(id, this.state.user_account_id[e5], e5) 
    var exchange_token_event_data = await this.get_token_event_data(id, e5);

    var update_exchange_ratio_event_data = null
    var update_proportion_ratio_event_data = null
    var modify_exchange_event_data = null
    var update_balance_event_data = null
    var freeze_unfreeze_event_data = null
    var depth_mint_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, H5contractInstance, 'e1', e5, {p1/* exchange */: id}],
        [web3, H5contractInstance, 'e2', e5, {p1/* exchange */: id}],
        [web3, H5contractInstance, 'e3', e5, {p1/* exchange */: id}],
        [web3, H52contractInstance, 'e2', e5, {p1/* exchange */: id}],
        [web3, H52contractInstance, 'e3', e5, {p1/* exchange */: id}],
        [web3, H52contractInstance, 'power', e5, {p1/* exchange */: id}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)

      update_exchange_ratio_event_data = all_events[0]
      update_proportion_ratio_event_data = all_events[1]
      modify_exchange_event_data = all_events[2]
      update_balance_event_data = all_events[3]
      freeze_unfreeze_event_data = all_events[4]
      depth_mint_event_data = all_events[5]
    }else{
      update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p1/* exchange */: id})

      update_proportion_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e2', e5, {p1/* exchange */: id})

      modify_exchange_event_data = await this.load_event_data(web3, H5contractInstance, 'e3', e5, {p1/* exchange */: id})

      update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p1/* exchange */: id})

      freeze_unfreeze_event_data = await this.load_event_data(web3, H52contractInstance, 'e3', e5, {p1/* exchange */: id})

      depth_mint_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p1/* exchange */: id})
    }


    var clone = structuredClone(this.state.exchange_events)
    clone[id] = {'transfer':transfer_event_data, 'exchange_ratio':update_exchange_ratio_event_data.reverse(), 'proportion_ratio':update_proportion_ratio_event_data.reverse(), 'modify':modify_exchange_event_data.reverse(), 'exchange-transfer': exchange_token_event_data, 'update_balance':update_balance_event_data.reverse(), 'freeze_unfreeze':freeze_unfreeze_event_data.reverse(), 'depth_mint':depth_mint_event_data.reverse()}

    this.setState({exchange_events: clone});
  }

  get_accounts_token_event_data = async (exchange, id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */:exchange,  p2/* sender */: id})

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */:exchange, p3/* receiver */: id})

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = this.sortByAttributeDescending(all_events, 'timestamp');

    return sorted_events

  }

  get_moderator_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);


    var modify_moderator_event_data = null
    var enable_disable_interactible_checkers_event_data = null
    var add_interactible_account_event_data = null
    var block_accounts_event_data = null
    var revoke_author_privelages_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:4}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:5}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:2}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:17}],
        [web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:16}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      
      modify_moderator_event_data = all_events[0]
      enable_disable_interactible_checkers_event_data = all_events[1]
      add_interactible_account_event_data = all_events[2]
      block_accounts_event_data = all_events[3]
      revoke_author_privelages_event_data = all_events[4]
    }else{
      modify_moderator_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:4})

      enable_disable_interactible_checkers_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:5})

      add_interactible_account_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:2})

      block_accounts_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:17})

      revoke_author_privelages_event_data = await this.load_event_data(web3, E52contractInstance, 'e1', e5, {p1/* target_obj_id */: id, p2/* action_type */:16})
    }

    var clone = structuredClone(this.state.moderator_events)
    clone[id] = {'modify_moderator':modify_moderator_event_data, 'enable_interactible':enable_disable_interactible_checkers_event_data, 'add_interactible':add_interactible_account_event_data, 'block_account':block_accounts_event_data, 'revoke_privelages':revoke_author_privelages_event_data}

    this.setState({moderator_events: clone});
  }

  get_channel_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: id})

    var clone = structuredClone(this.state.channel_events)
    clone[id] = {'channel_data':created_channel_data}

    this.setState({channel_events: clone});
  }






  get_accounts_payment_information = async (id, e5, account) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const F5contractArtifact = require('./contract_abis/F5.json');
    const F5_address = this.state.addresses[e5][2];
    const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

    var pay_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p1/* subscription_id */: id, p2/* sender_account_id */:account})

    var their_payment = await F5contractInstance.methods.f229([id], [[account]]).call((error, result) => {});

    var clone = structuredClone(this.state.subscription_search_result)
    clone[id+account] = {'events':pay_subscription_event_data, 'payment':their_payment[0][0]}

    this.setState({subscription_search_result: clone})

    if(pay_subscription_event_data.length == 0){
      this.prompt_top_notification('Search complete, '+pay_subscription_event_data.length+' entries found.', 2000)
    }
  }

  get_searched_account_data_trimmed = async (id, typed_search) => {
    const data = []
    const data2 = []
    const ids = []
    if(isNaN(id)){
      if(this.state.beacon_node_enabled == true){
        var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
        if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
        if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
          beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
        }

        if(id.includes('"')){
          //were searching tags
          var searched_tags = this.extract_quoted_words(id)
          var arg_obj = {tags: searched_tags, target_type: 0}
          const params = new URLSearchParams({
            arg_string: JSON.stringify(arg_obj)
          });
          var request = `${beacon_node}/tags?${params.toString()}`
          try{
            const response = await fetch(request);
            if (!response.ok) {
              console.log(response)
              throw new Error(`Failed to retrieve data. Status: ${response}`);
            }
            const response_data = await response.text();
            const response_obj = JSON.parse(response_data);
            response_obj['data'].forEach(element => {
              if(!ids.includes(parseInt(element))) ids.push(parseInt(element))
            });
          }
          catch(e){
            
          }
        }else{
          var arg_obj = {title: id, target_type: 0}
          const params2 = new URLSearchParams({
            arg_string: JSON.stringify(arg_obj)
          });
          var request = `${beacon_node}/title?${params2.toString()}`
          try{
            const response = await fetch(request);
            if (!response.ok) {
              console.log(response)
              throw new Error(`Failed to retrieve data. Status: ${response}`);
            }
            const response_data = await response.text();
            const response_obj = JSON.parse(response_data);
            response_obj['data'].forEach(element => {
              if(!ids.includes(parseInt(element))) ids.push(parseInt(element))
            });
          }
          catch(e){
            console.log(e)
          }
        }
      }
    }else{
      ids.push(id)
    }
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      if(this.state.e5s[e5].active == true){
        const web3 = new Web3(this.get_web3_url_from_e5(e5));
        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = this.get_contract_from_e5(e5)
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);
      
        var contract_addresses = this.state.addresses[e5]
        const E52contractArtifact = require('./contract_abis/E52.json');
        const E52_address = contract_addresses[1];
        const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

        for(var e=0; e<ids.length; e++){
          var focused_id = ids[e]
          var object_type = await this.load_id_type_then_object(focused_id, E52contractInstance, e5) 
          if(object_type != 0){
            var obj = {'e5': e5, 'id':focused_id, 'object_type': object_type, 'typed_search':typed_search}
            data2.push(obj)
          }
          else{
            var account_address = await contractInstance.methods.f289(focused_id).call((error, result) => {});
            var alias = this.state.alias_bucket[e5][focused_id] == null ? 'Unknown' : this.state.alias_bucket[e5][focused_id]
            var should_include_id = true;
            if(focused_id != typed_search){
              if(alias != typed_search){
                should_include_id = false
              }
            }
            if(account_address.toString() != '0x0000000000000000000000000000000000000000' && should_include_id){
              var obj = {'e5':e5,'id':focused_id,'address':account_address,'alias':alias, 'typed_search': typed_search}
              data.push(obj)
            }
          }
        }
      }
    }
    

    if(data.length == 0 && data2.length == 0){
      this.prompt_top_notification(this.getLocale()['2737']/* e didnt find anything matching your search. */, 5000)
      return;
    }

    var clone = structuredClone(this.state.searched_accounts_data)
    clone[id] = data
    this.setState({searched_accounts_data: clone})

    var clone = structuredClone(this.state.searched_objects_data)
    clone[id] = data2
    this.setState({searched_objects_data: clone})
  }

  extract_quoted_words(str) {
    return [...str.matchAll(/"([^"]+)"/g)].map(match => match[1]);
  }

  get_searched_account_data = async (id, typed_search, e5_to_focus_on) => {
    var data = []
    var data_found = false;
    for(var i=0; i<this.state.e5s['data'].length; i++){
      var e5 = this.state.e5s['data'][i]
      if(this.state.e5s[e5].active == true && e5_to_focus_on == e5){
        const web3 = new Web3(this.get_web3_url_from_e5(e5));
        const contractArtifact = require('./contract_abis/E5.json');
        const contractAddress = this.get_contract_from_e5(e5)
        const contractInstance = new web3.eth.Contract(contractArtifact.abi, contractAddress);

        const F5contractArtifact = require('./contract_abis/F5.json');
        const F5_address = this.state.addresses[e5][2];
        const F5contractInstance = new web3.eth.Contract(F5contractArtifact.abi, F5_address);

        const G52contractArtifact = require('./contract_abis/G52.json');
        const G52_address = this.state.addresses[e5][4];
        const G52contractInstance = new web3.eth.Contract(G52contractArtifact.abi, G52_address);

        const H5contractArtifact = require('./contract_abis/H5.json');
        const H5_address = this.state.addresses[e5][5];
        const H5contractInstance = new web3.eth.Contract(H5contractArtifact.abi, H5_address);

        const H52contractArtifact = require('./contract_abis/H52.json');
        const H52_address = this.state.addresses[e5][6];
        const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

        var account_address = await contractInstance.methods.f289(id).call((error, result) => {});

        var alias = this.state.alias_bucket[e5][id] == null ? 'Unknown' : this.state.alias_bucket[e5][id]
        var should_include_id = true;
        if(id != typed_search){
          if(alias != typed_search){
            should_include_id = false
          }
        }

        if(account_address.toString() != '0x0000000000000000000000000000000000000000' && should_include_id){
          data_found = true
          var pending_withdraw_balance = await contractInstance.methods.f167([id], [], 1).call((error, result) => {});

          var run_data = await contractInstance.methods.f287([id]).call((error, result) => {});

          var make_object_event_data = null
          var withdraw_event_data = null
          var pending_withdraw_event_data = null
          var transaction_event_data = null
          var pay_subscription_event_data = null
          var cancel_subscription_event_data = null
          var enter_contract_event_data = null
          var exit_contract_event_data = null
          var record_proposal_vote_event_data = null
          var update_exchange_ratio_event_data = null
          var accounts_token_transfer_event_data = null

          if(this.state.beacon_node_enabled == true){
            var event_params = [
              [web3, contractInstance, 'e1', e5, {p3/* sender_account_id */: id}],
              [web3, contractInstance, 'e2', e5, {p1/* sender_account_id */: id}],
              [web3, contractInstance, 'e3', e5, {p1/* receiver_account_id */: id}],
              [web3, contractInstance, 'e4', e5, {p1/* sender_account_id */: id}],
              [web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */: id}],
              [web3, F5contractInstance, 'e2', e5, {p2/* sender_acc_id */: id}],
              [web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 3}],
              [web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 11}],
              [web3, G52contractInstance, 'e1', e5, {p3/* voter_account_id */: id}],
              [web3, H5contractInstance, 'e1', e5, {p3/* sender_account */: id }],
              [web3, H52contractInstance, 'e1', e5, {p2/* sender */: id }],
            ]
            var all_events = await this.load_multiple_events_from_nitro(event_params)
            make_object_event_data = all_events[0]
            withdraw_event_data = all_events[1]
            pending_withdraw_event_data = all_events[2]
            transaction_event_data = all_events[3]
            pay_subscription_event_data = all_events[4]
            cancel_subscription_event_data = all_events[5]
            enter_contract_event_data = all_events[6]
            exit_contract_event_data = all_events[7]
            record_proposal_vote_event_data = all_events[8]
            update_exchange_ratio_event_data = all_events[9]
            accounts_token_transfer_event_data = all_events[10]
          }else{
            make_object_event_data = await this.load_event_data(web3, contractInstance, 'e1', e5, {p3/* sender_account_id */: id})

            withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e2', e5, {p1/* sender_account_id */: id})

            pending_withdraw_event_data = await this.load_event_data(web3, contractInstance, 'e3', e5, {p1/* receiver_account_id */: id})

            transaction_event_data = await this.load_event_data(web3, contractInstance, 'e4', e5, {p1/* sender_account_id */: id})

            pay_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e1', e5, {p2/* sender_acc_id */: id})

            cancel_subscription_event_data = await this.load_event_data(web3, F5contractInstance, 'e2', e5, {p2/* sender_acc_id */: id})

            enter_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 3})

            exit_contract_event_data = await this.load_event_data(web3, G52contractInstance, 'e2', e5, {p2/* sender_acc */: id , p3/* action */: 11})

            record_proposal_vote_event_data = await this.load_event_data(web3, G52contractInstance, 'e1', e5, {p3/* voter_account_id */: id})

            update_exchange_ratio_event_data = await this.load_event_data(web3, H5contractInstance, 'e1', e5, {p3/* sender_account */: id })

            accounts_token_transfer_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p2/* sender */: id })
            
          }

          var contract_token_event_data = await this.get_token_event_data(id, e5);

          var ether_balance = await web3.eth.getBalance(account_address)

          var end_spend_balance = await H52contractInstance.methods.f140e([3,5], id, [0,0]).call((error, result) => {});

          var interacted_exchanges_data = this.get_searched_account_interacted_exchanges(update_exchange_ratio_event_data, contract_token_event_data, e5)

          var interacted_exchanges = interacted_exchanges_data['exchanges']
          var interacted_exchanges_depths = interacted_exchanges_data['depths']

          var token_balances_and_data = await this.get_balance_from_multiple_exchanges(interacted_exchanges, id, H52contractInstance, interacted_exchanges_depths, e5)
          var token_balances = token_balances_and_data['bal']

          var searched_accounts_exchange_interactions_data = await this.load_searched_accounts_exchange_interactions_data(id, e5)

          var obj = {'e5':e5,'id':id,'address':account_address,'alias':alias, 'ether_balance':ether_balance, 'withdraw_balance':pending_withdraw_balance, 'run_data':run_data[0], 'make_object':make_object_event_data.reverse(), 'withdraw':withdraw_event_data.reverse(), 'pending_withdraw':pending_withdraw_event_data.reverse(),'transactions':transaction_event_data.reverse(), 'pay_subscription':pay_subscription_event_data.reverse(), 'cancel_subscription':cancel_subscription_event_data.reverse(), 'enter_contract':enter_contract_event_data.reverse(), 'exit_contract':exit_contract_event_data.reverse(),'vote':record_proposal_vote_event_data.reverse(), 'exchange_ratio':update_exchange_ratio_event_data.reverse(), 'tokens':contract_token_event_data, 'end_balance':end_spend_balance[0], 'spend_balance':end_spend_balance[1], 'interacted_exchanges':interacted_exchanges, 'interacted_exchanges_balances':token_balances, 'searched_accounts_exchange_interactions_data': searched_accounts_exchange_interactions_data, 'typed_search':typed_search,
          'search_time':Date.now(), 'accounts_token_transfer_event_data':accounts_token_transfer_event_data
          }

          data.push(obj)

          this.get_accounts_uploaded_object_data(make_object_event_data, e5, web3, id);
          this.get_accounts_message_activities(id, e5);
        }
      }
    }

    if(!data_found){
      this.prompt_top_notification(this.getLocale()['2737']/* 'e didnt find anything matching your search.' */, 5000)
      return;
    }
    var clone = structuredClone(this.state.searched_accounts_data)
    clone[id] = data
    this.setState({searched_accounts_data: clone})

    // var me = this;
    // setTimeout(function() {
    //   console.log('data: ,', me.state.searched_accounts_data)
    // }, (1 * 1000));
    
  }

  get_searched_account_interacted_exchanges(update_exchange_ratio_event_data, contract_token_event_data, e5){
    var exchanges = []
    var exchanges_depth_data = []
    update_exchange_ratio_event_data.forEach(event => {
      var exchange_id = parseInt(event.returnValues.p1)
      if(!exchanges.includes(exchange_id)){
        if(this.state.created_token_object_mapping[e5][exchange_id] != null){
          exchanges.push(exchange_id)
          var depth_item = this.state.created_token_object_mapping[e5][exchange_id]['ipfs'] == null ? 0 : this.state.created_token_object_mapping[e5][exchange_id]['ipfs'].default_depth
          if(depth_item == null) depth_item = 0
          exchanges_depth_data.push(parseInt(depth_item))
        }
      }
    });

    contract_token_event_data.forEach(event => {
      var exchange_id = parseInt(event['event'].returnValues.p1)
      if(!exchanges.includes(exchange_id)){
        if(this.state.created_token_object_mapping[e5][exchange_id] != null){
          exchanges.push(exchange_id)
          var depth_item = this.state.created_token_object_mapping[e5][exchange_id]['ipfs'] == null ? 0 : this.state.created_token_object_mapping[e5][exchange_id]['ipfs'].default_depth
          if(depth_item == null) depth_item = 0
          exchanges_depth_data.push(parseInt(depth_item))
        }
      }
    });

    // return exchanges
    return {'exchanges':exchanges, 'depths':exchanges_depth_data}
  }

  get_accounts_message_activities = async (account_id, e5) => {
    var messages = []
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    if(this.state.addresses[e5] != null){
      const E52_address = this.state.addresses[e5][1];
      const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);
      var e5_id = parseInt(e5.replace('E',''))

      var created_channel_data = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 17, p2/* sender_id */:account_id, p5: e5_id,})
      // created_channel_data = created_channel_data.reverse()
      var is_first_time = this.state.account_message_history[account_id] == null ? true: false
      for(var j=0; j<created_channel_data.length; j++){
        var ipfs_message = await this.fetch_objects_data_from_ipfs_using_option(created_channel_data[j].returnValues.p4)
        if(ipfs_message != null){
          ipfs_message['time'] = created_channel_data[j].returnValues.p6
          if(!messages.includes(ipfs_message)){
            messages = [ipfs_message].concat(messages)
          }
        }
        if(is_first_time){
          var clone = JSON.parse(JSON.stringify(this.state.account_message_history))
          clone[account_id] = messages
          this.setState({account_message_history: clone})
        }
      }
    }
    var clone = JSON.parse(JSON.stringify(this.state.account_message_history))
    clone[account_id] = messages
    this.setState({account_message_history: clone})
  }

  get_accounts_uploaded_object_data = async (events, e5, web3, account_id) => {
    var data = []
    var contract_addresses = this.state.addresses[e5]
    if(contract_addresses != null){
      var is_first_time = this.state.account_post_history[account_id] == null ? true: false

      var all_data = await this.fetch_multiple_objects_data(this.get_ids_from_events2(events), web3, e5, contract_addresses)

      for(var i=0; i<events.length; i++){
        var event = events[i]
        var id = event.returnValues.p1 /* object_id */
        var object_type = event.returnValues.p2/* object_type */
        var author = event.returnValues.p3/* sender_account_id */
        var timestamp = event.returnValues.p4/* timestamp */
        var block = event.returnValues.p5/* blocknumber */
        var ipfs = all_data[id] == null ? await this.fetch_objects_data(id, web3, e5, contract_addresses) : all_data[id];
        if(object_type == 31){
          if(ipfs != null && ipfs.token_image != null && ipfs.token_image.startsWith('image')) this.fetch_uploaded_data_from_ipfs([ipfs.token_image], false)
        }
        else if(object_type == 19 || object_type == 20 || object_type == 21){
          if(ipfs != null && ipfs.album_art != null && ipfs.album_art.startsWith('image')) this.fetch_uploaded_data_from_ipfs([ipfs.album_art], false)
        }

        if(ipfs != null){
          data.push({'e5':e5, 'author':author, 'id':id, 'type':object_type, 'ipfs':ipfs, 'block':block, 'timestamp':timestamp})
        }
        if(is_first_time){
          var clone = JSON.parse(JSON.stringify(this.state.account_post_history))
          clone[account_id] = data
          this.setState({account_post_history: clone})
        }
      }
    }
    var clone = JSON.parse(JSON.stringify(this.state.account_post_history))
    clone[account_id] = data
    this.setState({account_post_history: clone})
  }

  get_ids_from_events2(events){
    var ids = []
    events.forEach(event => {
      var id = event.returnValues.p1
      ids.push(id)
    });
    return ids
  }






  update_contextual_transfer_account_data(){
    var tracked_contextual_transfer_identifier = this.state.tracked_contextual_transfer_identifier
    if(tracked_contextual_transfer_identifier != ''){
      this.get_contextual_transfer_data(tracked_contextual_transfer_identifier, this.state.selected_e5)
    }
  }

  get_contextual_transfer_data = async (identifier, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);
    const recipient = this.state.user_account_id[e5]
    const used_identifier = this.hash_data(identifier)

    var current_block_number = await web3.eth.getBlockNumber()
    var difference = this.state.e5s[e5].notification_blocks == null ? 10_000 : this.state.e5s[e5].notification_blocks
    var start = current_block_number == 0 ? 0 : current_block_number - difference
    if(start < 0) start = 0;
    
    const itransfer_event_params = await H52contractInstance.getPastEvents('e5', { filter: { p4/* metadata */: used_identifier, p2/* awward_receiver */: recipient, p3/* awward_context */: 1/* iTransfer */ }, fromBlock: start, toBlock: current_block_number }, (error, events) => {})
    
    const transfer_event_params = await H52contractInstance.getPastEvents('e1', { filter: { p3/* receiver */: recipient }, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

    var grouped_transfers_by_block = {}
    transfer_event_params.forEach(event => {
      if(grouped_transfers_by_block[event.returnValues.p6/* block_number */] == null){
        grouped_transfers_by_block[event.returnValues.p6/* block_number */] = []
      }
      grouped_transfers_by_block[event.returnValues.p6/* block_number */].push(event)
    });

    var iTransfer_objects = {}
    itransfer_event_params.forEach(event => {
      var block = event.returnValues.p6/* block_number */
      var transfers_for_block = grouped_transfers_by_block[block]
      if(iTransfer_objects[block] == null){
        iTransfer_objects[block] = {}
      }
      transfers_for_block.forEach(transfer => {
        var transfer_receiver = transfer.returnValues.p3/* receiver */
        var transfer_sender = transfer.returnValues.p2/* sender */
        if(transfer_receiver == recipient){
          if(iTransfer_objects[block][transfer_sender] == null){
            iTransfer_objects[block][transfer_sender] = []
          }
          iTransfer_objects[block][transfer_sender].push(transfer)
        }
      });
    });


    var clone = structuredClone(this.state.stack_contextual_transfer_data)
    clone[identifier] = iTransfer_objects
    this.setState({stack_contextual_transfer_data: clone})
  }

  update_watched_account_data(){
    var watched_account = this.state.watched_account_id
    if(watched_account != ''){
      this.get_watched_account_data(watched_account, this.state.selected_e5)
    }
  }

  get_watched_account_data = async (id, e5) => {
    var all_unsorted_events = {}
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var current_block_number = await web3.eth.getBlockNumber()
    var difference = this.state.e5s[e5].notification_blocks == null ? 10_000 : this.state.e5s[e5].notification_blocks
    var start = current_block_number == 0 ? 0 : current_block_number - difference
    if(start < 0) start = 0;
    var all_received_events = await H52contractInstance.getPastEvents('e1', { filter: { p3/* receiver */: id }, fromBlock: start, toBlock: current_block_number }, (error, events) => {})

    all_unsorted_events[e5] = all_received_events

    var previous_notifs = []
    for(const e5 in all_unsorted_events){
      if(all_unsorted_events.hasOwnProperty(e5)){
        all_unsorted_events[e5].forEach(event => {
          event['e5'] = e5
          previous_notifs.push(event)
        });
      }
    }
    this.setState({watched_account_data: previous_notifs.reverse()})
  }






  load_exchanges_royalty_information = async (token_item) => {
    var e5 = token_item['e5'];
    var exchange_id = token_item['id']
    if(!this.should_load_exchange_royalty_data(exchange_id)){
      console.log('hella','not loading royalty info')
      return
    }
    const web3 = new Web3(this.get_web3_url_from_e5(e5));

    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var transaction_history_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */: exchange_id })
    var interacted_accounts = []
    transaction_history_event_data.forEach(event => {
      var sender_account = event.returnValues.p2
      var receiver_account = event.returnValues.p3
      if(!interacted_accounts.includes(sender_account)){
        interacted_accounts.push((sender_account))
      }
      if(!interacted_accounts.includes(receiver_account)){
        interacted_accounts.push((receiver_account))
      }
    });

    var returned_balances = await H52contractInstance.methods.f270([exchange_id], [interacted_accounts], [0], 1, 0).call((error, result) => {});
    var balances = returned_balances[0]
    var now = (new Date().getTime()/1000)

    var account_balances = []
    for(var i=0; i<interacted_accounts.length; i++){
      var obj = {'account':interacted_accounts[i], 'balance':balances[i]}
      if(balances[i] != 0){
        account_balances.push(obj)
      }
    }

    let sorted_account_balances = this.sortByAttributeDescending(account_balances, 'balance').reverse()
    var data = {'balance_data':sorted_account_balances, 'time':now}

    var clone = structuredClone(this.state.exchange_royalty_data)
    clone[exchange_id] = data
    this.setState({exchange_royalty_data: clone})
  }

  should_load_exchange_royalty_data(exchange_id){
    return true
    var should = true
    if(this.state.exchange_royalty_data[exchange_id] != null){
      var data = this.state.exchange_royalty_data[exchange_id]
      var now = (new Date().getTime()/1000)
      if(now - data['time'] > (60*10/* 10min */)){
        should = false
      }
    }
    return should
  }

  load_exchanges_royalty_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_exchange_royalty_events = (await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 12/* 12(stage_royalty_id) */, p3/* context */: id})).reverse()

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_exchange_royalty_events, 0, 'p4')
    }

    var royalty_events = []
    var is_first_time = this.state.token_royalty_data_staging_data[id] == null ? true: false
    for(var j=0; j<created_exchange_royalty_events.length; j++){
      var ipfs_object = await this.fetch_objects_data_from_ipfs_using_option(created_exchange_royalty_events[j].returnValues.p4)
      if(ipfs_object != null){
        royalty_events.push(ipfs_object)
      }
      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.token_royalty_data_staging_data))
        clone[id] = royalty_events
        this.setState({token_royalty_data_staging_data: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.token_royalty_data_staging_data))
    clone[id] = royalty_events
    this.setState({token_royalty_data_staging_data: clone})
  }

  load_exchanges_royalty_payout_event_data = async (id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const E52contractArtifact = require('./contract_abis/E52.json');
    const E52_address = this.state.addresses[e5][1];
    const E52contractInstance = new web3.eth.Contract(E52contractArtifact.abi, E52_address);

    var created_exchange_royalty_events = await this.load_event_data(web3, E52contractInstance, 'e4', e5, {p1/* target_id */: 13/* 13(record_royalty_payout_id) */, p3/* context */: id})

    if((this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null) || this.state.beacon_node_enabled == true){
      await this.fetch_multiple_cids_from_nitro(created_exchange_royalty_events, 0, 'p4')
    }
    var royalty_payout_events = []
    var is_first_time = this.state.token_royalty_payout_data[id] == null ? true: false
    for(var j=0; j<created_exchange_royalty_events.length; j++){
      var ipfs_object = await this.fetch_objects_data_from_ipfs_using_option(created_exchange_royalty_events[j].returnValues.p4)
      if(ipfs_object != null){
        royalty_payout_events.push(ipfs_object)
      }

      if(is_first_time){
        var clone = JSON.parse(JSON.stringify(this.state.token_royalty_payout_data))
        clone[id] = royalty_payout_events
        this.setState({token_royalty_payout_data: clone})
      }
    }

    var clone = JSON.parse(JSON.stringify(this.state.token_royalty_payout_data))
    clone[id] = royalty_payout_events
    this.setState({token_royalty_payout_data: clone})
  }





  load_contracts_exchange_interactions_data = async (contract_id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, { p2/* sender */: contract_id})

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: contract_id})

    var update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p2/* receiver */: contract_id})

    var depth_swap_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p3/* receiver */: contract_id, p2/* action */:2 /* depth_auth_mint */})

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<update_balance_event_data.length; i++){
      all_events.push({'event':update_balance_event_data[i], 'action':'Update', 'timestamp':update_balance_event_data[i].returnValues.p4})
    }
    for(var i=0; i<depth_swap_event_data.length; i++){
      all_events.push({'event':depth_swap_event_data[i], 'action':'DepthMint', 'timestamp':depth_swap_event_data[i].returnValues.p7})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = (this.sortByAttributeDescending(all_events, 'timestamp')).reverse()

    var data = {}
    sorted_events.forEach(token_event => {
      var exchange = token_event['event'].returnValues.p1
      if(data[exchange] == null){
        data[exchange] = []
      }
      data[exchange].push(token_event)
    });
    
    var clone = structuredClone(this.state.contract_exchange_interactions_data)
    clone[e5+contract_id] = data
    this.setState({contract_exchange_interactions_data: clone})
  }

  load_searched_accounts_exchange_interactions_data = async (account_id, e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);


    var send_tokens_event_data = null
    var received_tokens_event_data = null
    var update_balance_event_data = null
    var depth_swap_event_data = null

    if(this.state.beacon_node_enabled == true){
      var event_params = [
        [web3, H52contractInstance, 'e1', e5, { p2/* sender */: account_id}],
        [web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id}],
        [web3, H52contractInstance, 'e2', e5, {p2/* receiver */: account_id}],
        [web3, H52contractInstance, 'power', e5, {p3/* receiver */: account_id, p2/* action */:2 /* depth_auth_mint */}],
      ]
      var all_events = await this.load_multiple_events_from_nitro(event_params)
      send_tokens_event_data = all_events[0]
      received_tokens_event_data = all_events[1]
      update_balance_event_data = all_events[2]
      depth_swap_event_data = all_events[3]
    }else{
      send_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, { p2/* sender */: account_id})

      received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p3/* receiver */: account_id})

      update_balance_event_data = await this.load_event_data(web3, H52contractInstance, 'e2', e5, {p2/* receiver */: account_id})

      depth_swap_event_data = await this.load_event_data(web3, H52contractInstance, 'power', e5, {p3/* receiver */: account_id, p2/* action */:2 /* depth_auth_mint */})
    }

    var all_events = [];
    for(var i=0; i<send_tokens_event_data.length; i++){
      all_events.push({'event':send_tokens_event_data[i], 'action':'Sent', 'timestamp':send_tokens_event_data[i].returnValues.p5})
    }
    for(var i=0; i<update_balance_event_data.length; i++){
      all_events.push({'event':update_balance_event_data[i], 'action':'Update', 'timestamp':update_balance_event_data[i].returnValues.p4})
    }
    for(var i=0; i<depth_swap_event_data.length; i++){
      all_events.push({'event':depth_swap_event_data[i], 'action':'DepthMint', 'timestamp':depth_swap_event_data[i].returnValues.p7})
    }
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = (this.sortByAttributeDescending(all_events, 'timestamp')).reverse()

    var data = {}
    sorted_events.forEach(token_event => {
      var exchange = token_event['event'].returnValues.p1
      if(data[exchange] == null){
        data[exchange] = []
      }
      data[exchange].push(token_event)
    });

    return data
  }

  load_burn_address_end_balance_events = async (e5) => {
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    const H52contractArtifact = require('./contract_abis/H52.json');
    const H52_address = this.state.addresses[e5][6];
    const H52contractInstance = new web3.eth.Contract(H52contractArtifact.abi, H52_address);

    var received_tokens_event_data = await this.load_event_data(web3, H52contractInstance, 'e1', e5, {p1/* exchange */:3, p3/* receiver */: 0})

    var all_events = [];
    for(var i=0; i<received_tokens_event_data.length; i++){
      all_events.push({'event':received_tokens_event_data[i], 'action':'Received', 'timestamp':received_tokens_event_data[i].returnValues.p5})
    }
    var sorted_events = (this.sortByAttributeDescending(all_events, 'timestamp')).reverse()

    var data = {}
    sorted_events.forEach(token_event => {
      var exchange = 3
      if(data[exchange] == null){
        data[exchange] = []
      }
      data[exchange].push(token_event)
    });
    
    var clone = structuredClone(this.state.e5_deflation_data)
    clone[e5] = data
    this.setState({e5_deflation_data: clone})
  }





  load_nitro_node_details = async (object, should_load_subscription_if_any) =>{
    var link = object['ipfs'] == null ? null : object['ipfs'].node_url
    var request = `${link}/marco`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log(response)
        throw new Error(`Failed to retrieve nitro data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      var success = obj.success
      if(success == true){
        var clone = structuredClone(this.state.nitro_node_details)
        clone[object['e5_id']] = obj
        this.setState({nitro_node_details:clone})
      }else{
        var clone = structuredClone(this.state.nitro_node_details)
        clone[object['e5_id']] = 'unavailable'
        this.setState({nitro_node_details:clone})
      }
    }
    catch(e){
      var clone = structuredClone(this.state.nitro_node_details)
      clone[object['e5_id']] = 'unavailable'
      this.setState({nitro_node_details:clone})
    }
  }

  load_my_account_storage_info = async (object) => {
    var account = this.state.user_account_id[object['e5']]
    if(account != null && account != 1){
      var link = object['ipfs'] == null ? null : object['ipfs'].node_url
      const e5_account = object['e5']+':'+account
      var request = `${link}/account_storage_data/${e5_account}`
      try{
        const response = await fetch(request);
        if (!response.ok) {
          console.log(response)
          throw new Error(`Failed to retrieve data. Status: ${response}`);
        }
        var data = await response.text();
        var obj = JSON.parse(data);
        var success = obj.success
        if(success == true){
          var info = obj.account
          var clone = structuredClone(this.state.nitro_node_storage_payment_info)
          clone[object['e5_id']] = info
          this.setState({nitro_node_storage_payment_info: clone})
        }
        else{
          var clone = structuredClone(this.state.nitro_node_storage_payment_info)
          clone[object['e5_id']] = 'unavailable'
          this.setState({nitro_node_storage_payment_info: clone})
        }
      }
      catch(e){
        var clone = structuredClone(this.state.nitro_node_storage_payment_info)
        clone[object['e5_id']] = 'unavailable'
        this.setState({nitro_node_storage_payment_info: clone})
      }
    }else{
      var clone = structuredClone(this.state.nitro_node_storage_payment_info)
      clone[object['e5_id']] = 'unavailable'
      this.setState({nitro_node_storage_payment_info: clone})
    }
  }



  fetch_multiple_cids_from_nitro = async (events, depth, p) => {
    var cid_data = this.get_cid_from_data_from_events(events, p)
    var hashes = cid_data.cids
    var options = cid_data.options
    if(hashes.length == 0) return;
    const params = new URLSearchParams({
      arg_string:JSON.stringify({hashes: hashes}),
    });
    var beacon_node = `${process.env.REACT_APP_BEACON_NITRO_NODE_BASE_URL}`
    if(this.state.beacon_chain_url != '') beacon_node = this.state.beacon_chain_url;
    if(this.state.my_preferred_nitro != '' && this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro) != null){
      beacon_node = this.get_nitro_link_from_e5_id(this.state.my_preferred_nitro)
    }
    var request = `${beacon_node}/data?${params.toString()}`
    try{
      const response = await fetch(request);
      if (!response.ok) {
        console.log('datas',response)
        throw new Error(`Failed to retrieve data. Status: ${response}`);
      }
      var data = await response.text();
      var obj = JSON.parse(data);
      // console.log('appdataa',obj)
      var object_data = obj['data']
      var count = 0
      for(var i=0; i<hashes.length; i++){
        var cid_data = object_data[hashes[i]]
        if(cid_data != null){
          var confirmation_hash = await this.generate_hash(JSON.stringify(cid_data))
          if(confirmation_hash != hashes[i] && options[i] == 'ni'){
            console.log('apppage', hashes[i], 'data has been modified')
          }else{
            var decrypted_data = this.decrypt_storage_object2(cid_data)
            count++
            this.store_in_local_storage(hashes[i], JSON.parse(decrypted_data))
          }
        }
      }
      // this.prompt_top_notification('loaded '+count+' hashes', 3000)
    }
    catch(e){
      if(depth < 3){
        await this.wait(this.state.ipfs_delay)
        return await this.fetch_multiple_cids_from_nitro(events, depth+1, p)
      }
    }
  }

  get_cid_from_data_from_events(events, p){
    var cids = []
    var options = []
    for(var i=0; i<events.length; i++){
      var event = events[i]
      var ecid = event.returnValues[p]

      var cid = ecid
      var option = 'in'
      if(ecid.includes('.')){
        var split_cid_array = ecid.split('.');
        option = split_cid_array[0]
        cid = split_cid_array[1]
      }
      var included_underscore = false
      var id = cid;
      var internal_id = ''
      if(cid.includes('_')){
        included_underscore = true;
        var split_cid_array2 = cid.split('_');
        id = split_cid_array2[0]
        internal_id = split_cid_array2[1]
      }
      var data = this.fetch_from_storage(id)
      if(data == null){
        cids.push(id)
        options.push(option)
      }
    }
    return {cids, options}
  }

  hash_data(data){
    const web3 = new Web3(this.get_web3_url_from_e5('E25'));
    var hash = web3.utils.keccak256(data.toString())
    return hash
  }

  hash_data_with_specific_e5(data, e5){
    const web3 = new Web3(this.get_web3_url_from_e5(e5));
    var hash = web3.utils.keccak256(data.toString())
    return hash
  }





}

export default App;