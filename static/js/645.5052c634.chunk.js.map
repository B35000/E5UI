{"version":3,"file":"static/js/645.5052c634.chunk.js","mappings":"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","sources":["../node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js","../node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js","../node_modules/music-metadata/lib/musepack/MusepackConentError.js","../node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js","../node_modules/music-metadata/lib/musepack/sv7/BitReader.js","../node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js","../node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js","../node_modules/music-metadata/lib/musepack/MusepackParser.js"],"sourcesContent":["import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map","import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../../common/Util.js';\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'latin1');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nexport class StreamReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\n//# sourceMappingURL=StreamVersion8.js.map","import { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class MusepackContentError extends makeUnexpectedFileContentError('Musepack') {\n}\n//# sourceMappingURL=MusepackConentError.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport * as SV8 from './StreamVersion8.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv8Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCcToken);\n        if (signature !== 'MPCK')\n            throw new MusepackContentError('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': { // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                }\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    if (this.metadata.format.duration) {\n                        this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    }\n                    return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new MusepackContentError(`Unexpected header: ${header.key}`);\n            }\n        } while (true);\n    }\n}\n//# sourceMappingURL=MpcSv8Parser.js.map","import * as Token from 'token-types';\nexport class BitReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n        this.pos = 0;\n        this.dword = null;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === null) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        this.pos -= 32;\n        if (this.pos === 0) {\n            this.dword = null;\n            return out & ((1 << bits) - 1);\n        }\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        if (this.pos) {\n            out <<= this.pos;\n            out |= this.dword >>> (32 - this.pos);\n        }\n        return out & ((1 << bits) - 1);\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = null;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\n//# sourceMappingURL=BitReader.js.map","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * BASIC STRUCTURE\n */\nexport const Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: new TextDecoder('latin1').decode(buf.subarray(off, off + 3)),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n//# sourceMappingURL=StreamVersion7.js.map","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\nimport { BitReader } from './BitReader.js';\nimport * as SV7 from './StreamVersion7.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv7Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.bitreader = null;\n        this.audioLength = 0;\n        this.duration = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new MusepackContentError('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        if (this.duration !== null) {\n            this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n        }\n    }\n}\n//# sourceMappingURL=MpcSv7Parser.js.map","import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { MpcSv8Parser } from './sv8/MpcSv8Parser.js';\nimport { MpcSv7Parser } from './sv7/MpcSv7Parser.js';\nimport { MusepackContentError } from './MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MusepackParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'latin1'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Stream-version 7');\n                mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            case 'MPC': {\n                debug('Stream-version 8');\n                mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            default: {\n                throw new MusepackContentError('Invalid signature prefix');\n            }\n        }\n        return mpcParser.parse();\n    }\n}\n//# sourceMappingURL=MusepackParser.js.map"],"names":["debug","initDebug","AbstractID3Parser","BasicParser","constructor","super","arguments","this","id3parser","ID3v2Parser","startsWithID3v2Header","tokenizer","peekToken","ID3v2Header","fileIdentifier","parse","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","position","postId3v2Parse","options","skipPostHeaders","metadata","hasAny","id3v1parser","ID3v1Parser","PacketKey","Token","SH_part1","len","get","buf","off","crc","streamVersion","SH_part3","sampleFrequency","util","maxUsedBands","channelCount","msUsed","audioBlockFrames","StreamReader","readPacketHeader","key","readToken","size","readVariableSizeField","payloadLength","value","readStreamHeader","streamHeader","part1","Object","assign","sampleCount","bs","beginningOfSilence","part3","ignore","length","undefined","hb","n","readNumber","MusepackContentError","makeUnexpectedFileContentError","MpcSv8Parser","audioLength","FourCcToken","setFormat","parsePacket","sv8reader","SV8","header","sh","format","duration","APEv2Parser","tryParseApeHeader","BitReader","pos","dword","read","bits","out","remaining","remainder","numOfWords","Header","signature","TextDecoder","decode","subarray","streamMinorVersion","streamMajorVersion","frameCount","maxLevel","link","profile","maxBand","intensityStereo","midSideStereo","titlePeak","titleGain","albumPeak","albumGain","lastFrameLength","trueGapless","MpcSv7Parser","bitreader","SV7","numberOfSamples","version","toFixed","skipAudioData","frameLength","MusepackParser","mpcParser"],"sourceRoot":""}