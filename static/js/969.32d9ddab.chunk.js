"use strict";(self.webpackChunkold_e5=self.webpackChunkold_e5||[]).push([[969],{36969:(t,e,a)=>{a.r(e),a.d(e,{WavPackContentError:()=>h,WavPackParser:()=>S});var i=a(11585),s=a(51850),o=a(18327),n=a(84764);const r=[6e3,8e3,9600,11025,12e3,16e3,22050,24e3,32e3,44100,48e3,64e3,88200,96e3,192e3,-1],l={len:32,get:(t,e)=>{const a=i.UINT32_LE.get(t,e+24),s={BlockID:o.e.get(t,e),blockSize:i.UINT32_LE.get(t,e+4),version:i.UINT16_LE.get(t,e+8),totalSamples:i.UINT32_LE.get(t,e+12),blockIndex:i.UINT32_LE.get(t,e+16),blockSamples:i.UINT32_LE.get(t,e+20),flags:{bitsPerSample:8*(1+getBitAllignedNumber(a,0,2)),isMono:isBitSet(a,2),isHybrid:isBitSet(a,3),isJointStereo:isBitSet(a,4),crossChannel:isBitSet(a,5),hybridNoiseShaping:isBitSet(a,6),floatingPoint:isBitSet(a,7),samplingRate:r[getBitAllignedNumber(a,23,4)],isDSD:isBitSet(a,31)},crc:new i.Uint8ArrayType(4).get(t,e+28)};return s.flags.isDSD&&(s.totalSamples*=8),s}},c={len:1,get:(t,e)=>({functionId:getBitAllignedNumber(t[e],0,6),isOptional:isBitSet(t[e],5),isOddSize:isBitSet(t[e],6),largeBlock:isBitSet(t[e],7)})};function isBitSet(t,e){return 1===getBitAllignedNumber(t,e,1)}function getBitAllignedNumber(t,e,a){return t>>>e&4294967295>>>32-a}var d=a(10255),k=a(37835),m=a(95820);const g=d("music-metadata:parser:WavPack");class h extends((0,m.fO)("WavPack")){}class S extends n.s{constructor(){super(...arguments),this.audioDataSize=0}async parse(){return this.audioDataSize=0,await this.parseWavPackBlocks(),s.APEv2Parser.tryParseApeHeader(this.metadata,this.tokenizer,this.options)}async parseWavPackBlocks(){do{if("wvpk"!==await this.tokenizer.peekToken(o.e))break;const t=await this.tokenizer.readToken(l);if("wvpk"!==t.BlockID)throw new h("Invalid WavPack Block-ID");g("WavPack header blockIndex=".concat(t.blockIndex,", len=").concat(l.len)),0!==t.blockIndex||this.metadata.format.container||(this.metadata.setFormat("container","WavPack"),this.metadata.setFormat("lossless",!t.flags.isHybrid),this.metadata.setFormat("bitsPerSample",t.flags.bitsPerSample),t.flags.isDSD||(this.metadata.setFormat("sampleRate",t.flags.samplingRate),this.metadata.setFormat("duration",t.totalSamples/t.flags.samplingRate)),this.metadata.setFormat("numberOfChannels",t.flags.isMono?1:2),this.metadata.setFormat("numberOfSamples",t.totalSamples),this.metadata.setFormat("codec",t.flags.isDSD?"DSD":"PCM"));const e=t.blockSize-(l.len-8);await(0===t.blockIndex?this.parseMetadataSubBlock(t,e):this.tokenizer.ignore(e)),t.blockSamples>0&&(this.audioDataSize+=t.blockSize)}while(!this.tokenizer.fileInfo.size||this.tokenizer.fileInfo.size-this.tokenizer.position>=l.len);this.metadata.format.duration&&this.metadata.setFormat("bitrate",8*this.audioDataSize/this.metadata.format.duration)}async parseMetadataSubBlock(t,e){let a=e;for(;a>c.len;){const e=await this.tokenizer.readToken(c),s=await this.tokenizer.readNumber(e.largeBlock?i.UINT24_LE:i.UINT8),o=new Uint8Array(2*s-(e.isOddSize?1:0));switch(await this.tokenizer.readBuffer(o),g("Metadata Sub-Blocks functionId=0x".concat(e.functionId.toString(16),", id.largeBlock=").concat(e.largeBlock,",data-size=").concat(o.length)),e.functionId){case 0:break;case 14:{g("ID_DSD_BLOCK");const e=1<<i.UINT8.get(o,0),a=t.flags.samplingRate*e*8;if(!t.flags.isDSD)throw new h("Only expect DSD block if DSD-flag is set");this.metadata.setFormat("sampleRate",a),this.metadata.setFormat("duration",t.totalSamples/a);break}case 36:g("ID_ALT_TRAILER: trailer for non-wav files");break;case 38:this.metadata.setFormat("audioMD5",o);break;case 47:g("ID_BLOCK_CHECKSUM: checksum=".concat((0,k.EY)(o)));break;default:g("Ignore unsupported meta-sub-block-id functionId=0x".concat(e.functionId.toString(16)))}a-=c.len+(e.largeBlock?i.UINT24_LE.len:i.UINT8.len)+2*s,g("remainingLength=".concat(a)),e.isOddSize&&this.tokenizer.ignore(1)}if(0!==a)throw new h("metadata-sub-block should fit it remaining length")}}}}]);